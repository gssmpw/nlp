\section{Related Work}
\label{sec:related_work}

\subsection{Role and Group Abstractions}

The A-3 model**Bauer, "A 3-Model"** defined an architectural style consisting of groups that can be populated by a supervisor and its followers and composed with other groups. While this work shares many of the motivations and has similarities with A-3, the model does not rely on the rigid \textit{supervisor-follower} structure, nor do group compositions depend on shared members.

In contrast with the more abstract A-3 support for self-adaptation**Bauer and MÃ¼ller, "A 3 Self-Adaptation"**, A  adaptation mechanisms are also investigated to ensure the basic properties of groups, such as robustness, high availability, efficient resource utilization, and other attributes defined by the application through extension points. Finally, while A-3 relies on classical group communication methods, the integration of groups with tuple spaces for both inter-group and intra-group coordination is explored.
Group and role abstractions have also been used in other domains. Ferber et al.**Ferber, Gutknecht, and Michel, "Organization-Centered Model"** proposed an organization-centered model for multi-agent systems that contrasts with agent-centered models in which agents can communicate and interact freely. Among the problems of agent-centered models, the authors cited security, modularity, and the lack of support for other frameworks besides the multi-agent platform itself. In the work, the arguments are agreed upon as part of the justification for an organizational approach to distributed systems. Despite the model similarities, the works target different domains: instead of agents, pervasive and mobile devices are considered as the hosts of components that play roles in groups of distributed applications.
 
\subsection{Self-organization and Self-adaptation} 
 
Kota et al.**Kota, Padala, and Singhal, "Agent Adaptation"** have proposed a method for adapting the relationship between agents in a multi-agent system. In their work, agents reason about adaptation using only historical knowledge about past interactions and the cost of adaptation (meta-reasoning). Despite the similarities with the work, namely the use of self-organization principles and the focus on the dynamics of relations, in that aspect, the work addresses a different domain (pervasive applications). It adopts an organization-oriented perspective in which application nodes can play distinct roles. Thus, the focus is rather on the nature of the relation and its dynamics than solely on the decision of when or not nodes should interact. 

A3-TAG, a programming model that facilitates the design of self-adaptive distributed systems based on group abstractions~[CT]. A3-TAG is an extension of the A-3 model, which is used as the organization model. A-3 key elements are groups and two types of roles, namely supervisor and follower. Each group has a supervisor and a variable number of followers. The main differences between this work and A3-TAG are dual. 

\subsection{Distributed Allocation Problem}

In the literature, many works have tackled the problem of distributed task allocation. In contrast with a task, a functional role defines a set of functionalities (possibly tasks) that a member of an organization is responsible to provide (perform). Hence, within an organization, a \textit{role} precedes a \textit{task}. Then, depending on the type of role, if multiple instances of a role have been assigned, a task allocation among these instances may still take place. Last but not least, while tasks usually have concrete criteria for their beginning and completion and their assignment happens before task execution, the role of lifespan tends to include multiple repetitions of a given functionality (or task). Therefore, in a dynamic scenario, a role assignment may have to evolve while roles are performed.

Notwithstanding their differences, the two types of allocation problems share commonalities. For instance, in both cases, a utility function may be used as a criterion for choosing an optimal or sub-optimal assignment of roles/tasks. Whereas the optimization of quality attributes may be deemed unfeasible due to its complexity, a sub-optimal allocation can still be guided by the \textit{fitness} (or utility) of nodes in performing these tasks/roles. To this end, fitness/utility is modeled as a real-value function of relevant features affecting one or more attributes of the application. Also, some of the existing taxonomy for classifying a task allocation problem can be applied to the role allocation problem.