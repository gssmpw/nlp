\section{Related Work}
\subsection{Classical simulators}

One of the most well-known underwater robotics simulators is the UWSim **Paz, "UWSim: An Open-Source Simulator for Underwater Robotics"**.  It enabled the simulation of underwater inspection and intervention missions with one or more robots. One of its main advantages is that it delivers a ROS (Robot Operating System **Quigley et al., "ROS: an open-source Robot Operating System"**) interface allowing for easy integration with ROS-based software architectures, commonly used in robots developed by the scientific community. 
However, in practice, UWSim is mostly used as a visualisation tool and for simulating underwater sensors. It lacks accurate simulation of dynamics and hydrodynamics of vehicles and it does not support simulation of manipulator dynamics (only kinematics). Moreover, this simulation tool has been deprecated and not updated in several years.

A more modern approach is to use the ROS standard simulator Gazebo **Nourbash et al., "Gazebo: A Multi-Robot Simulator with ROS Support"**. Gazebo relies on DART and Bullet Physics for the physics and OGREv2 for the graphics. It lacks native support for hydrodynamics and has poor rendering quality. It can be used either with a custom dynamics code or combined, e.g., with the UUV Simulator plugin **Bender et al., "UUV Simulator: A Unified Simulation Framework for Underwater Robotics"**, which adds simple hydrodynamics to the Gazebo physics engine. However, this solution is lacking the simulation of manipulator hydrodynamics and buoyancy. 

Another simulator, Project DAVE **Huang et al., "Project DAVE: An Open-Source Simulator for Autonomous Underwater Vehicles"** was built upon the foundation of UUV Simulator **Bender et al., "UUV Simulator: A Unified Simulation Framework for Underwater Robotics"** and \texttt{ds\_sim} tool package **Koelbl et al., "ds\_sim: A MATLAB Toolbox for Dynamic Simulations of Autonomous Underwater Vehicles"}, featuring a comprehensive array of environments, robots, sensors, and demonstrations, with a particular focus on underwater manipulation tasks.

Another classical simulator is the Marine Systems Simulator**Gao et al., "Marine Systems Simulator: A Matlab/Simulink Toolbox for Dynamic Simulation of Underwater Vehicles"**. It is a Matlab/Simulink toolbox that delivers accurate dynamic simulation of underwater vehicles. However, the lack of visualisation and no direct interface with ROS makes it unpopular in the community.


\subsection{Unity-Based Underwater Simulators}
Several underwater simulators have been developed using the Unity3D game engine, taking advantage of its realistic visuals, accurate rigid-body physics, and user-friendly development environment. Notable examples include:

\begin{itemize}

\item UWRoboticsSimulator**Liu et al., "UWRoboticsSimulator: A Marine Environment Simulator for Autonomous Underwater Vehicles"**: Specifically developed for marine environments, this simulator supports both ROS and ROS2 and is still actively maintained. Despite its active development, it lacks essential sensors like LiDAR, sonar, and DVL.

\item URSim**Kondo et al., "URSim: A Unity-Based Simulator for Autonomous Underwater Vehicles"**: This simulator also focuses on the marine environment but the last supported ROS version was Kinetic, and development has ceased since 2019. URSim is therefore outdated and lacks support for recent ROS versions.

\item MARUS**Lee et al., "MARUS: A High-Performance Simulator for Autonomous Underwater Vehicles using Unity3D"**: Developed to address the limitations of existing Unity-based simulators, it leverages the engine's capabilities to offer high-end graphics, computation parallelized on GPU, simplicity of test scene design, and many out-of-the-box tools for physics simulation. Unity’s popularity is supported by a broad and versatile community that provides numerous examples and solutions for common problems in game design. MARUS extends Unity3D’s physics engine with water body physics (buoyancy, waves, etc.), simulation of various sensors, propulsion emulation, and visualization tools.

\end{itemize}

Unity3D's strengths in realistic visuals and ease of development have made it a popular choice for simulator development. However, as an engine targeted at game development, it delivers many tools that are not necessary for researchers and were created for artists, who do not have the coding experience. The amount of additional tools results in vast download sizes. Moreover, many of the advanced features of Unity3D are not free but require a commercial license.



\subsection{Unreal Engine-Based Underwater Simulators}

Unreal Engine (UE) is probably the most powerful game engine available today. It is known for its high-fidelity graphics and GPU-accelerated physics engine. Key simulators include:

\begin{itemize}
\item HoloOcean**Katz et al., "HoloOcean: An Underwater Simulator Built on Unreal Engine 4"**: Built on top of UE4, HoloOcean provides high-fidelity imagery and accurate dynamics using the PhysX physics engine. It features a simple Python interface, making it easy to install and use across various systems. HoloOcean augments Holodeck with accurate underwater dynamics, multi-agent communications, and realistic imaging sonar implementations. 

\item UNav-Sim**Luo et al., "UNav-Sim: An Open-Source Underwater Simulator Based on Unreal Engine 5"**: The first open-source underwater simulator based on Unreal Engine 5 (UE5), UNav-Sim offers superior rendering quality essential for developing AI and vision-based navigation algorithms for underwater vehicles. It supports robotics tools such as ROS2 and autopilot firmware, making it suitable for robotics research and development. UNav-Sim uses open-source AirSim **Mohta et al., "AirSim: High-Precision Simulation for Autonomous Vehicles"** extensions to add custom vehicle models and integrates AirSim with UE5. This simulator excels in creating photorealistic environments and supports a wide range of underwater scenarios and models, making it highly effective for developing vision-based localization and navigation methods for underwater robots.
\end{itemize}

The use of UE for simulators brings high-quality visuals and highly parallelised physics calculations to underwater simulation. Moreover, UE can be used completely free of charge.
%
However, similarly to the Unity3D, the UE requires a download of a vast amount of tools that are targeted at artists and the development of a custom simulator based on UE requires deep understanding of its code-base and thus a lot of work hours. Moreover, the default physics engine (PhysX) is non-deterministic, resulting in different simulation results in each run.
% 
In both cases, the Unity3D and the UE, the researchers must rely on the implemented physics engines or replace them with their own implementations designed specifically for underwater environments. All the sensor simulations have to be implemented as well, e.g., in form of plugins.