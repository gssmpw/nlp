\section{Related work}
\label{sec:related}


\noindent \textbf{Smart Contract Vulnerability Detection.} Various studies and tools have been proposed to detect hidden vulnerabilities in smart contracts to prevent asset loss for users. Static analysis tools like Tikhonov, "Formal Analysis of Smart Contracts"__ Nikolic, "Finding the Vulnerabilities in the Parity Smart Contract"__ Luu, "Making Smart Contracts Smarter"__ Chen, "State Machine Model Checking of Smart Contracts"__ Kalra, "Oyente: A Static Analysis Tool for Smart Contracts" analyze source code or bytecode. Gigahorse,  and MadMax offer a decompilation framework that translates bytecode to a custom IR. AVVERIFIER performs taint analysis by simulating the process of EVM stack execution. Symbolic execution tools like Mythril, Oyente, ETHBMC, EOSAFE, and Manticore explore potentially vulnerable paths using constraint solvers. Dynamic analysis approaches, such as fuzzing tools, generate random inputs or reorder historical transaction sequences to test contracts. Furthermore, GPTScan leverages large language models  to localize vulnerabilities by defining vulnerability scenarios.


\noindent \textbf{Price Manipulation Detection.} Price manipulation attacks have long posed a serious threat to the DeFi ecosystem. Existing tools like DeFiRange, DeFiGuard, and FlashSyn detect such attacks based on transaction information. DeFiTainter starts from contract bytecode, using cross-contract taint analysis to explore all execution paths and locate entry points of vulnerable functions.


\noindent \textbf{Attack Contract Identification.} Attackers increasingly prefer to launch attacks through contracts. Su et al., "Understanding the Landscape of Smart Contract Vulnerabilities on Ethereum" collect key threat intelligence related to DApp attack incidents through measurements and implement an automated tool for large-scale discovery of attack incidents. Forta, and Lookahead extract statistical features of attack contracts and train machine learning models to develop classifiers. Yang et al., "Identifying Reentrancy Attacks in Smart Contracts by Call Chain Analysis" construct call chains from attack contracts to victim contracts and locate vulnerable functions based on the characteristics of reentrancy attacks.