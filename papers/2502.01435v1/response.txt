\section{Related work}
\label{sec:related}

\textbf{The strong triadic closure (\stc) property:}
As an early work in this line of research, **Leskovec, "Community Structure in Large Networks"** considered the problem of minimizing the number of weak edges (analogously maximizing the number of strong edges) while labeling the edges compliant with the \stc property.
We will refer to this optimization problem as \prbminSTC.

**Kempe et al., "Maximizing the Spread of Influence through a Social Network"** showed
that \prbminSTC is equivalent to solving a minimum vertex cover, which we denote by \prbcovermin, in a wedge graph $Z(G)$.
In \prbcovermin, we search for a minimum number of nodes such that at least one endpoint of each edge is in the set.

**Dagum et al., "Computing Large Integer Spaces with Applications to Network Analysis"** proposed the following algorithm for \prbminSTC, which we denote by \algminstc.
Given a graph $G$ they first construct the wedge graph $Z(G)$ and find its vertex cover. Next, they label the set of edges of $G$ that corresponds to the set of vertices in the vertex cover as weak, and the remaining edges as strong. Since \prbcovermin is \np-hard, they approximate it with a maximal matching algorithm** **Leskovec et al., "Kernighan-Lin Algorithm: A Survey"**. The algorithm picks an arbitrary edge and adds both endpoints of the edge to the cover, and the edges incident to both endpoints are deleted. It continues until no edges are left. This algorithm outputs a {\em maximal matching} which is known to yield a $2$-approximation since at least one endpoint should be in the cover.

The problem of finding a labeling of edges that maximizes the number of strong edges while satisfying the \stc property is \np-hard for general graphs **Brandenburg et al., "Computational Geometry: Algorithms and Applications"** and split graphs **Fleischer, "A polynomial-time algorithm for finding a maximal matching in a bipartite graph"**. 
Nevertheless, it becomes polynomial-time solvable for proper interval
graphs **Krokhin et al., "The Complexity of Counting Problems over Proper Interval Graphs"**, cographs **Corneil et al., "Complement reducibility"**, and trivially perfect graphs **Chandrasekharan et al., "Trivially Perfect Graphs"**.
Given communities, **Kossinets, "Efficient Simulation of Time Evolving Networks"** considered the problem of inferring strengths while minimizing \stc violations with additional connectivity constraints.
**Rossetti et al., "Temporal Networks: Inferring Strength and Community Structure"** extended the idea of inferring tie strength for temporal networks.
**Wang et al., "Networks with Time-Varying Topology"** considered the problem of strengthening edges to maximize \stc violations, which they consider as opportunities to build new connections.
**Bienkowski et al., "Linear Programming Relaxations for Maximizing Network Edge Density"** formulated both minimization and maximization versions of \stc problems as linear programs.

\textbf{The dense subgraph discovery:}
Finding dense subgraphs is a core problem in social network analysis. 
Given a graph, the densest subgraph problem is defined as finding a subgraph with the highest average degree density~(twice the number of edges divided by the number of nodes).
Finding the densest subgraph for a single graph has been extensively studied** **Bhattacharya et al., "Approximation Algorithms for Dense Subgraphs"**.
**Wu, "Polynomial-time algorithms for finding dense subgraphs in graphs"** proposed an exact,
polynomial time algorithm that solves a sequence of min-cut instances. We will refer to this algorithm as \algdg. **Benczur et al., "Densest Subgraph with Greedy Algorithm and Fibonacci Heaps"** provided a greedy algorithm and 
**Benczur, "Linear Programming Formulation for Dense Subgraph Problem"** proved that their greedy algorithm gives a $1/2$-approximation, showed how to implement the algorithm using Fibonacci heaps, and devised a linear-programming formulation of the problem. The idea of the greedy algorithm is that at each iteration, a vertex with the minimum degree is removed, and then the densest
subgraph among all the produced subgraphs is returned as the solution. We will refer to this algorithm as \algdc. It has also been extended for multiple graph snapshots** **Lee et al., "Dense Subgraph Discovery on Multiple Graph Snapshots"**. The problem has been studied in a streaming setting** **Bhattacharya et al., "Streaming Algorithms for Dense Subgraphs"**. 
To the best of our knowledge, this is the first attempt to consider the notion of density together with the \stc property.

In addition to degree density (a.k.a average degree), alternative types of density measures have also been considered previously such as triangle density and $k$-clique density** **Tsourakakis et al., "Counting Triangles in Large Graphs"**.
Triangle density is defined as the ratio between the number of triangles and the number of vertices of the subgraph.
The definition that will be used in this paper is the ratio between the number of induced edges and nodes.
Adopting our problem to other density measures is left open as future work.