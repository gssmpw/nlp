\section{Related work}
\label{subsec:related-work}

Garcia et al., "Computing Optimal Schedules for Reconfiguring Polyominoes" showed that computing optimal schedules for reconfiguring polyominoes with \BILLE bots, see Figure 1 and \cref{fig:intro-bille}, is in general \NP-complete.
For tackling the problem, they designed heuristic approaches exploiting rapidly exploring random trees~(RRT), and a time-dependent variant of the A$^{*}$ search algorithm.
Furthermore, they used target swapping heuristics to reduce the overall traveled distance in case of multiple \BILLE bots.

A different context for reconfiguration arises from
programmable matter "Programmable Matter with Finite Automata".
Here, even finite automata are capable of building bounding boxes of tiles
around polyominoes, as well as scale and rotate them while maintaining
connectivity at all times "Computing Optimal Schedules for Reconfiguring Polyominoes".

When considering active matter, i.e., the arrangement is composed of self-moving objects (or agents), multiple different models exist.
For example, in the \emph{sliding cube model} (or the \emph{sliding square model} in two dimensions), first introduced by Fitch et al. "Parallel Reconfiguration of Polyominoes",  agents are allowed to make two different moves, namely, sliding along other agents, or performing a convex transition, i.e., moving around a convex corner.
Akitaya~et~al., "Universal Sequential Reconfiguration in Two Dimensions" show that universal sequential reconfiguration in two dimensions is possible, even while maintaining connectivity of all intermediate configurations, but minimizing the makespan of a schedule is \NP-complete.
Recently, Abel et al. "Computing Optimal Schedules for Active Matter" and Kostitsyna~et~al., "Computing Optimal Schedules for Reconfiguring Polyominoes in Three Dimensions" independently give similar results for the three dimensional setting.
Most recently, Akitaya~et~al., "Reconfiguration with Sliding Squares is Hard" show that it is \NP-complete to decide whether there exists a schedule of makespan~$1$ in the parallel sliding square model and they provide a worst-case optimal algorithm.

In a slightly more relaxed model, Fekete et al. "Computing Constant Stretch Schedules for Reconfiguring Polyominoes" show that parallel connected reconfiguration of a swarm of (labeled) agents is \NP-complete, even for deciding whether there is a schedule of makespan $2$.
Complementary, they present algorithms for computing constant stretch schedules, i.e., the ratio between the makespan of a schedule and a natural lower bound (the maximum minimum distance between an individual start and target position) is bounded by a constant.