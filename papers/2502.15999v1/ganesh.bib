@InProceedings{laura-titolo-munoz-vmcai,
author="Titolo, Laura
and Feli{\'u}, Marco A.
and Moscato, Mariano
and Mu{\~{n}}oz, C{\'e}sar A.",
editor="Dillig, Isil
and Palsberg, Jens",
title="An Abstract Interpretation Framework for the Round-Off Error Analysis of Floating-Point Programs",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="516--537",
abstract="This paper presents an abstract interpretation framework for the round-off error analysis of floating-point programs. This framework defines a parametric abstract analysis that computes, for each combination of ideal and floating-point execution path of the program, a sound over-approximation of the accumulated floating-point round-off error that may occur. In addition, a Boolean expression that characterizes the input values leading to the computed error approximation is also computed. An abstraction on the control flow of the program is proposed to mitigate the explosion of the number of elements generated by the analysis. Additionally, a widening operator is defined to ensure the convergence of recursive functions and loops. An instantiation of this framework is implemented in the prototype tool PRECiSA that generates formal proof certificates stating the correctness of the computed round-off errors.",
isbn="978-3-319-73721-8"
}


@misc{GPUHarbor,
key = {GPUHarbor},
note = {\url{https://gpuharbor.ucsc.edu/}}}

@inproceedings{dasgupta-pldi2019,
author = {Dasgupta, Sandeep and Park, Daejun and Kasampalis, Theodoros and Adve, Vikram S. and Ro\c{s}u, Grigore},
title = {{A} {C}omplete {F}ormal {S}emantics of x86-64 {U}ser-{L}evel {I}nstruction {S}et {A}rchitecture},
year = {2019},
isbn = {9781450367127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3314221.3314601},
doi = {10.1145/3314221.3314601},
abstract = {We present the most complete and thoroughly tested formal semantics of x86-64 to date. Our semantics faithfully formalizes all the non-deprecated, sequential user-level instructions of the x86-64 Haswell instruction set architecture. This totals 3155 instruction variants, corresponding to 774 mnemonics. The semantics is fully executable and has been tested against more than 7,000 instruction-level test cases and the GCC torture test suite. This extensive testing paid off, revealing bugs in both the x86-64 reference manual and other existing semantics. We also illustrate potential applications of our semantics in different formal analyses, and discuss how it can be useful for processor verification.},
booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {1133–1148},
numpages = {16},
keywords = {Formal Semantics, ISA specification, x86-64},
location = {Phoenix, AZ, USA},
series = {PLDI 2019}
}





@article{godefroid-taly,
author = {Godefroid, Patrice and Taly, Ankur},
title = {{A}utomated {S}ynthesis of {S}ymbolic {I}nstruction {E}ncodings from {I/O} {S}amples},
year = {2012},
issue_date = {June 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2345156.2254116},
doi = {10.1145/2345156.2254116},
abstract = {Symbolic execution is a key component of precise binary program analysis tools. We discuss how to automatically boot-strap the construction of a symbolic execution engine for a processor instruction set such as x86, x64 or ARM. We show how to automatically synthesize symbolic representations of individual processor instructions from input/output examples and express them as bit-vector constraints. We present and compare various synthesis algorithms and instruction sampling strategies. We introduce a new synthesis algorithm based on smart sampling which we show is one to two orders of magnitude faster than previous synthesis algorithms in our context. With this new algorithm, we can automatically synthesize bit-vector circuits for over 500 x86 instructions (8/16/32-bits, outputs, EFLAGS) using only 6 synthesis templates and in less than two hours using the Z3 SMT solver on a regular machine. During this work, we also discovered several inconsistencies across x86 processors, errors in the x86 Intel spec, and several bugs in previous manually-written x86 instruction handlers.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {441–452},
numpages = {12},
keywords = {symbolic execution, program synthesis, x86}
}


@inproceedings{10.1145/2254064.2254116,
author = {Godefroid, Patrice and Taly, Ankur},
title = {{A}utomated {Synthesis} of {S}ymbolic {I}nstruction {E}ncodings from {I/O} {S}amples},
year = {2012},
isbn = {9781450312059},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2254064.2254116},
doi = {10.1145/2254064.2254116},
abstract = {Symbolic execution is a key component of precise binary program analysis tools. We discuss how to automatically boot-strap the construction of a symbolic execution engine for a processor instruction set such as x86, x64 or ARM. We show how to automatically synthesize symbolic representations of individual processor instructions from input/output examples and express them as bit-vector constraints. We present and compare various synthesis algorithms and instruction sampling strategies. We introduce a new synthesis algorithm based on smart sampling which we show is one to two orders of magnitude faster than previous synthesis algorithms in our context. With this new algorithm, we can automatically synthesize bit-vector circuits for over 500 x86 instructions (8/16/32-bits, outputs, EFLAGS) using only 6 synthesis templates and in less than two hours using the Z3 SMT solver on a regular machine. During this work, we also discovered several inconsistencies across x86 processors, errors in the x86 Intel spec, and several bugs in previous manually-written x86 instruction handlers.},
booktitle = {Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {441–452},
numpages = {12},
keywords = {program synthesis, x86, symbolic execution},
location = {Beijing, China},
series = {PLDI '12}
}



@INPROCEEDINGS{rising-heterogeneity,
  author={Gopalakrishnan, Ganesh and Laguna, Ignacio and Li, Ang and Panchekha, Pavel and Rubio-Gonzalez, Cindy and Tatlock, Zachary},
  booktitle={2021 IEEE/ACM 5th International Workshop on Software Correctness for HPC Applications (Correctness)}, 
  title={{G}uarding {N}umerics {A}midst {R}ising {H}eterogeneity}, 
  year={2021},
  volume={},
  number={},
  pages={9-15},
  doi={10.1109/Correctness54621.2021.00007}}

  @MISC{stupid-does,
  author={Zucker, Philip},
  title={{S}tupid is as {S}tupid {D}oes: {F}loating {P}oint in {Z3Py}},
  year={2020},
  url={https://www.philipzucker.com/stupid-is-as-stupid-does-floating-point-in-z3py/}}

@misc{fttn,
      title={{FTTN}: {F}eature-{T}argeted {T}esting for {N}umerical {P}roperties of {NVIDIA} {\&} {AMD} {M}atrix {A}ccelerators}, 
      author={Xinyi Li and Ang Li and Bo Fang and Katarzyna Swirydowicz and Ignacio Laguna and Ganesh Gopalakrishnan},
      year={2024},
      eprint={2403.00232},
      archivePrefix={arXiv},
      primaryClass={cs.AR}
}

@inproceedings{xinyili24,
  title={{FTTN}: {F}eature-{T}argeted {T}esting for {N}umerical {P}roperties of NVIDIA {\&} {AMD} {M}atrix {A}ccelerators},
  author={Li, Xinyi and Li, Ang and Fang, Bo and Swirydowicz, Katarzyna and  Laguna, Ignacio and Gopalakrishnan, Ganesh},
  booktitle={2024 IEEE/ACM 24th International Symposium on Cluster, Cloud and Internet Computing (CCGrid)},
  year={2024},
  organization={IEEE}
}
  


@article{haidar2020mixed,
  title={{M}ixed-{P}recision {I}terative {R}efinement using {T}ensor {C}ores on {GPU}s to {A}ccelerate {S}olution of {L}inear {S}ystems},
  author={Haidar, Azzam and Bayraktar, Harun and Tomov, Stanimire and Dongarra, Jack and Higham, Nicholas J},
  journal={Proceedings of the Royal Society A},
  volume={476},
  number={2243},
  pages={20200110},
  year={2020},
  publisher={The Royal Society Publishing}
}

@article{reed2023hpc,
  title={{HPC} {F}orecast: {C}loudy and {U}ncertain},
  author={Reed, Daniel and Gannon, Dennis and Dongarra, Jack},
  journal={Communications of the ACM},
  volume={66},
  number={2},
  pages={82--90},
  year={2023},
  publisher={ACM New York, NY, USA}
}