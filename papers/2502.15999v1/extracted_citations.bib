@article{godefroid-taly,
author = {Godefroid, Patrice and Taly, Ankur},
title = {{A}utomated {S}ynthesis of {S}ymbolic {I}nstruction {E}ncodings from {I/O} {S}amples},
year = {2012},
issue_date = {June 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2345156.2254116},
doi = {10.1145/2345156.2254116},
abstract = {Symbolic execution is a key component of precise binary program analysis tools. We discuss how to automatically boot-strap the construction of a symbolic execution engine for a processor instruction set such as x86, x64 or ARM. We show how to automatically synthesize symbolic representations of individual processor instructions from input/output examples and express them as bit-vector constraints. We present and compare various synthesis algorithms and instruction sampling strategies. We introduce a new synthesis algorithm based on smart sampling which we show is one to two orders of magnitude faster than previous synthesis algorithms in our context. With this new algorithm, we can automatically synthesize bit-vector circuits for over 500 x86 instructions (8/16/32-bits, outputs, EFLAGS) using only 6 synthesis templates and in less than two hours using the Z3 SMT solver on a regular machine. During this work, we also discovered several inconsistencies across x86 processors, errors in the x86 Intel spec, and several bugs in previous manually-written x86 instruction handlers.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {441â€“452},
numpages = {12},
keywords = {symbolic execution, program synthesis, x86}
}

@InProceedings{laura-titolo-munoz-vmcai,
author="Titolo, Laura
and Feli{\'u}, Marco A.
and Moscato, Mariano
and Mu{\~{n}}oz, C{\'e}sar A.",
editor="Dillig, Isil
and Palsberg, Jens",
title="An Abstract Interpretation Framework for the Round-Off Error Analysis of Floating-Point Programs",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="516--537",
abstract="This paper presents an abstract interpretation framework for the round-off error analysis of floating-point programs. This framework defines a parametric abstract analysis that computes, for each combination of ideal and floating-point execution path of the program, a sound over-approximation of the accumulated floating-point round-off error that may occur. In addition, a Boolean expression that characterizes the input values leading to the computed error approximation is also computed. An abstraction on the control flow of the program is proposed to mitigate the explosion of the number of elements generated by the analysis. Additionally, a widening operator is defined to ensure the convergence of recursive functions and loops. An instantiation of this framework is implemented in the prototype tool PRECiSA that generates formal proof certificates stating the correctness of the computed round-off errors.",
isbn="978-3-319-73721-8"
}

@inproceedings{xinyili24,
  title={{FTTN}: {F}eature-{T}argeted {T}esting for {N}umerical {P}roperties of NVIDIA {\&} {AMD} {M}atrix {A}ccelerators},
  author={Li, Xinyi and Li, Ang and Fang, Bo and Swirydowicz, Katarzyna and  Laguna, Ignacio and Gopalakrishnan, Ganesh},
  booktitle={2024 IEEE/ACM 24th International Symposium on Cluster, Cloud and Internet Computing (CCGrid)},
  year={2024},
  organization={IEEE}
}

