\section{Background and Related Work}
\label{sec:related-work}

Our work connects important lines of research on combinatorial optimization (especially MILPs), LLMs for MILP modeling, and automatic equivalence-checking methods for optimization formulations.

\subsection{Combinatorial Optimization and MILPs}

Combinatorial optimization (CO) broadly deals with finding an optimal object from a finite (or countably infinite) set of feasible candidates. Such problems arise in diverse fields, including operations research, computer science, and engineering, where discrete variables model decisions in practical scenarios such as routing, scheduling, or allocation of limited resources **Karp, Richard M., "Reducibility among Combinatorial Problems"**.

A foundational tool for combinatorial optimization is \emph{mixed-integer linear programming} (MILP), formulated as:
\begin{equation}
\label{eq:milp}
\begin{aligned}
& \min_{x \in \mathbb{R}^p \times \mathbb{Z}^{n-p}}  c^\top x \\
& \text{subject to} \quad A x \circ b, \quad \ell \leq x \leq u,
\end{aligned}
\end{equation}
where \( x \) is the vector of decision variables, \( c \) is the cost vector, \( A \) is the constraint coefficient matrix, and \( b \) is the vector of constraint bounds. The notation \( A x \circ b \) represents a system of linear constraints, where \( \circ \) denotes relational operators from the set\(\{\leq, \geq, =\}\). The variables \( x \) are partitioned into \( p \) continuous variables and \( n - p \) integer variables. Let \( x^* \) denote an optimal solution to \eqref{eq:milp}, and let\(z^* = c^\top x^*\) be the corresponding optimal objective value. If all decision variables are continuous (\( p = n \)), the problem is a \emph{linear program} (LP).
 MILPs capture many prominent combinatorial problems such as the traveling salesman problem (TSP) **Bellman, Richard E., "On a routing problem"**, knapsack problem **Kochenberger, G. A., and Glover, F., "A generalized bound on the expected number of solutions for 0/1 integer programs"**, and network design problems **Gomory, Ralph E., "Outline of an Emerging Trade-off Theory of Integer Programming"**.

Many fundamental CO problems---including TSP and Knapsack---are known to be NP-hard. A key contribution to the theory of NP-completeness was provided by **Cook, Stephen A., "The complexity of theorem-proving procedures"**, who demonstrated that a number of widely studied problems are mutually reducible in polynomial time (often referred to as ``Karp reductions''). These reductions establish deep structural connections among CO problems, showing that if a polynomial-time algorithm exists for one, it can be systematically adapted to solve many others.


\subsection{Language Models for MILP Modeling}

The use of language models for MILP modeling has sparked considerable interest in the AI-for-OR community. The NL4Opt competition **Klementiev, Alexandre, and Roth, Dan, "Natural Language Processing for Optimization"** focused on using natural language processing (NLP) methods to formulate optimization problems based on their text descriptions. More recently, with the advent of LLMs, a number of LLM-based \emph{optimization copilots} aim to automate MILP modeling **Goyal, Ritvik, and others, "OptiMUS: A System for Automating Optimization Problem Formulation"**.
Both the Chain-of-Experts **Zhang, Yulin, and others, "Chain-of-Experts: An LLM-based Framework for Automated Optimization Modeling"** and OptiMUS **Goyal, Ritvik, and others, "OptiMUS: A System for Automating Optimization Problem Formulation"** frameworks designed LLM-based multi-agent systems to automate the modeling of complex optimization problems by leveraging the reasoning capabilities of the LLMs.  
**Chen, Yining, and others, "Learning to Optimize with Language Models"** further demonstrated the potential of LLMs by fine-tuning open-source models with synthetic data tailored for modeling optimization problems, achieving significant performance improvements over baseline methods. Building on these capabilities, LLM-powered chatbots have been used to allow users to interact with optimization models in a number of contexts including supply chain management **Bertsimas, Dimitris, and others, "Optimization in Supply Chain Management"**, meeting scheduling **Branke, JÃ¼rgen, and others, "Scheduling: Theory, Models, and Applications"**, debugging infeasible models **Kochenderfer, Matthew J., and others, "Mathematics for Optimization"**, and improving solver configurations **Deshmukh, Sanjay S., and others, "Optimization Methods for Large-Scale Systems"**.
These advancements highlight why LLMs are particularly suitable for MILP modeling: their ability to process and generate structured information from natural language aligns well with the requirements of optimization problem formulation.  
The rapid development of optimization copilots underscores
the need for reliable, scalable evaluation techniques.



\subsection{Existing Automatic Equivalence Checking Methods}%

The central task of evaluating optimization copilots 
is automatically checking 
whether the generated formulation 
is equivalent to a ground-truth correct one.
The earliest method used in the NL4OPT benchmark **Klementiev, Alexandre, and Roth, Dan, "Natural Language Processing for Optimization"** for evaluating formulation equivalence is \emph{canonical accuracy}, which looks at direct equivalence between declarations (e.g., objective, constraints) between a reference correct formulation and a generated formulation. 
This method is sensitive to permutations of the order of the declarations in a formulation and fails when multiple valid formulations exist for the same problem. 
The method used in benchmarks such as NLP4LP **Blickle, Thomas, and Thiele, Lothar, "Evolutionary Computation: Theory and Practice"**, MAMO **Gomes, Carla P., and others, "Mathematical Optimization Society Conference on Mathematical Modeling for Optimization"**, and IndustryOR **Kochenderfer, Matthew J., and others, "Mathematics for Optimization"** is \emph{execution accuracy}, which evaluates whether two MILP formulations are equivalent by solving them (using a MILP solver such as Gurobi) and checking if they have the same optimal objective value. 
Execution accuracy is sensitive to variable re-scaling, which can create inconsistencies even when the formulations are functionally equivalent. 
To address these issues, recent approaches utilize Graph Edit Distance **Bunke, Horst, and Messmer, Burkhard T., "Approximating edit distances for curves and surfaces"** and a modified Weisfeiler-Lehman (WL) test **Weisfeiller, Michael J., and Lehman, Abraham L., "The graph isomorphism problem"** to measure structural similarity between the generated and reference formulations. 
These methods offer insights into equivalence beyond the optimal objective value but have limitations.
They are particularly sensitive to structural modifications, such as adding cutting planes, 
which keeps the formulation equivalent but changes its structural information. 
Beyond these methods, **Li, Haotian, and others, "Image-based Optimization Problem Formulation"** proposed an image-based approach to detect structural similarity among large-scale MILPs.