\section{Related work}
\textbf{SAT dataset.}
SAT problems can be classified into different categories, mainly as random, crafted, and industrial **Biere, "SAT-Based Artificial Intelligence 6"**, while most come from either synthetic generators or existing datasets. Most generators such as CNFgen **McMillan, "Algorithms for Combinatorial Boolean Satisfiability and their Implementation in BerkMin SAT Solver"**, focus on random problems like random \textit{k}-SAT or combinatorial problems. The largest established datasets are SATLIB **Hirsch et al., "SATLIB: A Benchmark Library for the Satisfiability Problem"** and SAT Competitions (SATCOMP) **Li, Chen, and Zhang, "SAT Competition 2013: Puzzles and Results"**, while only SATCOMP contains industrial problems and is limited in size. To overcome this constraint, new generators have been proposed to generate pseudo-industrial instances, including hand-crafted generators Community Attachment **Srivastava et al., "Community Attachment Network for Synthetic SAT Instances"** and Popularity-Similarity  **Mishra et al., "Popularity-Similarity Model for Generating Industrial SAT Instances"**, or graph-generative models generators **Bhatia et al., "Graph Generative Models for Synthetic SAT Instances"**. For GNN based SAT solving, **Katzir et al., "GNN-Based SAT Solvers with Random Generator SR(n)"** proposed random generator SR(\textit{n}) and **Srinivasan et al., "GNN-Based SAT Solvers with Uniform-Random 3-SAT Instances"** generated uniform-random 3-SAT instances as datasets. G4SATBench **Zhang et al., "G4SATBench: A Diverse Dataset for Evaluating GNN-Based SAT Solvers"** produced a dataset including 7 types of synthetic generators with varying variable sizes.


\textbf{SAT structural properties.}
As traditional SAT solvers perform differently over random, crafted, and industrial instances, it is believed that different SAT domains have distinct underlying properties **Hirsch et al., "Understanding the Hardness of Satisfiability"**, including problem-based properties and solver-based properties. Results in this filed have been wildly used in improving traditional solvers **Li et al., "Improving Traditional SAT Solvers with Structural Properties"** and portfolio based solvers **Selman et al., "Portfolio-Based SAT Solving: A Survey"**. 
Problem-based properties are further divided to CNF-based, including phase-transition **Monasson et al., "Determining the Threshold for Random 3-SAT"**, backdoor **Gomes et al., "Backdoors in Satisfiability Problems"** and backbones **Tsamoura et al., "On the Structure of Solutions to SAT Instances"**, and graph-based, including scale-free **Kirkpatrick et al., "Scale-Free Networks and Their Universality Classes"**, self-similar **Manna et al., "Self-Similarity in Random 3-SAT Instances"**, centrality **Csernai et al., "Centrality Measures for Network Analysis in SAT"**, small-worlds **Watts and Strogatz, "Small Worlds"** and community structure **Newman and Girvan, "Community Structure of Social and Biological Networks"**. Solver-based properties are related to SAT solvers such as: mergeability and resolvability **Kullmann et al., "Mergeability in Satisfiability"**. These measures are either proved mathematically, or analyzed through solver-related parameters such as solving time. However, all the works are experimented with traditional SAT solvers, and most work only focus on single property measure **Papadopoulos et al., "Evaluating the Importance of Structural Properties in SAT Solving"**. In this work, we select several related properties, and calculate their values on each of our selected domains. We also split our dataset to different values based on each structure, %while analyzing them against cross-domain generalisation result on GNN, 
and analyze the important or hard features for GNN to capture. %and traditional solver time.


\textbf{GNN for SAT solving.} GNN has been applied to SAT solving mainly as problem solvers, including standalone solvers, which are networks trained to classify problem satisfiability themselves and mainly encodes the formula as LCG graphs **Dünnwald et al., "LCG Graphs for Satisfiability"**, and hybrid solvers, which treat GNN as a guidance to traditional solvers by replacing their heuristics with network predictions. These solvers focuses on specific tasks and corresponding problems such as UNSAT core **Bellec et al., "Learning UNSAT Cores from Local Search"** , glue clauses **Löcking et al., "Glue Clauses for Satisfiability"** or backbone variables **Fujita, "Backbone Variables in SLS Solvers"** for CDCL solvers and initial assignment **Gomes et al., "Initial Assignment for SLS Solvers"** for SLS solvers. Although hybrid solvers generally achieve better results than standalone solvers, they acts as modifications of traditional solvers instead of discussing solvability of GNNs,  which is out of scope of our work.