\section{Background and Related Works}
\vspace{-3pt}
\subsection{QUBO Problem}

Equation (\ref{eq:1}) presents the general formulation of the QUBO problem. In this equation, the matrix $Q$ (i.e., weight matrix), sized $n\times n$, comprises integer values that encompass both positive and negative integers. The vector $x$, also of size $n$, consists of binary values, with each element $x_i$ being either one or zero. Thus, the objective is to determine the solution that minimizes the $x^T Q x$ problem, effectively solving the QUBO problem. Thus, the primary aim is to identify the vector $x$ that minimizes the function $f(x)$.

\vspace{-0.2cm}

\begin{equation}
\label{eq:1}
\small
f(x) = \sum_{i=1}^{n} Q_{ii} x_i + \sum_{i=1}^{n} \sum_{j \neq i}^{n} Q_{ij} x_i x_j\
\end{equation}

\vspace{-8pt}
\subsection{Ising formulation}
\vspace{-3pt}
Equation (\ref{eq:2}) shows the general Ising formulation, where $E$ represents the system's energy. $i$ and $j$ are indices for individual spins (nodes). $J_{ij}$ is a coupling constant determining the interaction strength between spins $i$ and $j$. It is typically a symmetric matrix describing the interactions between all spins. $s_i$ and $s_j$ are individual spin values, often taking values of $+1$ or $-1$. $h_i$ represents the strength of an external magnetic field acting on spin $i$. The transformation from Ising to QUBO is easy, and the $\{0,1\}$-valued variables of QUBO can be transformed to $\{-1,1\}$-valued variables of Ising formulation as shown in Equation (\ref{eq:3}). 

\vspace{-0.2cm}

\begin{equation}
\label{eq:2}
\small
E = -\sum_{i} \sum_{j} J_{ij} s_i s_j - \sum_{i} h_i s_i
\end{equation}

\vspace{-8pt}

\begin{equation}
\label{eq:3}
\small
s_i = 2 \times x_i - 1
\end{equation}

\vspace{-10pt}
\subsection{Related Work}
We review prior works on hybridizing classical processors and Ising machines to solve the QUBO problems. 
It should be stated that there are prior works on solving QUBO using only classical processors, such as Lucas, "A Tabu Search Algorithm for Solving Large-Scale Instances of the Quadratic Unconstrained Binary Optimization Problem" and Glover, "Tabu Search". 
In Glover, a search algorithm denoted as D\textsuperscript{2}TS, has been proposed. This paper proposes a fast and efficient modified Tabu search while utilizing a unique perturbation-based diversification strategy. It shows promising results in solving large-size QUBO problems on a classical machine with few search epochs.

In Glover, a subQUBO approach was presented to solve the QUBO optimization problem. This approach uses multiple Quantum annealer hardware to solve the subQUBOs in combination with a Tabu search and a randomizer to find the solution for the QUBO. 
Another subQUBO approach for solving the Trip Planning Problems (TPP) using Ising machines has been introduced in Wang, "SubQUBO: A Novel Approach for Solving Large-Scale Quadratic Unconstrained Binary Optimization Problems on Ising Machines". By partitioning the original QUBO model into smaller subQUBOs through combined variable selection, this paper finds near-optimal solutions to the QUBO problem. 

The authors of Bonaccorso, "Efficient Extraction of Quasi-Optimal Solutions for Quadratic Unconstrained Binary Optimization Problems on Ising Machines" introduced a hybrid annealing method called subQUBO model extraction for solving QUBO models with Ising machines. This method successfully obtained multiple quasi-optimal solutions by leveraging a classical computer to identify and extract size-limited subQUBO models from selected solution instances based on variable variance. The iterative refinement of the solution set was a key aspect of this approach.
In Bonaccorso, an algorithm for automatically planning touristic trips was introduced. This algorithm utilized Tabu search as a meta-heuristic and defined a specific set of operators to navigate the search space efficiently.
In Farhi, "A Quantum Approximation Algorithm" is used in tandem with using the D-wave system quantum annealer to solve the QUBO problems. Finally, note that the Variational Quantum Eigensolver (VQE) method for hybrid usage of the classical and quantum machines for solving large-size problems has been proposed Peruzzo.

\vspace{-8pt}
\subsection{\textit{Tabu} search}
Tabu search is an optimization algorithm that explores solution spaces incrementally by modifying a current solution while avoiding recently explored solutions. This memory mechanism allows Tabu search to prevent cycling and converging to local optima. The process of generating a new solution involves two steps: 

1)  A neighbourhood search in which the best neighbour solution with respect to an evaluation function is selected.
2)  A tabu search step where the selected solution is modified by the tabu mechanism.

\vspace{-7pt}
\subsection{Proposed \alg}

The proposed heuristic algorithm for solving QUBO problems is based on a combination of the following components:

1.  Initialization: The initial solution set is generated using an appropriate method.
2.  Tabu search: A modified tabu search algorithm is employed to find the best neighbour solutions with respect to the evaluation function.
3.  Control parameters aggregation: The control parameters are aggregated based on the extracted weights and deviations.

The proposed \alg can be described as follows:

\begin{algorithm}[t]
\caption{Proposed \alg}\label{alg:alg2}
\begin{algorithmic}[1]
\small
\REQUIRE $Q$
\vspace{-1pt}
\ENSURE $x_{\text{min}}$ for $x^T Q x$ problem
\vspace{-1pt}
\STATE $S \gets$ Generate\_Initial\_Solution\_Set()
\vspace{-1pt}
\STATE $S \gets$ Call\_IM\_Solution\_Set($S$)
\vspace{-1pt}
\STATE $r \gets$ MRAnnealer.Initial()
\vspace{-1pt}
\STATE $\eta \gets$ Weight\_Effect\_Extraction()($Q$)
\vspace{-1pt}
\WHILE{Termination Condition is not met}
\vspace{-1pt}
    \STATE $S, \Delta \gets$ Tabusearch(Q, $\alpha$, $S$)
    \vspace{-1pt}
    \STATE $\gamma \gets$ Deviation\_Extraction($S$)
    \vspace{-1pt}
    \STATE $A \gets$ Control\_Parameters\_Aggregation($\eta, \Delta, \gamma$)
    \vspace{-1pt}
    \STATE $S, S' \gets$ Call\_IM\_Partial\_Solution\_Set($S, A, Q$)
    \vspace{-1pt}
    \STATE $S \gets$ Mutation($S, S', A, r$)
    \vspace{-1pt}
    \STATE $r \gets$ MRAnnealer.NextRate() 
    \vspace{-1pt}
\ENDWHILE
\vspace{-1pt}
\RETURN $x_{\text{min}}$
\vspace{-1pt}
\end{algorithmic}
\label{alg:proposed_heuristic}
\end{algorithm}