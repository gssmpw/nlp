@inproceedings{236368,
    author = {Markus Zimmermann and Cristian-Alexandru Staicu and Cam Tenny and
              Michael Pradel},
    title = {Small World with High Risks: A Study of Security Threats in the npm
             Ecosystem},
    booktitle = {28th USENIX Security Symposium (USENIX Security 19)},
    year = {2019},
    isbn = {978-1-939133-06-9},
    address = {Santa Clara, CA},
    pages = {995--1010},
    url = {
           https://www.usenix.org/conference/usenixsecurity19/presentation/zimmerman
           },
    publisher = {USENIX Association},
    month = aug,
}

@article{35397813-90c1-3806-8d5d-a07b3340ac3d,
    ISSN = {00811750, 14679531},
    URL = {http://www.jstor.org/stable/270732},
    author = {Phillip Bonacich},
    journal = {Sociological Methodology},
    pages = {176--185},
    publisher = {[American Sociological Association, Wiley, Sage Publications,
                 Inc.]},
    title = {{Technique for Analyzing Overlapping Memberships}},
    urldate = {2024-02-28},
    volume = {4},
    year = {1972},
}

@inproceedings{7490780,
    author = {Jing Wang and Qingbo Wu and Yusong Tan and Jing Xu and Xiaoli Sun},
    booktitle = {2015 4th International Conference on Computer Science and
                 Network Technology (ICCSNT)},
    title = {{A graph method of package dependency analysis on Linux Operating
             system}},
    year = {2015},
    volume = {01},
    number = {},
    pages = {412-415},
    abstract = {Maintaining package-based Linux operating system distributions
                and addressing their evolution have always been a challenge.
                Since all packages that form a distribution of Linux Operating
                system interact with each other, it leads to complicated
                dependency relationships of each distribution. Current package
                managers only provide a local view of the dependency
                relationship. It is still a lack for distribution releasers to
                obtain a global view of the package dependency relationships. In
                this paper we present our research that target to bridge this
                gap: we propose a graph method to establish entire distribution
                package dependency relationship and analyze the complicated
                relationship graph with relevant properties. We implement our
                method on ubuntu kylin 14.04. The experiments illustrate that our
                graph approach is efficient for understanding of the whole
                distribution and could assist a high-quality maintenance and
                effective evolution.},
    keywords = {},
    doi = {10.1109/ICCSNT.2015.7490780},
    ISSN = {},
    month = {Dec},
}

@article{760e07d1-fd0d-3ce0-afae-f7ab9cd57766,
    ISSN = {0006341X, 15410420},
    URL = {http://www.jstor.org/stable/3001479},
    author = {M. G. Kendall},
    journal = {Biometrics},
    number = {1},
    pages = {43--62},
    publisher = {[Wiley, International Biometric Society]},
    title = {{Further Contributions to the Theory of Paired Comparisons}},
    urldate = {2024-02-28},
    volume = {11},
    year = {1955},
}

@inproceedings{7884604,
    author = {Decan, Alexandre and Mens, Tom and Claes, Maëlick},
    booktitle = {2017 IEEE 24th International Conference on Software Analysis,
                 Evolution and Reengineering (SANER)},
    title = {{An empirical comparison of dependency issues in OSS packaging
             ecosystems}},
    year = {2017},
    volume = {},
    number = {},
    pages = {2-12},
    abstract = {Nearly every popular programming language comes with one or more
                open source software packaging ecosystem(s), containing a large
                collection of interdependent software packages developed in that
                programming language. Such packaging ecosystems are extremely
                useful for their respective software development community. We
                present an empirical analysis of how the dependency graphs of
                three large packaging ecosystems (npm, CRAN and RubyGems) evolve
                over time. We study how the existing package dependencies impact
                the resilience of the three ecosystems over time and to which
                extent these ecosystems suffer from issues related to package
                dependency updates. We analyse specific solutions that each
                ecosystem has put into place and argue that none of these
                solutions is perfect, motivating the need for better tools to
                deal with package dependency update problems.},
    keywords = {},
    doi = {10.1109/SANER.2017.7884604},
    ISSN = {},
    month = {Feb},
}

@article{9631870,
    author = {Mujahid, Suhaib and Costa, Diego Elias and Abdalkareem, Rabe and
              Shihab, Emad and Saied, Mohamed Aymen and Adams, Bram},
    journal = {IEEE Transactions on Engineering Management},
    title = {{Toward Using Package Centrality Trend to Identify Packages in
             Decline}},
    year = {2022},
    volume = {69},
    number = {6},
    pages = {3618-3632},
    doi = {10.1109/TEM.2021.3122012},
}

@conference{Alhamdan:Staicu:2025,
    title = {{Welcome to Jurassic Park: A Comprehensive Study of Security Risks
             in Deno and its Ecosystem}},
    author = {Alhamdan, Abdullah and Staicu, Cristian-Alexandru},
    year = 2025,
    month = 2,
    doi = {10.14722/ndss.2025.23284},
}

@article{COELHO2020106274,
    title = {{Is this GitHub project maintained? Measuring the level of
             maintenance activity of open-source projects}},
    journal = {Information and Software Technology},
    volume = {122},
    pages = {106274},
    year = {2020},
    issn = {0950-5849},
    doi = {https://doi.org/10.1016/j.infsof.2020.106274},
    url = {https://www.sciencedirect.com/science/article/pii/S0950584920300240},
    author = {Jailton Coelho and Marco Tulio Valente and Luciano Milen and
              Luciana L. Silva},
    keywords = {Unmaintained projects, GitHub, Open source software},
    abstract = {Context GitHub hosts an impressive number of high-quality OSS
                projects. However, selecting “the right tool for the job” is a
                challenging task, because we do not have precise information
                about those high-quality projects. Objective In this paper, we
                propose a data-driven approach to measure the level of
                maintenance activity of GitHub projects. Our goal is to alert
                users about the risks of using unmaintained projects and possibly
                motivate other developers to assume the maintenance of such
                projects. Method We train machine learning models to define a
                metric to express the level of maintenance activity of GitHub
                projects. Next, we analyze the historical evolution of 2927
                active projects in the time frame of one year. Results From 2927
                active projects, 16% become unmaintained in the interval of one
                year. We also found that Objective-C projects tend to have lower
                maintenance activity than projects implemented in other
                languages. Finally, software tools—such as compilers and
                editors—have the highest maintenance activity over time.
                Conclusions A metric about the level of maintenance activity of
                GitHub projects can help developers to select open source
                projects.},
}

@article{Decan2019,
    author = {Decan, Alexandre and Mens, Tom and Grosjean, Philippe},
    title = {{An empirical comparison of dependency network evolution in seven
             software packaging ecosystems}},
    journal = {Empirical Software Engineering},
    year = {2019},
    month = {Feb},
    day = {01},
    volume = {24},
    number = {1},
    pages = {381-416},
    abstract = {Nearly every popular programming language comes with one or more
                package managers. The software packages distributed by such
                package managers form large software ecosystems. These packaging
                ecosystems contain a large number of package releases that are
                updated regularly and that have many dependencies to other
                package releases. While packaging ecosystems are extremely useful
                for their respective communities of developers, they face
                challenges related to their scale, complexity, and rate of
                evolution. Typical problems are backward incompatible package
                updates, and the risk of (transitively) depending on packages
                that have become obsolete or inactive. This manuscript uses the
                libraries.io dataset to carry out a quantitative empirical
                analysis of the similarities and differences between the
                evolution of package dependency networks for seven packaging
                ecosystems of varying sizes and ages: Cargo for Rust, CPAN for
                Perl, CRAN for R, npm for JavaScript, NuGet for the .NET platform
                , Packagist for PHP, and RubyGems for Ruby. We propose novel
                metrics to capture the growth, changeability, reusability and
                fragility of these dependency networks, and use these metrics to
                analyze and compare their evolution. We observe that the
                dependency networks tend to grow over time, both in size and in
                number of package updates, while a minority of packages are
                responsible for most of the package updates. The majority of
                packages depend on other packages, but only a small proportion of
                packages accounts for most of the reverse dependencies. We
                observe a high proportion of ``fragile'' packages due to a high
                and increasing number of transitive dependencies. These findings
                are instrumental for assessing the quality of a package
                dependency network, and improving it through dependency
                management tools and imposed policies.},
    issn = {1573-7616},
    doi = {10.1007/s10664-017-9589-y},
    url = {https://doi.org/10.1007/s10664-017-9589-y},
}

@article{Freeman1978,
    author = {Freeman, Linton C.},
    title = {{Centrality in social networks conceptual clarification}},
    journal = {Social Networks},
    year = {1978},
    month = {Jan},
    day = {01},
    volume = {1},
    number = {3},
    pages = {215-239},
    abstract = {The intuitive background for measures of structural centrality
                in social networks is reviewed and existing measures are
                evaluated in terms of their consistency with intuitions and their
                interpretability. Three distinct intuitive conceptions of
                centrality are uncovered and existing measures are refined to
                embody these conceptions. Three measures are developed for each
                concept, one absolute and one relative measure of the centrality
                of positions in a network, and one reflecting the degree of
                centralization of the entire network. The implications of these
                measures for the experimental study of small groups is examined.},
    issn = {0378-8733},
    url = {https://www.sciencedirect.com/science/article/pii/0378873378900217},
}

@inbook{Gomez2019,
    author = "G{\'o}mez, Sergio",
    editor = "Moscato, Pablo and de Vries, Natalie Jane",
    title = "Centrality in Networks: Finding the Most Important Nodes",
    bookTitle = "Business and Consumer Analytics: New Ideas",
    year = "2019",
    publisher = "Springer International Publishing",
    address = "Cham",
    pages = "401--433",
    abstract = "Real networks are heterogeneous structures, with edges unevenly
                distributed among nodes, presenting community structure, motifs,
                transitivity, rich clubs, and other kinds of topological
                patterns. Consequently, the roles played by nodes in a network
                can differ greatly. For example, some nodes may be connectors
                between parts of the network, others may be central or peripheral
                , etc. The objective of this chapter is to describe how we can
                find the most important nodes in networks. The idea is to define
                a centrality measure for each node in the network, sort the nodes
                according to their centralities, and fix our attention to the
                first ranked nodes, which can be considered as the most relevant
                ones with respect to this centrality measure.",
    isbn = "978-3-030-06222-4",
    doi = "10.1007/978-3-030-06222-4_8",
    url = "https://doi.org/10.1007/978-3-030-06222-4_8",
}

@article{Katz1953,
    author = {Katz, Leo},
    title = {{A new status index derived from sociometric analysis}},
    journal = {Psychometrika},
    year = {1953},
    month = {Mar},
    day = {01},
    volume = {18},
    number = {1},
    pages = {39-43},
    abstract = {For the purpose of evaluating status in a manner free from the
                deficiencies of popularity contest procedures, this paper
                presents a new method of computation which takes into accountwho
                chooses as well ashow many choose. It is necessary to introduce,
                in this connection, the concept of attenuation in influence
                transmitted through intermediaries.},
    issn = {1860-0980},
    doi = {10.1007/BF02289026},
    url = {https://doi.org/10.1007/BF02289026},
}

@article{claude1966theorie,
    title = {Th{\'e}orie des graphes et ses applications},
    author = {Claude, Berge},
    journal = {French. Dunod, Paris},
    pages = {15},
    year = {1966},
}

@article{landau1895relativen,
    title = {{Zur relativen Wertbemessung der Turnierresultate}},
    author = {Landau, Edmund},
    journal = {Deutsches Wochenschach},
    volume = {11},
    number = {366-369},
    pages = {3},
    year = {1895},
}

@inproceedings{pfeiffer,
    author = {Pfeiffer, Rolf-Helge},
    booktitle = {2021 IEEE/ACM 18th International Conference on Mining Software
                 Repositories (MSR)},
    title = {{Identifying Critical Projects via PageRank and Truck Factor}},
    year = {2021},
    volume = {},
    number = {},
    pages = {41-45},
    abstract = {Recently, Google's Open Source team presented the criticality
                score a metric to assess "influence and importance" of a project
                in an ecosystem from project specific signals, e.g., number of
                dependents, commit frequency, etc. The community showed mixed
                reactions towards the score doubting if it can accurately
                identify critical projects. We share the community's doubts and
                we hypothesize, that a combination of PageRank (PR) and Truck
                Factor (TF) can more accurately identify critical projects than
                Google's current Criticality Score (CS). To verify our hypothesis
                , we conduct an experiment in which we compute the PR of
                thousands of projects from various ecosystems, such as, Maven
                (Java), NPM (JavaScript), PyPI (Python), etc., we compute the TFs
                of the projects with the highest PR in the respective ecosystems,
                and we compare these to the scores provided by the Google
                project. Unlike Google's CS, our approach identifies projects,
                such as, six and idna from PyPI, com.typesafe:config from Maven,
                or tap from NPM, as critical projects with high degree of
                transitive dependents (highest PR) and low amount of core
                developers (each of them possessing a TF of one).},
    keywords = {Measurement;Java;Ecosystems;Software;Internet;Data
                mining;Software development management},
    doi = {10.1109/MSR52588.2021.00017},
    ISSN = {2574-3864},
    month = {May},
}

@techreport{pike2020,
    address = {Github},
    type = {Technical Article},
    title = {{Quantifying Criticality}},
    url = {
           https://github.com/ossf/criticality_score/blob/a41e3aa7971a6d1150b22c2c40d7b6ac8df63629/Quantifying_criticality_algorithm.pdf
           },
    language = {en},
    author = {{Rob Pike}},
    year = {2020},
}

@phdthesis{wei1952algebraic,
    title = {Algebraic foundations of ranking theory.},
    author = {Wei, Teh-Hsing},
    year = {1952},
    school = {University of Cambridge},
}

