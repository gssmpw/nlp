In 2020, Jailton Coelho et al. published a study [1] proposing an approach to identify GitHub projects that are not actively maintained. The authors introduced the so-called \gls{lma} value as a metric describing the maintenance status of Github projects. The authors trained a machine learning model to identify unmaintained or sparsely maintained projects, based on a set of features, for instance the number of commits, forks, or issues. The approach was published as an extension for Google Chrome [2]. Ironically, this extension is not actively maintained anymore. Further, the published extension does not contain the trained model but instead is intended to communicate with a server provided by the authors. This server is currently offline and therefore the developed approach cannot be used for this paper. However, the authors conducted several correlation analyses. The authors state that, e.g., the number of contributors or lines of code can be used to assess the maintenance status of a software project, since those are correlated with their \gls{lma} value.

In 2020, Rob Pike published a technical article [3] describing the criticality score which is a technique for quantifying criticality. In 2021, this technique was further examined by Pfeiffer [4]. The goal of this score is to find a single value that represents all signals of criticality for a package in a meaningful way. The \gls{ossf} group, operated by the Linux Foundation, maintains multiple software projects on Github\footnote{\url{https://github.com/ossf}} which can be used to, e.g., calculate the criticality score of Github projects or surveys about the state of software ecosystems. However, their tools are only applicable for a limited scope. For instance, the official criticality score tool\footnote{\url{https://github.com/ossf/criticality_score}} is only applicable to Github projects and a Google Cloud account is required to use the tool.

References:
[1] Jailton Coelho et al. (2020). Identifying Unmaintained GitHub Projects using Machine Learning.
[2] Jailton Coelho et al. (2020). Github Extension for Identifying Unmaintained Projects.
[3] Rob Pike (2020). Criticality Score: A Technique for Quantifying Criticality.
[4] Pfeiffer (2021). Examination of the Criticality Score.