\section{Related work}
Several research efforts have explored ways to improve configuration challenges processes through automation and tool support.

The work of Duc et al. **Duc, "Failure Patterns of Smart Home Systems"** examined the main failure patterns of smart home systems, this work focuses on hardware failure(wireless link loss, battery damage, power outage). Chen et al. **Chen, "Fault Symptom Analysis and Maintenance Suggestions for IoT Systems"** analyzed the fault symptoms and provided maintenance suggestions after modeling the IoT system with four layers: application, storage, communication, and data.

In the realm of natural language processing for code, **Allamanis et al., "Learning to Generate Code"** surveyed various techniques for learning from source code, including approaches for code summarization and bug detection. Their work provides a foundation for our use of NLP and machine learning to analyze code changes and generate human-readable comments.  **Hindle et al., "Natural Language Processing for Code"**

V. J. HELLENDOORN ET AL**Hellenbroek, "Code Completion and Bug Detection with Machine Learning Models"** explored the use of machine learning models(RNN, Transformer, GGRN etc.) **Rajagopalan et al., "Machine Learning for Code Understanding Tasks"**  for code completion and bug detection. Their findings on the effectiveness of transformer-based models for code understanding tasks inform our choice of model architectures for comment generation. However, they did not consider any large language model for analysis.

A few recent studies have focused on identifying and characterizing issues in IoT systems **Zhou et al., "IoT System Characterization"** . Makhshari and Mesbah **Makhshari et al., "Challenges Faced by IoT Developers"** conducted interviews and surveys with IoT developers, revealing that testing and debugging are the primary challenges faced. However, their work does not address configuration issues. Brackenbury et al.  **Brackenbury et al., "Trigger-Action Programming (TAP) Model Analysis"** focused on the trigger-action programming (TAP) model. They analyzed and systematized temporal paradigms within TAP systems. Their work identified that TAP systems express rules and categorized TAP programming bugs into three main types: control logic errors, timing issues, and bugs arising from inaccurate user expectations. Ahmad et al.  **Ahmad et al., "LLM Framework for Hardware Security Bugs"** designed and implemented a framework to quantitatively evaluate how effectively an LLM can fix specified bugs related to hardware security.

Focusing on root causes, fixes, triggers, and impacts Wang et al.  **Wang et al., "Device Integration Bug Analysis"** analyzed 330 device integration bugs from HAC. This work is similar to our work, rather than addressing device integration, our study concentrates on coding issues in automation configuration.

S. M. H. Anik et al.  **Anik et al., "Smart Home Automation Configuration Challenges"** conducted a comprehensive study on the challenges and opportunities in programming automation configurations for smart home systems . Their work provides valuable insights into the complexities of setting up and maintaining smart home devices, which has informed our approach to developing AI-assisted configuration tools. Our study was conducted using the dataset extracted in their work.

In the realm of IoT security, the Bitdefender 2024 IoT Security Landscape Report**Bitdefender, "IoT Security Landscape Report"** offers crucial insights into the evolving threats facing smart homes. This report highlights the need for robust security measures in smart home configurations, which our AI-assisted approach aims to address.
 
Although none of these previous works focused on the evaluation of LLMs in predicting
fixes of Configuration bugs in Smart Home System, these insights help us understand the problem fully and design our solution design considering it.