\section{Related Work}
\label{sec:related}

\noindent
\textbf{On-chain Security Analysis.}
% \textbf{Transaction-based Blockchain Security.}
%\dao{Add one pararaph. Can talk about both smart contracts and blockchains}
Prior efforts [1] have elucidated threats in blockchain and attacks against the DeFi ecosystem. Some transaction-based systems have been proposed to mine vulnerable transaction sequences [2], explore arbitrage opportunities [3], detect malicious phishing [4], and simulate attacks to prevent intrusions [5].

Tools like FlashSyn [6], DeFiRanger [7], DeFiTainter [8], and DeFort [9] are capable of detecting attacks associated with price manipulation. FlashSyn uses numerical approximation techniques to synthesize malicious contracts that target DeFi apps through price manipulation attacks. However, there is a gap between the synthesized contracts and those that launch attacks on the live blockchain.DeFiRanger generates cash flow trees (CFT) from a transaction, translates the semantics of CFT into high-level DeFi actions, and uses specific patterns to detect price manipulation attacks. Yet, DeFiRanger is significantly limited by its reliance on predefined templates. DeFiTainter constructs call graphs based on contract states and transactions, then performs inter-contract taint analysis to examine all execution paths and uncover price manipulation attacks. Nonetheless, DeFiTainter's approach requires manual analysis and labeling of taint sources and sinks, which is challenging. DeFort uses a price manipulation behavior model to guide detection and analysis but its boundary calculation mechanism lacks sensitivity to attacks characterized by minor price fluctuations.
% Kaihua Qin: On the Just-In-Time Discovery of Profit-Generating Transactions in DeFi Protocols, The Blockchain Imitation Game, High-Frequency Trading on Decentralized On-Chain Exchanges, Attacking the DeFi Ecosystem with Flash Loans for Fun and Profit
% Others: TxPhishScope: Towards Detecting and Understanding Transaction-based Phishing on Ethereum, SmarTest: Effectively Hunting Vulnerable Transaction Sequences in Smart Contracts through Language Model-Guided Symbolic Execution, TXSPECTOR: Uncovering Attacks in Ethereum from Transactions, WeRLman: To Tackle Whale (Transactions), Go Deep (RL)

% Various tools have been developed to detect potential attacks to safeguard funds and maintain privacy in DeFi, Tools like FlashSyn [6], DeFiRanger [7], DeFiTainter [8] and DeFort [9] are capable of detecting attacks associated with price manipulation. FlashSyn employs numerical approximation techniques to synthesize malicious contracts that aim to exploit DeFi apps through price manipulation attacks. Nevertheless, there exists a gap between the synthesized contracts and those that launch attacks on the live blockchain. DeFiRanger generates cash flow trees (CFT) from transaction sequences, translates the semantics of CFT into high-level DeFi actions, and then uses specific patterns to detect price manipulation attacks. However, DeFiRanger is significantly constrained by its reliance on predefined templates. DeFiTainter constructs call graphs based on contract states and transactions, and then performs inter-contract taint analysis to examine all execution paths and uncover price manipulation attacks. However, DeFiTainter's approach necessitates manual analysis and labeling of taint sources and sinks, which is a non-trivial task. DeFort employs a price manipulation behavior model to guide the detection and analysis of price manipulation. However, its boundary calculation mechanism lacks sensitivity to attacks characterized by minor price fluctuations. \juantao{Maybe this paragraph should belong to ``On-chain security issues''}

\noindent
\textbf{Program Analysis for Contract Security.}
Traditional tools such as Slither [10], Zeus [11], and Securify [12] employ static analysis methods to detect vulnerabilities at the source code and bytecode levels. Symbolic execution has also shown significant potential in this area, with tools like Mythril [13], Oyente [14], and Manticore [15] developed based on this technique. Dynamic analysis is another core methodology utilized by various tools [16]. Some tools are specifically designed to detect particular types of vulnerabilities; for example, VetSC [17] identifies business logic bugs by vetting inconsistencies between UI and contract code, SailFish [18] focuses on state inconsistency issues, and JACKAL [19] targets confused deputy vulnerabilities.
% Mu Zhang: Towards Automated Safety Vetting of Smart Contracts in Decentralized Applications, VETEOS: Statically Vetting EOSIO Contracts for the “Groundhog Day” Vulnerabilities
% Christopher Kruegel: SAILFISH: Vetting Smart Contract State-Inconsistency Bugs in Seconds, Confusum Contractum: Confused Deputy Vulnerabilities in Ethereum Smart Contracts
% Kaihua, Qin: Towards Automated Security Analysis of Smart Contracts based on Execution Property Graph

\noindent
\textbf{LLMs for Smart Contract Security.}
LLMs have become formidable tools in the realm of blockchain security.
GPTScan [20] uses LLMs for code understanding, incorporating static analysis to detect logical vulnerabilities in contracts.
BlockGPT [21] serves as a real-time intrusion detection system, using LLMs to rank transaction anomalies.
LLM4Vuln [22] refines the reasoning processes of LLMs when analyzing smart contract vulnerabilities.
iAudit [23] combines fine-tuning with LLM-driven agents to provide intuitive smart contract auditing with explanations.
PropertyGPT [24] uses retrieval-augmented property generation for smart contracts, leveraging LLMs' in-context learning capabilities.
Similarly, SMARTINV [25] employs Tier of Thought (ToT) to reason across different modalities of smart contracts, generating invariants in the process.
To the best of our knowledge, \tool is the first tool that uses LLMs specifically designed for detecting price manipulation attacks.
% ACFIX____ is developed to efficiently address access control (AC) vulnerabilities in smart contracts by steering LLMs with established AC practices and relevant code context. 
% SMARTINV____ utilizes Tier of Thought (ToT) to reason across various modalities of smart contracts, generating invariants in the process. It then identifies potential vulnerabilities by detecting violations of these generated invariants.