\section{Related Work}
\label{s:rwork}
\begin{table}[tb]
    \caption{Comparison of Related Work}\label{tab:rwork}
    \centering
        \begin{tabular}{llll} \hline
              & Class-level & Method-level  & Comparison\\ \hline
            Bug prediction  & $\checkmark$ Zhou, "Fault-Proneness Prediction" & $\checkmark$Giger, "Method-Level Fault Prediction" & $\checkmark$Hata, "Fine-Grained Software Change History" \\
            Bug localization & $\checkmark$Zhou, "Classifying Defects" & $\checkmark$Linares-Vásquez, "Predicting Faulty Methods" & $\checkmark$Nasehi, "Effort-Aware Evaluation of Method-Level Predictions" \\
            Change prediction & $\checkmark$Lü, "Change Prediction Using Product Metrics" & $\checkmark$Farah, "Method-Level Change Prediction" & No study.\\
            \hline
        \end{tabular}
\end{table}
Various change prediction techniques have been proposed to date Elish, "Predicting Faulty Software Components".
Most of these techniques employ machine learning models and are formulated as a classification problem.
They utilize product and process metrics as independent variables, with a binary label that indicates whether a module is change-prone, serving as the dependent variable.

In the related tasks, such as bug prediction and bug localization, researchers have developed class-level and method-level prediction techniques Zhou, "Classifying Defects" and demonstrated effectiveness of method-level predictions by comparing them with class-level predictions Linares-Vásquez, "Predicting Faulty Methods".
\cref{tab:rwork} presents examples of studies that have proposed techniques at each level, as well as studies that compare both levels.
Researchers have used the effort-aware evaluation to compare the two levels.
Although method-level prediction techniques have also been proposed for change prediction, comparisons with class-level predictions have yet to be conducted.

\subsection{Class-Level Change Prediction}

Lü et al. demonstrated the effectiveness of product metrics in change prediction through an empirical study involving 102 projects Zhou, "Fault-Proneness Prediction".
Elish et al. derived process metrics to be used as inputs for change prediction using the Goal-Question-Metric approach and demonstrated their effectiveness through empirical experiments Elish, "Predicting Faulty Software Components". 
Furthermore, they revealed that predictions using both product and process metrics showed higher performance than those using only one type of metric.
Catolino et al. proposed a prediction technique that incorporates developer-related information, which is commonly used in bug prediction Catolino, "Developer-Related Information for Bug Prediction".
They constructed models using product metrics, process metrics, and developer information as independent variables and compared the outcomes.
The model incorporating developer information performed better than the other models.
They also found that these metrics complement one another in terms of prediction performance.
In addition, they demonstrated that utilizing ensemble methods in change prediction markedly improves the prediction performance Farah, "Ensemble Methods for Change Prediction".
Furthermore, they added code smell-related information as the independent variable to improve change prediction performance Linares-Vásquez, "Predicting Faulty Code Smells".

\subsection{Method-Level Bug Prediction}
In a similar task of bug prediction, several method-level prediction techniques have already been proposed, and their usefulness has been demonstrated.
Giger et al. proposed a method-level bug prediction technique using product metrics and process metrics Giger, "Method-Level Fault Prediction". 
They employed product metrics that are definable at method-level in CK Zhou, "Fault-Proneness Prediction" and used ChangeDistiller Elish, "Predicting Faulty Software Components" to gather method-level change histories to calculate the process metrics.
Hata et al. proposed a method-level bug prediction technique that uses process metrics Hata, "Fine-Grained Software Change History". 
They utilized a fine-grained repository Linares-Vásquez, "Predicting Fine-Grained Software Changes" to calculate method-level process metrics.
A fine-grained repository generated by their technique Nasehi, "Effort-Aware Evaluation of Method-Level Predictions" tracks software change histories with finer granularity.
They employed an evaluation approach that accounts for an effort to compare class-level and method-level predictions.
The findings indicated that method-level prediction is more efficient than class-level prediction in identifying bugs. 

\begin{table*}[tb]\centering
    \caption{Independent Variables}\label{tab:metrics}
    \begin{tabular}{llll} \hline
         & Granularity & Product Metrics & Process Metrics \\ \hline
        Farah et al. & Method-Level & CK Zhou, "Fault-Proneness Prediction" and Understand: 83 types & Elish et al., "Predicting Faulty Software Components": 17 types \\
        \hline
        \multirow{2}{*}{Our technique} & Class-Level & CK Zhou, "Fault-Proneness Prediction": 49 types & Elish et al., "Predicting Faulty Software Components": 17 types  \\
        & Method-Level & CK Zhou, "Fault-Proneness Prediction": 31 types & Elish et al., "Predicting Faulty Software Components": 17 types \\
        \hline
    \end{tabular}
\end{table*}

\subsection{Method-Level Change Prediction}
Similar to bug prediction, a method-level prediction technique has been proposed for change prediction. 
Farah et al. extended class-level change prediction technique using product and process metrics to method-level Farah, "Method-Level Change Prediction".
Like Giger et al., they used ChangeDistiller Elish, "Predicting Faulty Software Components" to collect method-level process metrics. 
In addition, they analyzed the metrics and machine learning models that are effective for change prediction.
The results of their empirical experiments demonstrated that prediction models, which incorporate both types of metrics, perform better than those that rely on a single type of metric.
To the best of our knowledge, this is the only paper that proposes a method-level change prediction technique.

In the above studies, class-level and method-level change prediction have not been compared, and the effectiveness of method-level change prediction has not been sufficiently demonstrated. 
In this paper, we replicated the technique of Farah et al. as closely as possible and conducted prediction experiments at both class-level and method-level.
We evaluated the usefulness of method-level change prediction by comparing the results.