\section{Background and Related Work}
\label{sec:background}

\paragraph{Dependency Management in npm}

\begin{figure}[b]
    \scriptsize
    \centering
\begin{lstlisting}[style=json,numbers=none]
{ "name": "postcss-loader", "version": "7.3.3",
  "dependencies": {
    "webpack": ">=5.0.0"     (*\color{red}$\leftarrow$~\textsf{\textbf{floating - major}}*)
    "cosmiconfig": "^8.3.5", (*\color{red}$\leftarrow$~\textsf{\textbf{floating - minor: $\ge$8.3.5, $<$9.0.0}}*)
    "jiti": "~1.21.0",       (*\color{red}$\leftarrow$~\textsf{\textbf{floating - patch: $\ge$1.21.0, $<$1.22.0}}*)
    "semver": "7.5.4"        (*\color{red}$\leftarrow$~\textsf{\textbf{pinned}}*)
    "postcss": "^7.0.0 || ^8.0.1", (*\color{red}$\leftarrow$~\textsf{\textbf{other}}*)
    "lodash": "git+ssh://git@github.com:lodash/lodash.git#v4.17", (*\color{red}$\leftarrow$~\textsf{\textbf{other}}*)
  }, "devDependencies": {...}, ... }
\end{lstlisting}
\caption{
An example \Code{package.json} file. 
We modified version constraints in the original file to illustrate different types of version constraints defined in Section~\ref{sec:method-rq1}. Other details irrelevant to this paper are omitted.}
\label{fig:example-pkgjson}
\end{figure}

npm is the most widely used dependency manager for  JavaScript and TypeScript**Bodin, "Dependency Management in npm"**.
It consists of a package registry that hosts open-source components (called \emph{packages} in npm) and a command-line tool that helps projects reuse packages from the package registry.  
As of September 2024, the npm registry is the largest package registry, hosting more than 3 million packages and 25 million releases**Cramer, "npm: A Study on its Evolution and Use"**.
The npm command-line tool reads direct dependencies from a configuration file named \Code{package.json}.
%resolves all direct and indirect dependencies and their specific versions as a \emph{dependency graph}, and installs all the packages in the dependency graph to the local machine.
In the \Code{package.json} file (see Figure~\ref{fig:example-pkgjson} for an example), developers specify package names as the \emph{dependencies} of the project with a \emph{version constraint} for each dependency.
In addition, npm distinguishes different kinds of dependencies---usually, developers focus more on \emph{production dependencies}**Kuznetsov, "Production Dependencies in npm"**, i.e., dependencies that will be included in the production build (for applications) or passed downstream (for packages), and are less concerned about security vulnerabilities if the dependencies are not used in production**Cox, "Security Vulnerabilities in Production Dependencies"**.

Given a \Code{package.json} file, npm will resolve a \textit{dependency graph} including not only dependencies specified in the \Code{package.json} file, but also all transitive dependencies required by dependencies.
The npm ecosystem is known as particularly fragmented with many tiny packages and high levels of reuse**Katz, "Ecosystem Fragmentation in npm"**; a project commonly has orders of magnitude more transitive dependencies than direct ones**Hadjij, "Transitive Dependencies in npm"**.
Dependency resolution can be complicated when multiple dependencies depend on the same third dependency but with conflicting version constraints; this is known as the \textit{diamond problem} or \textit{dependency hell} (see Figure~\ref{fig:rq2-example}). 
While it is highly problematic in other ecosystems**Zhou, "Dependency Resolution in Other Ecosystems"**, npm can install multiple distinct versions for the same package, but it will generally try to produce a dependency graph with fewer duplicate versions (i.e., deduplication**Kang, "Deduplication in npm"**). 
Optimal deduplication is NP-Complete**Bayer, "NP-Completeness of Deduplication"**, so npm uses a variety of heuristics to search for a ``good'' dependency graph satisfying all the version constraints while having fewer duplicate versions**Lin, "Heuristics for Dependency Graph Construction"**. 
%Attempts to resolve optimal dependency graphs using an SMT solver are ongoing**.

Importantly, \emph{dependency graphs are volatile}. 
Since npm always installs the latest version inside a floating versioning constraint, the same \Code{package.json} may result in different graphs as new package updates are released**Savov, "Volatile Dependency Graphs"**.
With floating, projects can keep dependencies up-to-date automatically, whereas developers often do not update pinned dependencies timely, even for those with known security vulnerabilities**Hadjij, "Pinned Dependencies and Security Vulnerabilities"**.

A key challenge to floating dependencies is \textit{breaking changes}: When an update changes expected behavior, the application can break without any action**Cox, "Breaking Changes in Floating Dependencies"**.
A key challenge to pinning dependencies is \textit{security vulnerabilities}: When a dependency has security vulnerabilities, the application may be compromised without any notice**Kuznetsov, "Security Vulnerabilities in Pinning Dependencies"**.

\paragraph{Novelty of Our Research.} 
There have been many prior studies on the use of version constraints**Bayer, "Version Constraints in Software Engineering"** and the trade-offs  around semantic versioning with regards to maintenance effort, breaking changes, and security vulnerabilities**Savov, "Semantic Versioning: Trade-Offs and Challenges"**.
However, the new threat of \textit{malicious package updates} complicates the previously discussed trade-offs, as \emph{malicious actors intentionally break semantic versioning}, often disguising their attacks as patch releases for maximum propagation**Hadjij, "Malicious Package Updates: A Threat to Software Security"**.
The changed threat landscape and the complexity of this pinning versus floating problem eventually lead to controversies and divergence in practitioner opinions**Kang, "Practitioner Opinions on Pinning vs. Floating"**.
Prior studies are either collecting these opinions**Zhou, "Collecting Practitioner Opinions on Version Constraints" or aggregating descriptive statistics from software repositories**Cramer, "Descriptive Statistics of Software Repositories"**; we are not aware of any prior study that attempted to quantify the impact of version constraints using statistical modeling methods.
To shed light on resolving the controversy, we believe it is vital to conduct data-driven research and quantitatively measure the actual impact of version constraints while taking all the previously discussed trade-offs into consideration (Table~\ref{tab:trade-offs}).
This forms the main motivation of our study.