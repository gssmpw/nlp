@article{Jain2018,
author = {Jain, Radhika and Muro, Jaime and Mohan, Kannan},
doi = {10.1111/bdi.12653},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pettinelli - 2013 - A Cognitive Perspective on Emotion.pdf:pdf},
issn = {13995618},
journal = {Bipolar Disorders},
keywords = {a pleine conscience,a suscite,attention,attention de l,decentering,executive functions,l,metacognition,mindfulness,occident,principal enseignement de la,tradition bouddhiste},
number = {3},
pages = {180},
pmid = {29737633},
title = {{A cognitive perspective on pair programming}},
volume = {20},
year = {2018}
}
@article{Jain2018,
author = {Jain, Radhika and Muro, Jaime and Mohan, Kannan},
doi = {10.1111/bdi.12653},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pettinelli - 2013 - A Cognitive Perspective on Emotion.pdf:pdf},
issn = {13995618},
journal = {Bipolar Disorders},
keywords = {a pleine conscience,a suscite,attention,attention de l,decentering,executive functions,l,metacognition,mindfulness,occident,principal enseignement de la,tradition bouddhiste},
number = {3},
pages = {180},
pmid = {29737633},
title = {{A cognitive perspective on pair programming}},
volume = {20},
year = {2018}
}
@article{Jain2018,
author = {Jain, Radhika and Muro, Jaime and Mohan, Kannan},
doi = {10.1111/bdi.12653},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pettinelli - 2013 - A Cognitive Perspective on Emotion.pdf:pdf},
issn = {13995618},
journal = {Bipolar Disorders},
keywords = {a pleine conscience,a suscite,attention,attention de l,decentering,executive functions,l,metacognition,mindfulness,occident,principal enseignement de la,tradition bouddhiste},
number = {3},
pages = {180},
pmid = {29737633},
title = {{A cognitive perspective on pair programming}},
volume = {20},
year = {2018}
}
@article{Ko2005,
abstract = {An essential aspect of programmers' work is the correctness of their code. This makes current HCI techniques ill-suited to analyze and design the programming systems that programmers use everyday, since these techniques focus more on problems with learnability and efficiency of use, and less on error-proneness. We propose a framework and methodology that focuses specifically on errors by supporting the description and identification of the causes of software errors in terms of chains of cognitive breakdowns. The framework is based on both old and new studies of programming, as well as general research on the mechanisms of human error. Our experiences using the framework and methodology to study the Alice programming system have directly inspired the design of several new programming tools and interfaces. This includes the Whyline debugging interface, which we have shown to reduce debugging time by a factor of 8 and help programmers get 40{\%} further through their tasks. We discuss the framework's and methodology's implications for programming system design, software engineering, and the psychology of programming. {\textcopyright} 2004 Elsevier Ltd. All rights reserved.},
author = {Ko, Andrew J. and Myers, Brad A.},
doi = {10.1016/j.jvlc.2004.08.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ko, Myers - 2005 - A framework and methodology for studying the causes of software errors in programming systems.pdf:pdf},
issn = {1045926X},
journal = {Journal of Visual Languages and Computing},
number = {1-2 SPEC. ISS.},
pages = {41--84},
title = {{A framework and methodology for studying the causes of software errors in programming systems}},
volume = {16},
year = {2005}
}
@article{Ko2005,
abstract = {An essential aspect of programmers' work is the correctness of their code. This makes current HCI techniques ill-suited to analyze and design the programming systems that programmers use everyday, since these techniques focus more on problems with learnability and efficiency of use, and less on error-proneness. We propose a framework and methodology that focuses specifically on errors by supporting the description and identification of the causes of software errors in terms of chains of cognitive breakdowns. The framework is based on both old and new studies of programming, as well as general research on the mechanisms of human error. Our experiences using the framework and methodology to study the Alice programming system have directly inspired the design of several new programming tools and interfaces. This includes the Whyline debugging interface, which we have shown to reduce debugging time by a factor of 8 and help programmers get 40{\%} further through their tasks. We discuss the framework's and methodology's implications for programming system design, software engineering, and the psychology of programming. {\textcopyright} 2004 Elsevier Ltd. All rights reserved.},
author = {Ko, Andrew J. and Myers, Brad A.},
doi = {10.1016/j.jvlc.2004.08.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ko, Myers - 2005 - A framework and methodology for studying the causes of software errors in programming systems.pdf:pdf},
issn = {1045926X},
journal = {Journal of Visual Languages and Computing},
number = {1-2 SPEC. ISS.},
pages = {41--84},
title = {{A framework and methodology for studying the causes of software errors in programming systems}},
volume = {16},
year = {2005}
}
@article{Ko2005,
abstract = {An essential aspect of programmers' work is the correctness of their code. This makes current HCI techniques ill-suited to analyze and design the programming systems that programmers use everyday, since these techniques focus more on problems with learnability and efficiency of use, and less on error-proneness. We propose a framework and methodology that focuses specifically on errors by supporting the description and identification of the causes of software errors in terms of chains of cognitive breakdowns. The framework is based on both old and new studies of programming, as well as general research on the mechanisms of human error. Our experiences using the framework and methodology to study the Alice programming system have directly inspired the design of several new programming tools and interfaces. This includes the Whyline debugging interface, which we have shown to reduce debugging time by a factor of 8 and help programmers get 40{\%} further through their tasks. We discuss the framework's and methodology's implications for programming system design, software engineering, and the psychology of programming. {\textcopyright} 2004 Elsevier Ltd. All rights reserved.},
author = {Ko, Andrew J. and Myers, Brad A.},
doi = {10.1016/j.jvlc.2004.08.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ko, Myers - 2005 - A framework and methodology for studying the causes of software errors in programming systems.pdf:pdf},
issn = {1045926X},
journal = {Journal of Visual Languages and Computing},
number = {1-2 SPEC. ISS.},
pages = {41--84},
title = {{A framework and methodology for studying the causes of software errors in programming systems}},
volume = {16},
year = {2005}
}
@article{Allen2006,
abstract = {The anchoring and adjustment heuristic has been shown to be a pervasive technique that people use in judgment, decision-making, and problem-solving tasks to reduce cognitive burden. However, reliance on the anchoring heuristic often leads to a systematic adjustment bias, in which people fail to make sufficient adjustments for a particular task. In a study involving 157 subjects from six universities, we examined the effect of this bias on SQL query formulation under varying levels of domain familiarity. Subjects were asked to formulate SQL queries to respond to six information requests in a familiar domain and six information requests in an unfamiliar domain. For some, subjects were also provided with sample queries that answered similar information requests. To adequately adjust a sample query, a subject needed to make both surface-structure modifications that required little cognitive effort and deep-structure modifications that required substantially more cognitive effort. We found that reuse can lead to poorer quality query results and greater overconfidence in the correctness of results. We also show that the strength of the adjustment bias depends on domain familiarity. This study demonstrates that anchoring and adjustment extends to an important area in information systems use that has not been previously studied. We also expand the notion of anchoring and adjustment to include the role of domain familiarity.},
author = {Allen, G.a and Parsons, J.b},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2006 - A little help can be a bad thing Anchoring and adjustment in adaptive query reuse.pdf:pdf},
journal = {ICIS 2006 Proceedings - Twenty Seventh International Conference on Information Systems},
pages = {673--694},
title = {{A little help can be a bad thing: Anchoring and adjustment in adaptive query reuse}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84870218824{\&}partnerID=40{\&}md5=ca2e1f49bef7a2a923a778d04494558a},
year = {2006}
}
@article{Allen2006,
abstract = {The anchoring and adjustment heuristic has been shown to be a pervasive technique that people use in judgment, decision-making, and problem-solving tasks to reduce cognitive burden. However, reliance on the anchoring heuristic often leads to a systematic adjustment bias, in which people fail to make sufficient adjustments for a particular task. In a study involving 157 subjects from six universities, we examined the effect of this bias on SQL query formulation under varying levels of domain familiarity. Subjects were asked to formulate SQL queries to respond to six information requests in a familiar domain and six information requests in an unfamiliar domain. For some, subjects were also provided with sample queries that answered similar information requests. To adequately adjust a sample query, a subject needed to make both surface-structure modifications that required little cognitive effort and deep-structure modifications that required substantially more cognitive effort. We found that reuse can lead to poorer quality query results and greater overconfidence in the correctness of results. We also show that the strength of the adjustment bias depends on domain familiarity. This study demonstrates that anchoring and adjustment extends to an important area in information systems use that has not been previously studied. We also expand the notion of anchoring and adjustment to include the role of domain familiarity.},
author = {Allen, G.a and Parsons, J.b},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2006 - A little help can be a bad thing Anchoring and adjustment in adaptive query reuse.pdf:pdf},
journal = {ICIS 2006 Proceedings - Twenty Seventh International Conference on Information Systems},
pages = {673--694},
title = {{A little help can be a bad thing: Anchoring and adjustment in adaptive query reuse}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84870218824{\&}partnerID=40{\&}md5=ca2e1f49bef7a2a923a778d04494558a},
year = {2006}
}
@article{Allen2006,
abstract = {The anchoring and adjustment heuristic has been shown to be a pervasive technique that people use in judgment, decision-making, and problem-solving tasks to reduce cognitive burden. However, reliance on the anchoring heuristic often leads to a systematic adjustment bias, in which people fail to make sufficient adjustments for a particular task. In a study involving 157 subjects from six universities, we examined the effect of this bias on SQL query formulation under varying levels of domain familiarity. Subjects were asked to formulate SQL queries to respond to six information requests in a familiar domain and six information requests in an unfamiliar domain. For some, subjects were also provided with sample queries that answered similar information requests. To adequately adjust a sample query, a subject needed to make both surface-structure modifications that required little cognitive effort and deep-structure modifications that required substantially more cognitive effort. We found that reuse can lead to poorer quality query results and greater overconfidence in the correctness of results. We also show that the strength of the adjustment bias depends on domain familiarity. This study demonstrates that anchoring and adjustment extends to an important area in information systems use that has not been previously studied. We also expand the notion of anchoring and adjustment to include the role of domain familiarity.},
author = {Allen, G.a and Parsons, J.b},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2006 - A little help can be a bad thing Anchoring and adjustment in adaptive query reuse.pdf:pdf},
journal = {ICIS 2006 Proceedings - Twenty Seventh International Conference on Information Systems},
pages = {673--694},
title = {{A little help can be a bad thing: Anchoring and adjustment in adaptive query reuse}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84870218824{\&}partnerID=40{\&}md5=ca2e1f49bef7a2a923a778d04494558a},
year = {2006}
}
@article{Parnas1985,
abstract = {Software Engineers have been searching for the ideal software development process: a process in which programs are derived from specifications in the same way that lemmas and theorems are derived from axioms in published proofs. After explaining why we can never achieve it, this paper describes such a process. The process is described in terms of a sequence of documents that should be produced on the way to producing the software. We show that such documents can serve several purposes. They provide a basis for preliminary design review, serve as reference material during the coding, and guide the maintenance programmer in his work. We discuss how these documents can be constructed using the same principles that should guide the software design. The resulting documentation is worth much more than the “afterthought” documentation that is usually produced. If we take the care to keep all of the documents up-to-date, we can create the appearance of a fully rational design process.},
author = {Parnas, David L. and Clements, Paul C.},
doi = {10.1007/3-540-15199-0_6},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/A{\_}rational{\_}design{\_}process{\_}How{\_}and{\_}why{\_}to{\_}fake{\_}it.pdf:pdf},
isbn = {9783540151999},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
number = {2},
pages = {80--100},
publisher = {IEEE},
title = {{A rational design process: How and why to fake it}},
volume = {186 LNCS},
year = {1985}
}
@article{Parnas1985,
abstract = {Software Engineers have been searching for the ideal software development process: a process in which programs are derived from specifications in the same way that lemmas and theorems are derived from axioms in published proofs. After explaining why we can never achieve it, this paper describes such a process. The process is described in terms of a sequence of documents that should be produced on the way to producing the software. We show that such documents can serve several purposes. They provide a basis for preliminary design review, serve as reference material during the coding, and guide the maintenance programmer in his work. We discuss how these documents can be constructed using the same principles that should guide the software design. The resulting documentation is worth much more than the “afterthought” documentation that is usually produced. If we take the care to keep all of the documents up-to-date, we can create the appearance of a fully rational design process.},
author = {Parnas, David L. and Clements, Paul C.},
doi = {10.1007/3-540-15199-0_6},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/A{\_}rational{\_}design{\_}process{\_}How{\_}and{\_}why{\_}to{\_}fake{\_}it.pdf:pdf},
isbn = {9783540151999},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
number = {2},
pages = {80--100},
publisher = {IEEE},
title = {{A rational design process: How and why to fake it}},
volume = {186 LNCS},
year = {1985}
}
@article{Tang2007,
abstract = {Large systems often have a long life-span and comprise many intricately related elements. The verification and maintenance of these systems require a good understanding of their architecture design. Design rationale can support such understanding but it is often undocumented or unstructured. The absence of design rationale makes it much more difficult to detect inconsistencies, omissions and conflicts in an architecture design. We address these issues by introducing a rationale-based architecture model that incorporates design rationale, design objects and their relationships. This model provides reasoning support to explain why design objects exist and what assumptions and constraints they depend on. Based on this model, we apply traceability techniques for change impact analysis and root-cause analysis, thereby allowing software architects to better understand and reason about an architecture design. In order to align closely with industry practices, we choose to represent the rationale-based architecture model in UML. We have implemented a tool-set to support the capture and the automated tracing of the model. As a case study, we apply this approach to an real-world electronic payment system. {\textcopyright} 2006 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Jin, Yan and Han, Jun},
doi = {10.1016/j.jss.2006.08.040},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121206002287-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Architecture design,Design rationale,Traceability},
number = {6},
pages = {918--934},
title = {{A rationale-based architecture model for design traceability and reasoning}},
volume = {80},
year = {2007}
}
@article{Tang2007,
abstract = {Large systems often have a long life-span and comprise many intricately related elements. The verification and maintenance of these systems require a good understanding of their architecture design. Design rationale can support such understanding but it is often undocumented or unstructured. The absence of design rationale makes it much more difficult to detect inconsistencies, omissions and conflicts in an architecture design. We address these issues by introducing a rationale-based architecture model that incorporates design rationale, design objects and their relationships. This model provides reasoning support to explain why design objects exist and what assumptions and constraints they depend on. Based on this model, we apply traceability techniques for change impact analysis and root-cause analysis, thereby allowing software architects to better understand and reason about an architecture design. In order to align closely with industry practices, we choose to represent the rationale-based architecture model in UML. We have implemented a tool-set to support the capture and the automated tracing of the model. As a case study, we apply this approach to an real-world electronic payment system. {\textcopyright} 2006 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Jin, Yan and Han, Jun},
doi = {10.1016/j.jss.2006.08.040},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121206002287-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Architecture design,Design rationale,Traceability},
number = {6},
pages = {918--934},
title = {{A rationale-based architecture model for design traceability and reasoning}},
volume = {80},
year = {2007}
}
@article{Tang2006,
abstract = {Many claims have been made about the consequences of not documenting design rationale. The general perception is that designers and architects usually do not fully understand the critical role of systematic use and capture of design rationale. However, there is to date little empirical evidence available on what design rationale mean to practitioners, how valuable they consider it, and how they use and document it during the design process. This paper reports a survey of practitioners to probe their perception of the value of design rationale and how they use and document the background knowledge related to their design decisions. Based on 81 valid responses, this study has discovered that practitioners recognize the importance of documenting design rationale and frequently use them to reason about their design choices. However, they have indicated barriers to the use and documentation of design rationale. Based on the findings, we conclude that further research is needed to develop methodology and tool support for design rationale capture and usage. Furthermore, we put forward some specific research questions about design rationale that could be further investigated to benefit industry practice. {\textcopyright} 2006 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Babar, Muhammad Ali and Gorton, Ian and Han, Jun},
doi = {10.1016/j.jss.2006.04.029},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121206001415-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design rationale,Software architecture,Survey},
number = {12},
pages = {1792--1804},
title = {{A survey of architecture design rationale}},
volume = {79},
year = {2006}
}
@article{Tang2006,
abstract = {Many claims have been made about the consequences of not documenting design rationale. The general perception is that designers and architects usually do not fully understand the critical role of systematic use and capture of design rationale. However, there is to date little empirical evidence available on what design rationale mean to practitioners, how valuable they consider it, and how they use and document it during the design process. This paper reports a survey of practitioners to probe their perception of the value of design rationale and how they use and document the background knowledge related to their design decisions. Based on 81 valid responses, this study has discovered that practitioners recognize the importance of documenting design rationale and frequently use them to reason about their design choices. However, they have indicated barriers to the use and documentation of design rationale. Based on the findings, we conclude that further research is needed to develop methodology and tool support for design rationale capture and usage. Furthermore, we put forward some specific research questions about design rationale that could be further investigated to benefit industry practice. {\textcopyright} 2006 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Babar, Muhammad Ali and Gorton, Ian and Han, Jun},
doi = {10.1016/j.jss.2006.04.029},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121206001415-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design rationale,Software architecture,Survey},
number = {12},
pages = {1792--1804},
title = {{A survey of architecture design rationale}},
volume = {79},
year = {2006}
}

@inproceedings{Chattopadhyay2020,
abstract = {Cognitive biases are hard-wired behaviors that influence developer actions and can set them on an incorrect course of action, necessitating backtracking. While researchers have found that cognitive biases occur in development tasks in controlled lab studies, we still don't know how these biases affect developers' everyday behavior. Without such an understanding, development tools and practices remain inadequate. To close this gap, we conducted a 2-part field study to examine the extent to which cognitive biases occur, the consequences of these biases on developer behavior, and the practices and tools that developers use to deal with these biases. About 70{\%} of observed actions that were reversed were associated with at least one cognitive bias. Further, even though developers recognized that biases frequently occur, they routinely are forced to deal with such issues with ad hoc processes and sub-optimal tool support. As one participant (IP12) lamented: There is no salvation! CCS CONCEPTS • Human-centered computing → Field studies; Empirical studies in collaborative and social computing; • Applied computing → Psychology. KEYWORDS cognitive bias, software development, field study, interviews ACM Reference Format:},
author = {Chattopadhyay, Souti and Nelson, Nicholas and Au, Audrey and Morales, Natalia and Sanchez, Christopher and Pandita, Rahul and Sarma, Anita},
booktitle = {International Conference on Software Engineering (ICSE)},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chattopadhyay et al. - 2020 - A Tale from the Trenches Cognitive Biases and Software Development.pdf:pdf},
isbn = {9781450371216},
keywords = {acm reference format,audrey au 1,cognitive bias,field study,interviews,natalia morales 1,nicholas nelson 1,software development,souti chattopadhyay 1},
pages = {654--665},
title = {{A Tale from the Trenches : Cognitive Biases and Software Development}},
year = {2020}
}

@article{Bhat2019,
abstract = {Software architecture can be seen as a set of architectural design decisions. These decisions, especially their rationale, play an important role in understanding software systems and constraints that are imposed on future design decisions. Documenting and managing these design decisions takes a lot of effort and is therefore often neglected by software architects. Following our vision to avoid explicit architectural knowledge management, we present an innovative tool used in industrial practise that is able to automatically recover design decisions from natural language text. The identified design decisions are then used to automatically derive further architectural knowledge, including related quality attributes and architectural elements to inhibit architectural erosion. By automatically enriching architectural knowledge and providing recommendations, the tool offers effective support for software architects in the decision-making process. The knowledge base of the tool is automatically kept up to date with information from different systems used by architects during the software development lifecycle process.},
author = {Bhat, Manoj and Tinnes, Christof and Shumaiev, Klym and Biesdorf, Andreas and Hohenstein, Uwe and Matthes, Florian},
doi = {10.1109/ICSA-C.2019.00035},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/08712348.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {Architectural decision support,Architectural design decision,Architecture Knowledge Management,Recommendation;,Tool},
pages = {158--161},
publisher = {IEEE},
title = {{ADeX: A Tool for Automatic Curation of Design Decision Knowledge for Architectural Decision Recommendations}},
year = {2019}
}
@article{Bhat2019,
abstract = {Software architecture can be seen as a set of architectural design decisions. These decisions, especially their rationale, play an important role in understanding software systems and constraints that are imposed on future design decisions. Documenting and managing these design decisions takes a lot of effort and is therefore often neglected by software architects. Following our vision to avoid explicit architectural knowledge management, we present an innovative tool used in industrial practise that is able to automatically recover design decisions from natural language text. The identified design decisions are then used to automatically derive further architectural knowledge, including related quality attributes and architectural elements to inhibit architectural erosion. By automatically enriching architectural knowledge and providing recommendations, the tool offers effective support for software architects in the decision-making process. The knowledge base of the tool is automatically kept up to date with information from different systems used by architects during the software development lifecycle process.},
author = {Bhat, Manoj and Tinnes, Christof and Shumaiev, Klym and Biesdorf, Andreas and Hohenstein, Uwe and Matthes, Florian},
doi = {10.1109/ICSA-C.2019.00035},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/08712348.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {Architectural decision support,Architectural design decision,Architecture Knowledge Management,Recommendation;,Tool},
pages = {158--161},
publisher = {IEEE},
title = {{ADeX: A Tool for Automatic Curation of Design Decision Knowledge for Architectural Decision Recommendations}},
year = {2019}
}
@inproceedings{Calikli2013b,
abstract = {Background: In our previous research, we built defect prediction models by using confirmation bias metrics. Due to confirmation bias developers tend to perform unit tests to make their programs run rather than breaking their code. This, in turn, leads to an increase in defect density. The performance of prediction model that is built using confirmation bias was as good as the models that were built with static code or churn metrics. Aims: Collection of confirmation bias metrics may result in partially "missing data" due to developers' tight schedules, evaluation apprehension and lack of motivation as well as staff turnover. In this paper, we employ Expectation-Maximization (EM) algorithm to impute missing confirmation bias data. Method: We used four datasets from two large-scale companies. For each dataset, we generated all possible missing data configurations and then employed Roweis' EM algorithm to impute missing data. We built defect prediction models using the imputed data. We compared the performances of our proposed models with the ones that used complete data. Results: In all datasets, when missing data percentage is less than or equal to 50{\%} on average, our proposed model that used imputed data yielded performance results that are comparable with the performance results of the models that used complete data. Conclusions: We may encounter the "missing data" problem in building defect prediction models. Our results in this study showed that instead of discarding missing or noisy data, in our case confirmation bias metrics, we can use effective techniques such as EM based imputation to overcome this problem.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 9th International Conference on Predictive Models in Software Engineering},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2013 - An algorithmic approach to missing data problem in modeling human aspects in software development.pdf:pdf},
isbn = {9781450320160},
title = {{An algorithmic approach to missing data problem in modeling human aspects in software development}},
year = {2013}
}
@inproceedings{Calikli2013b,
abstract = {Background: In our previous research, we built defect prediction models by using confirmation bias metrics. Due to confirmation bias developers tend to perform unit tests to make their programs run rather than breaking their code. This, in turn, leads to an increase in defect density. The performance of prediction model that is built using confirmation bias was as good as the models that were built with static code or churn metrics. Aims: Collection of confirmation bias metrics may result in partially "missing data" due to developers' tight schedules, evaluation apprehension and lack of motivation as well as staff turnover. In this paper, we employ Expectation-Maximization (EM) algorithm to impute missing confirmation bias data. Method: We used four datasets from two large-scale companies. For each dataset, we generated all possible missing data configurations and then employed Roweis' EM algorithm to impute missing data. We built defect prediction models using the imputed data. We compared the performances of our proposed models with the ones that used complete data. Results: In all datasets, when missing data percentage is less than or equal to 50{\%} on average, our proposed model that used imputed data yielded performance results that are comparable with the performance results of the models that used complete data. Conclusions: We may encounter the "missing data" problem in building defect prediction models. Our results in this study showed that instead of discarding missing or noisy data, in our case confirmation bias metrics, we can use effective techniques such as EM based imputation to overcome this problem.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 9th International Conference on Predictive Models in Software Engineering},
doi = {10.1145/2499393.2499398},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2013 - An algorithmic approach to missing data problem in modeling human aspects in software development.pdf:pdf},
isbn = {9781450320160},
title = {{An algorithmic approach to missing data problem in modeling human aspects in software development}},
year = {2013}
}
@inproceedings{Calikli2013b,
abstract = {Background: In our previous research, we built defect prediction models by using confirmation bias metrics. Due to confirmation bias developers tend to perform unit tests to make their programs run rather than breaking their code. This, in turn, leads to an increase in defect density. The performance of prediction model that is built using confirmation bias was as good as the models that were built with static code or churn metrics. Aims: Collection of confirmation bias metrics may result in partially "missing data" due to developers' tight schedules, evaluation apprehension and lack of motivation as well as staff turnover. In this paper, we employ Expectation-Maximization (EM) algorithm to impute missing confirmation bias data. Method: We used four datasets from two large-scale companies. For each dataset, we generated all possible missing data configurations and then employed Roweis' EM algorithm to impute missing data. We built defect prediction models using the imputed data. We compared the performances of our proposed models with the ones that used complete data. Results: In all datasets, when missing data percentage is less than or equal to 50{\%} on average, our proposed model that used imputed data yielded performance results that are comparable with the performance results of the models that used complete data. Conclusions: We may encounter the "missing data" problem in building defect prediction models. Our results in this study showed that instead of discarding missing or noisy data, in our case confirmation bias metrics, we can use effective techniques such as EM based imputation to overcome this problem.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 9th International Conference on Predictive Models in Software Engineering},
doi = {10.1145/2499393.2499398},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2013 - An algorithmic approach to missing data problem in modeling human aspects in software development.pdf:pdf},
isbn = {9781450320160},
title = {{An algorithmic approach to missing data problem in modeling human aspects in software development}},
year = {2013}
}
@inproceedings{Calikli2010c,
abstract = {In this paper, we present a preliminary analysis of factors such as company culture, education and experience, on confirmation bias levels of software developers and testers. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them and thus it has an effect on all software testing. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse and Arslan, Berna},
booktitle = {2010 ACM/IEEE 32nd International Conference on Software Engineering},
doi = {10.1145/1810295.1810326},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener, Arslan - 2010 - An analysis of the effects of company culture, education and experience on confirmation bias levels of s.pdf:pdf},
isbn = {9781605587196},
keywords = {cognitive biases,confirmation bias,software engineering},
title = {{An analysis of the effects of company culture, education and experience on confirmation bias levels of software developers and testers}},
year = {2010}
}
@inproceedings{Calikli2010c,
abstract = {In this paper, we present a preliminary analysis of factors such as company culture, education and experience, on confirmation bias levels of software developers and testers. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them and thus it has an effect on all software testing. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse and Arslan, Berna},
booktitle = {2010 ACM/IEEE 32nd International Conference on Software Engineering},
doi = {10.1145/1810295.1810326},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener, Arslan - 2010 - An analysis of the effects of company culture, education and experience on confirmation bias levels of s.pdf:pdf},
isbn = {9781605587196},
keywords = {cognitive biases,confirmation bias,software engineering},
title = {{An analysis of the effects of company culture, education and experience on confirmation bias levels of software developers and testers}},
year = {2010}
}
@inproceedings{Calikli2010c,
abstract = {In this paper, we present a preliminary analysis of factors such as company culture, education and experience, on confirmation bias levels of software developers and testers. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them and thus it has an effect on all software testing. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse and Arslan, Berna},
booktitle = {2010 ACM/IEEE 32nd International Conference on Software Engineering},
doi = {10.1145/1810295.1810326},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener, Arslan - 2010 - An analysis of the effects of company culture, education and experience on confirmation bias levels of s.pdf:pdf},
isbn = {9781605587196},
keywords = {cognitive biases,confirmation bias,software engineering},
title = {{An analysis of the effects of company culture, education and experience on confirmation bias levels of software developers and testers}},
year = {2010}
}
@article{Haugen2006,
abstract = {Group estimation of user stories is an important part of extreme programming (XP), used for both planning releases and iterations. Research has shown that although group estimation in many cases is superior to individual estimation, there is still room for improvement. For instance, group estimation performance can be reduced by dominant personalities and anchoring effects. Through the analysis of 101 user story estimates, made by an XP team for release planning, we investigate whether the introduction of the planning poker estimation process improved the estimation ability of the team. The results show that planning poker improved the team's estimation performance in most cases, but that it increased estimation error in the extreme cases},
author = {Haugen, Nils C.},
doi = {10.1109/AGILE.2006.16},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Haugen - 2006 - An empirical study of using planning poker for user story estimation.pdf:pdf},
isbn = {0769525628},
journal = {Proceedings - AGILE Conference, 2006},
pages = {23--31},
title = {{An empirical study of using planning poker for user story estimation}},
volume = {2006},
year = {2006}
}
@article{Haugen2006,
abstract = {Group estimation of user stories is an important part of extreme programming (XP), used for both planning releases and iterations. Research has shown that although group estimation in many cases is superior to individual estimation, there is still room for improvement. For instance, group estimation performance can be reduced by dominant personalities and anchoring effects. Through the analysis of 101 user story estimates, made by an XP team for release planning, we investigate whether the introduction of the planning poker estimation process improved the estimation ability of the team. The results show that planning poker improved the team's estimation performance in most cases, but that it increased estimation error in the extreme cases},
author = {Haugen, Nils C.},
doi = {10.1109/AGILE.2006.16},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Haugen - 2006 - An empirical study of using planning poker for user story estimation.pdf:pdf},
isbn = {0769525628},
journal = {Proceedings - AGILE Conference, 2006},
pages = {23--31},
title = {{An empirical study of using planning poker for user story estimation}},
volume = {2006},
year = {2006}
}
@article{Haugen2006,
abstract = {Group estimation of user stories is an important part of extreme programming (XP), used for both planning releases and iterations. Research has shown that although group estimation in many cases is superior to individual estimation, there is still room for improvement. For instance, group estimation performance can be reduced by dominant personalities and anchoring effects. Through the analysis of 101 user story estimates, made by an XP team for release planning, we investigate whether the introduction of the planning poker estimation process improved the estimation ability of the team. The results show that planning poker improved the team's estimation performance in most cases, but that it increased estimation error in the extreme cases},
author = {Haugen, Nils C.},
doi = {10.1109/AGILE.2006.16},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Haugen - 2006 - An empirical study of using planning poker for user story estimation.pdf:pdf},
isbn = {0769525628},
journal = {Proceedings - AGILE Conference, 2006},
pages = {23--31},
title = {{An empirical study of using planning poker for user story estimation}},
volume = {2006},
year = {2006}
}
@inproceedings{Shepperd2018a,
abstract = {CONTEXT: The role of expert judgement is essential in our quest to improve software project planning and execution. However, its accuracy is dependent on many factors, not least the avoidance of judgement biases, such as the anchoring bias, arising from being influenced by initial information, even when it's misleading or irrelevant. This strong effect is widely documented. OBJECTIVE: We aimed to replicate this anchoring bias using professionals and, novel in a software engineering context, explore de-biasing interventions through increasing knowledge and awareness of judgement biases. METHOD: We ran two series of experiments in company settings with a total of 410 software developers. Some developers took part in a workshop to heighten their awareness of a range of cognitive biases, including anchoring. Later, the anchoring bias was induced by presenting low or high productivity values, followed by the participants' estimates of their own project productivity. Our hypothesis was that the workshop would lead to reduced bias, i.e., work as a de-biasing intervention. RESULTS: The anchors had a large effect (robust Cohen's {\$}d=1.19{\$}) in influencing estimates. This was substantially reduced in those participants who attended the workshop (robust Cohen's {\$}d=0.72{\$}). The reduced bias related mainly to the high anchor. The de-biasing intervention also led to a threefold reduction in estimate variance. CONCLUSIONS: The impact of anchors upon judgement was substantial. Learning about judgement biases does appear capable of mitigating, although not removing, the anchoring bias. The positive effect of de-biasing through learning about biases suggests that it has value.},
author = {Shepperd, Martin and Mair, Carolyn and J{\o}rgensen, Magne},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
eprint = {1804.03919},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shepperd, Mair, J{\o}rgensen - 2018 - An Experimental Evaluation of a De-biasing Intervention for Professional Software Developers.pdf:pdf},
keywords = {cognitive bias,expert judgement,software effort estimation,software engineering experimentation},
title = {{An Experimental Evaluation of a De-biasing Intervention for Professional Software Developers}},
year = {2018}
}

@inproceedings{Shepperd2018,
abstract = {CONTEXT: The role of expert judgement is essential in our quest to improve software project planning and execution. However, its accuracy is dependent on many factors, not least the avoidance of judgement biases, such as the anchoring bias, arising from being influenced by initial information, even when it's misleading or irrelevant. This strong effect is widely documented. OBJECTIVE: We aimed to replicate this anchoring bias using professionals and, novel in a software engineering context, explore de-biasing interventions through increasing knowledge and awareness of judgement biases. METHOD: We ran two series of experiments in company settings with a total of 410 software developers. Some developers took part in a workshop to heighten their awareness of a range of cognitive biases, including anchoring. Later, the anchoring bias was induced by presenting low or high productivity values, followed by the participants' estimates of their own project productivity. Our hypothesis was that the workshop would lead to reduced bias, i.e., work as a de-biasing intervention. RESULTS: The anchors had a large effect (robust Cohen's {\$}d=1.19{\$}) in influencing estimates. This was substantially reduced in those participants who attended the workshop (robust Cohen's {\$}d=0.72{\$}). The reduced bias related mainly to the high anchor. The de-biasing intervention also led to a threefold reduction in estimate variance. CONCLUSIONS: The impact of anchors upon judgement was substantial. Learning about judgement biases does appear capable of mitigating, although not removing, the anchoring bias. The positive effect of de-biasing through learning about biases suggests that it has value.},
annote = {Tutaj eksperyment debiasuj{\c{a}}cy kt{\'{o}}ry si{\c{e}} uda{\l}. Chodzi{\l}o o szacowanie czasu wykonania zada{\'{n}} projektowych.},
author = {Shepperd, Martin and Mair, Carolyn and J{\o}rgensen, Magne},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shepperd, Mair, J{\o}rgensen - 2018 - An Experimental Evaluation of a De-biasing Intervention for Professional Software Developers.pdf:pdf},
keywords = {cognitive bias,expert judgement,software effort estimation,software engineering experimentation},
title = {{An Experimental Evaluation of a De-biasing Intervention for Professional Software Developers}},
year = {2018}
}
@article{Weinreich2015,
abstract = {Support for capturing architectural knowledge has been identified as an important research challenge. As the basis for an approach to recovering design decisions and capturing their rationale, we performed an expert survey in practice to gain insights into the different kinds, influence factors, and sources for design decisions and also into how they are currently captured in practice. The survey was conducted with 25 software architects, software team leads, and senior developers from 22 different companies in 10 different countries with more than 13 years of experience in software development on average. The survey confirms earlier work by other authors on design decision classification and influence factors, and also identifies additional kinds of decisions and influence factors not mentioned in previous work. In addition, we gained insight into the practice of capturing, the relative importance of different decisions and influence factors, and into potential sources for recovering decisions.},
author = {Weinreich, Rainer and Groher, Iris and Miesbauer, Cornelia},
doi = {10.1016/j.future.2014.12.002},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0167739X14002556-main.pdf:pdf},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Design decision classification,Design decision documentation,Design decision influence factors,Design decisions,Software architecture knowledge management},
pages = {145--160},
publisher = {Elsevier B.V.},
title = {{An expert survey on kinds, influence factors and documentation of design decisions in practice}},
url = {http://dx.doi.org/10.1016/j.future.2014.12.002},
volume = {47},
year = {2015}
}
@article{Weinreich2015,
abstract = {Support for capturing architectural knowledge has been identified as an important research challenge. As the basis for an approach to recovering design decisions and capturing their rationale, we performed an expert survey in practice to gain insights into the different kinds, influence factors, and sources for design decisions and also into how they are currently captured in practice. The survey was conducted with 25 software architects, software team leads, and senior developers from 22 different companies in 10 different countries with more than 13 years of experience in software development on average. The survey confirms earlier work by other authors on design decision classification and influence factors, and also identifies additional kinds of decisions and influence factors not mentioned in previous work. In addition, we gained insight into the practice of capturing, the relative importance of different decisions and influence factors, and into potential sources for recovering decisions.},
author = {Weinreich, Rainer and Groher, Iris and Miesbauer, Cornelia},
doi = {10.1016/j.future.2014.12.002},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0167739X14002556-main.pdf:pdf},
issn = {0167739X},
journal = {Future Generation Computer Systems},
keywords = {Design decision classification,Design decision documentation,Design decision influence factors,Design decisions,Software architecture knowledge management},
pages = {145--160},
publisher = {Elsevier B.V.},
title = {{An expert survey on kinds, influence factors and documentation of design decisions in practice}},
url = {http://dx.doi.org/10.1016/j.future.2014.12.002},
volume = {47},
year = {2015}
}
@article{Chakraborty2018,
abstract = {Requirements elicitation (RE) is a critical phase in information systems development (ISD), having significant impacts on software quality and costs. While it has remained a key topic of interest for IS researchers, a review of the existing literature suggests that there are very few studies examining how the social process associated with RE unfolds. Prior literature acknowledges that this process involves collaboration between RE participants (e.g., user-reps and systems analysts) where knowledge regarding the system requirements is shared, absorbed, and co- constructed, such that shared mental models of the requirements can form. However, collaboration and knowledge sharing within the RE process has been characterized as tenuous in the literature, given that the groups of RE participants bring very different kinds of knowledge into this activity, and trust among the two parties cannot be guaranteed at any point. Despite acknowledgement of the tenuous nature of RE, we are not aware of research that has attempted to present an integrated view of how collaboration, knowledge transfer, and trust influence the RE process. Using data from two different organizations and adopting a grounded approach, this study presents an integrative process model of RE. The study's findings suggest that RE is composed of four different collaborative states. The study elaborates on the four states, and identifies important factors that tend to trigger transitions from one state to another.},
author = {Chakraborty, Suranjan and Sarker, Saonee and Sarker, Suprateek},
doi = {10.17705/1jais.00225},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chakraborty, Sarker, Sarker - 2018 - An Exploration into the Process of Requirements Elicitation A Grounded Approach.pdf:pdf},
journal = {Journal of the Association for Information Systems},
keywords = {212-249,abduction,accepting senior editor,adapted grounded,april 2010,collaboration,grounded approach,issue 4,juhani iivari was the,knowledge transfer,pp,process model,requirements elicitation,theory methodology,user representative-analyst interaction,volume 11},
number = {4},
pages = {212--249},
title = {{An Exploration into the Process of Requirements Elicitation: A Grounded Approach}},
volume = {11},
year = {2018}
}
@article{Chakraborty2018,
abstract = {Requirements elicitation (RE) is a critical phase in information systems development (ISD), having significant impacts on software quality and costs. While it has remained a key topic of interest for IS researchers, a review of the existing literature suggests that there are very few studies examining how the social process associated with RE unfolds. Prior literature acknowledges that this process involves collaboration between RE participants (e.g., user-reps and systems analysts) where knowledge regarding the system requirements is shared, absorbed, and co- constructed, such that shared mental models of the requirements can form. However, collaboration and knowledge sharing within the RE process has been characterized as tenuous in the literature, given that the groups of RE participants bring very different kinds of knowledge into this activity, and trust among the two parties cannot be guaranteed at any point. Despite acknowledgement of the tenuous nature of RE, we are not aware of research that has attempted to present an integrated view of how collaboration, knowledge transfer, and trust influence the RE process. Using data from two different organizations and adopting a grounded approach, this study presents an integrative process model of RE. The study's findings suggest that RE is composed of four different collaborative states. The study elaborates on the four states, and identifies important factors that tend to trigger transitions from one state to another.},
author = {Chakraborty, Suranjan and Sarker, Saonee and Sarker, Suprateek},
doi = {10.17705/1jais.00225},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chakraborty, Sarker, Sarker - 2018 - An Exploration into the Process of Requirements Elicitation A Grounded Approach.pdf:pdf},
journal = {Journal of the Association for Information Systems},
keywords = {212-249,abduction,accepting senior editor,adapted grounded,april 2010,collaboration,grounded approach,issue 4,juhani iivari was the,knowledge transfer,pp,process model,requirements elicitation,theory methodology,user representative-analyst interaction,volume 11},
number = {4},
pages = {212--249},
title = {{An Exploration into the Process of Requirements Elicitation: A Grounded Approach}},
volume = {11},
year = {2018}
}
@article{Chakraborty2018,
abstract = {Requirements elicitation (RE) is a critical phase in information systems development (ISD), having significant impacts on software quality and costs. While it has remained a key topic of interest for IS researchers, a review of the existing literature suggests that there are very few studies examining how the social process associated with RE unfolds. Prior literature acknowledges that this process involves collaboration between RE participants (e.g., user-reps and systems analysts) where knowledge regarding the system requirements is shared, absorbed, and co- constructed, such that shared mental models of the requirements can form. However, collaboration and knowledge sharing within the RE process has been characterized as tenuous in the literature, given that the groups of RE participants bring very different kinds of knowledge into this activity, and trust among the two parties cannot be guaranteed at any point. Despite acknowledgement of the tenuous nature of RE, we are not aware of research that has attempted to present an integrated view of how collaboration, knowledge transfer, and trust influence the RE process. Using data from two different organizations and adopting a grounded approach, this study presents an integrative process model of RE. The study's findings suggest that RE is composed of four different collaborative states. The study elaborates on the four states, and identifies important factors that tend to trigger transitions from one state to another.},
author = {Chakraborty, Suranjan and Sarker, Saonee and Sarker, Suprateek},
doi = {10.17705/1jais.00225},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chakraborty, Sarker, Sarker - 2018 - An Exploration into the Process of Requirements Elicitation A Grounded Approach.pdf:pdf},
journal = {Journal of the Association for Information Systems},
keywords = {212-249,abduction,accepting senior editor,adapted grounded,april 2010,collaboration,grounded approach,issue 4,juhani iivari was the,knowledge transfer,pp,process model,requirements elicitation,theory methodology,user representative-analyst interaction,volume 11},
number = {4},
pages = {212--249},
title = {{An Exploration into the Process of Requirements Elicitation: A Grounded Approach}},
volume = {11},
year = {2018}
}
@techreport{Osses2018,
abstract = {Microservices are becoming a leading architectural choice in the service-oriented software industry. This approach proposes to develop applications as a suite of small services, each running on its own process and intercommunicating with lightweight mechanisms. Currently, there is still no clear perspective of emerging recurrent solutions (architectural patterns) or design decisions (architectural tactics) that influence microservices. This article describes an exploratory study, based on a systematic review, of academic literature related to architectural patterns and tactics proposed for microservices. The review yield 1067 initial studies, which reported: 44 architectural patterns of microservices; architectural tactics related to microservices dependent on other disciplines; and it was also found that most of architectural patterns and tactics are associated to five quality attributes: Scalability, flexibility, testability, performance, and elasticity. Added to that, it was noticed that most microservices are reported in articles related to DevOps and IoT. Finally, a new proposal of microservices pattern taxonomy is suggested.},
author = {Osses, Felipe and M{\'{a}}rquez, Gast{\'{o}}n and Astudillo, Hern{\'{a}}n},
booktitle = {Avances en Ingenieria de Software a Nivel Iberoamericano, CIbSE 2018},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Osses, M{\'{a}}rquez, Astudillo - Unknown - An Exploratory Study of Academic Architectural Tactics and Patterns in Microservices A systematic.pdf:pdf},
isbn = {9789584837547},
keywords = {Architectural patterns,Architectural tactics,Microservices,Systematic literature review,Taxonomy},
pages = {71--84},
title = {{An exploratory study of academic architectural tactics and patterns in microservices: A systematic literature review}},
url = {https://www.researchgate.net/publication/331022065},
year = {2018}
}
@techreport{Osses2018,
abstract = {Microservices are becoming a leading architectural choice in the service-oriented software industry. This approach proposes to develop applications as a suite of small services, each running on its own process and intercommunicating with lightweight mechanisms. Currently, there is still no clear perspective of emerging recurrent solutions (architectural patterns) or design decisions (architectural tactics) that influence microservices. This article describes an exploratory study, based on a systematic review, of academic literature related to architectural patterns and tactics proposed for microservices. The review yield 1067 initial studies, which reported: 44 architectural patterns of microservices; architectural tactics related to microservices dependent on other disciplines; and it was also found that most of architectural patterns and tactics are associated to five quality attributes: Scalability, flexibility, testability, performance, and elasticity. Added to that, it was noticed that most microservices are reported in articles related to DevOps and IoT. Finally, a new proposal of microservices pattern taxonomy is suggested.},
author = {Osses, Felipe and M{\'{a}}rquez, Gast{\'{o}}n and Astudillo, Hern{\'{a}}n},
booktitle = {Avances en Ingenieria de Software a Nivel Iberoamericano, CIbSE 2018},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Osses, M{\'{a}}rquez, Astudillo - Unknown - An Exploratory Study of Academic Architectural Tactics and Patterns in Microservices A systematic.pdf:pdf},
isbn = {9789584837547},
keywords = {Architectural patterns,Architectural tactics,Microservices,Systematic literature review,Taxonomy},
pages = {71--84},
title = {{An exploratory study of academic architectural tactics and patterns in microservices: A systematic literature review}},
url = {https://www.researchgate.net/publication/331022065},
year = {2018}
}
@inproceedings{Ingenier2014,
abstract = {Software architecture teams use verbal and graphical contributions to evaluate and select alternative design decisions. Usually the rationale behind these decisions is not recorded in the architecture document itself, and many contributions and rationale are lost to future reviewers and builders. This article describes Design Verbal Interventions Analysis (DVIA), which applies verbal protocol analysis to transcribed meetings logs to classify verbal interventions as either issue, orientation, mandatory orientation, request for clarification, explanation, disagreement, constraint, assessment, choice, or assumption. The approach is illustrated with a case study using transcribed meetings from undergraduate student teams designing a command-and-control center for a pan-Andean spatial project. The study shows that much of the interaction supports coevolution of problem understanding and solution framing, with designers engaged in simultaneous resolution of several design issues, following a cyclical structure. This strategy will allow to retrieve software architecture decisions from architecture team meetings.},
author = {Pedraza-Garcia, Gilberto and Astudillo, Hern{\'{a}}n and Correal, Dario},
booktitle = {Proceedings of the 2014 Latin American Computing Conference, CLEI 2014},
doi = {10.1109/CLEI.2014.6965159},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Analysis{\_}of{\_}design{\_}meetings{\_}for{\_}understanding{\_}software{\_}architecture{\_}decisions.pdf:pdf},
isbn = {9781479961306},
keywords = {Architectural decisions,Design Verbal Interventions Analysis,Design meetings,Software architecture design},
publisher = {IEEE},
title = {{Analysis of design meetings for understanding software architecture decisions}},
year = {2014}
}
@inproceedings{Ingenier2014,
abstract = {Software architecture teams use verbal and graphical contributions to evaluate and select alternative design decisions. Usually the rationale behind these decisions is not recorded in the architecture document itself, and many contributions and rationale are lost to future reviewers and builders. This article describes Design Verbal Interventions Analysis (DVIA), which applies verbal protocol analysis to transcribed meetings logs to classify verbal interventions as either issue, orientation, mandatory orientation, request for clarification, explanation, disagreement, constraint, assessment, choice, or assumption. The approach is illustrated with a case study using transcribed meetings from undergraduate student teams designing a command-and-control center for a pan-Andean spatial project. The study shows that much of the interaction supports coevolution of problem understanding and solution framing, with designers engaged in simultaneous resolution of several design issues, following a cyclical structure. This strategy will allow to retrieve software architecture decisions from architecture team meetings.},
author = {Pedraza-Garcia, Gilberto and Astudillo, Hern{\'{a}}n and Correal, Dario},
booktitle = {Proceedings of the 2014 Latin American Computing Conference, CLEI 2014},
doi = {10.1109/CLEI.2014.6965159},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Analysis{\_}of{\_}design{\_}meetings{\_}for{\_}understanding{\_}software{\_}architecture{\_}decisions.pdf:pdf},
isbn = {9781479961306},
keywords = {Architectural decisions,Design Verbal Interventions Analysis,Design meetings,Software architecture design},
publisher = {IEEE},
title = {{Analysis of design meetings for understanding software architecture decisions}},
year = {2014}
}
@article{Nurminen2008,
author = {Nurminen, Miika and Suominen, Panu and {\"{A}}yr{\"{a}}m{\"{o}}, Sami and K{\"{a}}rkk{\"{a}}inen, Tommi},
doi = {10.1108/13632540810854217.},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Vos, Vos, Westerhoudt - 2008 - This is an electronic reprint of the original article . This reprint may differ from the original in pagi.pdf:pdf},
isbn = {1363254081},
journal = {IASTED International Conference on Software Engineering (SE 2009)},
keywords = {conceptual model,decision support system,domain engineering,systems analysis,use case},
number = {Se},
title = {{Applying semiautomatic generation of conceptual models to decision support systems domain}},
year = {2008}
}
@article{Nurminen2008,
author = {Nurminen, Miika and Suominen, Panu and {\"{A}}yr{\"{a}}m{\"{o}}, Sami and K{\"{a}}rkk{\"{a}}inen, Tommi},
doi = {10.1108/13632540810854217.},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Vos, Vos, Westerhoudt - 2008 - This is an electronic reprint of the original article . This reprint may differ from the original in pagi.pdf:pdf},
isbn = {1363254081},
journal = {IASTED International Conference on Software Engineering (SE 2009)},
keywords = {conceptual model,decision support system,domain engineering,systems analysis,use case},
number = {Se},
title = {{Applying semiautomatic generation of conceptual models to decision support systems domain}},
year = {2008}
}
@article{Nurminen2008,
author = {Nurminen, Miika and Suominen, Panu and {\"{A}}yr{\"{a}}m{\"{o}}, Sami and K{\"{a}}rkk{\"{a}}inen, Tommi},
doi = {10.1108/13632540810854217.},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Vos, Vos, Westerhoudt - 2008 - This is an electronic reprint of the original article . This reprint may differ from the original in pagi.pdf:pdf},
isbn = {1363254081},
journal = {IASTED International Conference on Software Engineering (SE 2009)},
keywords = {conceptual model,decision support system,domain engineering,systems analysis,use case},
number = {Se},
title = {{Applying semiautomatic generation of conceptual models to decision support systems domain}},
year = {2008}
}
@article{Bi2018,
abstract = {The use of architecture and design patterns have impacts on the quality attributes of a system, and the application of patterns depend on design contexts. There are complex interdependent relationships between them. In this study, we explore how developers use architecture and design patterns with respect to quality attributes concerns and design contexts. We extracted pattern related posts from Stack Overflow and analyzed the architecture discussions. Our study reveals what contexts and quality attributes developers consider when using architecture patterns, and we have identified new and previously unknown relationships between these design elements. These findings can enhance developers' knowledge when they design with architecture patterns, quality attributes, and design contexts.},
author = {Bi, Tingting and Liang, Peng and Tang, Antony},
doi = {10.1109/APSEC.2018.00019},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bi2018apq.pdf:pdf},
isbn = {9781728119700},
issn = {15301362},
journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
keywords = {Architecture Pattern,Design Context,Empirical Study,Quality Attribute},
number = {61472286},
pages = {49--58},
title = {{Architecture Patterns, Quality Attributes, and Design Contexts: How Developers Design with Them}},
volume = {2018-Decem},
year = {2018}
}
@article{Bi2018,
abstract = {The use of architecture and design patterns have impacts on the quality attributes of a system, and the application of patterns depend on design contexts. There are complex interdependent relationships between them. In this study, we explore how developers use architecture and design patterns with respect to quality attributes concerns and design contexts. We extracted pattern related posts from Stack Overflow and analyzed the architecture discussions. Our study reveals what contexts and quality attributes developers consider when using architecture patterns, and we have identified new and previously unknown relationships between these design elements. These findings can enhance developers' knowledge when they design with architecture patterns, quality attributes, and design contexts.},
author = {Bi, Tingting and Liang, Peng and Tang, Antony},
doi = {10.1109/APSEC.2018.00019},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bi2018apq.pdf:pdf},
isbn = {9781728119700},
issn = {15301362},
journal = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
keywords = {Architecture Pattern,Design Context,Empirical Study,Quality Attribute},
number = {61472286},
pages = {49--58},
title = {{Architecture Patterns, Quality Attributes, and Design Contexts: How Developers Design with Them}},
volume = {2018-Decem},
year = {2018}
}
@article{Carver2021,
abstract = {The Practioners' Digest department in this issue of IEEE Software covers two topics: the behavioral science of software engineering and diversity in software engineering (this issue's theme) and includes papers from the 42nd International Conference on Software Engineering (ICSE20), 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME19), 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE20), Empirical Software Engineering and Measurement 2020 (ESEM20), and Association for Computing Machinery Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE20). Feedback or suggestions are welcome. In addition, if you try or adopt any of the practices included in this article, please send me and the authors of the paper(s) a note about your experiences.},
author = {Carver, Jeffrey C. and Muccini, Henry and Penzenstadler, Birgit and Prikladnicki, Rafael and Serebrenik, Alexander and Zimmermann, Thomas},
doi = {10.1109/MS.2020.3042683},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09354400.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {2},
pages = {107--112},
title = {{Behavioral science and diversity in software engineering}},
volume = {38},
year = {2021}
}
@article{Carver2021,
abstract = {The Practioners' Digest department in this issue of IEEE Software covers two topics: the behavioral science of software engineering and diversity in software engineering (this issue's theme) and includes papers from the 42nd International Conference on Software Engineering (ICSE20), 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME19), 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE20), Empirical Software Engineering and Measurement 2020 (ESEM20), and Association for Computing Machinery Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE20). Feedback or suggestions are welcome. In addition, if you try or adopt any of the practices included in this article, please send me and the authors of the paper(s) a note about your experiences.},
author = {Carver, Jeffrey C. and Muccini, Henry and Penzenstadler, Birgit and Prikladnicki, Rafael and Serebrenik, Alexander and Zimmermann, Thomas},
doi = {10.1109/MS.2020.3042683},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09354400.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {2},
pages = {107--112},
title = {{Behavioral science and diversity in software engineering}},
volume = {38},
year = {2021}
}
@article{Carver2021,
abstract = {The Practioners' Digest department in this issue of IEEE Software covers two topics: the behavioral science of software engineering and diversity in software engineering (this issue's theme) and includes papers from the 42nd International Conference on Software Engineering (ICSE20), 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME19), 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE20), Empirical Software Engineering and Measurement 2020 (ESEM20), and Association for Computing Machinery Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE20). Feedback or suggestions are welcome. In addition, if you try or adopt any of the practices included in this article, please send me and the authors of the paper(s) a note about your experiences.},
author = {Carver, Jeffrey C. and Muccini, Henry and Penzenstadler, Birgit and Prikladnicki, Rafael and Serebrenik, Alexander and Zimmermann, Thomas},
doi = {10.1109/MS.2020.3042683},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09354400.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {2},
pages = {107--112},
title = {{Behavioral science and diversity in software engineering}},
volume = {38},
year = {2021}
}
@article{Jørgensen2004,
abstract = {The uncertainty of a software development effort estimate can be indicated through a prediction interval (PI), i.e., the estimated minimum and maximum effort corresponding to a specific confidence level. For example, a project manager may be "90{\%} confident" or believe that is it "very likely" that the effort required to complete a project will be between 8000 and 12,000 work-hours. This paper describes results from four studies (Studies A-D) on human judgement (expert) based PIs of software development effort. Study A examines the accuracy of the PIs in real software projects. The results suggest that the PIs were generally much too narrow to reflect the chosen level of confidence, i.e., that there was a strong over-confidence. Studies B-D try to understand the reasons for the observed over-confidence. Study B examines the possibility that the over-confidence is related to type of experience or estimation process. Study C examines the possibility that the concept of confidence level is difficult to interpret for software estimators. Finally, Study D examines the possibility that there are unfortunate feedback mechanisms that reward over-confidence. {\textcopyright} 2003 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Teigen, Karl Halvor and Mol{\o}kken, Kjetil},
doi = {10.1016/S0164-1212(02)00160-7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Teigen, Mol{\o}kken - 2004 - Better sure than safe Over-confidence in judgement based software development effort prediction int.pdf:pdf},
isbn = {4792433355},
issn = {01641212},
journal = {Journal of Systems and Software},
number = {1-2},
pages = {79--93},
title = {{Better sure than safe? Over-confidence in judgement based software development effort prediction intervals}},
volume = {70},
year = {2004}
}
@article{Jørgensen2004,
abstract = {The uncertainty of a software development effort estimate can be indicated through a prediction interval (PI), i.e., the estimated minimum and maximum effort corresponding to a specific confidence level. For example, a project manager may be "90{\%} confident" or believe that is it "very likely" that the effort required to complete a project will be between 8000 and 12,000 work-hours. This paper describes results from four studies (Studies A-D) on human judgement (expert) based PIs of software development effort. Study A examines the accuracy of the PIs in real software projects. The results suggest that the PIs were generally much too narrow to reflect the chosen level of confidence, i.e., that there was a strong over-confidence. Studies B-D try to understand the reasons for the observed over-confidence. Study B examines the possibility that the over-confidence is related to type of experience or estimation process. Study C examines the possibility that the concept of confidence level is difficult to interpret for software estimators. Finally, Study D examines the possibility that there are unfortunate feedback mechanisms that reward over-confidence. {\textcopyright} 2003 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Teigen, Karl Halvor and Mol{\o}kken, Kjetil},
doi = {10.1016/S0164-1212(02)00160-7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Teigen, Mol{\o}kken - 2004 - Better sure than safe Over-confidence in judgement based software development effort prediction int.pdf:pdf},
isbn = {4792433355},
issn = {01641212},
journal = {Journal of Systems and Software},
number = {1-2},
pages = {79--93},
title = {{Better sure than safe? Over-confidence in judgement based software development effort prediction intervals}},
volume = {70},
year = {2004}
}
@article{Becker2020,
abstract = {Behavioral research can provide important insights for SE practices. But in performing it, many studies of SE are committing a normative fallacy - they misappropriate normative and prescriptive theories for descriptive purposes. The evidence from reviews of empirical studies of decision making in SE suggests that the normative fallacy may is common. This article draws on cognitive psychology and behavioral economics to explains this fallacy. Because data collection is framed by narrow and empirically invalid theories, flawed assumptions baked into those theories lead to misleading interpretations of observed behaviors and ultimately, to invalid conclusions and flawed recommendations. Researchers should be careful not to rely solely on engineering methods to explain what people do when they do engineering. Instead, insist that descriptive research be based on validated descriptive theories, listen carefully to skilled practitioners, and only rely on validated findings to prescribe what they should do.},
archivePrefix = {arXiv},
arxivId = {2005.03084},
author = {Becker, Christoph},
eprint = {2005.03084},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2005.03084.pdf:pdf},
title = {{Beware the Normative Fallacy}},
url = {http://arxiv.org/abs/2005.03084},
year = {2020}
}
@article{Jørgensen2004,
abstract = {The uncertainty of a software development effort estimate can be indicated through a prediction interval (PI), i.e., the estimated minimum and maximum effort corresponding to a specific confidence level. For example, a project manager may be "90{\%} confident" or believe that is it "very likely" that the effort required to complete a project will be between 8000 and 12,000 work-hours. This paper describes results from four studies (Studies A-D) on human judgement (expert) based PIs of software development effort. Study A examines the accuracy of the PIs in real software projects. The results suggest that the PIs were generally much too narrow to reflect the chosen level of confidence, i.e., that there was a strong over-confidence. Studies B-D try to understand the reasons for the observed over-confidence. Study B examines the possibility that the over-confidence is related to type of experience or estimation process. Study C examines the possibility that the concept of confidence level is difficult to interpret for software estimators. Finally, Study D examines the possibility that there are unfortunate feedback mechanisms that reward over-confidence. {\textcopyright} 2003 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Teigen, Karl Halvor and Mol{\o}kken, Kjetil},
doi = {10.1016/S0164-1212(02)00160-7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Teigen, Mol{\o}kken - 2004 - Better sure than safe Over-confidence in judgement based software development effort prediction int.pdf:pdf},
isbn = {4792433355},
issn = {01641212},
journal = {Journal of Systems and Software},
number = {1-2},
pages = {79--93},
title = {{Better sure than safe? Over-confidence in judgement based software development effort prediction intervals}},
volume = {70},
year = {2004}
}
@article{Becker2020,
abstract = {Behavioral research can provide important insights for SE practices. But in performing it, many studies of SE are committing a normative fallacy - they misappropriate normative and prescriptive theories for descriptive purposes. The evidence from reviews of empirical studies of decision making in SE suggests that the normative fallacy may is common. This article draws on cognitive psychology and behavioral economics to explains this fallacy. Because data collection is framed by narrow and empirically invalid theories, flawed assumptions baked into those theories lead to misleading interpretations of observed behaviors and ultimately, to invalid conclusions and flawed recommendations. Researchers should be careful not to rely solely on engineering methods to explain what people do when they do engineering. Instead, insist that descriptive research be based on validated descriptive theories, listen carefully to skilled practitioners, and only rely on validated findings to prescribe what they should do.},
archivePrefix = {arXiv},
arxivId = {2005.03084},
author = {Becker, Christoph},
eprint = {2005.03084},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2005.03084.pdf:pdf},
title = {{Beware the Normative Fallacy}},
url = {http://arxiv.org/abs/2005.03084},
year = {2020}
}
@article{Shmueli2016,
abstract = {{\textcopyright} 2015 Wiley Publishing LtdThis study empirically tackles the question of whether taking an outside-view approach, recommended for reducing the irrational behaviours associated with the planning fallacy, can also reduce the time underestimation, scope overload and over-requirement problems plaguing planning decisions in software development. Drawing on descriptive behavioural decision theory, this study examines whether the planning fallacy, a cognitive bias referring to the tendency of people to underestimate costs and overestimate benefits in evaluating a task to be performed, can provide a theoretical platform for mitigating irrational behaviours in the planning of software development projects. In particular, we argue that taking an outside-view approach in planning decisions for software development may have the same mitigating effects on time underestimation, scope overload and over-requirement it has been shown to have on cost underestimation and benefit overestimation. In an experiment investigating this argument, participants were randomly assigned to four groups by manipulating two outside-view mechanisms: reference information about past completion times (present/absent) and role perspective (developer/consultant). After being presented with a to-be-developed software project, they were requested to estimate development times of various software features and to recommend which features to include within project scope given a fixed duration for the entire project. The results confirm that the three problems of time underestimation, scope overload and over-requirement are manifested in planning decisions for fixed-schedule software development projects. Moreover, the results show that these problems are mitigated, yet not eliminated, by presenting reference information about past completion times and by having a consultant role.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1111/isj.12091},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2016 - Can the outside-view approach improve planning decisions in software development projects.pdf:pdf},
issn = {13652575},
journal = {Information Systems Journal},
keywords = {experiment,inside view,outside view,over-requirement,planning decisions,planning fallacy,reference information,role perspective,scope overload,software development,time underestimation},
number = {4},
pages = {395--418},
title = {{Can the outside-view approach improve planning decisions in software development projects?}},
volume = {26},
year = {2016}
}
@article{Shmueli2016,
abstract = {{\textcopyright} 2015 Wiley Publishing LtdThis study empirically tackles the question of whether taking an outside-view approach, recommended for reducing the irrational behaviours associated with the planning fallacy, can also reduce the time underestimation, scope overload and over-requirement problems plaguing planning decisions in software development. Drawing on descriptive behavioural decision theory, this study examines whether the planning fallacy, a cognitive bias referring to the tendency of people to underestimate costs and overestimate benefits in evaluating a task to be performed, can provide a theoretical platform for mitigating irrational behaviours in the planning of software development projects. In particular, we argue that taking an outside-view approach in planning decisions for software development may have the same mitigating effects on time underestimation, scope overload and over-requirement it has been shown to have on cost underestimation and benefit overestimation. In an experiment investigating this argument, participants were randomly assigned to four groups by manipulating two outside-view mechanisms: reference information about past completion times (present/absent) and role perspective (developer/consultant). After being presented with a to-be-developed software project, they were requested to estimate development times of various software features and to recommend which features to include within project scope given a fixed duration for the entire project. The results confirm that the three problems of time underestimation, scope overload and over-requirement are manifested in planning decisions for fixed-schedule software development projects. Moreover, the results show that these problems are mitigated, yet not eliminated, by presenting reference information about past completion times and by having a consultant role.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1111/isj.12091},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2016 - Can the outside-view approach improve planning decisions in software development projects.pdf:pdf},
issn = {13652575},
journal = {Information Systems Journal},
keywords = {experiment,inside view,outside view,over-requirement,planning decisions,planning fallacy,reference information,role perspective,scope overload,software development,time underestimation},
number = {4},
pages = {395--418},
title = {{Can the outside-view approach improve planning decisions in software development projects?}},
volume = {26},
year = {2016}
}
@article{Shmueli2016,
abstract = {{\textcopyright} 2015 Wiley Publishing LtdThis study empirically tackles the question of whether taking an outside-view approach, recommended for reducing the irrational behaviours associated with the planning fallacy, can also reduce the time underestimation, scope overload and over-requirement problems plaguing planning decisions in software development. Drawing on descriptive behavioural decision theory, this study examines whether the planning fallacy, a cognitive bias referring to the tendency of people to underestimate costs and overestimate benefits in evaluating a task to be performed, can provide a theoretical platform for mitigating irrational behaviours in the planning of software development projects. In particular, we argue that taking an outside-view approach in planning decisions for software development may have the same mitigating effects on time underestimation, scope overload and over-requirement it has been shown to have on cost underestimation and benefit overestimation. In an experiment investigating this argument, participants were randomly assigned to four groups by manipulating two outside-view mechanisms: reference information about past completion times (present/absent) and role perspective (developer/consultant). After being presented with a to-be-developed software project, they were requested to estimate development times of various software features and to recommend which features to include within project scope given a fixed duration for the entire project. The results confirm that the three problems of time underestimation, scope overload and over-requirement are manifested in planning decisions for fixed-schedule software development projects. Moreover, the results show that these problems are mitigated, yet not eliminated, by presenting reference information about past completion times and by having a consultant role.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1111/isj.12091},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2016 - Can the outside-view approach improve planning decisions in software development projects.pdf:pdf},
issn = {13652575},
journal = {Information Systems Journal},
keywords = {experiment,inside view,outside view,over-requirement,planning decisions,planning fallacy,reference information,role perspective,scope overload,software development,time underestimation},
number = {4},
pages = {395--418},
title = {{Can the outside-view approach improve planning decisions in software development projects?}},
volume = {26},
year = {2016}
}
@article{Lee2007,
abstract = {Software architecture is composed of the design and its set of design decisions. The documentation of design decisions is important in capturing architectural knowledge, but current methods of capture are tedious processes. A new method is being proposed that would reduce the amount of work needed to capture design decisions while increasing traceability by acting as a memory-aid. We propose an empirical validation of the approach by evaluating a tool that implements the method. {\textcopyright}2007 IEEE.},
author = {Lee, Larix and Kruchten, Philippe},
doi = {10.1109/CCECE.2007.176},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Capturing{\_}Software{\_}Architectural{\_}Design{\_}Decisions.pdf:pdf},
isbn = {1424410215},
issn = {08407789},
journal = {Canadian Conference on Electrical and Computer Engineering},
keywords = {Architectural knowledge,Decision capture,Design decision,Design rationale,Memory-aid,Software architecture,Software development},
pages = {686--689},
title = {{Capturing software architectural design decisions}},
year = {2007}
}
@article{Lee2007,
abstract = {Software architecture is composed of the design and its set of design decisions. The documentation of design decisions is important in capturing architectural knowledge, but current methods of capture are tedious processes. A new method is being proposed that would reduce the amount of work needed to capture design decisions while increasing traceability by acting as a memory-aid. We propose an empirical validation of the approach by evaluating a tool that implements the method. {\textcopyright}2007 IEEE.},
author = {Lee, Larix and Kruchten, Philippe},
doi = {10.1109/CCECE.2007.176},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Capturing{\_}Software{\_}Architectural{\_}Design{\_}Decisions.pdf:pdf},
isbn = {1424410215},
issn = {08407789},
journal = {Canadian Conference on Electrical and Computer Engineering},
keywords = {Architectural knowledge,Decision capture,Design decision,Design rationale,Memory-aid,Software architecture,Software development},
pages = {686--689},
title = {{Capturing software architectural design decisions}},
year = {2007}
}
@book{Runeson2012a,
abstract = {Based on their own experiences of in-depth case studies of software projects in international corporations, in this book the authors present detailed practical guidelines on the preparation, conduct, design and reporting of case studies of software engineering. This is the first software engineering specific book on the case study research method. {\textcopyright} 2012 John Wiley {\&} Sons, Inc.},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
booktitle = {Case Study Research in Software Engineering: Guidelines and Examples},
doi = {10.1002/9781118181034},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson - 2012 - Case study research in software engineering guidelines and examples.pdf:pdf},
isbn = {9781118104354},
pages = {237},
publisher = {Wiley},
title = {{Case Study Research in Software Engineering: Guidelines and Examples}},
year = {2012}
}
@book{Runeson2012,
abstract = {Based on their own experiences of in-depth case studies of software projects in international corporations, in this book the authors present detailed practical guidelines on the preparation, conduct, design and reporting of case studies of software engineering. This is the first software engineering specific book on the case study research method. {\textcopyright} 2012 John Wiley {\&} Sons, Inc.},
annote = {St{\c{a}}d metodyka},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
booktitle = {Case Study Research in Software Engineering: Guidelines and Examples},
doi = {10.1002/9781118181034},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson - 2012 - Case study research in software engineering guidelines and examples.pdf:pdf},
isbn = {9781118104354},
keywords = {IT eBooks},
title = {{Case Study Research in Software Engineering: Guidelines and Examples}},
url = {www.wiley.com.},
year = {2012}
}
@book{Runeson2012,
abstract = {Based on their own experiences of in-depth case studies of software projects in international corporations, in this book the authors present detailed practical guidelines on the preparation, conduct, design and reporting of case studies of software engineering. This is the first software engineering specific book on the case study research method. {\textcopyright} 2012 John Wiley {\&} Sons, Inc.},
annote = {St{\c{a}}d metodyka},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
booktitle = {Case Study Research in Software Engineering: Guidelines and Examples},
doi = {10.1002/9781118181034},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson - 2012 - Case study research in software engineering guidelines and examples.pdf:pdf},
isbn = {9781118104354},
keywords = {IT eBooks},
title = {{Case Study Research in Software Engineering: Guidelines and Examples}},
url = {www.wiley.com.},
year = {2012}
}
@book{Runeson2012a,
abstract = {Based on their own experiences of in-depth case studies of software projects in international corporations, in this book the authors present detailed practical guidelines on the preparation, conduct, design and reporting of case studies of software engineering. This is the first software engineering specific book on the case study research method. {\textcopyright} 2012 John Wiley {\&} Sons, Inc.},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
booktitle = {Case Study Research in Software Engineering: Guidelines and Examples},
doi = {10.1002/9781118181034},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson - 2012 - Case study research in software engineering guidelines and examples.pdf:pdf},
isbn = {9781118104354},
pages = {237},
publisher = {Wiley},
title = {{Case Study Research in Software Engineering: Guidelines and Examples}},
year = {2012}
}
@article{Miesbauer2013,
abstract = {Support for capturing architectural knowledge has been identified as an important research challenge. As the basis for an approach for recovering design decisions and capturing their rationale we have performed an expert survey in practice to gain insights into the different kinds, influence factors, and sources for design decisions and also on how they are currently captured in practice. The survey has been performed with software architects, software team leads, and senior developers from six different companies in Austria with more than 10 years of experience in software development on average. The survey confirms earlier work by other authors on design decision classification and influence factors but also identifies additional kinds of decisions and influence factors not mentioned in this previous work. In addition, we gained insight into the practice of capturing, the relative importance of different decisions and influence factors, and on potential sources for recovering decisions. {\textcopyright} 2013 Springer-Verlag.},
author = {Miesbauer, Cornelia and Weinreich, Rainer},
doi = {10.1007/978-3-642-39031-9_12},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/978-3-642-39031-9{\_}12.pdf:pdf},
isbn = {9783642390302},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Capturing Design Decisions,Design Decision Classification,Design Decisions,Software Architecture Knowledge Management},
pages = {130--145},
title = {{Classification of design decisions - An expert survey in practice}},
volume = {7957 LNCS},
year = {2013}
}
@article{Miesbauer2013,
abstract = {Support for capturing architectural knowledge has been identified as an important research challenge. As the basis for an approach for recovering design decisions and capturing their rationale we have performed an expert survey in practice to gain insights into the different kinds, influence factors, and sources for design decisions and also on how they are currently captured in practice. The survey has been performed with software architects, software team leads, and senior developers from six different companies in Austria with more than 10 years of experience in software development on average. The survey confirms earlier work by other authors on design decision classification and influence factors but also identifies additional kinds of decisions and influence factors not mentioned in this previous work. In addition, we gained insight into the practice of capturing, the relative importance of different decisions and influence factors, and on potential sources for recovering decisions. {\textcopyright} 2013 Springer-Verlag.},
author = {Miesbauer, Cornelia and Weinreich, Rainer},
doi = {10.1007/978-3-642-39031-9_12},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/978-3-642-39031-9{\_}12.pdf:pdf},
isbn = {9783642390302},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Capturing Design Decisions,Design Decision Classification,Design Decisions,Software Architecture Knowledge Management},
pages = {130--145},
title = {{Classification of design decisions - An expert survey in practice}},
volume = {7957 LNCS},
year = {2013}
}
@article{Stacy1995a,
author = {Stacy, Webb and Macmillan, Jean},
doi = {10.1145/203241.203256},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Per Runeson, Martin Host - 2012 - in Software Engineering in Software.pdf:pdf},
isbn = {9781118104354},
issn = {15577317},
journal = {Communications of the ACM},
number = {6},
pages = {57--63},
title = {{Cognitive Bias in Software Engineering}},
volume = {38},
year = {1995}
}
@article{Stacy1995a,
author = {Stacy, Webb and Macmillan, Jean},
doi = {10.1145/203241.203256},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Per Runeson, Martin Host - 2012 - in Software Engineering in Software.pdf:pdf},
isbn = {9781118104354},
issn = {15577317},
journal = {Communications of the ACM},
number = {6},
pages = {57--63},
title = {{Cognitive Bias in Software Engineering}},
volume = {38},
year = {1995}
}
@article{Stacy1995a,
author = {Stacy, Webb and Macmillan, Jean},
doi = {10.1145/203241.203256},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Per Runeson, Martin Host - 2012 - in Software Engineering in Software.pdf:pdf},
isbn = {9781118104354},
issn = {15577317},
journal = {Communications of the ACM},
number = {6},
pages = {57--63},
title = {{Cognitive Bias in Software Engineering}},
volume = {38},
year = {1995}
}
@article{Stacy1995,
annote = {Najwi{\c{e}}kszy staro{\'{c}} sugeruj{\c{a}}cy {\.{z}}e biasy/b{\l}{\c{e}}dy poznawcze wp{\l}ywaj{\c{a}} na In{\.{z}}ynier{\c{e}} Oprogramowania. Bardziej do cel{\'{o}}w historycznych ;)},
author = {Stacy, Webb and Macmillan, Jean},
doi = {10.1145/203241.203256},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Per Runeson, Martin Host - 2012 - in Software Engineering in Software.pdf:pdf},
isbn = {9781118104354},
issn = {15577317},
journal = {Communications of the ACM},
number = {6},
pages = {57--63},
title = {{Cognitive Bias in Software Engineering}},
volume = {38},
year = {1995}
}
@article{Mohanani2018a,
abstract = {One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering (SE) research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state of the art research and provide guidelines for future research and practice. Focusing on bias antecedents, effects and mitigation techniques, we identified 67 articles, which investigated 47 cognitive biases, published between 1990 and 2016. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work.},
author = {Mohanani, Rahul and Salman, Iflaah and Turhan, Burak and Rodriguez, Pilar and Ralph, Paul},
doi = {10.1109/TSE.2018.2877759},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(2).pdf:pdf;:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(4).pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Antecedents of cognitive bias,cognitive bias,debiasing,effects of cognitive bias,software engineering,systematic mapping},
number = {c},
title = {{Cognitive Biases in Software Engineering: A Systematic Mapping Study}},
volume = {5589},
year = {2018}
}
@article{Mohanani2018a,
abstract = {One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering (SE) research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state of the art research and provide guidelines for future research and practice. Focusing on bias antecedents, effects and mitigation techniques, we identified 67 articles, which investigated 47 cognitive biases, published between 1990 and 2016. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work.},
author = {Mohanani, Rahul and Salman, Iflaah and Turhan, Burak and Rodriguez, Pilar and Ralph, Paul},
doi = {10.1109/TSE.2018.2877759},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(2).pdf:pdf;:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(4).pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Antecedents of cognitive bias,cognitive bias,debiasing,effects of cognitive bias,software engineering,systematic mapping},
number = {c},
title = {{Cognitive Biases in Software Engineering: A Systematic Mapping Study}},
volume = {5589},
year = {2018}
}
@article{Mohanani2018a,
abstract = {One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering (SE) research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state of the art research and provide guidelines for future research and practice. Focusing on bias antecedents, effects and mitigation techniques, we identified 67 articles, which investigated 47 cognitive biases, published between 1990 and 2016. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work.},
author = {Mohanani, Rahul and Salman, Iflaah and Turhan, Burak and Rodriguez, Pilar and Ralph, Paul},
doi = {10.1109/TSE.2018.2877759},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(2).pdf:pdf;:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(4).pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Antecedents of cognitive bias,cognitive bias,debiasing,effects of cognitive bias,software engineering,systematic mapping},
number = {c},
title = {{Cognitive Biases in Software Engineering: A Systematic Mapping Study}},
volume = {5589},
year = {2018}
}
@article{Mohanani2018,
abstract = {One source of software project challenges and failures is the systematic errors introduced by human cognitive biases. Although extensively explored in cognitive psychology, investigations concerning cognitive biases have only recently gained popularity in software engineering (SE) research. This paper therefore systematically maps, aggregates and synthesizes the literature on cognitive biases in software engineering to generate a comprehensive body of knowledge, understand state of the art research and provide guidelines for future research and practice. Focusing on bias antecedents, effects and mitigation techniques, we identified 67 articles, which investigated 47 cognitive biases, published between 1990 and 2016. Despite strong and increasing interest, the results reveal a scarcity of research on mitigation techniques and poor theoretical foundations in understanding and interpreting cognitive biases. Although bias-related research has generated many new insights in the software engineering community, specific bias mitigation techniques are still needed for software professionals to overcome the deleterious effects of cognitive biases on their work.},
annote = {To przegl{\c{a}}d literatury z tej tematyki. Wyszukiwania dokonali w 2016 roku wi{\c{e}}c lekko przeterminowany.},
author = {Mohanani, Rahul and Salman, Iflaah and Turhan, Burak and Rodriguez, Pilar and Ralph, Paul},
doi = {10.1109/TSE.2018.2877759},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(2).pdf:pdf;:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani et al. - 2018 - Cognitive Biases in Software Engineering A Systematic Mapping Study(4).pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Antecedents of cognitive bias,cognitive bias,debiasing,effects of cognitive bias,software engineering,systematic mapping},
number = {c},
title = {{Cognitive Biases in Software Engineering: A Systematic Mapping Study}},
volume = {5589},
year = {2018}
}
@article{Zhou2020,
abstract = {Cognitive biases play an important role in our life. These biases allow humans to make mental shortcuts and quick decisions. They also lead to less-than-rational judgements. This paper focuses on the less-explored realm of cognitive biases in technical communication, with broad implications in engineering communication. It assembles cognitive biases in four categories that resonate with technical communicators and users: how we draw from past experiences, how we respond to stimuli, how we make decisions, and how we absorb social contexts. For each bias, the paper provides examples and analyzes how technical communicators can prevent, tackle, and harvest from the bias to improve communication effectiveness. Grasping cognitive biases has broad benefits for engineering communicators, engineering educators, and user experience professionals.},
author = {Zhou, Quan},
doi = {10.1109/ProComm48883.2020.00012},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09201252.pdf:pdf},
isbn = {9781728155630},
issn = {21581002},
journal = {IEEE International Professional Communication Conference},
keywords = {Cognitive bias,decision making,memory,social contexts},
pages = {39--46},
title = {{Cognitive Biases in Technical Communication}},
volume = {2020-July},
year = {2020}
}
@article{Zhou2020,
abstract = {Cognitive biases play an important role in our life. These biases allow humans to make mental shortcuts and quick decisions. They also lead to less-than-rational judgements. This paper focuses on the less-explored realm of cognitive biases in technical communication, with broad implications in engineering communication. It assembles cognitive biases in four categories that resonate with technical communicators and users: how we draw from past experiences, how we respond to stimuli, how we make decisions, and how we absorb social contexts. For each bias, the paper provides examples and analyzes how technical communicators can prevent, tackle, and harvest from the bias to improve communication effectiveness. Grasping cognitive biases has broad benefits for engineering communicators, engineering educators, and user experience professionals.},
author = {Zhou, Quan},
doi = {10.1109/ProComm48883.2020.00012},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09201252.pdf:pdf},
isbn = {9781728155630},
issn = {21581002},
journal = {IEEE International Professional Communication Conference},
keywords = {Cognitive bias,decision making,memory,social contexts},
pages = {39--46},
title = {{Cognitive Biases in Technical Communication}},
volume = {2020-July},
year = {2020}
}
@article{Zhou2020,
abstract = {Cognitive biases play an important role in our life. These biases allow humans to make mental shortcuts and quick decisions. They also lead to less-than-rational judgements. This paper focuses on the less-explored realm of cognitive biases in technical communication, with broad implications in engineering communication. It assembles cognitive biases in four categories that resonate with technical communicators and users: how we draw from past experiences, how we respond to stimuli, how we make decisions, and how we absorb social contexts. For each bias, the paper provides examples and analyzes how technical communicators can prevent, tackle, and harvest from the bias to improve communication effectiveness. Grasping cognitive biases has broad benefits for engineering communicators, engineering educators, and user experience professionals.},
author = {Zhou, Quan},
doi = {10.1109/ProComm48883.2020.00012},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09201252.pdf:pdf},
isbn = {9781728155630},
issn = {21581002},
journal = {IEEE International Professional Communication Conference},
keywords = {Cognitive bias,decision making,memory,social contexts},
pages = {39--46},
title = {{Cognitive Biases in Technical Communication}},
volume = {2020-July},
year = {2020}
}
@article{Parsons2004,
abstract = { The extensive literature on reuse in software engineering has focused on technical and organizational factors, largely ignoring cognitive characteristics of individual developers. Despite anecdotal evidence that cognitive heuristics play a role in successful artifact reuse, few empirical studies have explored this relationship. This paper proposes how a cognitive heuristic, called anchoring, and the resulting adjustment bias can be adapted and extended to predict issues that might arise when developers reuse code and/or designs. The research proposes that anchoring and adjustment can be manifested in three ways: propagation of errors in reuse artifacts, failure to include requested functionality absent from reuse artifacts, and inclusion of unrequested functionality present in reuse artifacts. Results from two empirical studies are presented. The first study examines reuse of object classes in a programming task, using a combination of practicing programmers and students. The second study uses a database design task with student participants. Results from both studies indicate that anchoring occurs. Specifically, there is strong evidence that developers tend to use the extraneous functionality in the artifacts they are reusing and some evidence of anchoring to errors and omissions in reused artifacts. Implications of these findings for both practice and future research are explored.},
author = {Parsons, Jeffrey and Saunders, Chad},
doi = {10.1109/TSE.2004.94},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Parsons, Saunders - 2004 - Cognitive heuristics in software engineering Applying and extending anchoring and adjustment to artifact reus.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Human factors in software design,Requirements/specifications,Reusable libraries,Reusable software,Reuse models,Software psychology},
number = {12},
pages = {873--888},
title = {{Cognitive heuristics in software engineering: Applying and extending anchoring and adjustment to artifact reuse}},
volume = {30},
year = {2004}
}
@article{Parsons2004,
abstract = { The extensive literature on reuse in software engineering has focused on technical and organizational factors, largely ignoring cognitive characteristics of individual developers. Despite anecdotal evidence that cognitive heuristics play a role in successful artifact reuse, few empirical studies have explored this relationship. This paper proposes how a cognitive heuristic, called anchoring, and the resulting adjustment bias can be adapted and extended to predict issues that might arise when developers reuse code and/or designs. The research proposes that anchoring and adjustment can be manifested in three ways: propagation of errors in reuse artifacts, failure to include requested functionality absent from reuse artifacts, and inclusion of unrequested functionality present in reuse artifacts. Results from two empirical studies are presented. The first study examines reuse of object classes in a programming task, using a combination of practicing programmers and students. The second study uses a database design task with student participants. Results from both studies indicate that anchoring occurs. Specifically, there is strong evidence that developers tend to use the extraneous functionality in the artifacts they are reusing and some evidence of anchoring to errors and omissions in reused artifacts. Implications of these findings for both practice and future research are explored.},
author = {Parsons, Jeffrey and Saunders, Chad},
doi = {10.1109/TSE.2004.94},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Parsons, Saunders - 2004 - Cognitive heuristics in software engineering Applying and extending anchoring and adjustment to artifact reus.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Human factors in software design,Requirements/specifications,Reusable libraries,Reusable software,Reuse models,Software psychology},
number = {12},
pages = {873--888},
title = {{Cognitive heuristics in software engineering: Applying and extending anchoring and adjustment to artifact reuse}},
volume = {30},
year = {2004}
}
@article{Parsons2004,
abstract = { The extensive literature on reuse in software engineering has focused on technical and organizational factors, largely ignoring cognitive characteristics of individual developers. Despite anecdotal evidence that cognitive heuristics play a role in successful artifact reuse, few empirical studies have explored this relationship. This paper proposes how a cognitive heuristic, called anchoring, and the resulting adjustment bias can be adapted and extended to predict issues that might arise when developers reuse code and/or designs. The research proposes that anchoring and adjustment can be manifested in three ways: propagation of errors in reuse artifacts, failure to include requested functionality absent from reuse artifacts, and inclusion of unrequested functionality present in reuse artifacts. Results from two empirical studies are presented. The first study examines reuse of object classes in a programming task, using a combination of practicing programmers and students. The second study uses a database design task with student participants. Results from both studies indicate that anchoring occurs. Specifically, there is strong evidence that developers tend to use the extraneous functionality in the artifacts they are reusing and some evidence of anchoring to errors and omissions in reused artifacts. Implications of these findings for both practice and future research are explored.},
author = {Parsons, Jeffrey and Saunders, Chad},
doi = {10.1109/TSE.2004.94},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Parsons, Saunders - 2004 - Cognitive heuristics in software engineering Applying and extending anchoring and adjustment to artifact reus.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Human factors in software design,Requirements/specifications,Reusable libraries,Reusable software,Reuse models,Software psychology},
number = {12},
pages = {873--888},
title = {{Cognitive heuristics in software engineering: Applying and extending anchoring and adjustment to artifact reuse}},
volume = {30},
year = {2004}
}
@article{Defranco-tommarello2004,
abstract = {When a group is working together toward a common goal, communication and collaboration are key. This is especially true in software development where a project of any significance involves groups of people. Collaborative problem-solving techniques and groupware technology can be a boon to software development because they enhance communication and cooperation. This article examines how software development is affected by collaborative problem solving and decision making, groupware theory and tools, and group cognition and psychology. It also analyzes collaboration tools and their correlation to problem solving and group characteristics.},
author = {Defranco-tommarello, Joanna and Deek, Fadi P.},
doi = {10.1201/1078/43877.21.1.20041201/78987.7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Defranco-tommarello, Deek - 2004 - Collaborative problem solving and groupware for software development.pdf:pdf},
issn = {10580530},
journal = {Information Systems Management},
number = {1},
pages = {67--80},
title = {{Collaborative problem solving and groupware for software development}},
volume = {21},
year = {2004}
}
@article{Defranco-tommarello2004,
abstract = {When a group is working together toward a common goal, communication and collaboration are key. This is especially true in software development where a project of any significance involves groups of people. Collaborative problem-solving techniques and groupware technology can be a boon to software development because they enhance communication and cooperation. This article examines how software development is affected by collaborative problem solving and decision making, groupware theory and tools, and group cognition and psychology. It also analyzes collaboration tools and their correlation to problem solving and group characteristics.},
author = {Defranco-tommarello, Joanna and Deek, Fadi P.},
doi = {10.1201/1078/43877.21.1.20041201/78987.7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Defranco-tommarello, Deek - 2004 - Collaborative problem solving and groupware for software development.pdf:pdf},
issn = {10580530},
journal = {Information Systems Management},
number = {1},
pages = {67--80},
title = {{Collaborative problem solving and groupware for software development}},
volume = {21},
year = {2004}
}
@article{Defranco-tommarello2004,
abstract = {When a group is working together toward a common goal, communication and collaboration are key. This is especially true in software development where a project of any significance involves groups of people. Collaborative problem-solving techniques and groupware technology can be a boon to software development because they enhance communication and cooperation. This article examines how software development is affected by collaborative problem solving and decision making, groupware theory and tools, and group cognition and psychology. It also analyzes collaboration tools and their correlation to problem solving and group characteristics.},
author = {Defranco-tommarello, Joanna and Deek, Fadi P.},
doi = {10.1201/1078/43877.21.1.20041201/78987.7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Defranco-tommarello, Deek - 2004 - Collaborative problem solving and groupware for software development.pdf:pdf},
issn = {10580530},
journal = {Information Systems Management},
number = {1},
pages = {67--80},
title = {{Collaborative problem solving and groupware for software development}},
volume = {21},
year = {2004}
}
@article{Moløkken-østvold2007,
abstract = {Combination of expert opinion is frequently used to produce estimates in software projects. However, if, when and how to combine expert estimates, is poorly understood. In order to study the effects of a combination technique called planning poker, the technique was introduced in a software project for half of the tasks. The tasks estimated with planning poker provided: 1) group consensus estimates that were less optimistic than the mechanical combination of individual estimates for the same tasks, and 2) group consensus estimates that were more accurate than the mechanical combination of individual estimates for the same tasks. The set of control tasks in the same project, estimated by individual experts, achieved similar estimation accuracy as the planning poker tasks. However, for both planning poker and the control group, measures of the median estimation bias indicated that both groups had unbiased estimates, as the typical estimated task was perfectly on target.},
author = {Mol{\o}kken-{\o}stvold, Kjetil and Haugen, Nils Christian},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\o}stvold, Haugen - 2007 - Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen.pdf:pdf},
isbn = {0769527787},
journal = {Software Engineering Conference, 2007. ASWEC 2007. 18th Australian},
pages = {349----358},
title = {{Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen}},
year = {2007}
}
@article{Moløkken-østvold2007,
abstract = {Combination of expert opinion is frequently used to produce estimates in software projects. However, if, when and how to combine expert estimates, is poorly understood. In order to study the effects of a combination technique called planning poker, the technique was introduced in a software project for half of the tasks. The tasks estimated with planning poker provided: 1) group consensus estimates that were less optimistic than the mechanical combination of individual estimates for the same tasks, and 2) group consensus estimates that were more accurate than the mechanical combination of individual estimates for the same tasks. The set of control tasks in the same project, estimated by individual experts, achieved similar estimation accuracy as the planning poker tasks. However, for both planning poker and the control group, measures of the median estimation bias indicated that both groups had unbiased estimates, as the typical estimated task was perfectly on target.},
author = {Mol{\o}kken-{\o}stvold, Kjetil and Haugen, Nils Christian},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\o}stvold, Haugen - 2007 - Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen.pdf:pdf},
isbn = {0769527787},
journal = {Software Engineering Conference, 2007. ASWEC 2007. 18th Australian},
pages = {349----358},
title = {{Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen}},
year = {2007}
}
@article{Moløkken-østvold2007,
abstract = {Combination of expert opinion is frequently used to produce estimates in software projects. However, if, when and how to combine expert estimates, is poorly understood. In order to study the effects of a combination technique called planning poker, the technique was introduced in a software project for half of the tasks. The tasks estimated with planning poker provided: 1) group consensus estimates that were less optimistic than the mechanical combination of individual estimates for the same tasks, and 2) group consensus estimates that were more accurate than the mechanical combination of individual estimates for the same tasks. The set of control tasks in the same project, estimated by individual experts, achieved similar estimation accuracy as the planning poker tasks. However, for both planning poker and the control group, measures of the median estimation bias indicated that both groups had unbiased estimates, as the typical estimated task was perfectly on target.},
author = {Mol{\o}kken-{\o}stvold, Kjetil and Haugen, Nils Christian},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\o}stvold, Haugen - 2007 - Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen.pdf:pdf},
isbn = {0769527787},
journal = {Software Engineering Conference, 2007. ASWEC 2007. 18th Australian},
pages = {349----358},
title = {{Combining Estimates with Planning Poker – An Empirical Study Nils Christian Haugen}},
year = {2007}
}
@article{Kahneman2009,
abstract = {This article reports on an effort to explore the differences between two approaches to intuition and expertise that are often viewed as conflicting: heuristics and biases (HB) and naturalistic decision making (NDM). Starting from the obvious fact that professional intuition is sometimes marvelous and sometimes flawed, the authors attempt to map the boundary conditions that separate true intuitive skill from overconfident and biased impressions. They conclude that evaluating the likely quality of an intuitive judgment requires an assessment of the predictability of the environment in which the judgment is made and of the individual's opportunity to learn the regularities of that environment. Subjective experience is not a reliable indicator of judgment accuracy. {\textcopyright} 2009 American Psychological Association.},
author = {Kahneman, Daniel and Klein, Gary},
doi = {10.1037/a0016755},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/kahneman2009.pdf:pdf},
issn = {0003066X},
journal = {American Psychologist},
keywords = {expertise,heuristics,intuition,judgment,overconfidence},
number = {6},
pages = {515--526},
pmid = {19739881},
title = {{Conditions for Intuitive Expertise: A Failure to Disagree}},
volume = {64},
year = {2009}
}
@article{Kahneman2009,
abstract = {This article reports on an effort to explore the differences between two approaches to intuition and expertise that are often viewed as conflicting: heuristics and biases (HB) and naturalistic decision making (NDM). Starting from the obvious fact that professional intuition is sometimes marvelous and sometimes flawed, the authors attempt to map the boundary conditions that separate true intuitive skill from overconfident and biased impressions. They conclude that evaluating the likely quality of an intuitive judgment requires an assessment of the predictability of the environment in which the judgment is made and of the individual's opportunity to learn the regularities of that environment. Subjective experience is not a reliable indicator of judgment accuracy. {\textcopyright} 2009 American Psychological Association.},
author = {Kahneman, Daniel and Klein, Gary},
doi = {10.1037/a0016755},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/kahneman2009.pdf:pdf},
issn = {0003066X},
journal = {American Psychologist},
keywords = {expertise,heuristics,intuition,judgment,overconfidence},
number = {6},
pages = {515--526},
pmid = {19739881},
title = {{Conditions for Intuitive Expertise: A Failure to Disagree}},
volume = {64},
year = {2009}
}
@article{Calikli2010,
abstract = {During all levels of software testing, the goal should be to fail the code to discover software defects and hence to increase software quality. However, software developers and testers are more likely to choose positive tests rather than negative ones. This is due to the phenomenon called confirmation bias which is defined as the tendency to verify one's own hypotheses rather than trying to refute them. In this work, we aimed at identifying the factors that may affect confirmation bias levels of software developers and testers. We have investigated the effects of company size, experience and reasoning skills on bias levels. We prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. During pen-and-paper test, subjects had to test given hypotheses, whereas interactive test required both hypotheses generation and testing. These tests were conducted on employees of one large scale telecommunications company, three small and medium scale software companies and graduate computer engineering students resulting in a total of eighty-eight subjects. Results showed regardless of experience and company size, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Therefore, education and/or training programs that emphasize mathematical reasoning techniques are useful towards production of high quality software. Moreover, in order to investigate the relationship between code defect density and confirmation bias of software developers, we performed an analysis among developers who are involved with a software project in a large scale telecommunications company. We also analyzed the effect of confirmation bias during software testing phase. Our results showed that there is a direct correlation between confirmation bias and defect proneness of the code.},
author = {Calikli, G and Aslan, B and Bener, A},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Aslan, Bener - 2010 - Confirmation bias in software development and testing An analysis of the effects of company size, experie.pdf:pdf},
journal = {Workshop on Psychology of Programming Interest Group (PPIG)},
keywords = {a,b,cognitive bias,confirmation bias,pop-ii,pop-v,problem comprehension,testing},
pages = {14},
title = {{Confirmation bias in software development and testing: An analysis of the effects of company size, experience and reasoning skills}},
year = {2010}
}
@article{Calikli2010,
abstract = {During all levels of software testing, the goal should be to fail the code to discover software defects and hence to increase software quality. However, software developers and testers are more likely to choose positive tests rather than negative ones. This is due to the phenomenon called confirmation bias which is defined as the tendency to verify one's own hypotheses rather than trying to refute them. In this work, we aimed at identifying the factors that may affect confirmation bias levels of software developers and testers. We have investigated the effects of company size, experience and reasoning skills on bias levels. We prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. During pen-and-paper test, subjects had to test given hypotheses, whereas interactive test required both hypotheses generation and testing. These tests were conducted on employees of one large scale telecommunications company, three small and medium scale software companies and graduate computer engineering students resulting in a total of eighty-eight subjects. Results showed regardless of experience and company size, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Therefore, education and/or training programs that emphasize mathematical reasoning techniques are useful towards production of high quality software. Moreover, in order to investigate the relationship between code defect density and confirmation bias of software developers, we performed an analysis among developers who are involved with a software project in a large scale telecommunications company. We also analyzed the effect of confirmation bias during software testing phase. Our results showed that there is a direct correlation between confirmation bias and defect proneness of the code.},
author = {Calikli, G and Aslan, B and Bener, A},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Aslan, Bener - 2010 - Confirmation bias in software development and testing An analysis of the effects of company size, experie.pdf:pdf},
journal = {Workshop on Psychology of Programming Interest Group (PPIG)},
keywords = {a,b,cognitive bias,confirmation bias,pop-ii,pop-v,problem comprehension,testing},
pages = {14},
title = {{Confirmation bias in software development and testing: An analysis of the effects of company size, experience and reasoning skills}},
year = {2010}
}
@article{Calikli2010,
abstract = {During all levels of software testing, the goal should be to fail the code to discover software defects and hence to increase software quality. However, software developers and testers are more likely to choose positive tests rather than negative ones. This is due to the phenomenon called confirmation bias which is defined as the tendency to verify one's own hypotheses rather than trying to refute them. In this work, we aimed at identifying the factors that may affect confirmation bias levels of software developers and testers. We have investigated the effects of company size, experience and reasoning skills on bias levels. We prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. During pen-and-paper test, subjects had to test given hypotheses, whereas interactive test required both hypotheses generation and testing. These tests were conducted on employees of one large scale telecommunications company, three small and medium scale software companies and graduate computer engineering students resulting in a total of eighty-eight subjects. Results showed regardless of experience and company size, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Therefore, education and/or training programs that emphasize mathematical reasoning techniques are useful towards production of high quality software. Moreover, in order to investigate the relationship between code defect density and confirmation bias of software developers, we performed an analysis among developers who are involved with a software project in a large scale telecommunications company. We also analyzed the effect of confirmation bias during software testing phase. Our results showed that there is a direct correlation between confirmation bias and defect proneness of the code.},
author = {Calikli, G and Aslan, B and Bener, A},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Aslan, Bener - 2010 - Confirmation bias in software development and testing An analysis of the effects of company size, experie.pdf:pdf},
journal = {Workshop on Psychology of Programming Interest Group (PPIG)},
keywords = {a,b,cognitive bias,confirmation bias,pop-ii,pop-v,problem comprehension,testing},
pages = {14},
title = {{Confirmation bias in software development and testing: An analysis of the effects of company size, experience and reasoning skills}},
year = {2010}
}
@article{Granello2001,
abstract = {The need for cultural characteristics to be addressed in supervision is discussed as a way of dealing with both opportunities and obstacles that may exist. The VISION model of cultural responsiveness is described as a practical means of supervisors exploring multicultural issues in the supervisory relationship. La necesidad de discutir las caracterfsticas culturales en la supervisi6n es presentada coma una forma de tratar tanto con las oportunidades y los obstaculos que puedan existir. El modelo responsive cultural VISION se describe como una forma practica para que supervisores exploren temas multiculturales en la relaci6n de supervision.},
author = {Granello, Darcy},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Granello - 2001 - Copyright{\textcopyright} 2001 All Rights Reserved.pdf:pdf},
journal = {Counselor Education {\&} Supervision},
number = {4},
pages = {292--},
title = {{Copyright{\textcopyright} 2001 All Rights Reserved}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright+{\textcopyright}2001.+All+Rights+Reserved.{\#}0{\%}5Cnhttp://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright{\textcopyright}+2001+All+Rights+Reserved{\#}0},
volume = {40},
year = {2001}
}
@article{Granello2001,
abstract = {The need for cultural characteristics to be addressed in supervision is discussed as a way of dealing with both opportunities and obstacles that may exist. The VISION model of cultural responsiveness is described as a practical means of supervisors exploring multicultural issues in the supervisory relationship. La necesidad de discutir las caracterfsticas culturales en la supervisi6n es presentada coma una forma de tratar tanto con las oportunidades y los obstaculos que puedan existir. El modelo responsive cultural VISION se describe como una forma practica para que supervisores exploren temas multiculturales en la relaci6n de supervision.},
author = {Granello, Darcy},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Granello - 2001 - Copyright{\textcopyright} 2001 All Rights Reserved.pdf:pdf},
journal = {Counselor Education {\&} Supervision},
number = {4},
pages = {292--},
title = {{Copyright{\textcopyright} 2001 All Rights Reserved}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright+{\textcopyright}2001.+All+Rights+Reserved.{\#}0{\%}5Cnhttp://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright{\textcopyright}+2001+All+Rights+Reserved{\#}0},
volume = {40},
year = {2001}
}
@article{Granello2001,
abstract = {The need for cultural characteristics to be addressed in supervision is discussed as a way of dealing with both opportunities and obstacles that may exist. The VISION model of cultural responsiveness is described as a practical means of supervisors exploring multicultural issues in the supervisory relationship. La necesidad de discutir las caracterfsticas culturales en la supervisi6n es presentada coma una forma de tratar tanto con las oportunidades y los obstaculos que puedan existir. El modelo responsive cultural VISION se describe como una forma practica para que supervisores exploren temas multiculturales en la relaci6n de supervision.},
author = {Granello, Darcy},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Granello - 2001 - Copyright{\textcopyright} 2001 All Rights Reserved.pdf:pdf},
journal = {Counselor Education {\&} Supervision},
number = {4},
pages = {292--},
title = {{Copyright{\textcopyright} 2001 All Rights Reserved}},
url = {http://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright+{\textcopyright}2001.+All+Rights+Reserved.{\#}0{\%}5Cnhttp://scholar.google.com/scholar?hl=en{\&}btnG=Search{\&}q=intitle:Copyright{\textcopyright}+2001+All+Rights+Reserved{\#}0},
volume = {40},
year = {2001}
}
@article{Silverman1990,
author = {Silverman, Barry G},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Silverman - 1990 - Critiquing human judgment using knowledge-acquisition systems.pdf:pdf},
journal = {AI Magazine},
number = {3},
pages = {60--79},
title = {{Critiquing human judgment using knowledge-acquisition systems}},
volume = {11},
year = {1990}
}
@article{Silverman1990,
author = {Silverman, Barry G},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Silverman - 1990 - Critiquing human judgment using knowledge-acquisition systems.pdf:pdf},
journal = {AI Magazine},
number = {3},
pages = {60--79},
title = {{Critiquing human judgment using knowledge-acquisition systems}},
volume = {11},
year = {1990}
}
@article{Silverman1990,
author = {Silverman, Barry G},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Silverman - 1990 - Critiquing human judgment using knowledge-acquisition systems.pdf:pdf},
journal = {AI Magazine},
number = {3},
pages = {60--79},
title = {{Critiquing human judgment using knowledge-acquisition systems}},
volume = {11},
year = {1990}
}
@inproceedings{Borowa2022,
abstract = {Cognitive biases distort the process of rational decision-making, including architectural decision-making. So far, no method has been empirically proven to reduce the impact of cognitive biases on architectural decision-making. We conducted an experiment in which 44 master's degree graduate students took part. Divided into 12 teams, they created two designs - before and after a debiasing workshop. We recorded this process and analysed how the participants discussed their decisions. In most cases (10 out of 12 groups), the teams' reasoning improved after the workshop. Thus, we show that debiasing architectural decision-making is an attainable goal and provide a simple debiasing treatment that could easily be used when training software practitioners.},
archivePrefix = {arXiv},
arxivId = {2206.14701},
author = {Borowa, Klara and Jarek, Maria and Mystkowska, Gabriela and Paszko, Weronika and Zalewski, Andrzej},
booktitle = {European Conference on Software Architecture (ECSA)},
eprint = {2206.14701},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2206.14701.pdf:pdf},
keywords = {architectural decisions,cognitive bias,debiasing},
pages = {1--8},
title = {{Debiasing architectural decision-making: a workshop-based training approach}},
year = {2022}
}


@article{Manjunath2018a,
abstract = {The architecture of any software can be thought of as a blueprint of its structure. This blueprint is an artifact generated based on a series of decisions taken by software architects and determines the overall quality of the resulting software. The first part of this paper focuses on identifying and formalizing the decision-making models in the context of designing software. Three models are investigated in detail: the rational economic model, the bounded rational model, and the recognition-primed decision model. The steps of decision making are mapped to the OODA Loop (Observe, Orient, Decide and Act) decision cycle as a generic framework for decision making. The second part of this paper focuses on documenting cognitive biases in the context of architectural decision making. Architects, being human, are invariably subject to the influence of cognitive biases due to the cognitive limitations of the human mind, resulting in a systematic deviation from the ideal decision-making process. This leads to the design of sub-par solutions because of missing rationality behind the decisions. A two-level classification is made to modularize the extensive list of biases that influence the architectural decision-making process. As an important outcome of this research, detailed information about each bias is documented as part of a cognitive bias catalog.},
author = {Manjunath, Akash and Bhat, Manoj and Shumaiev, Klym and Biesdorf, Andreas and Matthes, Florian},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Bh18a-1.pdf:pdf},
isbn = {9781538665855},
journal = {Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018},
keywords = {Architectural design decision,Cognitive bias,OODA loop,decision-making process},
pages = {52--55},
title = {{Decision Making and Cognitive Biases in Designing Software Architectures}},
year = {2018}
}
@article{Manjunath2018b,
abstract = {The architecture of any software can be thought of as a blueprint of its structure. This blueprint is an artifact generated based on a series of decisions taken by software architects and determines the overall quality of the resulting software. The first part of this paper focuses on identifying and formalizing the decision-making models in the context of designing software. Three models are investigated in detail: the rational economic model, the bounded rational model, and the recognition-primed decision model. The steps of decision making are mapped to the OODA Loop (Observe, Orient, Decide and Act) decision cycle as a generic framework for decision making. The second part of this paper focuses on documenting cognitive biases in the context of architectural decision making. Architects, being human, are invariably subject to the influence of cognitive biases due to the cognitive limitations of the human mind, resulting in a systematic deviation from the ideal decision-making process. This leads to the design of sub-par solutions because of missing rationality behind the decisions. A two-level classification is made to modularize the extensive list of biases that influence the architectural decision-making process. As an important outcome of this research, detailed information about each bias is documented as part of a cognitive bias catalog.},
author = {Manjunath, Akash and Bhat, Manoj and Shumaiev, Klym and Biesdorf, Andreas and Matthes, Florian},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Bh18a-1.pdf:pdf},
isbn = {9781538665855},
journal = {Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018},
keywords = {Architectural design decision,Cognitive bias,OODA loop,decision-making process},
pages = {52--55},
title = {{Decision Making and Cognitive Biases in Designing Software Architectures}},
year = {2018}
}


@article{VanVliet2016,
abstract = {Traditionally, software architecture is seen as the result of the software architecture design process, the solution, usually represented by a set of components and connectors. Recently, the why of the solution, the set of design decisions made by the software architect, is complementing or even replacing the solution-oriented definition of software architecture. This in turn leads to the study of the process of making these decisions. We outline some research directions that may help us understand and improve the software architecture design process.},
author = {van Vliet, Hans and Tang, Antony},
doi = {10.1016/j.jss.2016.01.017},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/van Vliet, Tang - 2016 - Decision making in software architecture.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design decisions,Software architecture},
pages = {638--644},
publisher = {Elsevier Inc.},
title = {{Decision making in software architecture}},
volume = {117},
year = {2016}
}
@incollection{Burge2008b,
abstract = {This chapter examines human decision-making, its role in software engineering, and the role that rationale can play in the decision-making that occurs within software engineering.},
author = {Burge, Janet E. and Carroll, John M. and McCall, Raymond and Mistrik, Ivan},
booktitle = {Rationale-Based Software Engineering},
doi = {10.1007/978-3-540-77583-6_5},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/978-3-540-77583-6{\_}5.pdf:pdf},
pages = {67--76},
title = {{Decision-Making in Software Engineering}},
year = {2008}
}
@incollection{Burge2008b,
abstract = {This chapter examines human decision-making, its role in software engineering, and the role that rationale can play in the decision-making that occurs within software engineering.},
author = {Burge, Janet E. and Carroll, John M. and McCall, Raymond and Mistrik, Ivan},
booktitle = {Rationale-Based Software Engineering},
doi = {10.1007/978-3-540-77583-6_5},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/978-3-540-77583-6{\_}5.pdf:pdf},
pages = {67--76},
title = {{Decision-Making in Software Engineering}},
year = {2008}
}
@article{Cunha2016,
abstract = {{\textcopyright} 2016 ACM. Context: In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions. Objective: To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management. Method: Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach. Results: We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases. Conclusions: Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.},
author = {Cunha, Jos{\'{e}} Adson O.G. and Moura, Hermano P. and Vasconcellos, Francisco J.S.},
doi = {10.1145/2897586.2897598},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cunha, Moura, Vasconcellos - 2016 - Decision-Making in Software Project Management A Qualitative Case Study of a Private Organization.pdf:pdf},
isbn = {9781450341554},
journal = {9th International Workshop on Cooperative and Human Aspects of Software Engineering},
keywords = {Decision-Making,Grounded Theory,Software Project Management},
pages = {26--32},
title = {{Decision-Making in Software Project Management: A Qualitative Case Study of a Private Organization}},
year = {2016}
}
@article{Cunha2016,
abstract = {{\textcopyright} 2016 ACM. Context: In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions. Objective: To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management. Method: Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach. Results: We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases. Conclusions: Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.},
author = {Cunha, Jos{\'{e}} Adson O.G. and Moura, Hermano P. and Vasconcellos, Francisco J.S.},
doi = {10.1145/2897586.2897598},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cunha, Moura, Vasconcellos - 2016 - Decision-Making in Software Project Management A Qualitative Case Study of a Private Organization.pdf:pdf},
isbn = {9781450341554},
journal = {9th International Workshop on Cooperative and Human Aspects of Software Engineering},
keywords = {Decision-Making,Grounded Theory,Software Project Management},
pages = {26--32},
title = {{Decision-Making in Software Project Management: A Qualitative Case Study of a Private Organization}},
year = {2016}
}
@article{Cunha2016,
abstract = {{\textcopyright} 2016 ACM. Context: In software project management, the decision-making process is a complex set of tasks largely based on specific knowledge and individual cultural background, as well as human relations. The factors that affect the decisions of the software project managers (SPMs) and their potential consequences require attention because project delays and failures are usually related to a series of poor decisions. Objective: To understand how SPMs make decisions based on how they interpret their experiences in the workplace, and also to identify antecedents and consequences of those decisions in order to increase the effectiveness of project management. Method: Semi-structured interviews were carried out with SPMs within a Brazilian large private organization. The data was analyzed using techniques from grounded theory approach. Results: We found that decision-making in software project management is based on knowledge sharing in which the SPM acts as a facilitator before making decisions. This phenomenon is influenced by individual factors, such as experience, communication, negotiation, self-control and systemic view of the project and by contextual factors such as the autonomy of the SPM and team members' technical competence. Also, these factors are mediated by cognitive biases. Conclusions: Due to the uncertainty and dynamism inherent in software projects, the SPMs focus on making, monitoring and adjusting decisions in an argument-driven way.},
author = {Cunha, Jos{\'{e}} Adson O.G. and Moura, Hermano P. and Vasconcellos, Francisco J.S.},
doi = {10.1145/2897586.2897598},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Cunha, Moura, Vasconcellos - 2016 - Decision-Making in Software Project Management A Qualitative Case Study of a Private Organization.pdf:pdf},
isbn = {9781450341554},
journal = {9th International Workshop on Cooperative and Human Aspects of Software Engineering},
keywords = {Decision-Making,Grounded Theory,Software Project Management},
pages = {26--32},
title = {{Decision-Making in Software Project Management: A Qualitative Case Study of a Private Organization}},
year = {2016}
}

@article{Tang2021,
abstract = {Software design is about making decisions. The quality of design decisions influences the quality of software design. This article describes nine decision-making principles to give software designers a systematic approach for decision making.},
author = {Tang, Antony and Kazman, Rick},
doi = {10.1109/MS.2021.3102358},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Decision-Making{\_}Principles{\_}for{\_}Better{\_}Software{\_}Design{\_}Decisions.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {6},
pages = {98--102},
publisher = {IEEE},
title = {{Decision-Making Principles for Better Software Design Decisions}},
volume = {38},
year = {2021}
}
@inproceedings{Safwan,
abstract = {Communicating the rationale behind decisions is essential for the success of software engineering projects. In particular, understanding the rationale of code commits is an important and often difficult task. We posit that part of such difficulty lies in rationale often being treated as a single piece of information. In this paper, we set to discover the breakdown of components in which developers decompose the rationale of code commits in the context of software maintenance, and to understand their experience with it and with its individual components. For this goal, we apply a mixed-methods approach, interviewing 20 software developers to ask them how they decompose rationale, and surveying an additional 24 developers to understand their experiences needing, finding, and recording those components. We found that developers decompose the rationale of code commits into 15 components, each of which is differently needed, found, and recorded. These components are: goal, need, benefits, constraints, alternatives, selected alternative, dependencies, committer, time, location, modifications, explanation of modifications, validation, maturity stage, and side effects. Our findings provide multiple implications. Educators can now disseminate the multiple dimensions and importance of the rationale of code commits. For practitioners, our decomposition of rationale defines a "common vocabulary" to use when discussing rationale of code commits, which we expect to strengthen the quality of their rationale sharing and documentation process. For researchers, our findings enable techniques for automatically assessing, improving, and generating rationale of code commits to specifically target the components that developers need.},
author = {Safwan, Khadijah Al and Servant, Francisco},
booktitle = {ESEC/FSE 2019 - Proceedings of the 2019 27th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
doi = {10.1145/3338906.3338979},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3338906.3338979.pdf:pdf},
isbn = {9781450355728},
keywords = {Software Changes Rationale,Software Evolution and Maintenance},
pages = {397--408},
title = {{Decomposing the rationale of code commits: The software developers perspective}},
year = {2019}
}
@inproceedings{Safwan,
abstract = {Communicating the rationale behind decisions is essential for the success of software engineering projects. In particular, understanding the rationale of code commits is an important and often difficult task. We posit that part of such difficulty lies in rationale often being treated as a single piece of information. In this paper, we set to discover the breakdown of components in which developers decompose the rationale of code commits in the context of software maintenance, and to understand their experience with it and with its individual components. For this goal, we apply a mixed-methods approach, interviewing 20 software developers to ask them how they decompose rationale, and surveying an additional 24 developers to understand their experiences needing, finding, and recording those components. We found that developers decompose the rationale of code commits into 15 components, each of which is differently needed, found, and recorded. These components are: goal, need, benefits, constraints, alternatives, selected alternative, dependencies, committer, time, location, modifications, explanation of modifications, validation, maturity stage, and side effects. Our findings provide multiple implications. Educators can now disseminate the multiple dimensions and importance of the rationale of code commits. For practitioners, our decomposition of rationale defines a "common vocabulary" to use when discussing rationale of code commits, which we expect to strengthen the quality of their rationale sharing and documentation process. For researchers, our findings enable techniques for automatically assessing, improving, and generating rationale of code commits to specifically target the components that developers need.},
author = {Safwan, Khadijah Al and Servant, Francisco},
booktitle = {ESEC/FSE 2019 - Proceedings of the 2019 27th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
doi = {10.1145/3338906.3338979},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3338906.3338979.pdf:pdf},
isbn = {9781450355728},
keywords = {Software Changes Rationale,Software Evolution and Maintenance},
pages = {397--408},
title = {{Decomposing the rationale of code commits: The software developers perspective}},
year = {2019}
}
@article{Rapanotti2013,
abstract = {Design rationale fills in the gaps between the original requirements of a system and the finished product encompassing decisions, constraints and other information that influenced the outcome. Existing research in Software Engineering corroborates the importance of design rationale to capture knowledge assets, particularly in the context of the global enterprise, with its increased reliance on IT systems, and risk of knowledge loss through staff movement and attrition. Despite this, the practice of design rationale capture is not as extensive as could be expected due to reasons which include time and budget constraints, the lack of standards and tools, and some uncertainty as to its actual added value. In this paper, we address the viability and benefits of capturing design rationale as a by-product of design in the context of a real-world global organisational setting. This was achieved through a study in which an emerging design approach-Problem Oriented Engineering-was applied in the context of a global financial institution to address a critical IT problem as part of its software supplier's client resolution process. The study provides some positive evidence that the approach-guided knowledge capture of key design rationale elements and that it combined well with existing practices within the organisation and even led to improvement to one of their key processes. {\textcopyright} 2011 Springer-Verlag.},
author = {Nkwocha, A. and Hall, J. G. and Rapanotti, L.},
doi = {10.1007/s10270-011-0223-y},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/s10270-011-0223-y.pdf:pdf},
issn = {16191366},
journal = {Software and Systems Modeling},
keywords = {Assurance-driven design,Design rationale,Problem oriented engineering,Process improvement},
number = {4},
pages = {825--845},
title = {{Design rationale capture for process improvement in the globalised enterprise: An industrial study}},
volume = {12},
year = {2013}
}
@article{Rapanotti2013,
abstract = {Design rationale fills in the gaps between the original requirements of a system and the finished product encompassing decisions, constraints and other information that influenced the outcome. Existing research in Software Engineering corroborates the importance of design rationale to capture knowledge assets, particularly in the context of the global enterprise, with its increased reliance on IT systems, and risk of knowledge loss through staff movement and attrition. Despite this, the practice of design rationale capture is not as extensive as could be expected due to reasons which include time and budget constraints, the lack of standards and tools, and some uncertainty as to its actual added value. In this paper, we address the viability and benefits of capturing design rationale as a by-product of design in the context of a real-world global organisational setting. This was achieved through a study in which an emerging design approach-Problem Oriented Engineering-was applied in the context of a global financial institution to address a critical IT problem as part of its software supplier's client resolution process. The study provides some positive evidence that the approach-guided knowledge capture of key design rationale elements and that it combined well with existing practices within the organisation and even led to improvement to one of their key processes. {\textcopyright} 2011 Springer-Verlag.},
author = {Nkwocha, A. and Hall, J. G. and Rapanotti, L.},
doi = {10.1007/s10270-011-0223-y},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/s10270-011-0223-y.pdf:pdf},
issn = {16191366},
journal = {Software and Systems Modeling},
keywords = {Assurance-driven design,Design rationale,Problem oriented engineering,Process improvement},
number = {4},
pages = {825--845},
title = {{Design rationale capture for process improvement in the globalised enterprise: An industrial study}},
volume = {12},
year = {2013}
}
@article{Burge2008,
abstract = {Rationale research in software development is a challenging area because although there is no shortage of advocates for its value, there is also no shortage of reasons for why rationale is unlikely to be captured in practice. Despite more than 30 years of research there still remains much uncertainty: how useful are the potential benefits and how insurmountable are the barriers? Will the value of the rationale (design and otherwise) justify the cost of collecting it? Although there have been numerous rationale research projects, many, if not most, received little or no empirical evaluation. There also have not been many studies examining what the needs are of the practitioners who would be supported by the rationale. This article discusses the "doom and gloom" predictions of rationale's failure, provides a survey of evaluations of rationale systems, and discusses what we hope is a brighter outlook for rationale research in the future. There are development standards and synergistic research areas that may help with rationale research and its acceptance in the software community with which we should be working. This article also presents the results of a pilot survey of software developers who were asked how they would envision using rationale and what they believe the most important barriers are. Although some results were as expected, there were also some surprises. Research on technology transfer indicates that, among other things, to transition successfully from research into practice we need to understand the need that is being met and demonstrate the value of our approach. Until we have determined how our work is needed by the people we are trying to help we will remain researching under uncertainty. Copyright {\textcopyright} 2008 Cambridge University Press.},
author = {Burge, Janet E},
doi = {10.1017/S0890060408000218},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Design{\_}rationale{\_}Researching{\_}.pdf:pdf},
issn = {08900604},
journal = {Artificial Intelligence for Engineering Design, Analysis and Manufacturing: AIEDAM},
keywords = {Design Rationale,Empirical Studies,Software Engineering,Traceability},
number = {4},
pages = {311--324},
title = {{Design rationale: Researching under uncertainty}},
volume = {22},
year = {2008}
}
@article{Burge2008,
abstract = {Rationale research in software development is a challenging area because although there is no shortage of advocates for its value, there is also no shortage of reasons for why rationale is unlikely to be captured in practice. Despite more than 30 years of research there still remains much uncertainty: how useful are the potential benefits and how insurmountable are the barriers? Will the value of the rationale (design and otherwise) justify the cost of collecting it? Although there have been numerous rationale research projects, many, if not most, received little or no empirical evaluation. There also have not been many studies examining what the needs are of the practitioners who would be supported by the rationale. This article discusses the "doom and gloom" predictions of rationale's failure, provides a survey of evaluations of rationale systems, and discusses what we hope is a brighter outlook for rationale research in the future. There are development standards and synergistic research areas that may help with rationale research and its acceptance in the software community with which we should be working. This article also presents the results of a pilot survey of software developers who were asked how they would envision using rationale and what they believe the most important barriers are. Although some results were as expected, there were also some surprises. Research on technology transfer indicates that, among other things, to transition successfully from research into practice we need to understand the need that is being met and demonstrate the value of our approach. Until we have determined how our work is needed by the people we are trying to help we will remain researching under uncertainty. Copyright {\textcopyright} 2008 Cambridge University Press.},
author = {Burge, Janet E},
doi = {10.1017/S0890060408000218},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Design{\_}rationale{\_}Researching{\_}.pdf:pdf},
issn = {08900604},
journal = {Artificial Intelligence for Engineering Design, Analysis and Manufacturing: AIEDAM},
keywords = {Design Rationale,Empirical Studies,Software Engineering,Traceability},
number = {4},
pages = {311--324},
title = {{Design rationale: Researching under uncertainty}},
volume = {22},
year = {2008}
}
@article{Tang2008,
abstract = {Making justifiable decisions is a critical aspect of software architec-ture design. However, there has been limited empirical research on the effects of design reasoning on the quality of software design. The goal of this work is to investigate if there is any quality improvement to software design when design reasoning is applied. We conducted an empirical study involving twenty designers, the designers were asked to design a user interface and their designs were scored and compared. The results showed that the test group that was equipped with design reasoning produced a higher quality design than the control group, especially for inexperienced designers. {\textcopyright} 2008 Springer Berlin Heidelberg.},
author = {Tang, Antony and Tran, Minh H. and Han, Jun and {Van Vliet}, Hans},
doi = {10.1007/978-3-540-87879-7_2},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/QoSA08-DesignReasoning.pdf:pdf},
isbn = {3540878785},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Design Reasoning,Software Architecture Design,Usability},
pages = {28--42},
title = {{Design reasoning improves software design quality}},
volume = {5281 LNCS},
year = {2008}
}
@article{Tang2008,
abstract = {Making justifiable decisions is a critical aspect of software architec-ture design. However, there has been limited empirical research on the effects of design reasoning on the quality of software design. The goal of this work is to investigate if there is any quality improvement to software design when design reasoning is applied. We conducted an empirical study involving twenty designers, the designers were asked to design a user interface and their designs were scored and compared. The results showed that the test group that was equipped with design reasoning produced a higher quality design than the control group, especially for inexperienced designers. {\textcopyright} 2008 Springer Berlin Heidelberg.},
author = {Tang, Antony and Tran, Minh H. and Han, Jun and {Van Vliet}, Hans},
doi = {10.1007/978-3-540-87879-7_2},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/QoSA08-DesignReasoning.pdf:pdf},
isbn = {3540878785},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Design Reasoning,Software Architecture Design,Usability},
pages = {28--42},
title = {{Design reasoning improves software design quality}},
volume = {5281 LNCS},
year = {2008}
}
@article{Safwan2022,
abstract = {Communicating the rationale behind decisions is essential for the success of software engineering projects. In particular, understanding the rationale of code commits is an important and often difficult task. Although the software engineering community recognizes rationale need and importance, there is a lack of in-depth study of rationale for commits. To bridge this gap, we apply a mixed-methods approach, interviewing software developers and distributing two surveys, to study their perspective of rationale for code commits. We found that software developers need to investigate code commits to understand their rationale when working on diverse tasks. We also found that developers decompose the rationale of code commits into 15 components, each is differently needed, found, and recorded. Furthermore, we explored software developers' experiences with rationale need, finding, and recording. We discovered factors leading software developers to give up their search for rationale of code commits. Our findings provide a better understanding of the need for rationale of code commits. In light of our findings, we discuss and present our vision about rationale of code commits practitioners' documentation, tools support, and documentation automation. In addition, we discuss the benefits of analyzes that could arise from good documentation of rationale for code commits.},
author = {{Al Safwan}, Khadijah and Elarnaoty, Mohammed and Servant, Francisco},
doi = {10.1016/j.jss.2022.111320},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121222000668-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Software changes rationale,Software evolution and maintenance},
pages = {111320},
publisher = {Elsevier Inc.},
title = {{Developers' need for the rationale of code commits: An in-breadth and in-depth study}},
url = {https://doi.org/10.1016/j.jss.2022.111320},
volume = {189},
year = {2022}
}
@article{Safwan2022,
abstract = {Communicating the rationale behind decisions is essential for the success of software engineering projects. In particular, understanding the rationale of code commits is an important and often difficult task. Although the software engineering community recognizes rationale need and importance, there is a lack of in-depth study of rationale for commits. To bridge this gap, we apply a mixed-methods approach, interviewing software developers and distributing two surveys, to study their perspective of rationale for code commits. We found that software developers need to investigate code commits to understand their rationale when working on diverse tasks. We also found that developers decompose the rationale of code commits into 15 components, each is differently needed, found, and recorded. Furthermore, we explored software developers' experiences with rationale need, finding, and recording. We discovered factors leading software developers to give up their search for rationale of code commits. Our findings provide a better understanding of the need for rationale of code commits. In light of our findings, we discuss and present our vision about rationale of code commits practitioners' documentation, tools support, and documentation automation. In addition, we discuss the benefits of analyzes that could arise from good documentation of rationale for code commits.},
author = {{Al Safwan}, Khadijah and Elarnaoty, Mohammed and Servant, Francisco},
doi = {10.1016/j.jss.2022.111320},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121222000668-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Software changes rationale,Software evolution and maintenance},
pages = {111320},
publisher = {Elsevier Inc.},
title = {{Developers' need for the rationale of code commits: An in-breadth and in-depth study}},
url = {https://doi.org/10.1016/j.jss.2022.111320},
volume = {189},
year = {2022}
}
@inproceedings{Tofan2013,
author = {Tofan, Dan and Galster, Matthias and Avgeriou, Paris},
booktitle = {European Conference on Software Architecture (ECSA)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ECSA13a.pdf:pdf},
number = {Table 1},
pages = {192--199},
title = {{Difficulty of Architectural Decisions – A Survey with Professional Architects}},
year = {2013}
}
@inproceedings{Tofan2013a,
author = {Tofan, Dan and Galster, Matthias and Avgeriou, Paris},
booktitle = {European Conference on Software Architecture (ECSA)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ECSA13a.pdf:pdf},
number = {Table 1},
pages = {192--199},
title = {{Difficulty of Architectural Decisions – A Survey with Professional Architects}},
year = {2013}
}
@inproceedings{Hesse,
abstract = {Context/Motivation: Developers make many important decisions as they address given requirements during system design. Each decision is explained and justified by decision-related knowledge. Typically, this knowledge is neither captured in a structured way, nor linked to the respective requirements in detail. Then, it is not obvious, how design decisions realize the given requirements and whether they further refine or shape them. Thus, the relations and alignment of requirements and design cannot be assessed properly. Problem/Question: While there are several studies on decision-making in general, there does not exist a study uncovering how decision-related knowledge emerges based on requirements. Such a study is important to understand the intertwined relations of requirements and design decisions as well as how requirement descriptions could be enhanced with feedback from design decision-making. Principal Idea/Results: We applied a flexible documentation approach for decision-related knowledge on discussion transcripts of two design sessions with professional designers. We analyzed the discussions for decision-related knowledge and documented it together with its relations to the given requirements. Several complex and incrementally growing knowledge structures for decisions were found to emerge in relation to the given requirements. Also, we uncovered that decision-related knowledge contained uncertainties about requirements and further refined them. Contribution: Our study uncovers detailed relations between requirements and design decisions and thereby improves the understanding of their mutual impact on each other. We also derive recommendations for the cooperation between requirements engineers and designers in practice. In addition, we demonstrate that our documentation approach for decision-related knowledge provides a comprehensive view on decisions and their relations to requirements.},
author = {Hesse, Tom Michael and Paech, Barbara},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-30282-9_13},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2016{\_}Hesse{\_}REFSQ.pdf:pdf},
isbn = {9783319302812},
issn = {16113349},
keywords = {Case study,Decision documentation,Decision-making,Design decisions,Requirements traceability},
pages = {188--204},
title = {{Documenting relations between requirements and design decisions: A case study on design session transcripts}},
volume = {9619},
year = {2016}
}
@inproceedings{Hesse,
abstract = {Context/Motivation: Developers make many important decisions as they address given requirements during system design. Each decision is explained and justified by decision-related knowledge. Typically, this knowledge is neither captured in a structured way, nor linked to the respective requirements in detail. Then, it is not obvious, how design decisions realize the given requirements and whether they further refine or shape them. Thus, the relations and alignment of requirements and design cannot be assessed properly. Problem/Question: While there are several studies on decision-making in general, there does not exist a study uncovering how decision-related knowledge emerges based on requirements. Such a study is important to understand the intertwined relations of requirements and design decisions as well as how requirement descriptions could be enhanced with feedback from design decision-making. Principal Idea/Results: We applied a flexible documentation approach for decision-related knowledge on discussion transcripts of two design sessions with professional designers. We analyzed the discussions for decision-related knowledge and documented it together with its relations to the given requirements. Several complex and incrementally growing knowledge structures for decisions were found to emerge in relation to the given requirements. Also, we uncovered that decision-related knowledge contained uncertainties about requirements and further refined them. Contribution: Our study uncovers detailed relations between requirements and design decisions and thereby improves the understanding of their mutual impact on each other. We also derive recommendations for the cooperation between requirements engineers and designers in practice. In addition, we demonstrate that our documentation approach for decision-related knowledge provides a comprehensive view on decisions and their relations to requirements.},
author = {Hesse, Tom Michael and Paech, Barbara},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-30282-9_13},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2016{\_}Hesse{\_}REFSQ.pdf:pdf},
isbn = {9783319302812},
issn = {16113349},
keywords = {Case study,Decision documentation,Decision-making,Design decisions,Requirements traceability},
pages = {188--204},
title = {{Documenting relations between requirements and design decisions: A case study on design session transcripts}},
volume = {9619},
year = {2016}
}
@article{Pedraza-Garcia2015,
abstract = {Software architecture design meetings are instances where architects discuss design concerns and make decisions about the significant elements of a software system. There is little empirical evidence about how architects make design decisions because capturing reasoning and decisions is intrusive and/or expensive, design meetings combine verbal and graphical interventions. This article describes Design Verbal Interventions Analysis (DVIA), a technique to identify design decisions in recorded design meetings by subjecting verbal interventions to transcription, classification and mapping to a decision model. The approach is illustrated with a case study of senior undergraduate student teams that were video-recorded while designing a command-And-control center for the pan-Andean spatial project. The DVIA analysis showed that the discussion developed as a set of cycles where designers engaged in concurrent resolution of several design issues at once, $\backslash$jumping" among them and yet closing issues. This study shows empirically the viability of identifying design decision from the recording of verbal interventions, and point to possible ways to record and analyzes them.},
author = {Pedraza-Garc{\'{i}}a, Gilberto and Astudillo, Hern{\'{a}}n and Correal, Dario},
doi = {10.1145/2797433.2797486},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2797433.2797486.pdf:pdf},
isbn = {9781450333931},
journal = {ACM International Conference Proceeding Series},
keywords = {Architectural decisions,Decision recovery,Design Verbal Interventions Analysis.,Design meetings,Software architecture design},
number = {1},
title = {{DVIA: Understanding how software architects make decisions in design}},
volume = {07-11-Sept},
year = {2015}
}
@article{Pedraza-Garcia2015,
abstract = {Software architecture design meetings are instances where architects discuss design concerns and make decisions about the significant elements of a software system. There is little empirical evidence about how architects make design decisions because capturing reasoning and decisions is intrusive and/or expensive, design meetings combine verbal and graphical interventions. This article describes Design Verbal Interventions Analysis (DVIA), a technique to identify design decisions in recorded design meetings by subjecting verbal interventions to transcription, classification and mapping to a decision model. The approach is illustrated with a case study of senior undergraduate student teams that were video-recorded while designing a command-And-control center for the pan-Andean spatial project. The DVIA analysis showed that the discussion developed as a set of cycles where designers engaged in concurrent resolution of several design issues at once, $\backslash$jumping" among them and yet closing issues. This study shows empirically the viability of identifying design decision from the recording of verbal interventions, and point to possible ways to record and analyzes them.},
author = {Pedraza-Garc{\'{i}}a, Gilberto and Astudillo, Hern{\'{a}}n and Correal, Dario},
doi = {10.1145/2797433.2797486},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2797433.2797486.pdf:pdf},
isbn = {9781450333931},
journal = {ACM International Conference Proceeding Series},
keywords = {Architectural decisions,Decision recovery,Design Verbal Interventions Analysis.,Design meetings,Software architecture design},
number = {1},
title = {{DVIA: Understanding how software architects make decisions in design}},
volume = {07-11-Sept},
year = {2015}
}
@inproceedings{Calikli2010a,
abstract = {Background: During all levels of software testing, the goal should be to fail the code. However, software developers and testers are more likely to choose positive tests rather than negative ones due to the phenomenon called confirmation bias. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them. In the literature, there are theories about the possible effects of confirmation bias on software development and testing. Due to the tendency towards positive tests, most of the software defects remain undetected, which in turn leads to an increase in software defect density. Aims: In this study, we analyze factors affecting confirmation bias in order to discover methods to circumvent confirmation bias. The factors, we investigate are experience in software development/testing and reasoning skills that can be gained through education. In addition, we analyze the effect of confirmation bias on software developer and tester performance. Method: In order to measure and quantify confirmation bias levels of software developers/testers, we prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. These tests were conducted on the 36 employees of a large scale telecommunication company in Europe as well as 28 graduate computer engineering students of Bogazici University, resulting in a total of 64 subjects. We evaluated the outcomes of these tests using the metrics we proposed in addition to some basic methods which we inherited from the cognitive psychology literature. Results: Results showed that regardless of experience in software development/testing, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Moreover, the results of the analysis to investigate the relationship between code defect density and confirmation bias levels of software developers and testers showed that there is a direct correlation between confirmation bias and defect proneness of the code. Conclusions: Our findings show that having strong logical reasoning and hypothesis testing skills are differentiating factors in the software developer/tester performance in terms of defect rates. We recommend that companies should focus on improving logical reasoning and hypothesis testing skills of their employees by designing training programs. As future work, we plan to replicate this study in other software development companies. Moreover, we will use confirmation bias metrics in addition to product and process metrics in for software defect prediction. We believe that confirmation bias metrics would improve the prediction performance of learning based defect prediction models which we have been building over a decade.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
doi = {10.1145/1868328.1868344},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software d.pdf:pdf},
isbn = {9781450304047},
title = {{Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software developer/tester performance}},
year = {2010}
}
@inproceedings{Calikli2010a,
abstract = {Background: During all levels of software testing, the goal should be to fail the code. However, software developers and testers are more likely to choose positive tests rather than negative ones due to the phenomenon called confirmation bias. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them. In the literature, there are theories about the possible effects of confirmation bias on software development and testing. Due to the tendency towards positive tests, most of the software defects remain undetected, which in turn leads to an increase in software defect density. Aims: In this study, we analyze factors affecting confirmation bias in order to discover methods to circumvent confirmation bias. The factors, we investigate are experience in software development/testing and reasoning skills that can be gained through education. In addition, we analyze the effect of confirmation bias on software developer and tester performance. Method: In order to measure and quantify confirmation bias levels of software developers/testers, we prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. These tests were conducted on the 36 employees of a large scale telecommunication company in Europe as well as 28 graduate computer engineering students of Bogazici University, resulting in a total of 64 subjects. We evaluated the outcomes of these tests using the metrics we proposed in addition to some basic methods which we inherited from the cognitive psychology literature. Results: Results showed that regardless of experience in software development/testing, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Moreover, the results of the analysis to investigate the relationship between code defect density and confirmation bias levels of software developers and testers showed that there is a direct correlation between confirmation bias and defect proneness of the code. Conclusions: Our findings show that having strong logical reasoning and hypothesis testing skills are differentiating factors in the software developer/tester performance in terms of defect rates. We recommend that companies should focus on improving logical reasoning and hypothesis testing skills of their employees by designing training programs. As future work, we plan to replicate this study in other software development companies. Moreover, we will use confirmation bias metrics in addition to product and process metrics in for software defect prediction. We believe that confirmation bias metrics would improve the prediction performance of learning based defect prediction models which we have been building over a decade.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
doi = {10.1145/1868328.1868344},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software d.pdf:pdf},
isbn = {9781450304047},
title = {{Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software developer/tester performance}},
year = {2010}
}
@inproceedings{Calikli2010a,
abstract = {Background: During all levels of software testing, the goal should be to fail the code. However, software developers and testers are more likely to choose positive tests rather than negative ones due to the phenomenon called confirmation bias. Confirmation bias is defined as the tendency of people to verify their hypotheses rather than refuting them. In the literature, there are theories about the possible effects of confirmation bias on software development and testing. Due to the tendency towards positive tests, most of the software defects remain undetected, which in turn leads to an increase in software defect density. Aims: In this study, we analyze factors affecting confirmation bias in order to discover methods to circumvent confirmation bias. The factors, we investigate are experience in software development/testing and reasoning skills that can be gained through education. In addition, we analyze the effect of confirmation bias on software developer and tester performance. Method: In order to measure and quantify confirmation bias levels of software developers/testers, we prepared pen-and-paper and interactive tests based on two tasks from cognitive psychology literature. These tests were conducted on the 36 employees of a large scale telecommunication company in Europe as well as 28 graduate computer engineering students of Bogazici University, resulting in a total of 64 subjects. We evaluated the outcomes of these tests using the metrics we proposed in addition to some basic methods which we inherited from the cognitive psychology literature. Results: Results showed that regardless of experience in software development/testing, abilities such as logical reasoning and strategic hypotheses testing are differentiating factors in low confirmation bias levels. Moreover, the results of the analysis to investigate the relationship between code defect density and confirmation bias levels of software developers and testers showed that there is a direct correlation between confirmation bias and defect proneness of the code. Conclusions: Our findings show that having strong logical reasoning and hypothesis testing skills are differentiating factors in the software developer/tester performance in terms of defect rates. We recommend that companies should focus on improving logical reasoning and hypothesis testing skills of their employees by designing training programs. As future work, we plan to replicate this study in other software development companies. Moreover, we will use confirmation bias metrics in addition to product and process metrics in for software defect prediction. We believe that confirmation bias metrics would improve the prediction performance of learning based defect prediction models which we have been building over a decade.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {Proceedings of the 6th International Conference on Predictive Models in Software Engineering},
doi = {10.1145/1868328.1868344},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software d.pdf:pdf},
isbn = {9781450304047},
title = {{Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software developer/tester performance}},
year = {2010}
}
@article{Razavian2019a,
abstract = {Context: Despite past empirical research in software architecture decision making, we have not yet systematically studied how to perform such empirical research. Software architecture decision making involves humans, their behavioral issues and practice. As such, research on decision making needs to involve not only engineering but also social science research methods. Objective: This paper studies empirical research on software architecture decision making. We want to understand what research methods have been used to study human decision making in software architecture. Further, we want to provide guidance for future studies. Method: We analyzed research papers on software architecture decision making. We classified the papers according to different sub-dimensions of empirical research design like research logic, research purpose, research methodology and process. We introduce the study focus matrix and the research cycle to capture the focus and the goals of a software architecture decision making study. We identify gaps in current software architecture decision making research according to the classification and discuss open research issues inspired by social science research. Conclusion: We show the variety of research designs and identify gaps with respect to focus and goals. Few papers study decision making behavior in software architecture design. Also these researchers study mostly the process and much less the outcome and the factors influencing decision making. Furthermore, there is a lack of improvements for software architecture decision making and in particular insights into behavior have not led to new practices. The study focus matrix and the research cycle are two new instruments for researchers to position their research clearly. This paper provides a retrospective for the community and an entry point for new researchers to design empirical studies that embrace the human role in software architecture decision making.},
author = {Razavian, Maryam and Paech, Barbara and Tang, Antony},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S016412121830267X-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Decision making,Empirical research,Human aspects,Software architecture},
pages = {360--381},
publisher = {Elsevier Inc.},
title = {{Empirical research for software architecture decision making: An analysis}},
volume = {149},
year = {2019}
}
@article{Razavian2019b,
abstract = {Context: Despite past empirical research in software architecture decision making, we have not yet systematically studied how to perform such empirical research. Software architecture decision making involves humans, their behavioral issues and practice. As such, research on decision making needs to involve not only engineering but also social science research methods. Objective: This paper studies empirical research on software architecture decision making. We want to understand what research methods have been used to study human decision making in software architecture. Further, we want to provide guidance for future studies. Method: We analyzed research papers on software architecture decision making. We classified the papers according to different sub-dimensions of empirical research design like research logic, research purpose, research methodology and process. We introduce the study focus matrix and the research cycle to capture the focus and the goals of a software architecture decision making study. We identify gaps in current software architecture decision making research according to the classification and discuss open research issues inspired by social science research. Conclusion: We show the variety of research designs and identify gaps with respect to focus and goals. Few papers study decision making behavior in software architecture design. Also these researchers study mostly the process and much less the outcome and the factors influencing decision making. Furthermore, there is a lack of improvements for software architecture decision making and in particular insights into behavior have not led to new practices. The study focus matrix and the research cycle are two new instruments for researchers to position their research clearly. This paper provides a retrospective for the community and an entry point for new researchers to design empirical studies that embrace the human role in software architecture decision making.},
author = {Razavian, Maryam and Paech, Barbara and Tang, Antony},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/M.{\_}Razavian.{\_}Decision{\_}Making{\_}Research{\_}R2.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Decision making,Empirical research,Human aspects,Software architecture},
number = {2019},
pages = {360--381},
title = {{Empirical research for software architecture decision making: An analysis}},
volume = {149},
year = {2019}
}
@article{Razavian2019,
abstract = {Context: Despite past empirical research in software architecture decision making, we have not yet systematically studied how to perform such empirical research. Software architecture decision making involves humans, their behavioral issues and practice. As such, research on decision making needs to involve not only engineering but also social science research methods. Objective: This paper studies empirical research on software architecture decision making. We want to understand what research methods have been used to study human decision making in software architecture. Further, we want to provide guidance for future studies. Method: We analyzed research papers on software architecture decision making. We classified the papers according to different sub-dimensions of empirical research design like research logic, research purpose, research methodology and process. We introduce the study focus matrix and the research cycle to capture the focus and the goals of a software architecture decision making study. We identify gaps in current software architecture decision making research according to the classification and discuss open research issues inspired by social science research. Conclusion: We show the variety of research designs and identify gaps with respect to focus and goals. Few papers study decision making behavior in software architecture design. Also these researchers study mostly the process and much less the outcome and the factors influencing decision making. Furthermore, there is a lack of improvements for software architecture decision making and in particular insights into behavior have not led to new practices. The study focus matrix and the research cycle are two new instruments for researchers to position their research clearly. This paper provides a retrospective for the community and an entry point for new researchers to design empirical studies that embrace the human role in software architecture decision making.},
author = {Razavian, Maryam and Paech, Barbara and Tang, Antony},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S016412121830267X-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Decision making,Empirical research,Human aspects,Software architecture},
pages = {360--381},
publisher = {Elsevier Inc.},
title = {{Empirical research for software architecture decision making: An analysis}},
volume = {149},
year = {2019}
}
@article{Razavian2019c,
abstract = {Context: Despite past empirical research in software architecture decision making, we have not yet systematically studied how to perform such empirical research. Software architecture decision making involves humans, their behavioral issues and practice. As such, research on decision making needs to involve not only engineering but also social science research methods. Objective: This paper studies empirical research on software architecture decision making. We want to understand what research methods have been used to study human decision making in software architecture. Further, we want to provide guidance for future studies. Method: We analyzed research papers on software architecture decision making. We classified the papers according to different sub-dimensions of empirical research design like research logic, research purpose, research methodology and process. We introduce the study focus matrix and the research cycle to capture the focus and the goals of a software architecture decision making study. We identify gaps in current software architecture decision making research according to the classification and discuss open research issues inspired by social science research. Conclusion: We show the variety of research designs and identify gaps with respect to focus and goals. Few papers study decision making behavior in software architecture design. Also these researchers study mostly the process and much less the outcome and the factors influencing decision making. Furthermore, there is a lack of improvements for software architecture decision making and in particular insights into behavior have not led to new practices. The study focus matrix and the research cycle are two new instruments for researchers to position their research clearly. This paper provides a retrospective for the community and an entry point for new researchers to design empirical studies that embrace the human role in software architecture decision making.},
author = {Razavian, Maryam and Paech, Barbara and Tang, Antony},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/M.{\_}Razavian.{\_}Decision{\_}Making{\_}Research{\_}R2.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Decision making,Empirical research,Human aspects,Software architecture},
number = {2019},
pages = {360--381},
title = {{Empirical research for software architecture decision making: An analysis}},
volume = {149},
year = {2019}
}

@article{Shull2013,
abstract = {IEEE Software Editor-in-Chief Forrest Shull discusses the importance of having and applying professional principles in all facets of software development while also keeping them in perspective. He cites work by Philippe Kruchten, Ellen Gottesdiener and Mary Gorman to support his position. In addition, he welcomes Dr. Adam Welc to the IEEE Software Editorial Board and discusses the 2012 African Conference on Software Engineering and Applied Computing. The first Web extra at http://youtu.be/R5zUHUFEB7k is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Ellen Gottesdiener and Mary Gorman about requirements management in an agile context. The second Web extra at http://youtu.be/SSO6td0xzkI is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Philippe Kruchten about how software engineers can be misled by their own cognitive biases, falacial reasoning, and the games architects and requirements managers play. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2013.27},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - Unknown - Engineering Values From Architecture Games to Agile Requirements Welcome To The ediTorial Board.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {ASEAC,Adam Welc,African Conference on Software Engineering and App,Ellen Gottesdiener,Mary Gorman,Philippe Kruchten,bias,engineering values,principles,values},
number = {2},
pages = {2--6},
title = {{Engineering values: From architecture games to agile requirements}},
volume = {30},
year = {2013}
}
@article{Shull2013,
abstract = {IEEE Software Editor-in-Chief Forrest Shull discusses the importance of having and applying professional principles in all facets of software development while also keeping them in perspective. He cites work by Philippe Kruchten, Ellen Gottesdiener and Mary Gorman to support his position. In addition, he welcomes Dr. Adam Welc to the IEEE Software Editorial Board and discusses the 2012 African Conference on Software Engineering and Applied Computing. The first Web extra at http://youtu.be/R5zUHUFEB7k is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Ellen Gottesdiener and Mary Gorman about requirements management in an agile context. The second Web extra at http://youtu.be/SSO6td0xzkI is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Philippe Kruchten about how software engineers can be misled by their own cognitive biases, falacial reasoning, and the games architects and requirements managers play. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2013.27},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - Unknown - Engineering Values From Architecture Games to Agile Requirements Welcome To The ediTorial Board.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {ASEAC,Adam Welc,African Conference on Software Engineering and App,Ellen Gottesdiener,Mary Gorman,Philippe Kruchten,bias,engineering values,principles,values},
number = {2},
pages = {2--6},
title = {{Engineering values: From architecture games to agile requirements}},
volume = {30},
year = {2013}
}
@article{Shull2013,
abstract = {IEEE Software Editor-in-Chief Forrest Shull discusses the importance of having and applying professional principles in all facets of software development while also keeping them in perspective. He cites work by Philippe Kruchten, Ellen Gottesdiener and Mary Gorman to support his position. In addition, he welcomes Dr. Adam Welc to the IEEE Software Editorial Board and discusses the 2012 African Conference on Software Engineering and Applied Computing. The first Web extra at http://youtu.be/R5zUHUFEB7k is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Ellen Gottesdiener and Mary Gorman about requirements management in an agile context. The second Web extra at http://youtu.be/SSO6td0xzkI is an audio interview of IEEE Software editor-in-chief Forrest Shull speaking with Philippe Kruchten about how software engineers can be misled by their own cognitive biases, falacial reasoning, and the games architects and requirements managers play. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2013.27},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - Unknown - Engineering Values From Architecture Games to Agile Requirements Welcome To The ediTorial Board.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {ASEAC,Adam Welc,African Conference on Software Engineering and App,Ellen Gottesdiener,Mary Gorman,Philippe Kruchten,bias,engineering values,principles,values},
number = {2},
pages = {2--6},
title = {{Engineering values: From architecture games to agile requirements}},
volume = {30},
year = {2013}
}
@article{Soliman2015,
abstract = {Decision-making is at the core of software architecture design. However, in order for the architect to take the right design decisions, assistance is required for exploring the architectural knowledge, which encompasses the various architectural solutions, their relationships and distinctions. In the past decades, the number of available technology options has increased significantly, while existing architecture knowledge approaches support technology decisions by representing relations between the different technology solutions, as well as design problems. However, they do not differentiate the candidate technologies according to their offered qualities and drawbacks. Our main goal in this exploratory study is to understand how technology solutions are being considered by the architects during the design process, and how can we enhance existing architecture knowledge concepts to support technology decision making. Our contribution in this paper is differentiating the different technology solutions' features based on a set of architecturally significant aspects, to facilitate considering technologies during the architecture design decisions. In addition, we proposed an extension for existing architecture knowledge models, which characterise the technology design decisions, and their reasoning. We evaluated our results through real examples from practitioners. Moreover, we conducted interviews with experts to validate our proposed concepts.},
author = {Soliman, Mohamed and Riebisch, Matthias and Zdun, Uwe},
doi = {10.1109/WICSA.2015.14},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2015-05-04-soliman-wicsa2015-enriching-architecture-knowledge.pdf:pdf},
isbn = {9781479919222},
journal = {Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015},
keywords = {architectural solution,architecture design decisions,architecture knowledge,decision making,interviews,software architecture,technologies,technology design decision},
pages = {135--144},
title = {{Enriching Architecture Knowledge with Technology Design Decisions}},
year = {2015}
}
@article{Soliman2015,
abstract = {Decision-making is at the core of software architecture design. However, in order for the architect to take the right design decisions, assistance is required for exploring the architectural knowledge, which encompasses the various architectural solutions, their relationships and distinctions. In the past decades, the number of available technology options has increased significantly, while existing architecture knowledge approaches support technology decisions by representing relations between the different technology solutions, as well as design problems. However, they do not differentiate the candidate technologies according to their offered qualities and drawbacks. Our main goal in this exploratory study is to understand how technology solutions are being considered by the architects during the design process, and how can we enhance existing architecture knowledge concepts to support technology decision making. Our contribution in this paper is differentiating the different technology solutions' features based on a set of architecturally significant aspects, to facilitate considering technologies during the architecture design decisions. In addition, we proposed an extension for existing architecture knowledge models, which characterise the technology design decisions, and their reasoning. We evaluated our results through real examples from practitioners. Moreover, we conducted interviews with experts to validate our proposed concepts.},
author = {Soliman, Mohamed and Riebisch, Matthias and Zdun, Uwe},
doi = {10.1109/WICSA.2015.14},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2015-05-04-soliman-wicsa2015-enriching-architecture-knowledge.pdf:pdf},
isbn = {9781479919222},
journal = {Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015},
keywords = {architectural solution,architecture design decisions,architecture knowledge,decision making,interviews,software architecture,technologies,technology design decision},
pages = {135--144},
title = {{Enriching Architecture Knowledge with Technology Design Decisions}},
year = {2015}
}
@article{DeJong2019,
abstract = {Although architecture is often seen as the culmination of design decisions, design rationale is a suppositious child in architecture documentation. Many architecture frameworks and standards, like TOGAF and ISO/IEC 42010, recognize the importance, but do not offer any support in the rationale process. Recent initiatives have shown that simple means help in providing more rationale. However, there are very few studies that give evidence whether more rationale indeed leads to better quality. In this paper, we propose a non-invasive method, the Rationale Capture Cycle, that supports architects in capturing rationale during the design process. Through a controlled experiment with 10 experienced architects, we observe the effectiveness of the method in terms of design quality through different measures. The results of our experiments show that: (1) better rationale is strongly correlated with high quality, and (2) the test group with our proposed method outperforms the control group.},
author = {{De Jong}, Pim and {Van Der Werf}, Jan Martijn E.M. and {Van Steenbergen}, Marlies and Bex, Floris and Brinkhuis, Matthieu},
doi = {10.1109/ICSA-C.2019.00033},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/MARCH{\_}2019{\_}paper{\_}2-2.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {architecture documentation,design rationale,design reasoning,enterprise architecture},
pages = {145--152},
title = {{Evaluating Design Rationale in Architecture}},
year = {2019}
}
@article{DeJong2019,
abstract = {Although architecture is often seen as the culmination of design decisions, design rationale is a suppositious child in architecture documentation. Many architecture frameworks and standards, like TOGAF and ISO/IEC 42010, recognize the importance, but do not offer any support in the rationale process. Recent initiatives have shown that simple means help in providing more rationale. However, there are very few studies that give evidence whether more rationale indeed leads to better quality. In this paper, we propose a non-invasive method, the Rationale Capture Cycle, that supports architects in capturing rationale during the design process. Through a controlled experiment with 10 experienced architects, we observe the effectiveness of the method in terms of design quality through different measures. The results of our experiments show that: (1) better rationale is strongly correlated with high quality, and (2) the test group with our proposed method outperforms the control group.},
author = {{De Jong}, Pim and {Van Der Werf}, Jan Martijn E.M. and {Van Steenbergen}, Marlies and Bex, Floris and Brinkhuis, Matthieu},
doi = {10.1109/ICSA-C.2019.00033},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/MARCH{\_}2019{\_}paper{\_}2-2.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {architecture documentation,design rationale,design reasoning,enterprise architecture},
pages = {145--152},
title = {{Evaluating Design Rationale in Architecture}},
year = {2019}
}
@article{Mohan2009,
abstract = {Traceability - the ability of developers to describe and follow the life of an artifact throughout the software development life cycle - is an important process that facilitates acquisition and use of process knowledge. While there has been extensive research focusing on the development of traceability solutions, there is a paucity of research that characterizes the tasks that need to be performed in implementing and using traceability. This research addresses this gap by conceptualizing traceability practice in software development as comprising information processing and communication among developers involved in the process. Accordingly, we present the results of two complementary studies focusing on these two aspects of traceability. Based on Study 1, we develop a process model for information processing in traceability. Through Study 2, we identify important contingency factors that impact the mode of communication among developers and customers. We argue that choice of communication media should be dictated by matching particular media characteristics such as synchronicity, reprocessability, and channel capacity to the situation at hand rather than by using aggregated measures such as media richness or social presence. We integrate the findings from our two studies into a process model that prescribes guidelines for traceability practice in software development. Our prescriptions also help traceability tool developers in delivering traceability support that facilitates appropriate information processing and communication capabilities, taking various project characteristics into consideration.},
author = {Mohan, Kannan and Kumar, Nanda and Benbunan-Fich, Raquel},
doi = {10.1109/TPC.2008.2007870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Kumar, Benbunan-Fich - 2009 - Examining communication media selection and information processing in software development traceabi.pdf:pdf},
issn = {03611434},
journal = {IEEE Transactions on Professional Communication},
keywords = {Communication,Information processing,Media characteristics,Software development,Traceability},
number = {1},
pages = {17--39},
title = {{Examining communication media selection and information processing in software development traceability: An empirical investigation}},
volume = {52},
year = {2009}
}
@article{Mohan2009,
abstract = {Traceability - the ability of developers to describe and follow the life of an artifact throughout the software development life cycle - is an important process that facilitates acquisition and use of process knowledge. While there has been extensive research focusing on the development of traceability solutions, there is a paucity of research that characterizes the tasks that need to be performed in implementing and using traceability. This research addresses this gap by conceptualizing traceability practice in software development as comprising information processing and communication among developers involved in the process. Accordingly, we present the results of two complementary studies focusing on these two aspects of traceability. Based on Study 1, we develop a process model for information processing in traceability. Through Study 2, we identify important contingency factors that impact the mode of communication among developers and customers. We argue that choice of communication media should be dictated by matching particular media characteristics such as synchronicity, reprocessability, and channel capacity to the situation at hand rather than by using aggregated measures such as media richness or social presence. We integrate the findings from our two studies into a process model that prescribes guidelines for traceability practice in software development. Our prescriptions also help traceability tool developers in delivering traceability support that facilitates appropriate information processing and communication capabilities, taking various project characteristics into consideration.},
author = {Mohan, Kannan and Kumar, Nanda and Benbunan-Fich, Raquel},
doi = {10.1109/TPC.2008.2007870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Kumar, Benbunan-Fich - 2009 - Examining communication media selection and information processing in software development traceabi.pdf:pdf},
issn = {03611434},
journal = {IEEE Transactions on Professional Communication},
keywords = {Communication,Information processing,Media characteristics,Software development,Traceability},
number = {1},
pages = {17--39},
title = {{Examining communication media selection and information processing in software development traceability: An empirical investigation}},
volume = {52},
year = {2009}
}
@article{Mohan2009,
abstract = {Traceability - the ability of developers to describe and follow the life of an artifact throughout the software development life cycle - is an important process that facilitates acquisition and use of process knowledge. While there has been extensive research focusing on the development of traceability solutions, there is a paucity of research that characterizes the tasks that need to be performed in implementing and using traceability. This research addresses this gap by conceptualizing traceability practice in software development as comprising information processing and communication among developers involved in the process. Accordingly, we present the results of two complementary studies focusing on these two aspects of traceability. Based on Study 1, we develop a process model for information processing in traceability. Through Study 2, we identify important contingency factors that impact the mode of communication among developers and customers. We argue that choice of communication media should be dictated by matching particular media characteristics such as synchronicity, reprocessability, and channel capacity to the situation at hand rather than by using aggregated measures such as media richness or social presence. We integrate the findings from our two studies into a process model that prescribes guidelines for traceability practice in software development. Our prescriptions also help traceability tool developers in delivering traceability support that facilitates appropriate information processing and communication capabilities, taking various project characteristics into consideration.},
author = {Mohan, Kannan and Kumar, Nanda and Benbunan-Fich, Raquel},
doi = {10.1109/TPC.2008.2007870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Kumar, Benbunan-Fich - 2009 - Examining communication media selection and information processing in software development traceabi.pdf:pdf},
issn = {03611434},
journal = {IEEE Transactions on Professional Communication},
keywords = {Communication,Information processing,Media characteristics,Software development,Traceability},
number = {1},
pages = {17--39},
title = {{Examining communication media selection and information processing in software development traceability: An empirical investigation}},
volume = {52},
year = {2009}
}

@book{Wohlin2000,
author = {Wohlin, Claes and Runeson, Per and H{\"{o}}st, Martin and Ohlsson, M.C. and Regnell, B. and Wessl{\'{e}}n, A.},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/wohlin2000.pdf:pdf},
isbn = {978-1-4615-4625-2},
pages = {12--22},
publisher = {Springer Science {\&} Business Media},
title = {{Experimentation in Software Engineering: An Introduction (International Series in Software Engineering)}},
year = {2000}
}
@article{Moløkken2004,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2004 - Expert estimation of the effort of webdevelopment projects Why are software professionals in technical role.pdf:pdf},
journal = {Journal of Empirical Software Engineering},
keywords = {bidding process,effort estimation,individual differences,web development},
pages = {7--29},
title = {{Expert estimation of the effort of webdevelopment projects: Why are software professionals in technical roles more optimistic than those in non-technical roles}},
year = {2004}
}
@article{Moløkken2004,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2004 - Expert estimation of the effort of webdevelopment projects Why are software professionals in technical role.pdf:pdf},
journal = {Journal of Empirical Software Engineering},
keywords = {bidding process,effort estimation,individual differences,web development},
pages = {7--29},
title = {{Expert estimation of the effort of webdevelopment projects: Why are software professionals in technical roles more optimistic than those in non-technical roles}},
year = {2004}
}
@article{Moløkken2004,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2004 - Expert estimation of the effort of webdevelopment projects Why are software professionals in technical role.pdf:pdf},
journal = {Journal of Empirical Software Engineering},
keywords = {bidding process,effort estimation,individual differences,web development},
pages = {7--29},
title = {{Expert estimation of the effort of webdevelopment projects: Why are software professionals in technical roles more optimistic than those in non-technical roles}},
year = {2004}
}
@article{Shmueli2015,
abstract = {One of the major risks associated with software development is related to the phenomenon of over-requirement. Also known as over-specification and gold-plating, over-requirement is manifested when a product or a service is specified beyond the actual needs of the customer or the market. In the software development context, we argue in this work that over-requirement is due partially to the emotional involvement of developers with the software features they specify. Similar involvement has been demonstrated for physical items as a result of the endowment, IKEA, and I-designed-it-myself behavioral effects, when people come to overvalue items they possess or self-create. To explore these behavioral effects and the interactions among them in the context of software development, we conducted an experiment in which over 200 participants were asked to specify a nice-to-have software feature. Our results confirm the existence of these behavioral effects in software development and their influence on over-requirement. The findings contribute to theory by explaining the over-requirement phenomenon and by providing insights into behavioral effects in the context of software development. Also practically relevant, the findings can alert managers of software projects to the over-requirement risk evoked by the behavioral effects explored in this study.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1016/j.ijproman.2014.07.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2015 - Explaining over-requirement in software development projects An experimental investigation of behavioral.pdf:pdf},
issn = {02637863},
journal = {International Journal of Project Management},
keywords = {Demands-abilities fit,Endowment effect,Experiment,Gold-plating,I-designed-it-myself effect,IKEA effect,Over-requirement,Over-specification,Software development},
number = {2},
pages = {380--394},
title = {{Explaining over-requirement in software development projects: An experimental investigation of behavioral effects}},
volume = {33},
year = {2015}
}
@article{Shmueli2015,
abstract = {One of the major risks associated with software development is related to the phenomenon of over-requirement. Also known as over-specification and gold-plating, over-requirement is manifested when a product or a service is specified beyond the actual needs of the customer or the market. In the software development context, we argue in this work that over-requirement is due partially to the emotional involvement of developers with the software features they specify. Similar involvement has been demonstrated for physical items as a result of the endowment, IKEA, and I-designed-it-myself behavioral effects, when people come to overvalue items they possess or self-create. To explore these behavioral effects and the interactions among them in the context of software development, we conducted an experiment in which over 200 participants were asked to specify a nice-to-have software feature. Our results confirm the existence of these behavioral effects in software development and their influence on over-requirement. The findings contribute to theory by explaining the over-requirement phenomenon and by providing insights into behavioral effects in the context of software development. Also practically relevant, the findings can alert managers of software projects to the over-requirement risk evoked by the behavioral effects explored in this study.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1016/j.ijproman.2014.07.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2015 - Explaining over-requirement in software development projects An experimental investigation of behavioral.pdf:pdf},
issn = {02637863},
journal = {International Journal of Project Management},
keywords = {Demands-abilities fit,Endowment effect,Experiment,Gold-plating,I-designed-it-myself effect,IKEA effect,Over-requirement,Over-specification,Software development},
number = {2},
pages = {380--394},
title = {{Explaining over-requirement in software development projects: An experimental investigation of behavioral effects}},
volume = {33},
year = {2015}
}
@article{Shmueli2015,
abstract = {One of the major risks associated with software development is related to the phenomenon of over-requirement. Also known as over-specification and gold-plating, over-requirement is manifested when a product or a service is specified beyond the actual needs of the customer or the market. In the software development context, we argue in this work that over-requirement is due partially to the emotional involvement of developers with the software features they specify. Similar involvement has been demonstrated for physical items as a result of the endowment, IKEA, and I-designed-it-myself behavioral effects, when people come to overvalue items they possess or self-create. To explore these behavioral effects and the interactions among them in the context of software development, we conducted an experiment in which over 200 participants were asked to specify a nice-to-have software feature. Our results confirm the existence of these behavioral effects in software development and their influence on over-requirement. The findings contribute to theory by explaining the over-requirement phenomenon and by providing insights into behavioral effects in the context of software development. Also practically relevant, the findings can alert managers of software projects to the over-requirement risk evoked by the behavioral effects explored in this study.},
author = {Shmueli, Ofira and Pliskin, Nava and Fink, Lior},
doi = {10.1016/j.ijproman.2014.07.003},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shmueli, Pliskin, Fink - 2015 - Explaining over-requirement in software development projects An experimental investigation of behavioral.pdf:pdf},
issn = {02637863},
journal = {International Journal of Project Management},
keywords = {Demands-abilities fit,Endowment effect,Experiment,Gold-plating,I-designed-it-myself effect,IKEA effect,Over-requirement,Over-specification,Software development},
number = {2},
pages = {380--394},
title = {{Explaining over-requirement in software development projects: An experimental investigation of behavioral effects}},
volume = {33},
year = {2015}
}
@article{Gilson2019,
abstract = {Software quality attributes (e.g., security, performance) influence software architecture design decisions, e.g., when choosing technologies, patterns or tactics. As software developers are moving from big upfront design to an evolutionary or emerging design, the architecture of a system evolves as more functionality is added. In agile software development, functional user requirements are often expressed as user stories. Quality attributes might be implicitly referenced in user stories. To support a more systematic analysis and reasoning about quality attributes in agile development projects, this paper explores how to automatically identify quality attributes from user stories. This could help better understand relevant quality attributes (and potential architectural key drivers) before analysing product backlogs and domains in detail and provides the 'bigger picture' of potential architectural drivers for early architecture decision making. The goal of this paper is to present our vision and preliminary work towards understanding whether user stories do include information about quality attributes at all, and if so, how we can identify such information in an automated manner.},
author = {Gilson, Fabian and Galster, Matthias and Georis, Francois},
doi = {10.1109/ICSA-C.2019.00031},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/march-icsa{\_}mga-fgi-fge.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {agile software development,decision making,machine learning,natural language processing,software architecture},
pages = {129--136},
title = {{Extracting Quality Attributes from User Stories for Early Architecture Decision Making}},
year = {2019}
}
@article{Gilson2019a,
abstract = {Software quality attributes (e.g., security, performance) influence software architecture design decisions, e.g., when choosing technologies, patterns or tactics. As software developers are moving from big upfront design to an evolutionary or emerging design, the architecture of a system evolves as more functionality is added. In agile software development, functional user requirements are often expressed as user stories. Quality attributes might be implicitly referenced in user stories. To support a more systematic analysis and reasoning about quality attributes in agile development projects, this paper explores how to automatically identify quality attributes from user stories. This could help better understand relevant quality attributes (and potential architectural key drivers) before analysing product backlogs and domains in detail and provides the 'bigger picture' of potential architectural drivers for early architecture decision making. The goal of this paper is to present our vision and preliminary work towards understanding whether user stories do include information about quality attributes at all, and if so, how we can identify such information in an automated manner.},
author = {Gilson, Fabian and Galster, Matthias and Georis, Francois},
doi = {10.1109/ICSA-C.2019.00031},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/march-icsa{\_}mga-fgi-fge.pdf:pdf},
isbn = {9781728118765},
journal = {Proceedings - 2019 IEEE International Conference on Software Architecture - Companion, ICSA-C 2019},
keywords = {agile software development,decision making,machine learning,natural language processing,software architecture},
pages = {129--136},
title = {{Extracting Quality Attributes from User Stories for Early Architecture Decision Making}},
year = {2019}
}
@article{Sharma2021,
abstract = {A sound Decision-Making (DM) process is key to the successful governance of software projects. In many Open Source Software Development (OSSD) communities, DM processes lie buried amongst vast amounts of publicly available data. Hidden within this data lie the rationale for decisions that led to the evolution and maintenance of software products. While there have been some efforts to extract DM processes from publicly available data, the rationale behind how the decisions are made have seldom been explored. Extracting the rationale for these decisions can facilitate transparency (by making them known), and also promote accountability on the part of decision-makers. This work bridges this gap by means of a large-scale study that unearths the rationale behind decisions from Python development email archives comprising about 1.5 million emails. This paper makes two main contributions. First, it makes a knowledge contribution by unearthing and presenting the rationale behind decisions made. Second, it makes a methodological contribution by presenting a heuristics-based rationale extraction system called Rationale Miner that employs multiple heuristics, and follows a data-driven, bottom-up approach to infer the rationale behind specific decisions (e.g., whether a new module is implemented based on core developer consensus or benevolent dictator's pronouncement). Our approach can be applied to extract rationale in other OSSD communities that have similar governance structures.},
archivePrefix = {arXiv},
arxivId = {2102.05232},
author = {Sharma, Pankajeshwara Nand and Savarimuthu, Bastin Tony Roy and Stanger, Nigel},
doi = {10.6084/m9.figshare.12363014},
eprint = {2102.05232},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharma et al. - Unknown - Extracting Rationale for Open Source Software Development Decisions-A Study of Python Email Archives.pdf:pdf},
keywords = {Index Terms-Open Source Software Development (OSSD,Python,Rationale Miner,causal extraction,decision-making,heuristics,rationale},
title = {{Extracting Rationale for Open Source Software Development Decisions -- A Study of Python Email Archives}},
url = {http://arxiv.org/abs/2102.05232},
year = {2021}
}
@article{Sharma2021,
abstract = {A sound Decision-Making (DM) process is key to the successful governance of software projects. In many Open Source Software Development (OSSD) communities, DM processes lie buried amongst vast amounts of publicly available data. Hidden within this data lie the rationale for decisions that led to the evolution and maintenance of software products. While there have been some efforts to extract DM processes from publicly available data, the rationale behind how the decisions are made have seldom been explored. Extracting the rationale for these decisions can facilitate transparency (by making them known), and also promote accountability on the part of decision-makers. This work bridges this gap by means of a large-scale study that unearths the rationale behind decisions from Python development email archives comprising about 1.5 million emails. This paper makes two main contributions. First, it makes a knowledge contribution by unearthing and presenting the rationale behind decisions made. Second, it makes a methodological contribution by presenting a heuristics-based rationale extraction system called Rationale Miner that employs multiple heuristics, and follows a data-driven, bottom-up approach to infer the rationale behind specific decisions (e.g., whether a new module is implemented based on core developer consensus or benevolent dictator's pronouncement). Our approach can be applied to extract rationale in other OSSD communities that have similar governance structures.},
archivePrefix = {arXiv},
arxivId = {2102.05232},
author = {Sharma, Pankajeshwara Nand and Savarimuthu, Bastin Tony Roy and Stanger, Nigel},
doi = {10.6084/m9.figshare.12363014},
eprint = {2102.05232},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharma et al. - Unknown - Extracting Rationale for Open Source Software Development Decisions-A Study of Python Email Archives.pdf:pdf},
keywords = {Index Terms-Open Source Software Development (OSSD,Python,Rationale Miner,causal extraction,decision-making,heuristics,rationale},
title = {{Extracting Rationale for Open Source Software Development Decisions -- A Study of Python Email Archives}},
url = {http://arxiv.org/abs/2102.05232},
year = {2021}
}
@article{Sharma2021,
abstract = {A sound Decision-Making (DM) process is key to the successful governance of software projects. In many Open Source Software Development (OSSD) communities, DM processes lie buried amongst vast amounts of publicly available data. Hidden within this data lie the rationale for decisions that led to the evolution and maintenance of software products. While there have been some efforts to extract DM processes from publicly available data, the rationale behind how the decisions are made have seldom been explored. Extracting the rationale for these decisions can facilitate transparency (by making them known), and also promote accountability on the part of decision-makers. This work bridges this gap by means of a large-scale study that unearths the rationale behind decisions from Python development email archives comprising about 1.5 million emails. This paper makes two main contributions. First, it makes a knowledge contribution by unearthing and presenting the rationale behind decisions made. Second, it makes a methodological contribution by presenting a heuristics-based rationale extraction system called Rationale Miner that employs multiple heuristics, and follows a data-driven, bottom-up approach to infer the rationale behind specific decisions (e.g., whether a new module is implemented based on core developer consensus or benevolent dictator's pronouncement). Our approach can be applied to extract rationale in other OSSD communities that have similar governance structures.},
archivePrefix = {arXiv},
arxivId = {2102.05232},
author = {Sharma, Pankajeshwara Nand and Savarimuthu, Bastin Tony Roy and Stanger, Nigel},
doi = {10.6084/m9.figshare.12363014},
eprint = {2102.05232},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharma et al. - Unknown - Extracting Rationale for Open Source Software Development Decisions-A Study of Python Email Archives.pdf:pdf},
keywords = {Index Terms-Open Source Software Development (OSSD,Python,Rationale Miner,causal extraction,decision-making,heuristics,rationale},
title = {{Extracting Rationale for Open Source Software Development Decisions -- A Study of Python Email Archives}},
url = {http://arxiv.org/abs/2102.05232},
year = {2021}
}
@article{Ayas2021,
abstract = {Background: Microservices migrations are challenging and expensive projects with many decisions that need to be made in a multitude of dimensions. Existing research tends to focus on technical issues and decisions (e.g., how to split services). Equally important organizational or business issues and their relations with technical aspects often remain out of scope or on a high level of abstraction. Aims: In this study,we aim to holistically chart the decision-making that happens on all dimensions of a migration project towards microservices (including, but not limited to, the technical dimension). Method:We investigate 16 different migration cases in a grounded theory interview study, with 19 participants that recently migrated towards microservices. This study strongly focuses on the human aspects of a migration, through stakeholders and their decisions. Results: We identify 3 decision-making processes consisting of 22 decision-points and their alternative options. The decision-points are related to creating stakeholder engagement and assessing feasibility, technical implementation, and organizational restructuring. Conclusions: Our study provides an initial theory of decisionmaking in migrations to microservices. It also outfits practitioners with a roadmap of which decisions they should be prepared to make and at which point in the migration.},
archivePrefix = {arXiv},
arxivId = {2104.00390},
author = {Ayas, Hamdy Michael and Leitner, Philipp and Hebig, Regina},
doi = {10.1145/3475716.3475792},
eprint = {2104.00390},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3475716.3475792.pdf:pdf},
isbn = {9781450386654},
issn = {19493789},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Decision-making,Grounded theory,Interview study,Migration,microservices},
title = {{Facing the giant: A grounded theory study of decision-making in microservices migrations}},
year = {2021}
}
@article{Ayas2021a,
abstract = {Background: Microservices migrations are challenging and expensive projects with many decisions that need to be made in a multitude of dimensions. Existing research tends to focus on technical issues and decisions (e.g., how to split services). Equally important organizational or business issues and their relations with technical aspects often remain out of scope or on a high level of abstraction. Aims: In this study,we aim to holistically chart the decision-making that happens on all dimensions of a migration project towards microservices (including, but not limited to, the technical dimension). Method:We investigate 16 different migration cases in a grounded theory interview study, with 19 participants that recently migrated towards microservices. This study strongly focuses on the human aspects of a migration, through stakeholders and their decisions. Results: We identify 3 decision-making processes consisting of 22 decision-points and their alternative options. The decision-points are related to creating stakeholder engagement and assessing feasibility, technical implementation, and organizational restructuring. Conclusions: Our study provides an initial theory of decisionmaking in migrations to microservices. It also outfits practitioners with a roadmap of which decisions they should be prepared to make and at which point in the migration.},
archivePrefix = {arXiv},
arxivId = {2104.00390},
author = {Ayas, Hamdy Michael and Leitner, Philipp and Hebig, Regina},
doi = {10.1145/3475716.3475792},
eprint = {2104.00390},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3475716.3475792.pdf:pdf},
isbn = {9781450386654},
issn = {19493789},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Decision-making,Grounded theory,Interview study,Migration,microservices},
title = {{Facing the giant: A grounded theory study of decision-making in microservices migrations}},
year = {2021}
}
@article{Wirfs-Brock2007,
abstract = {In an ideal world, designers freely seek advice, ask for and offer constructive criticism, and openly discuss issues. They don't take criticism as personal affronts, and they and their managers make intelligent, informed decisions. But in reality, it can be difficult to get others to acknowledge criticism or heed advice. How can you convey the importance of an issue, convince others to take action, or get them to recognize a proposed alternative as the better choice? By becoming aware of some common cognitive biases, you can learn when it's worthwhile to tweak your message to increase the likelihood of its acceptance. Even if people don't always follow your advice, it helps to understand that their negative reactions might have little to do with you (and everything to do with how they naturally process information). Cognitive biases exist, and we designers are remiss if we ignore them. Reframing advice so that people are more likely to follow it isn't sneaky or manipulative-it's common sense. We should employ every device possible so that our information, argumentation, and advice are clearly understood.},
author = {Wirfs-Brock, Rebecca J.},
doi = {10.1109/MS.2007.108},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wirfs-Brock - 2007 - Giving design advice.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Cognitive biases},
number = {4},
pages = {13--15},
title = {{Giving design advice}},
volume = {24},
year = {2007}
}
@article{Wirfs-Brock2007,
abstract = {In an ideal world, designers freely seek advice, ask for and offer constructive criticism, and openly discuss issues. They don't take criticism as personal affronts, and they and their managers make intelligent, informed decisions. But in reality, it can be difficult to get others to acknowledge criticism or heed advice. How can you convey the importance of an issue, convince others to take action, or get them to recognize a proposed alternative as the better choice? By becoming aware of some common cognitive biases, you can learn when it's worthwhile to tweak your message to increase the likelihood of its acceptance. Even if people don't always follow your advice, it helps to understand that their negative reactions might have little to do with you (and everything to do with how they naturally process information). Cognitive biases exist, and we designers are remiss if we ignore them. Reframing advice so that people are more likely to follow it isn't sneaky or manipulative-it's common sense. We should employ every device possible so that our information, argumentation, and advice are clearly understood.},
author = {Wirfs-Brock, Rebecca J.},
doi = {10.1109/MS.2007.108},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wirfs-Brock - 2007 - Giving design advice.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Cognitive biases},
number = {4},
pages = {13--15},
title = {{Giving design advice}},
volume = {24},
year = {2007}
}
@article{Wirfs-Brock2007,
abstract = {In an ideal world, designers freely seek advice, ask for and offer constructive criticism, and openly discuss issues. They don't take criticism as personal affronts, and they and their managers make intelligent, informed decisions. But in reality, it can be difficult to get others to acknowledge criticism or heed advice. How can you convey the importance of an issue, convince others to take action, or get them to recognize a proposed alternative as the better choice? By becoming aware of some common cognitive biases, you can learn when it's worthwhile to tweak your message to increase the likelihood of its acceptance. Even if people don't always follow your advice, it helps to understand that their negative reactions might have little to do with you (and everything to do with how they naturally process information). Cognitive biases exist, and we designers are remiss if we ignore them. Reframing advice so that people are more likely to follow it isn't sneaky or manipulative-it's common sense. We should employ every device possible so that our information, argumentation, and advice are clearly understood.},
author = {Wirfs-Brock, Rebecca J.},
doi = {10.1109/MS.2007.108},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wirfs-Brock - 2007 - Giving design advice.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Cognitive biases},
number = {4},
pages = {13--15},
title = {{Giving design advice}},
volume = {24},
year = {2007}
}
@article{Moløkken-Østvold2004,
abstract = {The effort required to complete software projects is often estimated, completely or partially, using the judgment of experts, whose assessment may be biased. In general, such bias as there is seems to be towards estimates that are overly optimistic. The degree of bias varies from expert to expert, and seems to depend on both conscious and unconscious processes. One possible approach to reduce this bias towards over-optimism is to combine the judgments of several experts. This paper describes an experiment in which experts with different backgrounds combined their estimates in group discussion. First, 20 software professionals were asked to provide individual estimates of the effort required for a software development project. Subsequently, they formed five estimation groups, each consisting of four experts. Each of these groups agreed on a project effort estimate via the pooling of knowledge in discussion. We found that the groups submitted less optimistic estimates than the individuals. Interestingly, the group discussion-based estimates were closer to the effort expended on the actual project than the average of the individual expert estimates were, i.e., the group discussions led to better estimates than a mechanical averaging of the individual estimates. The groups' ability to identify a greater number of the activities required by the project is among the possible explanations for this reduction of bias.},
author = {Mol{\o}kken-{\O}stvold, Kjetil and J{\o}rgensen, Magne},
doi = {10.1023/B:EMSE.0000039882.39206.5a},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\O}stvold, J{\o}rgensen - 2004 - Group processes in software effort estimation.pdf:pdf},
issn = {13823256},
journal = {Empirical Software Engineering},
keywords = {Effort estimation,Expert bias,Expert judgment,Group processes,Software development},
number = {4},
pages = {315--334},
title = {{Group processes in software effort estimation}},
volume = {9},
year = {2004}
}
@article{Moløkken-Østvold2004,
abstract = {The effort required to complete software projects is often estimated, completely or partially, using the judgment of experts, whose assessment may be biased. In general, such bias as there is seems to be towards estimates that are overly optimistic. The degree of bias varies from expert to expert, and seems to depend on both conscious and unconscious processes. One possible approach to reduce this bias towards over-optimism is to combine the judgments of several experts. This paper describes an experiment in which experts with different backgrounds combined their estimates in group discussion. First, 20 software professionals were asked to provide individual estimates of the effort required for a software development project. Subsequently, they formed five estimation groups, each consisting of four experts. Each of these groups agreed on a project effort estimate via the pooling of knowledge in discussion. We found that the groups submitted less optimistic estimates than the individuals. Interestingly, the group discussion-based estimates were closer to the effort expended on the actual project than the average of the individual expert estimates were, i.e., the group discussions led to better estimates than a mechanical averaging of the individual estimates. The groups' ability to identify a greater number of the activities required by the project is among the possible explanations for this reduction of bias.},
author = {Mol{\o}kken-{\O}stvold, Kjetil and J{\o}rgensen, Magne},
doi = {10.1023/B:EMSE.0000039882.39206.5a},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\O}stvold, J{\o}rgensen - 2004 - Group processes in software effort estimation.pdf:pdf},
issn = {13823256},
journal = {Empirical Software Engineering},
keywords = {Effort estimation,Expert bias,Expert judgment,Group processes,Software development},
number = {4},
pages = {315--334},
title = {{Group processes in software effort estimation}},
volume = {9},
year = {2004}
}
@article{Moløkken-Østvold2004,
abstract = {The effort required to complete software projects is often estimated, completely or partially, using the judgment of experts, whose assessment may be biased. In general, such bias as there is seems to be towards estimates that are overly optimistic. The degree of bias varies from expert to expert, and seems to depend on both conscious and unconscious processes. One possible approach to reduce this bias towards over-optimism is to combine the judgments of several experts. This paper describes an experiment in which experts with different backgrounds combined their estimates in group discussion. First, 20 software professionals were asked to provide individual estimates of the effort required for a software development project. Subsequently, they formed five estimation groups, each consisting of four experts. Each of these groups agreed on a project effort estimate via the pooling of knowledge in discussion. We found that the groups submitted less optimistic estimates than the individuals. Interestingly, the group discussion-based estimates were closer to the effort expended on the actual project than the average of the individual expert estimates were, i.e., the group discussions led to better estimates than a mechanical averaging of the individual estimates. The groups' ability to identify a greater number of the activities required by the project is among the possible explanations for this reduction of bias.},
author = {Mol{\o}kken-{\O}stvold, Kjetil and J{\o}rgensen, Magne},
doi = {10.1023/B:EMSE.0000039882.39206.5a},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken-{\O}stvold, J{\o}rgensen - 2004 - Group processes in software effort estimation.pdf:pdf},
issn = {13823256},
journal = {Empirical Software Engineering},
keywords = {Effort estimation,Expert bias,Expert judgment,Group processes,Software development},
number = {4},
pages = {315--334},
title = {{Group processes in software effort estimation}},
volume = {9},
year = {2004}
}
@article{Dieu2022,
abstract = {Building software systems often requires knowledge and skills beyond what developers already possess. In such cases, developers have to leverage different sources of information to seek help. A growing number of researchers and practitioners have started investigating what programming-related information developers seek during software development. However, being a high level and a type of the most important development-related information, architectural information search activity is seldom explored. To fill this gap, we conducted an industrial survey completed by 103 participants to understand how developers search for architectural information to solve their architectural problems in development. Our main findings are: (1) searching for architectural information to learn about the pros and cons of certain architectural solutions (e.g., patterns, tactics) and to make an architecture decision among multiple choices are the most frequent purposes or tasks; (2) developers find difficulties mostly in getting relevant architectural information for addressing quality concerns and making design decisions among multiple choices when seeking architectural information; (3) taking too much time to go through architectural information retrieved from various sources and feeling overwhelmed due to the dispersion and abundance of architectural information in various sources are the top two major challenges developers face when searching for architectural information. Our findings (1) provide researchers with future directions, such as the design and development of approaches and tools for searching architectural information from multiple sources, and (2) can be used to provide guidelines for practitioners to refer to when seeking architectural information and providing architectural information that could be considered useful.},
archivePrefix = {arXiv},
arxivId = {2112.10920},
author = {{De Dieu}, Musengamana Jean and Liang, Peng and Shahin, Mojtaba},
doi = {10.1109/ICSA53651.2022.00014},
eprint = {2112.10920},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/dieu2022hds-1.pdf:pdf},
isbn = {9781665417280},
journal = {Proceedings - IEEE 19th International Conference on Software Architecture, ICSA 2022},
keywords = {Architectural Information,Industrial Survey,Search for Information,Software Development},
number = {December 2021},
pages = {58--68},
title = {{How Do Developers Search for Architectural Information? An Industrial Survey}},
year = {2022}
}
@article{Dieu2022,
abstract = {Building software systems often requires knowledge and skills beyond what developers already possess. In such cases, developers have to leverage different sources of information to seek help. A growing number of researchers and practitioners have started investigating what programming-related information developers seek during software development. However, being a high level and a type of the most important development-related information, architectural information search activity is seldom explored. To fill this gap, we conducted an industrial survey completed by 103 participants to understand how developers search for architectural information to solve their architectural problems in development. Our main findings are: (1) searching for architectural information to learn about the pros and cons of certain architectural solutions (e.g., patterns, tactics) and to make an architecture decision among multiple choices are the most frequent purposes or tasks; (2) developers find difficulties mostly in getting relevant architectural information for addressing quality concerns and making design decisions among multiple choices when seeking architectural information; (3) taking too much time to go through architectural information retrieved from various sources and feeling overwhelmed due to the dispersion and abundance of architectural information in various sources are the top two major challenges developers face when searching for architectural information. Our findings (1) provide researchers with future directions, such as the design and development of approaches and tools for searching architectural information from multiple sources, and (2) can be used to provide guidelines for practitioners to refer to when seeking architectural information and providing architectural information that could be considered useful.},
archivePrefix = {arXiv},
arxivId = {2112.10920},
author = {{De Dieu}, Musengamana Jean and Liang, Peng and Shahin, Mojtaba},
doi = {10.1109/ICSA53651.2022.00014},
eprint = {2112.10920},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/dieu2022hds-1.pdf:pdf},
isbn = {9781665417280},
journal = {Proceedings - IEEE 19th International Conference on Software Architecture, ICSA 2022},
keywords = {Architectural Information,Industrial Survey,Search for Information,Software Development},
number = {December 2021},
pages = {58--68},
title = {{How Do Developers Search for Architectural Information? An Industrial Survey}},
year = {2022}
}
@article{Schubanz2021,
abstract = {The Agile Manifesto titled “Working software over comprehensive documentation”. Although the stated principle makes an important point, it should not follow that documentation becomes obsolete. On the contrary, agile software development (ASD) is based on frequent decisions focused on customer benefits. Those decisions guide further development, subsequent maintenance, and software evolution and are made during every stage of the software development cycle. Thus, documenting the most important ones is an important foundation fostering product comprehension, software quality, and customer benefit. Besides, preserving decision knowledge supports refactoring and, thus, diminishing software erosion. However, all these beneficial properties are opposed by a dismissive attitude among software developers. Documentation is very unpopular among software developers, especially in the ASD community. A common interpretation of the agile manifesto at this point is that good and functional code can fully replace documentation. Among other reasons, this attitude is the reason for the sparse application of structured and systematic documentation of decisions and their rationale. To shed more light on imponderables, developer's desires regarding decision documentation, and assess the outlined perception of a lack of decision documentation, this paper reports a survey on decision documentation among industry practitioners. The author assesses to what extent the above claims hold by asking industry practitioners about their perceptions and applied practices regarding decision documentation. Therefore, the author conducted a large-scale survey in the German and English speaking Scrum community. A few more than 100 software developers were asked what they document, how they document and how they use/share produced documentation. The findings of this report reveal that there is a wide range of opinions in the agile community. The responses show that a developer's experience significantly impacts the documentation frequency and the interest in the available documentation. Similarly, the role in which software developers have operated in Scrum plays a significant role in the frequency of documentation and the timing when developers document.},
author = {Schubanz, Mathias},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Schubanz{\_}Report{\_}2021-05-26.pdf:pdf},
keywords = {Agile Software Development, Decision Documentation,Decision Documentation,agile software development,decision documentation,rationale management,scrum,survey},
pages = {387},
title = {{How Software Engineers Deal With Decisions in Scrum – An Analysis}},
url = {https://doi.org/10.26127/BTUOpen-5066},
year = {2021}
}
@article{Schubanz2021,
abstract = {The Agile Manifesto titled “Working software over comprehensive documentation”. Although the stated principle makes an important point, it should not follow that documentation becomes obsolete. On the contrary, agile software development (ASD) is based on frequent decisions focused on customer benefits. Those decisions guide further development, subsequent maintenance, and software evolution and are made during every stage of the software development cycle. Thus, documenting the most important ones is an important foundation fostering product comprehension, software quality, and customer benefit. Besides, preserving decision knowledge supports refactoring and, thus, diminishing software erosion. However, all these beneficial properties are opposed by a dismissive attitude among software developers. Documentation is very unpopular among software developers, especially in the ASD community. A common interpretation of the agile manifesto at this point is that good and functional code can fully replace documentation. Among other reasons, this attitude is the reason for the sparse application of structured and systematic documentation of decisions and their rationale. To shed more light on imponderables, developer's desires regarding decision documentation, and assess the outlined perception of a lack of decision documentation, this paper reports a survey on decision documentation among industry practitioners. The author assesses to what extent the above claims hold by asking industry practitioners about their perceptions and applied practices regarding decision documentation. Therefore, the author conducted a large-scale survey in the German and English speaking Scrum community. A few more than 100 software developers were asked what they document, how they document and how they use/share produced documentation. The findings of this report reveal that there is a wide range of opinions in the agile community. The responses show that a developer's experience significantly impacts the documentation frequency and the interest in the available documentation. Similarly, the role in which software developers have operated in Scrum plays a significant role in the frequency of documentation and the timing when developers document.},
author = {Schubanz, Mathias},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Schubanz{\_}Report{\_}2021-05-26.pdf:pdf},
keywords = {Agile Software Development, Decision Documentation,Decision Documentation,agile software development,decision documentation,rationale management,scrum,survey},
pages = {387},
title = {{How Software Engineers Deal With Decisions in Scrum – An Analysis}},
url = {https://doi.org/10.26127/BTUOpen-5066},
year = {2021}
}


@article{Tang2017,
abstract = {Despite past efforts, we have little understanding and limited research efforts on how architects make decisions in the real-world settings. It seems that software architecture researchers make implicit assumption that decision making by software architects can be a rational and prescribed process. Such an assumption is disputed in other fields such as economics and decision research. This paper studies the current state of software architecture decision making research in terms of human behaviors and practice. We carried out a literature review on software architecture decision making. We classified papers into decision making behavior and decision making practice and identified the research relationships between them. We found that decision making is a mental activity. Research into the behavioral aspects of software architecture decision making for incorporation into architectural design practices is required. We suggest three research topics on human aspects to improve software architecture practices.},
author = {Tang, Antony and Razavian, Maryam and Paech, Barbara and Hesse, Tom Michael},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/07930206 (1).pdf:pdf},
isbn = {9781509057290},
journal = {Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017},
keywords = {decision making,human behavior,methods and tools,software architecture},
pages = {107--116},
publisher = {IEEE},
title = {{Human Aspects in Software Architecture Decision Making: A Literature Review}},
year = {2017}
}
@inproceedings{Mair2011,
abstract = {Background: There has been much research into building formal (metrics-based) prediction systems with the aim of improving resource estimation and planning of software projects. However the 'objectivity' of such systems is illusory in the sense that many inputs need themselves to be estimated by the software engineer. Method: We review the uptake of past software project prediction research and identify relevant cognitive psychology research on expert behaviour. In particular we explore potential applications of recent metacognition research. Results: We find the human aspect is largely ignored, despite the availability of many important results from cognitive psychology. Conclusions: In order to increase the actual use of our metrics research e.g. effort prediction systems we need to have a more integrated view of how such research might be used and who might be using it. This leads to our belief that future research must be more holistic and inter-disciplinary. {\textcopyright} 2011 ACM.},
author = {Mair, Carolyn and Shepperd, Martin},
booktitle = {Proceedings of the 2nd international workshop on emerging trends in software metrics},
doi = {10.1145/1985374.1985393},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mair, Shepperd - 2011 - Human judgement and software metrics.pdf:pdf},
isbn = {9781450305938},
keywords = {accuracy,effort prediction,software project management},
pages = {81},
title = {{Human judgement and software metrics}},
year = {2011}
}
@inproceedings{Mair2011,
abstract = {Background: There has been much research into building formal (metrics-based) prediction systems with the aim of improving resource estimation and planning of software projects. However the 'objectivity' of such systems is illusory in the sense that many inputs need themselves to be estimated by the software engineer. Method: We review the uptake of past software project prediction research and identify relevant cognitive psychology research on expert behaviour. In particular we explore potential applications of recent metacognition research. Results: We find the human aspect is largely ignored, despite the availability of many important results from cognitive psychology. Conclusions: In order to increase the actual use of our metrics research e.g. effort prediction systems we need to have a more integrated view of how such research might be used and who might be using it. This leads to our belief that future research must be more holistic and inter-disciplinary. {\textcopyright} 2011 ACM.},
author = {Mair, Carolyn and Shepperd, Martin},
booktitle = {Proceedings of the 2nd international workshop on emerging trends in software metrics},
doi = {10.1145/1985374.1985393},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mair, Shepperd - 2011 - Human judgement and software metrics.pdf:pdf},
isbn = {9781450305938},
keywords = {accuracy,effort prediction,software project management},
pages = {81},
title = {{Human judgement and software metrics}},
year = {2011}
}
@inproceedings{Mair2011,
abstract = {Background: There has been much research into building formal (metrics-based) prediction systems with the aim of improving resource estimation and planning of software projects. However the 'objectivity' of such systems is illusory in the sense that many inputs need themselves to be estimated by the software engineer. Method: We review the uptake of past software project prediction research and identify relevant cognitive psychology research on expert behaviour. In particular we explore potential applications of recent metacognition research. Results: We find the human aspect is largely ignored, despite the availability of many important results from cognitive psychology. Conclusions: In order to increase the actual use of our metrics research e.g. effort prediction systems we need to have a more integrated view of how such research might be used and who might be using it. This leads to our belief that future research must be more holistic and inter-disciplinary. {\textcopyright} 2011 ACM.},
author = {Mair, Carolyn and Shepperd, Martin},
booktitle = {Proceedings of the 2nd international workshop on emerging trends in software metrics},
doi = {10.1145/1985374.1985393},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mair, Shepperd - 2011 - Human judgement and software metrics.pdf:pdf},
isbn = {9781450305938},
keywords = {accuracy,effort prediction,software project management},
pages = {81},
title = {{Human judgement and software metrics}},
year = {2011}
}
@article{Jørgensen2010,
abstract = {Software professionals are, on average, over-optimistic about the required effort usage and over-confident about the accuracy of their effort estimates. A better understanding of the mechanisms leading to the over-optimism and over-confidence may enable better estimation processes and, as a consequence, better managed software development projects. We hypothesize that there are situations where more work on risk identification leads to increased over-optimism and over-confidence in software development effort estimates, instead of the intended improvement of realism. Four experiments with software professionals are conducted to test the hypothesis. All four experiments provide results in support of the hypothesis. Possible explanations of the counter-intuitive finding relate to results from cognitive science on "illusion-of-control", "cognitive accessibility", "the peak-end rule" and "risk as feeling." Thorough work on risk identification is essential for many purposes and our results should not lead to less emphasis on this activity. Our results do, however, suggest that it matters how risk identification and judgment-based effort estimation processes are combined. A simple approach for better combination of risk identification work and effort estimation is suggested. {\textcopyright} 2009 Elsevier B.V. All rights reserved.},
author = {J{\o}rgensen, Magne},
doi = {10.1016/j.infsof.2009.12.002},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2010 - Identification of more risks can lead to increased over-optimism of and over-confidence in software development effor.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Effort estimation,Human judgment,Risk assessment},
number = {5},
pages = {506--516},
publisher = {Elsevier B.V.},
title = {{Identification of more risks can lead to increased over-optimism of and over-confidence in software development effort estimates}},
url = {http://dx.doi.org/10.1016/j.infsof.2009.12.002},
volume = {52},
year = {2010}
}
@article{Jørgensen2010,
abstract = {Software professionals are, on average, over-optimistic about the required effort usage and over-confident about the accuracy of their effort estimates. A better understanding of the mechanisms leading to the over-optimism and over-confidence may enable better estimation processes and, as a consequence, better managed software development projects. We hypothesize that there are situations where more work on risk identification leads to increased over-optimism and over-confidence in software development effort estimates, instead of the intended improvement of realism. Four experiments with software professionals are conducted to test the hypothesis. All four experiments provide results in support of the hypothesis. Possible explanations of the counter-intuitive finding relate to results from cognitive science on "illusion-of-control", "cognitive accessibility", "the peak-end rule" and "risk as feeling." Thorough work on risk identification is essential for many purposes and our results should not lead to less emphasis on this activity. Our results do, however, suggest that it matters how risk identification and judgment-based effort estimation processes are combined. A simple approach for better combination of risk identification work and effort estimation is suggested. {\textcopyright} 2009 Elsevier B.V. All rights reserved.},
author = {J{\o}rgensen, Magne},
doi = {10.1016/j.infsof.2009.12.002},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2010 - Identification of more risks can lead to increased over-optimism of and over-confidence in software development effor.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Effort estimation,Human judgment,Risk assessment},
number = {5},
pages = {506--516},
publisher = {Elsevier B.V.},
title = {{Identification of more risks can lead to increased over-optimism of and over-confidence in software development effort estimates}},
url = {http://dx.doi.org/10.1016/j.infsof.2009.12.002},
volume = {52},
year = {2010}
}
@article{Jørgensen2010,
abstract = {Software professionals are, on average, over-optimistic about the required effort usage and over-confident about the accuracy of their effort estimates. A better understanding of the mechanisms leading to the over-optimism and over-confidence may enable better estimation processes and, as a consequence, better managed software development projects. We hypothesize that there are situations where more work on risk identification leads to increased over-optimism and over-confidence in software development effort estimates, instead of the intended improvement of realism. Four experiments with software professionals are conducted to test the hypothesis. All four experiments provide results in support of the hypothesis. Possible explanations of the counter-intuitive finding relate to results from cognitive science on "illusion-of-control", "cognitive accessibility", "the peak-end rule" and "risk as feeling." Thorough work on risk identification is essential for many purposes and our results should not lead to less emphasis on this activity. Our results do, however, suggest that it matters how risk identification and judgment-based effort estimation processes are combined. A simple approach for better combination of risk identification work and effort estimation is suggested. {\textcopyright} 2009 Elsevier B.V. All rights reserved.},
author = {J{\o}rgensen, Magne},
doi = {10.1016/j.infsof.2009.12.002},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2010 - Identification of more risks can lead to increased over-optimism of and over-confidence in software development effor.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Effort estimation,Human judgment,Risk assessment},
number = {5},
pages = {506--516},
publisher = {Elsevier B.V.},
title = {{Identification of more risks can lead to increased over-optimism of and over-confidence in software development effort estimates}},
url = {http://dx.doi.org/10.1016/j.infsof.2009.12.002},
volume = {52},
year = {2010}
}
@article{Browne2002,
abstract = {Requirements determination is a critical phase of information systems development, but much evidence suggests that the process can and should be improved. Because the bulk of requirements determination occurs early in the development of a system, improvements can yield significant benefits for the entire systems development process. This paper first discusses a three-stage descriptive model of the requirements determination process. Four classes of difficulties in determining systems requirements are then used to organize and describe particular problems that occur within each stage of the process, together with the cognitive and behavioral theories that underlie them. The paper then describes techniques that can address the problems and presents theoretical considerations that analysts can use in applying the techniques to improve requirements determination. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Browne, Glenn J. and Ramesh, V.},
doi = {10.1016/S0378-7206(02)00014-9},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Browne, Ramesh - 2002 - Improving information requirements determination A cognitive perspective.pdf:pdf},
issn = {03787206},
journal = {Information and Management},
keywords = {Cognitive limitations,Information systems development,Knowledge elicitation,Representation techniques,Requirements determination},
number = {8},
pages = {625--645},
title = {{Improving information requirements determination: A cognitive perspective}},
volume = {39},
year = {2002}
}
@article{Browne2002,
abstract = {Requirements determination is a critical phase of information systems development, but much evidence suggests that the process can and should be improved. Because the bulk of requirements determination occurs early in the development of a system, improvements can yield significant benefits for the entire systems development process. This paper first discusses a three-stage descriptive model of the requirements determination process. Four classes of difficulties in determining systems requirements are then used to organize and describe particular problems that occur within each stage of the process, together with the cognitive and behavioral theories that underlie them. The paper then describes techniques that can address the problems and presents theoretical considerations that analysts can use in applying the techniques to improve requirements determination. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Browne, Glenn J. and Ramesh, V.},
doi = {10.1016/S0378-7206(02)00014-9},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Browne, Ramesh - 2002 - Improving information requirements determination A cognitive perspective.pdf:pdf},
issn = {03787206},
journal = {Information and Management},
keywords = {Cognitive limitations,Information systems development,Knowledge elicitation,Representation techniques,Requirements determination},
number = {8},
pages = {625--645},
title = {{Improving information requirements determination: A cognitive perspective}},
volume = {39},
year = {2002}
}
@article{Browne2002,
abstract = {Requirements determination is a critical phase of information systems development, but much evidence suggests that the process can and should be improved. Because the bulk of requirements determination occurs early in the development of a system, improvements can yield significant benefits for the entire systems development process. This paper first discusses a three-stage descriptive model of the requirements determination process. Four classes of difficulties in determining systems requirements are then used to organize and describe particular problems that occur within each stage of the process, together with the cognitive and behavioral theories that underlie them. The paper then describes techniques that can address the problems and presents theoretical considerations that analysts can use in applying the techniques to improve requirements determination. {\textcopyright} 2002 Elsevier Science B.V. All rights reserved.},
author = {Browne, Glenn J. and Ramesh, V.},
doi = {10.1016/S0378-7206(02)00014-9},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Browne, Ramesh - 2002 - Improving information requirements determination A cognitive perspective.pdf:pdf},
issn = {03787206},
journal = {Information and Management},
keywords = {Cognitive limitations,Information systems development,Knowledge elicitation,Representation techniques,Requirements determination},
number = {8},
pages = {625--645},
title = {{Improving information requirements determination: A cognitive perspective}},
volume = {39},
year = {2002}
}
@article{Pitts2007,
author = {Pitts, Mitzi G and Browne, Glenn J},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pitts, Browne - 2007 - prompts.pdf:pdf},
journal = {Information systems journal},
keywords = {cognitive challenges,elicita tion methods,information systems development,prompting techniques,requirements determination},
pages = {89--110},
title = {{Improving requirements elicitation: an empirical investigation of procedural prompts}},
year = {2007}
}
@article{Pitts2007,
author = {Pitts, Mitzi G and Browne, Glenn J},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pitts, Browne - 2007 - prompts.pdf:pdf},
journal = {Information systems journal},
keywords = {cognitive challenges,elicita tion methods,information systems development,prompting techniques,requirements determination},
pages = {89--110},
title = {{Improving requirements elicitation: an empirical investigation of procedural prompts}},
year = {2007}
}
@article{Pitts2007,
author = {Pitts, Mitzi G and Browne, Glenn J},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pitts, Browne - 2007 - prompts.pdf:pdf},
journal = {Information systems journal},
keywords = {cognitive challenges,elicita tion methods,information systems development,prompting techniques,requirements determination},
pages = {89--110},
title = {{Improving requirements elicitation: an empirical investigation of procedural prompts}},
year = {2007}
}
@article{Tang2018a,
abstract = {Software designers have been known to think naturalistically. This means that there may be inadequate rational thinking during software design. In the past two decades, many research works suggested that designers need to produce design rationale. However, design rationale can be produced to retrofit naturalistic decisions, which means that design decisions may still not be well reasoned. Through a controlled experiment, we studied design reasoning and design rationale by asking participants to carry out a group design. As treatment, we provided 6 out of 12 student teams with a set of reasoning reminder cards to see how they compare with teams without the reminder cards. Additionally, we performed the same experiment with 2 teams of professionals who used the reminder cards, and compared the results with 3 teams of professionals. The experimental results show that both professionals and students who were equipped with the reasoning reminder cards reasoned more with their design. Second, the more a team discusses design reasoning, the more design rationale they find.},
author = {Tang, Antony and Bex, Floris and Schriek, Courtney and van der Werf, Jan Martijn E.M.},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121218301043-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
number = {April 2017},
pages = {22--40},
publisher = {Elsevier},
title = {{Improving software design reasoning–A reminder card approach}},
volume = {144},
year = {2018}
}
@article{Tang2018,
abstract = {Software designers have been known to think naturalistically. This means that there may be inadequate rational thinking during software design. In the past two decades, many research works suggested that designers need to produce design rationale. However, design rationale can be produced to retrofit naturalistic decisions, which means that design decisions may still not be well reasoned. Through a controlled experiment, we studied design reasoning and design rationale by asking participants to carry out a group design. As treatment, we provided 6 out of 12 student teams with a set of reasoning reminder cards to see how they compare with teams without the reminder cards. Additionally, we performed the same experiment with 2 teams of professionals who used the reminder cards, and compared the results with 3 teams of professionals. The experimental results show that both professionals and students who were equipped with the reasoning reminder cards reasoned more with their design. Second, the more a team discusses design reasoning, the more design rationale they find.},
annote = {Tutaj inne badanie na studentach gdzie pr{\'{o}}bowano "racjonalizowa{\'{c}}" ich decyzje. W ramach natchnienia jak takie rzeczy pisa{\'{c}}.},
author = {Tang, Antony and Bex, Floris and Schriek, Courtney and van der Werf, Jan Martijn E.M.},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121218301043-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
number = {April 2017},
pages = {22--40},
publisher = {Elsevier},
title = {{Improving software design reasoning–A reminder card approach}},
volume = {144},
year = {2018}
}
@article{Fatima2019,
abstract = {Requirements elicitation is one of the essential steps towards software design and construction. Business analysts and stakeholders often face challenges in gathering or conveying key software requirements. There are many methods and tools designed by researchers and practitioners but with the persistent development of new technologies, there is a need to make requirements gathering and design-rationale process more efficient and adaptable. Storytelling is an emerging concept and researchers are witnessing its effectiveness in education, community building, information system, and requirement elicitation. Objectives of this study are to devise a method for requirements elicitation and improving design-rationales using story-based techniques and evaluate the effectiveness of the proposed activity. To answer the research objectives, the authors have conducted open-ended interviews to get feedback on the proposed method; the authors have case requirement from a running project to map how this method can be useful; and performed empirical evaluation of the proposed card-based activity. The estimated regression model, in our study, has shown that participants' perception about the simplicity/easiness and the joy of playing the game has an eventual positive effect on requirements elicitation through enhancing user's desire to play the game, which in turn increases the collaborative learning outcomes of the game.},
author = {Fatima, Rubia and Yasin, Affan and Liu, Lin and Wang, Jianmin and Afzal, Wasif and Yasin, Atif},
doi = {10.1049/iet-sen.2018.5379},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/IET Software - 2019 - Fatima - Improving software requirements reasoning by novices a story{\%}E2{\%}80{\%}90based approach.pdf:pdf},
issn = {17518806},
journal = {IET Software},
number = {6},
pages = {564--574},
title = {{Improving software requirements reasoning by novices: A story-based approach}},
volume = {13},
year = {2019}
}
@article{Fatima2019,
abstract = {Requirements elicitation is one of the essential steps towards software design and construction. Business analysts and stakeholders often face challenges in gathering or conveying key software requirements. There are many methods and tools designed by researchers and practitioners but with the persistent development of new technologies, there is a need to make requirements gathering and design-rationale process more efficient and adaptable. Storytelling is an emerging concept and researchers are witnessing its effectiveness in education, community building, information system, and requirement elicitation. Objectives of this study are to devise a method for requirements elicitation and improving design-rationales using story-based techniques and evaluate the effectiveness of the proposed activity. To answer the research objectives, the authors have conducted open-ended interviews to get feedback on the proposed method; the authors have case requirement from a running project to map how this method can be useful; and performed empirical evaluation of the proposed card-based activity. The estimated regression model, in our study, has shown that participants' perception about the simplicity/easiness and the joy of playing the game has an eventual positive effect on requirements elicitation through enhancing user's desire to play the game, which in turn increases the collaborative learning outcomes of the game.},
author = {Fatima, Rubia and Yasin, Affan and Liu, Lin and Wang, Jianmin and Afzal, Wasif and Yasin, Atif},
doi = {10.1049/iet-sen.2018.5379},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/IET Software - 2019 - Fatima - Improving software requirements reasoning by novices a story{\%}E2{\%}80{\%}90based approach.pdf:pdf},
issn = {17518806},
journal = {IET Software},
number = {6},
pages = {564--574},
title = {{Improving software requirements reasoning by novices: A story-based approach}},
volume = {13},
year = {2019}
}
@inproceedings{Jørgensen2007,
author = {J{\o}rgensen, Magne},
booktitle = {Proceedings of Second European Conference on Cognitive Science. 2007. Delphi, Greece: Hellenic Cognitive Science Society},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2005 - Individual Differences in How Much People are Affected by Irrelevant and Misleading Information.pdf:pdf},
number = {1325},
title = {{Individual Differences in How Much People are Affected by Irrelevant and Misleading Information}},
year = {2007}
}
@inproceedings{Jørgensen2007,
author = {J{\o}rgensen, Magne},
booktitle = {Proceedings of Second European Conference on Cognitive Science. 2007. Delphi, Greece: Hellenic Cognitive Science Society},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2005 - Individual Differences in How Much People are Affected by Irrelevant and Misleading Information.pdf:pdf},
number = {1325},
title = {{Individual Differences in How Much People are Affected by Irrelevant and Misleading Information}},
year = {2007}
}
@inproceedings{Jørgensen2007,
author = {J{\o}rgensen, Magne},
booktitle = {Proceedings of Second European Conference on Cognitive Science. 2007. Delphi, Greece: Hellenic Cognitive Science Society},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen - 2005 - Individual Differences in How Much People are Affected by Irrelevant and Misleading Information.pdf:pdf},
number = {1325},
title = {{Individual Differences in How Much People are Affected by Irrelevant and Misleading Information}},
year = {2007}
}
@article{Babar2006,
author = {Babar, Muhammad Ali and Tang, Antony and Gorton, Ian},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Industrial{\_}Perspective{\_}on{\_}the{\_}Usefulness{\_}of{\_}Design{\_}Rationale{\_}for{\_}Software{\_}Maintenance{\_}A{\_}Survey.pdf:pdf},
isbn = {0769527183},
title = {{Industrial Perspective on the Usefulness of Design Rationale for Software Maintenance : A Survey}},
year = {2006}
}
@article{Babar2006,
author = {Babar, Muhammad Ali and Tang, Antony and Gorton, Ian},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Industrial{\_}Perspective{\_}on{\_}the{\_}Usefulness{\_}of{\_}Design{\_}Rationale{\_}for{\_}Software{\_}Maintenance{\_}A{\_}Survey.pdf:pdf},
isbn = {0769527183},
title = {{Industrial Perspective on the Usefulness of Design Rationale for Software Maintenance : A Survey}},
year = {2006}
}
@article{Jørgensen2005,
author = {J{\o}rgensen, M and Gruschke, T M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Gruschke - 2005 - Industrial use of formal software cost estimation models Expert estimation in disguise.pdf:pdf},
journal = {Proc. Conf. Evaluation and Assessment in Software Eng.(EASE'05)},
pages = {1--7},
title = {{Industrial use of formal software cost estimation models: Expert estimation in disguise}},
year = {2005}
}
@article{Jørgensen2005,
author = {J{\o}rgensen, M and Gruschke, T M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Gruschke - 2005 - Industrial use of formal software cost estimation models Expert estimation in disguise.pdf:pdf},
journal = {Proc. Conf. Evaluation and Assessment in Software Eng.(EASE'05)},
pages = {1--7},
title = {{Industrial use of formal software cost estimation models: Expert estimation in disguise}},
year = {2005}
}
@article{Jørgensen2005,
author = {J{\o}rgensen, M and Gruschke, T M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Gruschke - 2005 - Industrial use of formal software cost estimation models Expert estimation in disguise.pdf:pdf},
journal = {Proc. Conf. Evaluation and Assessment in Software Eng.(EASE'05)},
pages = {1--7},
title = {{Industrial use of formal software cost estimation models: Expert estimation in disguise}},
year = {2005}
}

@article{Calikli2013a,
abstract = {The thought processes of people have a significant impact on software quality, as software is designed, developed and tested by people. Cognitive biases, which are defined as patterned deviations of human thought from the laws of logic and mathematics, are a likely cause of software defects. However, there is little empirical evidence to date to substantiate this assertion. In this research, we focus on a specific cognitive bias, confirmation bias, which is defined as the tendency of people to seek evidence that verifies a hypothesis rather than seeking evidence to falsify a hypothesis. Due to this confirmation bias, developers tend to perform unit tests to make their program work rather than to break their code. Therefore, confirmation bias is believed to be one of the factors that lead to an increased software defect density. In this research, we present a metric scheme that explores the impact of developers' confirmation bias on software defect density. In order to estimate the effectiveness of our metric scheme in the quantification of confirmation bias within the context of software development, we performed an empirical study that addressed the prediction of the defective parts of software. In our empirical study, we used confirmation bias metrics on five datasets obtained from two companies. Our results provide empirical evidence that human thought processes and cognitive aspects deserve further investigation to improve decision making in software development for effective process management and resource allocation.},
author = {{\c{C}}alikli, G{\"{u}}l and Bener, Ayşe Başar},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/{\c{C}}alikli, Bener - 2013 - Influence of confirmation biases of developers on software quality An empirical study.pdf:pdf},
issn = {09639314},
journal = {Software Quality Journal},
keywords = {Confirmation bias,Defect prediction,Human factors,Software psychology},
number = {2},
pages = {377--416},
title = {{Influence of confirmation biases of developers on software quality: An empirical study}},
volume = {21},
year = {2013}
}
@article{Nadri2020,
abstract = {Recent studies found that the developer{\&}{\#}x2019;s pull request{\&}{\#}x2019;s quality is not the only factor that correlates with its rejection. Diversity factors such as social, gender, and geographical location also correlate. This paper assists on diversity research with a qualitative study that analyzes whether there is evidence of bias based on perceptible race in the written comments of nonmerged pull requests in GitHub. We examine the written reasons left as comments by GitHub developers explaining the rejection of 556 contributions submitted by four perceptible racial groups: Asian/Pacific Islander (API), Black, Hispanic, and White. Our initial results may indicate questionable behavior when rejecting pull requests as perceptible-API get more rejections with no reason than perceptible-White. Furthermore, we have identified that submitters perceptible as Hispanic and Black have 39{\%} of their pull requests rejected because they are seen as unnecessary which is 10-12 percentage points more frequent than the rest of perceptible races.},
author = {Nadri, Reza and {Rodriguez Perez}, Gema and Nagappan, Meiyappan},
doi = {10.1109/MS.2020.3036758},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09250363.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {February},
pages = {51--57},
title = {{Insights into Nonmerged Pull Requests in GitHub: Is There Evidence of Bias Based on Perceptible Race?}},
year = {2020}
}
@article{Nadri2020,
abstract = {Recent studies found that the developer{\&}{\#}x2019;s pull request{\&}{\#}x2019;s quality is not the only factor that correlates with its rejection. Diversity factors such as social, gender, and geographical location also correlate. This paper assists on diversity research with a qualitative study that analyzes whether there is evidence of bias based on perceptible race in the written comments of nonmerged pull requests in GitHub. We examine the written reasons left as comments by GitHub developers explaining the rejection of 556 contributions submitted by four perceptible racial groups: Asian/Pacific Islander (API), Black, Hispanic, and White. Our initial results may indicate questionable behavior when rejecting pull requests as perceptible-API get more rejections with no reason than perceptible-White. Furthermore, we have identified that submitters perceptible as Hispanic and Black have 39{\%} of their pull requests rejected because they are seen as unnecessary which is 10-12 percentage points more frequent than the rest of perceptible races.},
author = {Nadri, Reza and {Rodriguez Perez}, Gema and Nagappan, Meiyappan},
doi = {10.1109/MS.2020.3036758},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09250363.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {February},
pages = {51--57},
title = {{Insights into Nonmerged Pull Requests in GitHub: Is There Evidence of Bias Based on Perceptible Race?}},
year = {2020}
}
@article{Nadri2020,
abstract = {Recent studies found that the developer{\&}{\#}x2019;s pull request{\&}{\#}x2019;s quality is not the only factor that correlates with its rejection. Diversity factors such as social, gender, and geographical location also correlate. This paper assists on diversity research with a qualitative study that analyzes whether there is evidence of bias based on perceptible race in the written comments of nonmerged pull requests in GitHub. We examine the written reasons left as comments by GitHub developers explaining the rejection of 556 contributions submitted by four perceptible racial groups: Asian/Pacific Islander (API), Black, Hispanic, and White. Our initial results may indicate questionable behavior when rejecting pull requests as perceptible-API get more rejections with no reason than perceptible-White. Furthermore, we have identified that submitters perceptible as Hispanic and Black have 39{\%} of their pull requests rejected because they are seen as unnecessary which is 10-12 percentage points more frequent than the rest of perceptible races.},
author = {Nadri, Reza and {Rodriguez Perez}, Gema and Nagappan, Meiyappan},
doi = {10.1109/MS.2020.3036758},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09250363.pdf:pdf},
issn = {19374194},
journal = {IEEE Software},
number = {February},
pages = {51--57},
title = {{Insights into Nonmerged Pull Requests in GitHub: Is There Evidence of Bias Based on Perceptible Race?}},
year = {2020}
}
@article{Tobias2009,
abstract = {We are gradually learning that "user experience" is a critical factor in customer satisfaction and loyalty. A positive experience means a happy customer who returns again. Designers of software systems and web services have been digging deeply into how they might generate a positive user experience. They are moving beyond anecdotes about excellent examples of user experiences and are developing design principles. Phillip Tobias gives us a fascinating account of the emerging design principles that will generate satisfied and loyal users.},
author = {Tobias, Phillip and Spiegel, Daniel S.},
doi = {10.1145/1569887.1576100},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tobias, Spiegel - 2009 - Is Design the Preeminent Protagonist in User Experience.pdf:pdf},
journal = {Ubiquity},
number = {May},
pages = {1},
title = {{Is Design the Preeminent Protagonist in User Experience?}},
volume = {2009},
year = {2009}
}
@article{Tobias2009,
abstract = {We are gradually learning that "user experience" is a critical factor in customer satisfaction and loyalty. A positive experience means a happy customer who returns again. Designers of software systems and web services have been digging deeply into how they might generate a positive user experience. They are moving beyond anecdotes about excellent examples of user experiences and are developing design principles. Phillip Tobias gives us a fascinating account of the emerging design principles that will generate satisfied and loyal users.},
author = {Tobias, Phillip and Spiegel, Daniel S.},
doi = {10.1145/1569887.1576100},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tobias, Spiegel - 2009 - Is Design the Preeminent Protagonist in User Experience.pdf:pdf},
journal = {Ubiquity},
number = {May},
pages = {1},
title = {{Is Design the Preeminent Protagonist in User Experience?}},
volume = {2009},
year = {2009}
}
@article{Tobias2009,
abstract = {We are gradually learning that "user experience" is a critical factor in customer satisfaction and loyalty. A positive experience means a happy customer who returns again. Designers of software systems and web services have been digging deeply into how they might generate a positive user experience. They are moving beyond anecdotes about excellent examples of user experiences and are developing design principles. Phillip Tobias gives us a fascinating account of the emerging design principles that will generate satisfied and loyal users.},
author = {Tobias, Phillip and Spiegel, Daniel S.},
doi = {10.1145/1569887.1576100},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tobias, Spiegel - 2009 - Is Design the Preeminent Protagonist in User Experience.pdf:pdf},
journal = {Ubiquity},
number = {May},
pages = {1},
title = {{Is Design the Preeminent Protagonist in User Experience?}},
volume = {2009},
year = {2009}
}
@inproceedings{Borowa2021,
annote = {To badanie kt{\'{o}}re b{\c{e}}dziemy kontynuowa{\'{c}}.},
author = {Borowa, Klara and Dwornik, Robert and Zalewski, Andrzej},
booktitle = {PROFES 2021},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/{\_}camera{\_}ready{\_}test{\_}{\_}Debiasing{\_}pilot(2).pdf:pdf},
keywords = {architectural,cognitive biases,debiasing,decision-making,software architecture},
pages = {1--8},
title = {{Is knowledge the key? An experiment on debiasing architectural decision-making - a pilot study}},
year = {2021}
}
@article{Allen2010,
abstract = {Reusing database queries by adapting them to satisfy new information requests is an attractive strategy for extracting information from databases without involving database specialists. However, the reuse of information systems artifacts has been shown to be susceptible to the phenomenon of anchoring and adjustment. Anchoring often leads to a systematic adjustment bias in which people fail to make sufficient changes to an anchor in response to the needs of a new task. In a study involving 157 novice query writers from six universities, we examined the effect of this phenomenon on the reuse of Structured Query Language (SQL) queries under varying levels of domain familiarity and for different types of anchors. Participants developed SQL queries to respond to four information requests in a familiar domain and four information requests in an unfamiliar domain. For two information requests in each domain, participants were also provided with sample queries (anchors) that answered similar information requests. We found evidence that the opportunity to reuse sample queries resulted in an adjustment bias leading to poorer quality query results and greater overconfidence in the correctness of results. The results also indicate that the strength of the adjustment bias depends on a combination of domain familiarity and type of anchor. This study demonstrates that anchoring and adjustment during query reuse can lead to queries that are less accurate than those written from scratch. We also extend the concept of anchoring and adjustment by distinguishing between surface-structure and deep-structure anchors and by considering the impact of domain familiarity on the adjustment bias.},
author = {Allen, Gove and Parsons, Jeffrey},
doi = {10.1287/isre.1080.0189},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2010 - Is query reuse potentially harmful Anchoring and adjustment in adapting existing database queries.pdf:pdf},
issn = {15265536},
journal = {Information Systems Research},
keywords = {Anchoring and adjustment,Query formulation,Reuse,SQL},
number = {1},
pages = {56--77},
title = {{Is query reuse potentially harmful? Anchoring and adjustment in adapting existing database queries}},
volume = {21},
year = {2010}
}
@article{Allen2010,
abstract = {Reusing database queries by adapting them to satisfy new information requests is an attractive strategy for extracting information from databases without involving database specialists. However, the reuse of information systems artifacts has been shown to be susceptible to the phenomenon of anchoring and adjustment. Anchoring often leads to a systematic adjustment bias in which people fail to make sufficient changes to an anchor in response to the needs of a new task. In a study involving 157 novice query writers from six universities, we examined the effect of this phenomenon on the reuse of Structured Query Language (SQL) queries under varying levels of domain familiarity and for different types of anchors. Participants developed SQL queries to respond to four information requests in a familiar domain and four information requests in an unfamiliar domain. For two information requests in each domain, participants were also provided with sample queries (anchors) that answered similar information requests. We found evidence that the opportunity to reuse sample queries resulted in an adjustment bias leading to poorer quality query results and greater overconfidence in the correctness of results. The results also indicate that the strength of the adjustment bias depends on a combination of domain familiarity and type of anchor. This study demonstrates that anchoring and adjustment during query reuse can lead to queries that are less accurate than those written from scratch. We also extend the concept of anchoring and adjustment by distinguishing between surface-structure and deep-structure anchors and by considering the impact of domain familiarity on the adjustment bias.},
author = {Allen, Gove and Parsons, Jeffrey},
doi = {10.1287/isre.1080.0189},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2010 - Is query reuse potentially harmful Anchoring and adjustment in adapting existing database queries.pdf:pdf},
issn = {15265536},
journal = {Information Systems Research},
keywords = {Anchoring and adjustment,Query formulation,Reuse,SQL},
number = {1},
pages = {56--77},
title = {{Is query reuse potentially harmful? Anchoring and adjustment in adapting existing database queries}},
volume = {21},
year = {2010}
}
@article{Allen2010,
abstract = {Reusing database queries by adapting them to satisfy new information requests is an attractive strategy for extracting information from databases without involving database specialists. However, the reuse of information systems artifacts has been shown to be susceptible to the phenomenon of anchoring and adjustment. Anchoring often leads to a systematic adjustment bias in which people fail to make sufficient changes to an anchor in response to the needs of a new task. In a study involving 157 novice query writers from six universities, we examined the effect of this phenomenon on the reuse of Structured Query Language (SQL) queries under varying levels of domain familiarity and for different types of anchors. Participants developed SQL queries to respond to four information requests in a familiar domain and four information requests in an unfamiliar domain. For two information requests in each domain, participants were also provided with sample queries (anchors) that answered similar information requests. We found evidence that the opportunity to reuse sample queries resulted in an adjustment bias leading to poorer quality query results and greater overconfidence in the correctness of results. The results also indicate that the strength of the adjustment bias depends on a combination of domain familiarity and type of anchor. This study demonstrates that anchoring and adjustment during query reuse can lead to queries that are less accurate than those written from scratch. We also extend the concept of anchoring and adjustment by distinguishing between surface-structure and deep-structure anchors and by considering the impact of domain familiarity on the adjustment bias.},
author = {Allen, Gove and Parsons, Jeffrey},
doi = {10.1287/isre.1080.0189},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Allen, Parsons - 2010 - Is query reuse potentially harmful Anchoring and adjustment in adapting existing database queries.pdf:pdf},
issn = {15265536},
journal = {Information Systems Research},
keywords = {Anchoring and adjustment,Query formulation,Reuse,SQL},
number = {1},
pages = {56--77},
title = {{Is query reuse potentially harmful? Anchoring and adjustment in adapting existing database queries}},
volume = {21},
year = {2010}
}
@article{Tversky1974,
abstract = {This article described three heuristics that are employed in making judgments under uncertainty: (i) representativeness, which is usually employed when people are asked to judge the probability that an object or event A belongs to class or process B; (ii) availability of instances or scenarios, which is often employed when people are asked to assess the frequency of a class or the plausibility of a particular development; and (iii) adjustment from an anchor, which is usually employed in numerical prediction when a relevant value is available. These heuristics are highly economical and usually effective, but they lead to systematic and predictable errors. A better understanding of these heuristics and of the biases to which they lead could improve judgments and decisions in situations of uncertainty.},
annote = {Pierwszy artyku{\l} kt{\'{o}}ry zapocz{\c{a}}tkowa{\l} ca{\l}{\c{a}} t{\c{a}} "biasow{\c{a}}" zabaw{\c{e}}. W celu raczej historycznym ;)},
author = {Tversky, Amos and {Kahneman Daniel}},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/AD0767426.pdf:pdf},
issn = {15206882},
journal = {Science},
title = {{Judgment under uncertainty: Heuristics and biases}},
year = {1974}
}
@article{Zimmermann2009,
abstract = {Software architects consider capturing and sharing architectural decisions increasingly important; many tacit dependencies exist in this architectural knowledge. Architectural decision modeling makes these dependencies explicit and serves as a foundation for knowledge management tools. In practice, however, text templates and informal rich pictures rather than models are used to capture the knowledge; a formal definition of model entities and their relations is missing in the current state of the art. In this paper, we propose such a formal definition of architectural decision models as directed acyclic graphs with several types of nodes and edges. In our models, architectural decision topic groups, issues, alternatives, and outcomes form trees of nodes connected by edges expressing containment and refinement, decomposition, and triggers dependencies, as well as logical relations such as (in)compatibility of alternatives. The formalization can be used to verify integrity constraints and to organize the decision making process; production rules and dependency patterns can be defined. A reusable architectural decision model supporting service-oriented architecture design demonstrates how we use these concepts. We also present tool support and give a quantitative evaluation. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
annote = {A to najstarszy i najbardizej ustrukturalizowany model podejmowania AD.... Klasyka, do przywo{\l}ania.},
author = {Zimmermann, Olaf and Koehler, Jana and Leymann, Frank and Polley, Ronny and Schuster, Nelly},
doi = {10.1016/j.jss.2009.01.039},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Zimmermann et al. - 2009 - Managing architectural decision models with dependency relations, integrity constraints, and production rules.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Architectural decision,Architectural knowledge,Decision dependencies,Decision tree,Dependency pattern,Enterprise application,Integration,Knowledge management,Model,SOA,UML,Web services},
number = {8},
pages = {1249--1267},
title = {{Managing architectural decision models with dependency relations, integrity constraints, and production rules}},
volume = {82},
year = {2009}
}
@article{Zimmermann2009,
abstract = {Software architects consider capturing and sharing architectural decisions increasingly important; many tacit dependencies exist in this architectural knowledge. Architectural decision modeling makes these dependencies explicit and serves as a foundation for knowledge management tools. In practice, however, text templates and informal rich pictures rather than models are used to capture the knowledge; a formal definition of model entities and their relations is missing in the current state of the art. In this paper, we propose such a formal definition of architectural decision models as directed acyclic graphs with several types of nodes and edges. In our models, architectural decision topic groups, issues, alternatives, and outcomes form trees of nodes connected by edges expressing containment and refinement, decomposition, and triggers dependencies, as well as logical relations such as (in)compatibility of alternatives. The formalization can be used to verify integrity constraints and to organize the decision making process; production rules and dependency patterns can be defined. A reusable architectural decision model supporting service-oriented architecture design demonstrates how we use these concepts. We also present tool support and give a quantitative evaluation. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
annote = {A to najstarszy i najbardizej ustrukturalizowany model podejmowania AD.... Klasyka, do przywo{\l}ania.},
author = {Zimmermann, Olaf and Koehler, Jana and Leymann, Frank and Polley, Ronny and Schuster, Nelly},
doi = {10.1016/j.jss.2009.01.039},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Zimmermann et al. - 2009 - Managing architectural decision models with dependency relations, integrity constraints, and production rules.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Architectural decision,Architectural knowledge,Decision dependencies,Decision tree,Dependency pattern,Enterprise application,Integration,Knowledge management,Model,SOA,UML,Web services},
number = {8},
pages = {1249--1267},
title = {{Managing architectural decision models with dependency relations, integrity constraints, and production rules}},
volume = {82},
year = {2009}
}
@techreport{Kaczynski2018,
abstract = {B{\l}{\c{e}}dy poznawcze w indywidualnych decyzjach cz{\l}onk{\'{o}}w zespo{\l}{\'{o}}w projektowych IT i sposoby ich ograniczania B{\l}{\c{e}}dy poznawcze w indywidualnych decyzjach{\ldots} Wst{\c{e}}p Cz{\l}onkowie zespo{\l}{\'{o}}w projektowych podejmuj{\c{a}} decyzje na ka{\.{z}}dym eta-pie projektu. Decyzje w warunkach niepewno{\'{s}}ci i ryzyka podejmowane s{\c{a}} zar{\'{o}}wno przez kierownik{\'{o}}w projekt{\'{o}}w, jak i wszystkich cz{\l}onk{\'{o}}w zespo{\l}u projektowego. Proces ten zale{\.{z}}y od wielu czynnik{\'{o}}w i uwarunkowa{\'{n}} wynikaj{\c{a}}cych ze specyfiki produktu i projektu, otoczenia projektowego, dojrza{\l}o{\'{s}}ci zespo{\l}u projektowego i klienta. Obok czynnik{\'{o}}w zwi{\c{a}}zanych ze specyfik{\c{a}} produktu informatycznego wyst{\c{e}}puj{\c{a}} czynniki psychologiczne wp{\l}ywaj{\c{a}}ce na zachowania cz{\l}onk{\'{o}}w zespo{\l}u projektowego indywidual-nie i grupowo. Analiza zachowa{\'{n}} i poznanie psychologii podejmowania decyzji pozwala spojrze{\'{c}} na procesy zarz{\c{a}}dzania projektem w innym {\'{s}}wie-tle. Celem artyku{\l}u jest przedstawienie psychologicznego uj{\c{e}}cia decyzji i procesu decyzyjnego, analiza racjonalno{\'{s}}ci i b{\l}{\c{e}}d{\'{o}}w poznawczych oraz wskazanie narz{\c{e}}dzi i metodyk zarz{\c{a}}dzania projektami ograniczaj{\c{a}}cych wp{\l}yw tych b{\l}{\c{e}}d{\'{o}}w. W pracy zastosowano metod{\c{e}} studium literatury, a tak{\.{z}}e zestawiono ze sob{\c{a}} teorie i wnioski, uzupe{\l}nione o przemy{\'{s}}lenia w{\l}asne.},
annote = {Polska praca o cognitive biases u zepso{\l}{\'{o}}w IT},
author = {Kaczy{\'{n}}ski, Marcin},
booktitle = {Zarz{\c{a}}dzanie i Finanse Journal of Management and Finance},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kaczy{\'{n}}ski - 2018 - Marcin Kaczy{\'{n}}ski.pdf:pdf},
number = {3},
title = {{Marcin Kaczy{\'{n}}ski*}},
volume = {16},
year = {2018}
}
@techreport{Kaczynski2018,
abstract = {B{\l}{\c{e}}dy poznawcze w indywidualnych decyzjach cz{\l}onk{\'{o}}w zespo{\l}{\'{o}}w projektowych IT i sposoby ich ograniczania B{\l}{\c{e}}dy poznawcze w indywidualnych decyzjach{\ldots} Wst{\c{e}}p Cz{\l}onkowie zespo{\l}{\'{o}}w projektowych podejmuj{\c{a}} decyzje na ka{\.{z}}dym eta-pie projektu. Decyzje w warunkach niepewno{\'{s}}ci i ryzyka podejmowane s{\c{a}} zar{\'{o}}wno przez kierownik{\'{o}}w projekt{\'{o}}w, jak i wszystkich cz{\l}onk{\'{o}}w zespo{\l}u projektowego. Proces ten zale{\.{z}}y od wielu czynnik{\'{o}}w i uwarunkowa{\'{n}} wynikaj{\c{a}}cych ze specyfiki produktu i projektu, otoczenia projektowego, dojrza{\l}o{\'{s}}ci zespo{\l}u projektowego i klienta. Obok czynnik{\'{o}}w zwi{\c{a}}zanych ze specyfik{\c{a}} produktu informatycznego wyst{\c{e}}puj{\c{a}} czynniki psychologiczne wp{\l}ywaj{\c{a}}ce na zachowania cz{\l}onk{\'{o}}w zespo{\l}u projektowego indywidual-nie i grupowo. Analiza zachowa{\'{n}} i poznanie psychologii podejmowania decyzji pozwala spojrze{\'{c}} na procesy zarz{\c{a}}dzania projektem w innym {\'{s}}wie-tle. Celem artyku{\l}u jest przedstawienie psychologicznego uj{\c{e}}cia decyzji i procesu decyzyjnego, analiza racjonalno{\'{s}}ci i b{\l}{\c{e}}d{\'{o}}w poznawczych oraz wskazanie narz{\c{e}}dzi i metodyk zarz{\c{a}}dzania projektami ograniczaj{\c{a}}cych wp{\l}yw tych b{\l}{\c{e}}d{\'{o}}w. W pracy zastosowano metod{\c{e}} studium literatury, a tak{\.{z}}e zestawiono ze sob{\c{a}} teorie i wnioski, uzupe{\l}nione o przemy{\'{s}}lenia w{\l}asne.},
annote = {Polska praca o cognitive biases u zepso{\l}{\'{o}}w IT},
author = {Kaczy{\'{n}}ski, Marcin},
booktitle = {Zarz{\c{a}}dzanie i Finanse Journal of Management and Finance},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kaczy{\'{n}}ski - 2018 - Marcin Kaczy{\'{n}}ski.pdf:pdf},
number = {3},
title = {{Marcin Kaczy{\'{n}}ski*}},
volume = {16},
year = {2018}
}
@article{Roy2008,
abstract = {In software systems, the software architecture evaluation methods play major role to increase the software quality attributes like maintainability and reliability in a system. Evaluation is used to test whether the architecture has met the desired quality requirements. Depending on the quality attributes, there are many methods and techniques came forward for evaluation of software architecture. This paper covers the fundamentals of 13 software architecture evaluation methods and compares them. The overall advantages and disadvantages of the evaluation methods are discussed here. The observation resulted from this paper is useful for the better understanding and design of software architecture evaluation methods.},
author = {Roy, Banani and Graham, TC Nicholas},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Methods{\_}for{\_}Evaluating{\_}Software{\_}Architecture{\_}A{\_}Sur.pdf:pdf},
issn = {0975766X},
number = {4},
pages = {25720--25733},
title = {{Methods for evaluating software architecture-A survey}},
volume = {8},
year = {2007}
}
@article{Roy2008,
abstract = {In software systems, the software architecture evaluation methods play major role to increase the software quality attributes like maintainability and reliability in a system. Evaluation is used to test whether the architecture has met the desired quality requirements. Depending on the quality attributes, there are many methods and techniques came forward for evaluation of software architecture. This paper covers the fundamentals of 13 software architecture evaluation methods and compares them. The overall advantages and disadvantages of the evaluation methods are discussed here. The observation resulted from this paper is useful for the better understanding and design of software architecture evaluation methods.},
author = {Roy, Banani and Graham, TC Nicholas},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Methods{\_}for{\_}Evaluating{\_}Software{\_}Architecture{\_}A{\_}Sur.pdf:pdf},
issn = {0975766X},
number = {4},
pages = {25720--25733},
title = {{Methods for evaluating software architecture-A survey}},
volume = {8},
year = {2007}
}
@article{Bi2021,
author = {Bi, Tingting and Liang, Peng and Tang, Antony and Xia, Xin},
doi = {10.1016/j.jss.2021.111005},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bi2021mat.pdf:pdf},
journal = {Journal of Systems and Software},
number = {May},
title = {{Mining Architecture Tactics and Quality Attributes Knowledge in Stack Overflow}},
year = {2021}
}
@article{Bi2021,
author = {Bi, Tingting and Liang, Peng and Tang, Antony and Xia, Xin},
doi = {10.1016/j.jss.2021.111005},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bi2021mat.pdf:pdf},
journal = {Journal of Systems and Software},
number = {May},
title = {{Mining Architecture Tactics and Quality Attributes Knowledge in Stack Overflow}},
year = {2021}
}
@article{Sharon2011a,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model.pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
number = {3},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@article{Sharon2011,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model(2).pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@article{Sharon2011a,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model.pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
number = {3},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@article{Sharon2011,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model(2).pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@article{Sharon2011a,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model.pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
number = {3},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@article{Sharon2011,
abstract = {We investigate potential benefits of employing Design Structure Matrix (DSM) in the context of Model-Based Systems Engineering (MBSE) for the purposes of analyzing and improving the design of a product-project ensemble. Focusing on process DSM, we present an algorithm for bidirectional transformation frame between a product-project system model and its corresponding Model-Based DSM (MDSM). Using Object-Process Methodology (OPM) as the underlying modeling language, we examine and characterize useful and insightful relationships between the system model and its MDSM. An unmanned aerial vehicle case study demonstrates the semantics of and analogy between various types of relationships as they are reflected in both the OPM system model and the MDSM derived from it. Finally, we conclude with further research direction on showing how clustering of DSM processes can be reflected back as an improvement of the OPM model.},
author = {Sharon, Amira and de Weck, Olivier L. and Dori, Dov},
doi = {10.1002/sys},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharon, Weck, Dori - 2011 - Model-Based Design Structure Matrix Deriving a DSM from an Object-Process Model(2).pdf:pdf},
issn = {1098-1241, 1098-1241},
journal = {Systems Engineering},
keywords = {52: Numerical Analysis, Simulation, and Modeling (,63: Mathematics and Computation (CE),63: Mathematics and Computation (MT),Mechanical {\&} Transportation Engineering Abstracts,Simulation,and Modeling (},
pages = {305--326},
title = {{Model-Based Design Structure Matrix: Deriving a DSM from an Object-Process Model}},
url = {http://ezproxy.lib.ucf.edu/login?url=http://search.proquest.com/docview/926281441?accountid=10003{\%}5Cnhttp://sfx.fcla.edu/ucf?url{\_}ver=Z39.88-2004{\&}rft{\_}val{\_}fmt=info:ofi/fmt:kev:mtx:journal{\&}genre=article{\&}sid=ProQ:ProQ:civilengineering{\&}atitle=Model+Based+Syste},
volume = {14},
year = {2011}
}
@inproceedings{Calikli2012,
author = {Calikli, Gul and Bener, Ayse and Caglayan, Bora and Tosun, Ayse},
booktitle = {Thirty Third International Conference on Information Systems},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nalysis, Ecognition - 2006 - H Uman a Ctivity R Epresentation ,.pdf:pdf},
keywords = {Cognitive bias,defect prediction,social network,software quality},
title = {{MODELING HUMAN ASPECTS TO ENHANCE SOFTWARE QUALITY MANAGEMENT}},
year = {2012}
}
@inproceedings{Calikli2012,
author = {Calikli, Gul and Bener, Ayse and Caglayan, Bora and Tosun, Ayse},
booktitle = {Thirty Third International Conference on Information Systems},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nalysis, Ecognition - 2006 - H Uman a Ctivity R Epresentation ,.pdf:pdf},
keywords = {Cognitive bias,defect prediction,social network,software quality},
title = {{MODELING HUMAN ASPECTS TO ENHANCE SOFTWARE QUALITY MANAGEMENT}},
year = {2012}
}
@inproceedings{Calikli2012,
author = {Calikli, Gul and Bener, Ayse and Caglayan, Bora and Tosun, Ayse},
booktitle = {Thirty Third International Conference on Information Systems},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Nalysis, Ecognition - 2006 - H Uman a Ctivity R Epresentation ,.pdf:pdf},
keywords = {Cognitive bias,defect prediction,social network,software quality},
title = {{MODELING HUMAN ASPECTS TO ENHANCE SOFTWARE QUALITY MANAGEMENT}},
year = {2012}
}
@book{Farshidi2020,
author = {Farshidi, Siamak},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/phddissertation 38 - 5fb8b3aba67a4.pdf:pdf},
isbn = {9039373507},
title = {{Multi-Criteria Decision-Making in Software Production}},
url = {https://siamakfarshidi.nl/publications/Ph{\_}D{\_}{\_}Dissertation.pdf},
year = {2020}
}
@book{Farshidi2020,
author = {Farshidi, Siamak},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/phddissertation 38 - 5fb8b3aba67a4.pdf:pdf},
isbn = {9039373507},
title = {{Multi-Criteria Decision-Making in Software Production}},
url = {https://siamakfarshidi.nl/publications/Ph{\_}D{\_}{\_}Dissertation.pdf},
year = {2020}
}
@article{VanHeesch2010,
abstract = {Software architecting entails making architecture decisions, which requires a lot of experience and expertise. Current literature contains several methods and processes to support architects with architecture design, documentation and evaluation but not with the design reasoning involved in decision-making. In order to derive a systematic reasoning process we need to understand the current state of practice and propose ways to improve it. In this paper we present the results of a survey that was conducted with undergraduate software engineering students, aiming to find out the innate reasoning process during architecting. The results of the survey are compared to the existing architecture literature in order to identify promising directions towards systematic reasoning processes. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
author = {{Van Heesch}, Uwe and Avgeriou, Paris},
doi = {10.1007/978-3-642-15114-9_5},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ECSA10a.pdf:pdf},
isbn = {3642151132},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {24--37},
title = {{Naive architecting - Understanding the reasoning process of students: A descriptive survey}},
volume = {6285 LNCS},
year = {2010}
}
@article{VanHeesch2010,
abstract = {Software architecting entails making architecture decisions, which requires a lot of experience and expertise. Current literature contains several methods and processes to support architects with architecture design, documentation and evaluation but not with the design reasoning involved in decision-making. In order to derive a systematic reasoning process we need to understand the current state of practice and propose ways to improve it. In this paper we present the results of a survey that was conducted with undergraduate software engineering students, aiming to find out the innate reasoning process during architecting. The results of the survey are compared to the existing architecture literature in order to identify promising directions towards systematic reasoning processes. {\textcopyright} 2010 Springer-Verlag Berlin Heidelberg.},
author = {{Van Heesch}, Uwe and Avgeriou, Paris},
doi = {10.1007/978-3-642-15114-9_5},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ECSA10a.pdf:pdf},
isbn = {3642151132},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {24--37},
title = {{Naive architecting - Understanding the reasoning process of students: A descriptive survey}},
volume = {6285 LNCS},
year = {2010}
}
@article{Ayala2012,
abstract = {Dealing with non-functional requirements (NFRs) has posed a challenge onto software engineers for many years. Over the years, many methods and techniques have been proposed to improve their elicitation, documentation, and validation. Knowing more about the state of the practice on these topics may benefit both practitioners' and researchers' daily work. A few empirical studies have been conducted in the past, but none under the perspective of software architects, in spite of the great influence that NFRs have on daily architects' practices. This paper presents some of the findings of an empirical study based on 13 interviews with software architects. It addresses questions such as: who decides the NFRs, what types of NFRs matter to architects, how are NFRs documented, and how are NFRs validated. The results are contextualized with existing previous work},
author = {Ameller, David and Ayala, Claudia and Cabot, Jordi and Franch, Xavier},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/non-functional-reqs-t.pdf:pdf},
keywords = {Architectural Decision,Empirical,NFR,Non-functional Requirement,Quality Requirement,Software Architect,Study.},
pages = {20},
title = {{Non-Functional Requirements in Software Architecture Practice}},
year = {2012}
}
@article{Ayala2012,
abstract = {Dealing with non-functional requirements (NFRs) has posed a challenge onto software engineers for many years. Over the years, many methods and techniques have been proposed to improve their elicitation, documentation, and validation. Knowing more about the state of the practice on these topics may benefit both practitioners' and researchers' daily work. A few empirical studies have been conducted in the past, but none under the perspective of software architects, in spite of the great influence that NFRs have on daily architects' practices. This paper presents some of the findings of an empirical study based on 13 interviews with software architects. It addresses questions such as: who decides the NFRs, what types of NFRs matter to architects, how are NFRs documented, and how are NFRs validated. The results are contextualized with existing previous work},
author = {Ameller, David and Ayala, Claudia and Cabot, Jordi and Franch, Xavier},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/non-functional-reqs-t.pdf:pdf},
keywords = {Architectural Decision,Empirical,NFR,Non-functional Requirement,Quality Requirement,Software Architect,Study.},
pages = {20},
title = {{Non-Functional Requirements in Software Architecture Practice}},
year = {2012}
}

@article{Løhre2016,
abstract = {The anchoring effect may be described as the tendency for an initial piece of information to influence people's subsequent judgement, even when the information is irrelevant. Previous studies suggest that anchoring is an important source of inaccurate software development effort estimates. This article examines how the preciseness and credibility of anchoring information affects effort estimates. Our hypotheses were that anchors with lower numerical precision and anchor sources with lower credibility would have less impact on effort estimates. The results from three software project effort estimation experiments, with 381 software professionals, support previous findings about the relevance of anchoring effects to software effort estimation. However, we found no decrease in the anchoring effect with decreasing anchor precision or source credibility. This suggests that even implausible anchors from low-credibility sources can lead to anchoring effects, and that all kinds of misleading information potentially acting as estimation anchors in project estimation contexts should be avoided.},
author = {L{\o}hre, Erik and J{\o}rgensen, Magne},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/L{\o}hre, J{\o}rgensen - 2016 - Numerical anchors and their strong effects on software development effort estimates.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Anchoring effects,Numerical preciseness,Software project estimation},
pages = {49--56},
title = {{Numerical anchors and their strong effects on software development effort estimates}},
volume = {116},
year = {2016}
}

@inproceedings{Zalewski2017,
  title={On cognitive biases in architecture decision making},
  author={Zalewski, Andrzej and Borowa, Klara and Ratkowski, Andrzej},
  booktitle={Software Architecture: 11th European Conference, ECSA 2017, Canterbury, UK, September 11-15, 2017, Proceedings 11},
  pages={123--137},
  year={2017},
  organization={Springer}
}

@article{Shalev2014,
author = {Shalev, Eliezer and Keil, Mark and Lee, Jong Seok and Ganzach, Yoav},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shalev et al. - 2014 - Optimism Bias in Managing It Project Risks a Construal Level.pdf:pdf},
isbn = {9780991556700},
journal = {European Conference on Information Systems},
keywords = {cognitive bias,construal level theory,it project risk management,optimism bias,project},
title = {{Optimism Bias in Managing It Project Risks: a Construal Level}},
year = {2014}
}
@article{Shull2014,
abstract = {IEEE Software editor in chief Forrest Shull talks with author and consultant Linda Rising about the power of retrospectives for software teams. The Web extra at http://youtu.be/2Tgui-qr2AQ is an audio recording of IEEE Software editor in chief Forrest Shull talking with author and consultant Linda Rising about the power of retrospectives for software teams. The second Web extra at http://www.se-radio.net/2014/01/episode-200-markus-volter-on-language- design-and-domain-specific-languages/is an audio recording of Markus Voelter talking to Linda Rising about retrospectives and the logistics of making them work for software projects. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2014.90},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - 2014 - Our best hope.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Linda Rising,Norman Keith,agile,change,practices,projects,retrospective,software engineering},
number = {4},
pages = {4--8},
title = {{Our best hope}},
volume = {31},
year = {2014}
}
@article{Shull2014,
abstract = {IEEE Software editor in chief Forrest Shull talks with author and consultant Linda Rising about the power of retrospectives for software teams. The Web extra at http://youtu.be/2Tgui-qr2AQ is an audio recording of IEEE Software editor in chief Forrest Shull talking with author and consultant Linda Rising about the power of retrospectives for software teams. The second Web extra at http://www.se-radio.net/2014/01/episode-200-markus-volter-on-language- design-and-domain-specific-languages/is an audio recording of Markus Voelter talking to Linda Rising about retrospectives and the logistics of making them work for software projects. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2014.90},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - 2014 - Our best hope.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Linda Rising,Norman Keith,agile,change,practices,projects,retrospective,software engineering},
number = {4},
pages = {4--8},
title = {{Our best hope}},
volume = {31},
year = {2014}
}
@article{Shull2014,
abstract = {IEEE Software editor in chief Forrest Shull talks with author and consultant Linda Rising about the power of retrospectives for software teams. The Web extra at http://youtu.be/2Tgui-qr2AQ is an audio recording of IEEE Software editor in chief Forrest Shull talking with author and consultant Linda Rising about the power of retrospectives for software teams. The second Web extra at http://www.se-radio.net/2014/01/episode-200-markus-volter-on-language- design-and-domain-specific-languages/is an audio recording of Markus Voelter talking to Linda Rising about retrospectives and the logistics of making them work for software projects. {\textcopyright} 1984-2012 IEEE.},
author = {Shull, Forrest},
doi = {10.1109/MS.2014.90},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shull - 2014 - Our best hope.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Linda Rising,Norman Keith,agile,change,practices,projects,retrospective,software engineering},
number = {4},
pages = {4--8},
title = {{Our best hope}},
volume = {31},
year = {2014}
}
@inproceedings{Jørgensen2005a,
author = {J{\o}rgensen, Magne and Grimstad, Stein},
booktitle = {5th International Conference on Electronics, Communications and Computers (CONIELECOMP'05)},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Grimstad - 2005 - Over-optimism in software development projects the winner's curse.pdf:pdf},
isbn = {0769522831},
number = {1},
pages = {280--285},
title = {{Over-optimism in software development projects:" the winner's curse"}},
volume = {1},
year = {2005}
}
@inproceedings{Jørgensen2005a,
author = {J{\o}rgensen, Magne and Grimstad, Stein},
booktitle = {5th International Conference on Electronics, Communications and Computers (CONIELECOMP'05)},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Grimstad - 2005 - Over-optimism in software development projects the winner's curse.pdf:pdf},
isbn = {0769522831},
number = {1},
pages = {280--285},
title = {{Over-optimism in software development projects:" the winner's curse"}},
volume = {1},
year = {2005}
}
@inproceedings{Jørgensen2005a,
author = {J{\o}rgensen, Magne and Grimstad, Stein},
booktitle = {5th International Conference on Electronics, Communications and Computers (CONIELECOMP'05)},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Grimstad - 2005 - Over-optimism in software development projects the winner's curse.pdf:pdf},
isbn = {0769522831},
number = {1},
pages = {280--285},
title = {{Over-optimism in software development projects:" the winner's curse"}},
volume = {1},
year = {2005}
}
@article{Conroy2012,
abstract = {Rework consumes large portions of software engineering budgets. Human factors, and Cognitive Bias in particular, have been shown in other disciplines to be implicated in the kinds of reasoning errors that lead to rework. Research of these phenomena in software engineering lags similar efforts in other disciplines. This study identifies the Performance Norms, standards by which Cognitive Biases are determined to have occurred, in a single but critically important software engineering task: Estimating. Analysis of data from professional practitioners regarding real-life situations indicates that several Performance Norms for Estimating are often `in play', the least important being that assumed in previous, lab-based experiments. Most of these Norms require skills very different from those in which most technical personnel are trained. We conclude that rework reduction efforts will continue to falter until Performance Norms are recognized as key determinants in software engineering practice.},
author = {Conroy, Patrick and Kruchten, Philippe},
doi = {10.1109/CCECE.2012.6335063},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Conroy, Kruchten - 2012 - Performance norms An approach to rework reduction in software development.pdf:pdf},
isbn = {9781467314336},
journal = {2012 25th IEEE Canadian Conference on Electrical and Computer Engineering: Vision for a Greener Future, CCECE 2012},
keywords = {cognitive bias,grounded theory,human factors,performance norms,rework},
title = {{Performance norms: An approach to rework reduction in software development}},
year = {2012}
}
@article{Conroy2012,
abstract = {Rework consumes large portions of software engineering budgets. Human factors, and Cognitive Bias in particular, have been shown in other disciplines to be implicated in the kinds of reasoning errors that lead to rework. Research of these phenomena in software engineering lags similar efforts in other disciplines. This study identifies the Performance Norms, standards by which Cognitive Biases are determined to have occurred, in a single but critically important software engineering task: Estimating. Analysis of data from professional practitioners regarding real-life situations indicates that several Performance Norms for Estimating are often `in play', the least important being that assumed in previous, lab-based experiments. Most of these Norms require skills very different from those in which most technical personnel are trained. We conclude that rework reduction efforts will continue to falter until Performance Norms are recognized as key determinants in software engineering practice.},
author = {Conroy, Patrick and Kruchten, Philippe},
doi = {10.1109/CCECE.2012.6335063},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Conroy, Kruchten - 2012 - Performance norms An approach to rework reduction in software development.pdf:pdf},
isbn = {9781467314336},
journal = {2012 25th IEEE Canadian Conference on Electrical and Computer Engineering: Vision for a Greener Future, CCECE 2012},
keywords = {cognitive bias,grounded theory,human factors,performance norms,rework},
title = {{Performance norms: An approach to rework reduction in software development}},
year = {2012}
}
@article{Conroy2012,
abstract = {Rework consumes large portions of software engineering budgets. Human factors, and Cognitive Bias in particular, have been shown in other disciplines to be implicated in the kinds of reasoning errors that lead to rework. Research of these phenomena in software engineering lags similar efforts in other disciplines. This study identifies the Performance Norms, standards by which Cognitive Biases are determined to have occurred, in a single but critically important software engineering task: Estimating. Analysis of data from professional practitioners regarding real-life situations indicates that several Performance Norms for Estimating are often `in play', the least important being that assumed in previous, lab-based experiments. Most of these Norms require skills very different from those in which most technical personnel are trained. We conclude that rework reduction efforts will continue to falter until Performance Norms are recognized as key determinants in software engineering practice.},
author = {Conroy, Patrick and Kruchten, Philippe},
doi = {10.1109/CCECE.2012.6335063},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Conroy, Kruchten - 2012 - Performance norms An approach to rework reduction in software development.pdf:pdf},
isbn = {9781467314336},
journal = {2012 25th IEEE Canadian Conference on Electrical and Computer Engineering: Vision for a Greener Future, CCECE 2012},
keywords = {cognitive bias,grounded theory,human factors,performance norms,rework},
title = {{Performance norms: An approach to rework reduction in software development}},
year = {2012}
}
@inproceedings{Leventhal1993,
abstract = {Fundamental but virtually unexplored issues in human-computer interaction involve the roles of biases in software engineering tasks. In studies of naturalistic testing tasks, as well as ones which follow common laboratory models in this area, we have found ample evidence that testers have positive test bias. This bias is manifest as a tendency to execute about four times as many positive tests, designed to show that “the program works,” as tests which challenge the program. In our prior work, we have found that the expertise of the subjects, the completeness of the software specifications, and the presence/absence of program errors may reduce positive test bias. Skilled computer scientists invent specifications to test in the absence of actual specifications, but still exhibit positive test bias.},
author = {Leventhal, Laura Marie and Teasley, Barbee M. and Rohlman, Diane S. and Instone, Keith},
booktitle = {International Conference on Human-Computer Interaction},
doi = {10.1007/3-540-57433-6_50},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Leventhal et al. - 2012 - Positive test bias in software testing among professionals A review.pdf:pdf},
title = {{Positive test bias in software testing among professionals: A review}},
year = {1993}
}
@inproceedings{Leventhal1993,
abstract = {Fundamental but virtually unexplored issues in human-computer interaction involve the roles of biases in software engineering tasks. In studies of naturalistic testing tasks, as well as ones which follow common laboratory models in this area, we have found ample evidence that testers have positive test bias. This bias is manifest as a tendency to execute about four times as many positive tests, designed to show that “the program works,” as tests which challenge the program. In our prior work, we have found that the expertise of the subjects, the completeness of the software specifications, and the presence/absence of program errors may reduce positive test bias. Skilled computer scientists invent specifications to test in the absence of actual specifications, but still exhibit positive test bias.},
author = {Leventhal, Laura Marie and Teasley, Barbee M. and Rohlman, Diane S. and Instone, Keith},
booktitle = {International Conference on Human-Computer Interaction},
doi = {10.1007/3-540-57433-6_50},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Leventhal et al. - 2012 - Positive test bias in software testing among professionals A review.pdf:pdf},
title = {{Positive test bias in software testing among professionals: A review}},
year = {1993}
}
@inproceedings{Leventhal1993,
abstract = {Fundamental but virtually unexplored issues in human-computer interaction involve the roles of biases in software engineering tasks. In studies of naturalistic testing tasks, as well as ones which follow common laboratory models in this area, we have found ample evidence that testers have positive test bias. This bias is manifest as a tendency to execute about four times as many positive tests, designed to show that “the program works,” as tests which challenge the program. In our prior work, we have found that the expertise of the subjects, the completeness of the software specifications, and the presence/absence of program errors may reduce positive test bias. Skilled computer scientists invent specifications to test in the absence of actual specifications, but still exhibit positive test bias.},
author = {Leventhal, Laura Marie and Teasley, Barbee M. and Rohlman, Diane S. and Instone, Keith},
booktitle = {International Conference on Human-Computer Interaction},
doi = {10.1007/3-540-57433-6_50},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Leventhal et al. - 2012 - Positive test bias in software testing among professionals A review.pdf:pdf},
title = {{Positive test bias in software testing among professionals: A review}},
year = {1993}
}
@article{Ralph2013,
abstract = {Following recent calls for greater attention to theory in software engineering, this paper reviews five theories that provide insight into software engineering behavior - Complexity Theory, Sensemaking-Coevolution- Implementation Theory, the Theory of Boundary Objects, Transactive Memory Theory and the Theory of Cognitive Biases. Rather than providing contradictory explanations, these theories apply at different units of analysis and may therefore be used simultaneously to understand the same software engineering phenomena. {\textcopyright} 2013 IEEE.},
author = {Ralph, Paul},
doi = {10.1109/GTSE.2013.6613868},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2013 - Possible core theories for software engineering.pdf:pdf},
isbn = {9781467362733},
journal = {2013 2nd SEMAT Workshop on a General Theory of Software Engineering, GTSE 2013 - Proceedings},
keywords = {Process theory,SCI Theory,boundary objects,cognitive psychology,complexity,general theory},
pages = {35--38},
title = {{Possible core theories for software engineering}},
year = {2013}
}
@article{Ralph2013,
abstract = {Following recent calls for greater attention to theory in software engineering, this paper reviews five theories that provide insight into software engineering behavior - Complexity Theory, Sensemaking-Coevolution- Implementation Theory, the Theory of Boundary Objects, Transactive Memory Theory and the Theory of Cognitive Biases. Rather than providing contradictory explanations, these theories apply at different units of analysis and may therefore be used simultaneously to understand the same software engineering phenomena. {\textcopyright} 2013 IEEE.},
author = {Ralph, Paul},
doi = {10.1109/GTSE.2013.6613868},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2013 - Possible core theories for software engineering.pdf:pdf},
isbn = {9781467362733},
journal = {2013 2nd SEMAT Workshop on a General Theory of Software Engineering, GTSE 2013 - Proceedings},
keywords = {Process theory,SCI Theory,boundary objects,cognitive psychology,complexity,general theory},
pages = {35--38},
title = {{Possible core theories for software engineering}},
year = {2013}
}
@article{Ralph2013,
abstract = {Following recent calls for greater attention to theory in software engineering, this paper reviews five theories that provide insight into software engineering behavior - Complexity Theory, Sensemaking-Coevolution- Implementation Theory, the Theory of Boundary Objects, Transactive Memory Theory and the Theory of Cognitive Biases. Rather than providing contradictory explanations, these theories apply at different units of analysis and may therefore be used simultaneously to understand the same software engineering phenomena. {\textcopyright} 2013 IEEE.},
author = {Ralph, Paul},
doi = {10.1109/GTSE.2013.6613868},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2013 - Possible core theories for software engineering.pdf:pdf},
isbn = {9781467362733},
journal = {2013 2nd SEMAT Workshop on a General Theory of Software Engineering, GTSE 2013 - Proceedings},
keywords = {Process theory,SCI Theory,boundary objects,cognitive psychology,complexity,general theory},
pages = {35--38},
title = {{Possible core theories for software engineering}},
year = {2013}
}
@inproceedings{Chotisarn2013,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013)},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process.pdf:pdf},
isbn = {9781467327640},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@inproceedings{Chotisarn2013a,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process(2).pdf:pdf},
keywords = {as,chology,cognitive bi-,human factor,software design,software psy-,software requirements specification},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@inproceedings{Chotisarn2013,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013)},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process.pdf:pdf},
isbn = {9781467327640},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@inproceedings{Chotisarn2013a,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process(2).pdf:pdf},
keywords = {as,chology,cognitive bi-,human factor,software design,software psy-,software requirements specification},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@inproceedings{Chotisarn2013,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013)},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process.pdf:pdf},
isbn = {9781467327640},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@inproceedings{Chotisarn2013a,
abstract = {Software design process is one of the crit-ical processes in software development life cycle since it delivers a software de-sign specification basically used for im-plementation in order to deliver software meets user expectation. There are many tasks required different skills of design team members. Due to the different backgrounds, experiences and preferences of software designers, cognitive bias may arise that leads tothe increase of software damage. In this paper, we want to explore whether there is a correlation between any cognitive bias types occur from human working process and software damage rate. From our experiment, we discover that there is a statistically significantcorrelation between the two types of cognitive bias; confirmation bias and adjustment bias in design process and software damage rate.},
author = {Chotisarn, Noptanit and Prompoon, Nakornthip},
booktitle = {Proceedings of the 2013 International Conference on Information, Business and Education Technology (ICIBET 2013},
doi = {10.2991/icibet.2013.238},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Chotisarn, Prompoon - 2013 - Predicting Software Damage Rate from Cognitive Bias in Software Design Process(2).pdf:pdf},
keywords = {as,chology,cognitive bi-,human factor,software design,software psy-,software requirements specification},
title = {{Predicting Software Damage Rate from Cognitive Bias in Software Design Process}},
year = {2013}
}
@article{Jørgensen2006,
author = {J{\o}rgensen, Magne and Faugli, B},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Faugli - 2006 - Prediction of overoptimistic predictions.pdf:pdf},
journal = {International Conference on Evaluation and Assessment in Software Engineering},
keywords = {asq,effort prediction,lot-r,optimism},
number = {1},
pages = {1--10},
title = {{Prediction of overoptimistic predictions}},
url = {http://www.itu.dk/people/mpo/ewic{\_}ea06{\_}paper5.pdf},
year = {2006}
}
@article{Jørgensen2006,
author = {J{\o}rgensen, Magne and Faugli, B},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Faugli - 2006 - Prediction of overoptimistic predictions.pdf:pdf},
journal = {International Conference on Evaluation and Assessment in Software Engineering},
keywords = {asq,effort prediction,lot-r,optimism},
number = {1},
pages = {1--10},
title = {{Prediction of overoptimistic predictions}},
url = {http://www.itu.dk/people/mpo/ewic{\_}ea06{\_}paper5.pdf},
year = {2006}
}
@article{Jørgensen2006,
author = {J{\o}rgensen, Magne and Faugli, B},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Faugli - 2006 - Prediction of overoptimistic predictions.pdf:pdf},
journal = {International Conference on Evaluation and Assessment in Software Engineering},
keywords = {asq,effort prediction,lot-r,optimism},
number = {1},
pages = {1--10},
title = {{Prediction of overoptimistic predictions}},
url = {http://www.itu.dk/people/mpo/ewic{\_}ea06{\_}paper5.pdf},
year = {2006}
}
@inproceedings{Calikli2010b,
abstract = {In cognitive psychology, confirmation bias is defined as the tendency of people to verify hypotheses rather than refuting them. During unit testing software developers should aim to fail their code. However, due to confirmation bias, most defects might be overlooked leading to an increase in software defect density. In this research, we empirically analyze the effect of confirmation bias of software developers on software defect density. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {ESEM '10: Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1145/1852786.1852870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Preliminary analysis of the effects of confirmation bias on software defect density.pdf:pdf},
title = {{Preliminary analysis of the effects of confirmation bias on software defect density}},
year = {2010}
}
@inproceedings{Calikli2010b,
abstract = {In cognitive psychology, confirmation bias is defined as the tendency of people to verify hypotheses rather than refuting them. During unit testing software developers should aim to fail their code. However, due to confirmation bias, most defects might be overlooked leading to an increase in software defect density. In this research, we empirically analyze the effect of confirmation bias of software developers on software defect density. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {ESEM '10: Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1145/1852786.1852870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Preliminary analysis of the effects of confirmation bias on software defect density.pdf:pdf},
title = {{Preliminary analysis of the effects of confirmation bias on software defect density}},
year = {2010}
}
@inproceedings{Calikli2010b,
abstract = {In cognitive psychology, confirmation bias is defined as the tendency of people to verify hypotheses rather than refuting them. During unit testing software developers should aim to fail their code. However, due to confirmation bias, most defects might be overlooked leading to an increase in software defect density. In this research, we empirically analyze the effect of confirmation bias of software developers on software defect density. {\textcopyright} 2010 ACM.},
author = {Calikli, Gul and Bener, Ayse},
booktitle = {ESEM '10: Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1145/1852786.1852870},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli, Bener - 2010 - Preliminary analysis of the effects of confirmation bias on software defect density.pdf:pdf},
title = {{Preliminary analysis of the effects of confirmation bias on software defect density}},
year = {2010}
}
@article{Lavazza2020,
abstract = {Background. Having a correct, although approximate, knowledge of software development productivity is clearly important. In some environments, the belief that software enhancement projects are characterized by higher productivity than new software development has emerged. Aim. We want to understand whether the mentioned belief is rooted on solid bases or is due to some cognitive biases. Method. An empirical study was performed, analyzing the data from a large dataset that collects data from real-life projects. Several statistical methods were used to evaluate the unitary cost (i.e., the cost per Function Point) of enhancement projects and new developments. Results. Our analyses show that–contrary to some popular beliefs–software enhancement costs more than new software development, at least for projects greater than 300 Function Points. Conclusions. Project managers and other stakeholders interested in the actual cost of software should reject ill-based evaluations that the productivity of software enhancement is greater than new software development. More generally, objective evaluations based on the analysis of representative data should be preferred to evaluations affected by cognitive biases.},
author = {Lavazza, Luigi and Liu, Geng and Meli, Roberto},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/paper8.pdf:pdf},
isbn = {0000000310},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
keywords = {Function point analysis,Functional size measurement,Software development productivity,Software enhancement,Software maintenance,Software measurement},
pages = {1--15},
title = {{Productivity of software enhancement projects: An empirical study}},
volume = {2725},
year = {2020}
}
@article{Lavazza2020,
abstract = {Background. Having a correct, although approximate, knowledge of software development productivity is clearly important. In some environments, the belief that software enhancement projects are characterized by higher productivity than new software development has emerged. Aim. We want to understand whether the mentioned belief is rooted on solid bases or is due to some cognitive biases. Method. An empirical study was performed, analyzing the data from a large dataset that collects data from real-life projects. Several statistical methods were used to evaluate the unitary cost (i.e., the cost per Function Point) of enhancement projects and new developments. Results. Our analyses show that–contrary to some popular beliefs–software enhancement costs more than new software development, at least for projects greater than 300 Function Points. Conclusions. Project managers and other stakeholders interested in the actual cost of software should reject ill-based evaluations that the productivity of software enhancement is greater than new software development. More generally, objective evaluations based on the analysis of representative data should be preferred to evaluations affected by cognitive biases.},
author = {Lavazza, Luigi and Liu, Geng and Meli, Roberto},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/paper8.pdf:pdf},
isbn = {0000000310},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
keywords = {Function point analysis,Functional size measurement,Software development productivity,Software enhancement,Software maintenance,Software measurement},
pages = {1--15},
title = {{Productivity of software enhancement projects: An empirical study}},
volume = {2725},
year = {2020}
}
@article{Lavazza2020,
abstract = {Background. Having a correct, although approximate, knowledge of software development productivity is clearly important. In some environments, the belief that software enhancement projects are characterized by higher productivity than new software development has emerged. Aim. We want to understand whether the mentioned belief is rooted on solid bases or is due to some cognitive biases. Method. An empirical study was performed, analyzing the data from a large dataset that collects data from real-life projects. Several statistical methods were used to evaluate the unitary cost (i.e., the cost per Function Point) of enhancement projects and new developments. Results. Our analyses show that–contrary to some popular beliefs–software enhancement costs more than new software development, at least for projects greater than 300 Function Points. Conclusions. Project managers and other stakeholders interested in the actual cost of software should reject ill-based evaluations that the productivity of software enhancement is greater than new software development. More generally, objective evaluations based on the analysis of representative data should be preferred to evaluations affected by cognitive biases.},
author = {Lavazza, Luigi and Liu, Geng and Meli, Roberto},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/paper8.pdf:pdf},
isbn = {0000000310},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
keywords = {Function point analysis,Functional size measurement,Software development productivity,Software enhancement,Software maintenance,Software measurement},
pages = {1--15},
title = {{Productivity of software enhancement projects: An empirical study}},
volume = {2725},
year = {2020}
}
@article{Alkadhi2018,
abstract = {Rationale models, the justification behind decisions, is of great importance during software evolution. However, developers often resist capturing rationale models during software development. This dissertation presents three empirical studies to show that developers' communications are valuable sources for capturing rationale during development. We present two capturing approaches: REACT, a lightweight manual method to identify rationale elements in the chat messages exchanged by developers, and A-REACT, an automated method for classifying rationale elements in developers' communications.},
author = {Alkadhi, Rana Mohammed A},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/rat.pdf:pdf},
pages = {205},
title = {{Rationale in Developers' Communication}},
url = {https://d-nb.info/1171988087/34{\%}0Ahttps://mediatum.ub.tum.de/1445777},
year = {2018}
}
@article{Alkadhi2018,
abstract = {Rationale models, the justification behind decisions, is of great importance during software evolution. However, developers often resist capturing rationale models during software development. This dissertation presents three empirical studies to show that developers' communications are valuable sources for capturing rationale during development. We present two capturing approaches: REACT, a lightweight manual method to identify rationale elements in the chat messages exchanged by developers, and A-REACT, an automated method for classifying rationale elements in developers' communications.},
author = {Alkadhi, Rana Mohammed A},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/rat.pdf:pdf},
pages = {205},
title = {{Rationale in Developers' Communication}},
url = {https://d-nb.info/1171988087/34{\%}0Ahttps://mediatum.ub.tum.de/1445777},
year = {2018}
}
@article{Gilson2011,
abstract = {When designing information systems, architects must often deal with many requirements and constraints. Also, many parties may collaborate during design phases. Therefore, the rationale and decisions sustaining the architecture model can be lost if not documented appropriately. However, in order to understand and maintain these systems, we need to have a clear picture of the rationale and decisions behind their designs. To tackle this problem, we propose a design approach combining architecturally significant requirement modelling and architecture modelling. Constraint and Requirement are attached to architectural constructs. And any modification in the architecture model resulting from a decision made in the requirement model is recorded as a model transformation. We present both modelling formalisms and explain how we combine them to increase the traceability of the rationale, design decisions and alternatives as well as the maintainability of information systems. Copyright {\textcopyright} 2011 ACM.},
author = {Gilson, Fabian and Englebert, Vincent},
doi = {10.1145/2031759.2031764},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2031759.2031764.pdf:pdf},
isbn = {9781450306188},
journal = {ACM International Conference Proceeding Series},
keywords = {Architectural alternative,Architecturally signifficant requirement,Architecture description language,Architecture rationale,Design decision,Traceability},
title = {{Rationale, decisions and alternatives traceability for architecture design}},
year = {2011}
}
@article{Gilson2011,
abstract = {When designing information systems, architects must often deal with many requirements and constraints. Also, many parties may collaborate during design phases. Therefore, the rationale and decisions sustaining the architecture model can be lost if not documented appropriately. However, in order to understand and maintain these systems, we need to have a clear picture of the rationale and decisions behind their designs. To tackle this problem, we propose a design approach combining architecturally significant requirement modelling and architecture modelling. Constraint and Requirement are attached to architectural constructs. And any modification in the architecture model resulting from a decision made in the requirement model is recorded as a model transformation. We present both modelling formalisms and explain how we combine them to increase the traceability of the rationale, design decisions and alternatives as well as the maintainability of information systems. Copyright {\textcopyright} 2011 ACM.},
author = {Gilson, Fabian and Englebert, Vincent},
doi = {10.1145/2031759.2031764},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2031759.2031764.pdf:pdf},
isbn = {9781450306188},
journal = {ACM International Conference Proceeding Series},
keywords = {Architectural alternative,Architecturally signifficant requirement,Architecture description language,Architecture rationale,Design decision,Traceability},
title = {{Rationale, decisions and alternatives traceability for architecture design}},
year = {2011}
}
@book{Burge2008a,
author = {Burge, Janet E and Carroll, John M and Raymond, McCall and Mistr{\'{i}}k, Ivan},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/196.pdf:pdf},
isbn = {9783540775829},
publisher = {Springer Science {\&} Business Media},
title = {{Rationale-Based Software Engineering}},
year = {2008}
}
@book{Burge2008a,
author = {Burge, Janet E and Carroll, John M and Raymond, McCall and Mistr{\'{i}}k, Ivan},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/196.pdf:pdf},
isbn = {9783540775829},
publisher = {Springer Science {\&} Business Media},
title = {{Rationale-Based Software Engineering}},
year = {2008}
}
@techreport{Ranganathan2002,
abstract = {Rationality is a fundamental concept to several models of IT planning and implementation. Though the importance of following rational processes in making strategic IT decisions is well acknowledged, there is not much understanding on why discrepancies occur in the IT decision-making process and what factors affect rationality. Drawing upon structural and resource-based perspectives of strategy, this study examines the influence of shared domain knowledge and IT unit structure on rationality in strategic IT decisions. Data were gathered from 223 senior IT executives using a survey to examine the relationships among the research constructs. The results suggest a positive impact of shared domain knowledge and formalization of IT unit structure on rationality in strategic IT decisions. Further, a highly centralized IT unit structure was found to negatively influence shared domain knowledge. On the other hand, formalization of IT structure positively influenced shared domain knowledge. The implications of the findings for research and practice are presented.},
annote = {na racjonalno{\'{s}}{\'{c}} decyzji wp{\l}yw ma "wsp{\'{o}}lna wiedza dziedzinowa" i to jaka jest struktura organizacji},
author = {Ranganathan, C and Sethi, Vijay},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ranganathan, Sethi - 2002 - Rationality in Strategic Information Technology Decisions The Impact of Shared Domain Knowledge and IT Un(2).pdf:pdf},
keywords = {IT Unit Structure,Rational-@,Shared Domain Knowledge,Subject areas: In formation Systems Management,and Strategic IT Decisions},
title = {{Rationality in Strategic Information Technology Decisions: The Impact of Shared Domain Knowledge and IT Unit Structure*}},
volume = {33},
year = {2002}
}
@techreport{Ranganathan2002,
abstract = {Rationality is a fundamental concept to several models of IT planning and implementation. Though the importance of following rational processes in making strategic IT decisions is well acknowledged, there is not much understanding on why discrepancies occur in the IT decision-making process and what factors affect rationality. Drawing upon structural and resource-based perspectives of strategy, this study examines the influence of shared domain knowledge and IT unit structure on rationality in strategic IT decisions. Data were gathered from 223 senior IT executives using a survey to examine the relationships among the research constructs. The results suggest a positive impact of shared domain knowledge and formalization of IT unit structure on rationality in strategic IT decisions. Further, a highly centralized IT unit structure was found to negatively influence shared domain knowledge. On the other hand, formalization of IT structure positively influenced shared domain knowledge. The implications of the findings for research and practice are presented.},
annote = {na racjonalno{\'{s}}{\'{c}} decyzji wp{\l}yw ma "wsp{\'{o}}lna wiedza dziedzinowa" i to jaka jest struktura organizacji},
author = {Ranganathan, C and Sethi, Vijay},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ranganathan, Sethi - 2002 - Rationality in Strategic Information Technology Decisions The Impact of Shared Domain Knowledge and IT Un(2).pdf:pdf},
keywords = {IT Unit Structure,Rational-@,Shared Domain Knowledge,Subject areas: In formation Systems Management,and Strategic IT Decisions},
title = {{Rationality in Strategic Information Technology Decisions: The Impact of Shared Domain Knowledge and IT Unit Structure*}},
volume = {33},
year = {2002}
}
@misc{Potts1988,
abstract = {The authors outline a generic model for representing design deliberation and the relation between deliberation and the generation of method-specific artifacts. A design history is regarded as a network consisting of artifacts and deliberation nodes. Artifacts represent specifications or design documents. Deliberation nodes represent issues, alternatives or justifications. Existing artifacts give rise to issues about the evolving design, an alternative is one of several positions that respond to the issue (perhaps calling for the creation or modification of an artifact), and a justification is a statement giving the reasons for and against the related alternative. The model is applied to the development of a text formatter. The example development is represented in hypertext and as a Prolog database, the two representations being shown to complement each other. The authors conclude with a discussion of the relation between this model and other work and of the implications for tool support and methods.},
author = {Potts, Colin and Bruns, Glenn},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1109/icse.1988.93722},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/potts-98.pdf:pdf},
isbn = {0897912586},
issn = {02705257},
pages = {418--427},
title = {{Recording the Reasons for Design Decisions.}},
year = {1988}
}
@misc{Potts1988,
abstract = {The authors outline a generic model for representing design deliberation and the relation between deliberation and the generation of method-specific artifacts. A design history is regarded as a network consisting of artifacts and deliberation nodes. Artifacts represent specifications or design documents. Deliberation nodes represent issues, alternatives or justifications. Existing artifacts give rise to issues about the evolving design, an alternative is one of several positions that respond to the issue (perhaps calling for the creation or modification of an artifact), and a justification is a statement giving the reasons for and against the related alternative. The model is applied to the development of a text formatter. The example development is represented in hypertext and as a Prolog database, the two representations being shown to complement each other. The authors conclude with a discussion of the relation between this model and other work and of the implications for tool support and methods.},
author = {Potts, Colin and Bruns, Glenn},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1109/icse.1988.93722},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/potts-98.pdf:pdf},
isbn = {0897912586},
issn = {02705257},
pages = {418--427},
title = {{Recording the Reasons for Design Decisions.}},
year = {1988}
}
@article{Razavian2016,
abstract = {Good software design practice is difficult to define and teach. Despite the many software design methods and processes that are available, the quality of software design relies on human factors. We notice from literature and our own experiments that some of these factors concern design reasoning and reflection. In this paper, we propose a reflective approach to software design decision making. The approach is built upon Two-Minds model and is enabled by a set of problem-generic reflective questions. We illustrate its usefulness in design sessions with an example taken from preliminary experimentation.},
author = {Razavian, Maryam and Tang, Antony and Capilla, Rafael and Lago, Patricia},
doi = {10.1109/QRASA.2016.8},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Reflective{\_}Approach{\_}for{\_}Software{\_}Design{\_}Decision{\_}Making.pdf:pdf},
isbn = {9781509021314},
journal = {Proceedings - 1st Workshop on Qualitative Reasoning about Software Architectures, QRASA 2016},
keywords = {Behavioral Software Engineering,Design Decision Making,Reflection},
pages = {19--26},
publisher = {IEEE},
title = {{Reflective approach for software design decision making}},
year = {2016}
}
@article{Razavian2016,
abstract = {Good software design practice is difficult to define and teach. Despite the many software design methods and processes that are available, the quality of software design relies on human factors. We notice from literature and our own experiments that some of these factors concern design reasoning and reflection. In this paper, we propose a reflective approach to software design decision making. The approach is built upon Two-Minds model and is enabled by a set of problem-generic reflective questions. We illustrate its usefulness in design sessions with an example taken from preliminary experimentation.},
author = {Razavian, Maryam and Tang, Antony and Capilla, Rafael and Lago, Patricia},
doi = {10.1109/QRASA.2016.8},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Reflective{\_}Approach{\_}for{\_}Software{\_}Design{\_}Decision{\_}Making.pdf:pdf},
isbn = {9781509021314},
journal = {Proceedings - 1st Workshop on Qualitative Reasoning about Software Architectures, QRASA 2016},
keywords = {Behavioral Software Engineering,Design Decision Making,Reflection},
pages = {19--26},
publisher = {IEEE},
title = {{Reflective approach for software design decision making}},
year = {2016}
}
@article{Mohanani2014,
abstract = {There is a broad consensus that understanding system desiderata (requirements) and design creativity are both important for software engineering success. However, little research has addressed the relationship between design creativity and the way requirements are framed or presented. This paper therefore aims to investigate the possibility that the way desiderata are framed or presented can affect design creativity. Forty two participants took part in a randomized control trial where one group received desiderata framed as “requirements” while the other received desiderata framed as “ideas”. Participants produced design concepts which were judged for originality. Participants who received requirements framing produced significantly less original designs than participants who received ideas framing (Mann-Whitney U=116.5, p=0.004). We conclude that framing desiderata as “requirements” may cause requirements fixation where designers' preoccupation with satisfying explicit requirements inhibits their creativity.},
author = {Mohanani, Rahul and Ralph, Paul and Shreeve, Ben},
doi = {10.1145/2568225.2568235},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani, Ralph, Shreeve - 2014 - Requirements fixation.pdf:pdf},
isbn = {9781450327565},
journal = {International Conference on Software Engineering (ICSE)},
keywords = {cognitive bias,design creativity,randomized,requirements},
pages = {895--906},
title = {{Requirements fixation}},
year = {2014}
}
@article{Mohanani2014,
abstract = {There is a broad consensus that understanding system desiderata (requirements) and design creativity are both important for software engineering success. However, little research has addressed the relationship between design creativity and the way requirements are framed or presented. This paper therefore aims to investigate the possibility that the way desiderata are framed or presented can affect design creativity. Forty two participants took part in a randomized control trial where one group received desiderata framed as “requirements” while the other received desiderata framed as “ideas”. Participants produced design concepts which were judged for originality. Participants who received requirements framing produced significantly less original designs than participants who received ideas framing (Mann-Whitney U=116.5, p=0.004). We conclude that framing desiderata as “requirements” may cause requirements fixation where designers' preoccupation with satisfying explicit requirements inhibits their creativity.},
author = {Mohanani, Rahul and Ralph, Paul and Shreeve, Ben},
doi = {10.1145/2568225.2568235},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani, Ralph, Shreeve - 2014 - Requirements fixation.pdf:pdf},
isbn = {9781450327565},
journal = {International Conference on Software Engineering (ICSE)},
keywords = {cognitive bias,design creativity,randomized,requirements},
pages = {895--906},
title = {{Requirements fixation}},
year = {2014}
}
@article{Mohanani2014,
abstract = {There is a broad consensus that understanding system desiderata (requirements) and design creativity are both important for software engineering success. However, little research has addressed the relationship between design creativity and the way requirements are framed or presented. This paper therefore aims to investigate the possibility that the way desiderata are framed or presented can affect design creativity. Forty two participants took part in a randomized control trial where one group received desiderata framed as “requirements” while the other received desiderata framed as “ideas”. Participants produced design concepts which were judged for originality. Participants who received requirements framing produced significantly less original designs than participants who received ideas framing (Mann-Whitney U=116.5, p=0.004). We conclude that framing desiderata as “requirements” may cause requirements fixation where designers' preoccupation with satisfying explicit requirements inhibits their creativity.},
author = {Mohanani, Rahul and Ralph, Paul and Shreeve, Ben},
doi = {10.1145/2568225.2568235},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohanani, Ralph, Shreeve - 2014 - Requirements fixation.pdf:pdf},
isbn = {9781450327565},
journal = {International Conference on Software Engineering (ICSE)},
keywords = {cognitive bias,design creativity,randomized,requirements},
pages = {895--906},
title = {{Requirements fixation}},
year = {2014}
}
@article{Garrison2006,
abstract = {Transcript analysis is an important methodology to study asynchronous online educational discourse. The purpose of this study is to revisit reliability and validity issues associated with transcript analysis. The goal is to provide researchers with guidance in coding transcripts. For validity reasons, it is suggested that the first step is to select a sound theoretical model and coding scheme. Particular focus is placed on exploring the advantages of the option of a negotiated approach to coding the transcript. It is concluded that researchers need to consider the advantages of negotiation when coders and researchers are not familiar with the coding scheme. {\textcopyright} 2005 Elsevier Inc. All rights reserved.},
annote = {A tu o negotiated coding},
author = {Garrison, D R and Cleveland-Innes, M and Koole, Marguerite and Kappelman, James},
doi = {10.1016/j.iheduc.2005.11.001},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garrison et al. - 2006 - Revisiting methodological issues in transcript analysis Negotiated coding and reliability.pdf:pdf},
issn = {10967516},
journal = {Internet and Higher Education},
keywords = {Coding reliability,Coding scheme,Community of inquiry,Online learning,Transcript analysis},
number = {1},
pages = {1--8},
title = {{Revisiting methodological issues in transcript analysis: Negotiated coding and reliability}},
volume = {9},
year = {2006}
}
@article{Garrison2006,
abstract = {Transcript analysis is an important methodology to study asynchronous online educational discourse. The purpose of this study is to revisit reliability and validity issues associated with transcript analysis. The goal is to provide researchers with guidance in coding transcripts. For validity reasons, it is suggested that the first step is to select a sound theoretical model and coding scheme. Particular focus is placed on exploring the advantages of the option of a negotiated approach to coding the transcript. It is concluded that researchers need to consider the advantages of negotiation when coders and researchers are not familiar with the coding scheme. {\textcopyright} 2005 Elsevier Inc. All rights reserved.},
author = {Garrison, D R and Cleveland-Innes, M and Koole, Marguerite and Kappelman, James},
doi = {10.1016/j.iheduc.2005.11.001},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garrison et al. - 2006 - Revisiting methodological issues in transcript analysis Negotiated coding and reliability.pdf:pdf},
issn = {10967516},
journal = {Internet and Higher Education},
keywords = {Coding reliability,Coding scheme,Community of inquiry,Online learning,Transcript analysis},
number = {1},
pages = {1--8},
title = {{Revisiting methodological issues in transcript analysis: Negotiated coding and reliability}},
volume = {9},
year = {2006}
}
@article{Garrison2006,
abstract = {Transcript analysis is an important methodology to study asynchronous online educational discourse. The purpose of this study is to revisit reliability and validity issues associated with transcript analysis. The goal is to provide researchers with guidance in coding transcripts. For validity reasons, it is suggested that the first step is to select a sound theoretical model and coding scheme. Particular focus is placed on exploring the advantages of the option of a negotiated approach to coding the transcript. It is concluded that researchers need to consider the advantages of negotiation when coders and researchers are not familiar with the coding scheme. {\textcopyright} 2005 Elsevier Inc. All rights reserved.},
author = {Garrison, D R and Cleveland-Innes, M and Koole, Marguerite and Kappelman, James},
doi = {10.1016/j.iheduc.2005.11.001},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garrison et al. - 2006 - Revisiting methodological issues in transcript analysis Negotiated coding and reliability.pdf:pdf},
issn = {10967516},
journal = {Internet and Higher Education},
keywords = {Coding reliability,Coding scheme,Community of inquiry,Online learning,Transcript analysis},
number = {1},
pages = {1--8},
title = {{Revisiting methodological issues in transcript analysis: Negotiated coding and reliability}},
volume = {9},
year = {2006}
}
@article{McGregor2004,
abstract = {Presenation on software architecture methods.},
author = {McGregor, John D.},
doi = {10.5381/jot.2004.3.5.c7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/McGregor - 2004 - Software architecture.pdf:pdf},
isbn = {9783319658315},
issn = {16601769},
journal = {Journal of Object Technology},
keywords = {cognitive biases},
number = {5},
pages = {65--77},
title = {{Software architecture}},
volume = {3},
year = {2004}
}
@article{McGregor2004,
abstract = {Presenation on software architecture methods.},
author = {McGregor, John D.},
doi = {10.5381/jot.2004.3.5.c7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/McGregor - 2004 - Software architecture.pdf:pdf},
isbn = {9783319658315},
issn = {16601769},
journal = {Journal of Object Technology},
keywords = {cognitive biases},
number = {5},
pages = {65--77},
title = {{Software architecture}},
volume = {3},
year = {2004}
}
@article{McGregor2004,
abstract = {Presenation on software architecture methods.},
author = {McGregor, John D.},
doi = {10.5381/jot.2004.3.5.c7},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/McGregor - 2004 - Software architecture.pdf:pdf},
isbn = {9783319658315},
issn = {16601769},
journal = {Journal of Object Technology},
keywords = {cognitive biases},
number = {5},
pages = {65--77},
title = {{Software architecture}},
volume = {3},
year = {2004}
}
@inproceedings{Jansen2005,
abstract = {Software architectures have high costs for change, are complex, and erode during evolution. We believe these problems are partially due to knowledge vaporization. Currently, almost all the knowledge and information about the design decisions the architecture is based on are implicitly embedded in the architecture, but lack a first-class representation. Consequently, knowledge about these design decisions disappears into the architecture, which leads to the aforementioned problems. In this paper, a new perspective on software architecture is presented, which views software architecture as a composition of a set of explicit design decisions. This perspective makes architectural design decisions an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture. {\textcopyright} 2005 IEEE.},
annote = {Podstawa podstaw o tym {\.{z}}e decyzje = architektura},
author = {Jansen, Anton and Bosch, Jan},
booktitle = {Proceedings - 5th Working IEEE/IFIP Conference on Software Architecture, WICSA 2005},
doi = {10.1109/WICSA.2005.61},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jansen, Bosch - 2005 - Software architecture as a set of architectural design decisions.pdf:pdf},
isbn = {0769525482},
pages = {109--120},
title = {{Software architecture as a set of architectural design decisions}},
volume = {2005},
year = {2005}
}
@inproceedings{Jansen2005,
abstract = {Software architectures have high costs for change, are complex, and erode during evolution. We believe these problems are partially due to knowledge vaporization. Currently, almost all the knowledge and information about the design decisions the architecture is based on are implicitly embedded in the architecture, but lack a first-class representation. Consequently, knowledge about these design decisions disappears into the architecture, which leads to the aforementioned problems. In this paper, a new perspective on software architecture is presented, which views software architecture as a composition of a set of explicit design decisions. This perspective makes architectural design decisions an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture. {\textcopyright} 2005 IEEE.},
annote = {Podstawa podstaw o tym {\.{z}}e decyzje = architektura},
author = {Jansen, Anton and Bosch, Jan},
booktitle = {Proceedings - 5th Working IEEE/IFIP Conference on Software Architecture, WICSA 2005},
doi = {10.1109/WICSA.2005.61},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Jansen, Bosch - 2005 - Software architecture as a set of architectural design decisions.pdf:pdf},
isbn = {0769525482},
pages = {109--120},
title = {{Software architecture as a set of architectural design decisions}},
volume = {2005},
year = {2005}
}
@article{Ari2019,
author = {Ari, Hugo and Drumond, Rodrigues},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/358229.pdf:pdf},
title = {{Software Architecture by Component Selection}},
year = {2019}
}
@article{Ari2019,
author = {Ari, Hugo and Drumond, Rodrigues},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/358229.pdf:pdf},
title = {{Software Architecture by Component Selection}},
year = {2019}
}
@inproceedings{Robbins1994,
abstract = {Software architectures are high-level design representations of software systems that focus on composition of software components and how those components interact. Software architectures abstract the details of implementation and allow the designer to focus on essential design decisions. Regardless of notation, designers are faced with the task of making good design decisions, which demands a wide range of knowledge of the problem and solution domains. Argo is a software architecture design environment that supports designers by addressing several cognitive challenges of design. In this paper we describe how Argo supports decision making by automatically supplying knowledge that is timely and relevant to decisions at hand.},
author = {Robbins, Jason E. and Hilbert, David M. and Redmiles, David F.},
booktitle = {Proceedings of the 3rd international conference on Intelligent user interfaces},
doi = {10.1145/268389.268416},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Robbins, Hilbert, Redmiles - 2004 - Software architecture critics in Argo.pdf:pdf},
keywords = {design critics,domain-oriented design environments,human cognitive needs,software architec-,ture},
title = {{Software architecture critics in Argo}},
year = {1994}
}
@inproceedings{Robbins1994,
abstract = {Software architectures are high-level design representations of software systems that focus on composition of software components and how those components interact. Software architectures abstract the details of implementation and allow the designer to focus on essential design decisions. Regardless of notation, designers are faced with the task of making good design decisions, which demands a wide range of knowledge of the problem and solution domains. Argo is a software architecture design environment that supports designers by addressing several cognitive challenges of design. In this paper we describe how Argo supports decision making by automatically supplying knowledge that is timely and relevant to decisions at hand.},
author = {Robbins, Jason E. and Hilbert, David M. and Redmiles, David F.},
booktitle = {Proceedings of the 3rd international conference on Intelligent user interfaces},
doi = {10.1145/268389.268416},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Robbins, Hilbert, Redmiles - 2004 - Software architecture critics in Argo.pdf:pdf},
keywords = {design critics,domain-oriented design environments,human cognitive needs,software architec-,ture},
title = {{Software architecture critics in Argo}},
year = {1994}
}
@inproceedings{Robbins1994,
abstract = {Software architectures are high-level design representations of software systems that focus on composition of software components and how those components interact. Software architectures abstract the details of implementation and allow the designer to focus on essential design decisions. Regardless of notation, designers are faced with the task of making good design decisions, which demands a wide range of knowledge of the problem and solution domains. Argo is a software architecture design environment that supports designers by addressing several cognitive challenges of design. In this paper we describe how Argo supports decision making by automatically supplying knowledge that is timely and relevant to decisions at hand.},
author = {Robbins, Jason E. and Hilbert, David M. and Redmiles, David F.},
booktitle = {Proceedings of the 3rd international conference on Intelligent user interfaces},
doi = {10.1145/268389.268416},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Robbins, Hilbert, Redmiles - 2004 - Software architecture critics in Argo.pdf:pdf},
keywords = {design critics,domain-oriented design environments,human cognitive needs,software architec-,ture},
title = {{Software architecture critics in Argo}},
year = {1994}
}
@article{Schriek2016,
abstract = {Software design is a complicated process, and novice designers have seldom been taught how to reason with a design. They use a naturalistic approach to work their way through software design. In order to impart the use of design techniques, a card game was developed to help design reasoning. This game was tested on groups of students and resulted in noticeable differences between the control and test groups. Those who used the cards produced better design arguments: the groups with the card game on average perform 75{\%} more reasoning than the control groups. The results show that the design strategy used by the groups is a clear indicator for how many and what kind of design problems are designed, while the cards influence how the designers solve these problems.},
author = {Schriek, Courtney and van der Werf, Jan Martijn E.M. and Tang, Antony and Bex, Floris},
doi = {10.1007/978-3-319-48992-6_2},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ecsa2016/Schriek2016{\_}Chapter{\_}SoftwareArchitectureDesignReas.pdf:pdf},
isbn = {9783319489919},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {22--38},
title = {{Software architecture design reasoning: A card game to help novice designers}},
volume = {9839 LNCS},
year = {2016}
}
@article{Schriek2016,
abstract = {Software design is a complicated process, and novice designers have seldom been taught how to reason with a design. They use a naturalistic approach to work their way through software design. In order to impart the use of design techniques, a card game was developed to help design reasoning. This game was tested on groups of students and resulted in noticeable differences between the control and test groups. Those who used the cards produced better design arguments: the groups with the card game on average perform 75{\%} more reasoning than the control groups. The results show that the design strategy used by the groups is a clear indicator for how many and what kind of design problems are designed, while the cards influence how the designers solve these problems.},
author = {Schriek, Courtney and van der Werf, Jan Martijn E.M. and Tang, Antony and Bex, Floris},
doi = {10.1007/978-3-319-48992-6_2},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ecsa2016/Schriek2016{\_}Chapter{\_}SoftwareArchitectureDesignReas.pdf:pdf},
isbn = {9783319489919},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
pages = {22--38},
title = {{Software architecture design reasoning: A card game to help novice designers}},
volume = {9839 LNCS},
year = {2016}
}
@article{Tang2014,
abstract = {During the process of software design, software architects have their reasons to choose certain software components to address particular software requirements and constraints. However, existing software architecture review techniques often rely on the design reviewers' knowledge and experience, and perhaps using some checklists, to identify design gaps and issues, without questioning the reasoning behind the decisions made by the architects. In this paper, we approach design reviews from a design reasoning perspective. We propose to use an association-based review procedure to identify design issues by first associating all the relevant design concerns, problems and solutions systematically; and then verifying if the causal relationships between these design elements are valid. Using this procedure, we discovered new design issues in all three industrial cases, despite their internal architecture reviews and one of the three systems being operational. With the newly found design issues, we derive eight general design reasoning failure scenarios. {\textcopyright} 2013 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Lau, Man F.},
doi = {10.1016/j.jss.2013.09.044},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang, Lau - 2014 - Software architecture review by association.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design reasoning,Software architecture review,Verification of software architecture},
number = {1},
pages = {87--101},
publisher = {Elsevier Inc.},
title = {{Software architecture review by association}},
url = {http://dx.doi.org/10.1016/j.jss.2013.09.044},
volume = {88},
year = {2014}
}
@article{Tang2014,
abstract = {During the process of software design, software architects have their reasons to choose certain software components to address particular software requirements and constraints. However, existing software architecture review techniques often rely on the design reviewers' knowledge and experience, and perhaps using some checklists, to identify design gaps and issues, without questioning the reasoning behind the decisions made by the architects. In this paper, we approach design reviews from a design reasoning perspective. We propose to use an association-based review procedure to identify design issues by first associating all the relevant design concerns, problems and solutions systematically; and then verifying if the causal relationships between these design elements are valid. Using this procedure, we discovered new design issues in all three industrial cases, despite their internal architecture reviews and one of the three systems being operational. With the newly found design issues, we derive eight general design reasoning failure scenarios. {\textcopyright} 2013 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Lau, Man F.},
doi = {10.1016/j.jss.2013.09.044},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang, Lau - 2014 - Software architecture review by association.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design reasoning,Software architecture review,Verification of software architecture},
number = {1},
pages = {87--101},
publisher = {Elsevier Inc.},
title = {{Software architecture review by association}},
url = {http://dx.doi.org/10.1016/j.jss.2013.09.044},
volume = {88},
year = {2014}
}
@article{Tang2014,
abstract = {During the process of software design, software architects have their reasons to choose certain software components to address particular software requirements and constraints. However, existing software architecture review techniques often rely on the design reviewers' knowledge and experience, and perhaps using some checklists, to identify design gaps and issues, without questioning the reasoning behind the decisions made by the architects. In this paper, we approach design reviews from a design reasoning perspective. We propose to use an association-based review procedure to identify design issues by first associating all the relevant design concerns, problems and solutions systematically; and then verifying if the causal relationships between these design elements are valid. Using this procedure, we discovered new design issues in all three industrial cases, despite their internal architecture reviews and one of the three systems being operational. With the newly found design issues, we derive eight general design reasoning failure scenarios. {\textcopyright} 2013 Elsevier Inc. All rights reserved.},
author = {Tang, Antony and Lau, Man F.},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang, Lau - 2014 - Software architecture review by association.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Design reasoning,Software architecture review,Verification of software architecture},
number = {1},
pages = {87--101},
publisher = {Elsevier Inc.},
title = {{Software architecture review by association}},
volume = {88},
year = {2014}
}

@inproceedings{Tang2011,
abstract = {Methods of representing and capturing design rationale have been studied in past years. Many meta-models, methods and techniques have been proposed. Are these software engineering methods sufficient to help designers make logical and appropriate design decisions? Studies have shown that people make biased decisions, software designers may also be subjected to such cognitive biases. In this paper, I give an overview of how cognitive biases and reasoning failures may lead to unsound design decisions. I conjecture that in order to improve the overall quality of software design, we as a community need to improve our understanding and teaching of software design reasoning. {\textcopyright} 2011 ACM.},
author = {Tang, Antony},
booktitle = {Proceedings of the 6th international workshop on sharing and reusing architectural knowledge},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tang - 2011 - Software designers, are you biased.pdf:pdf},
isbn = {9781450305969},
title = {{Software designers, are you biased?}},
year = {2011}
}
@article{Moløkken2003,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2003 - Software Effort Estimation Unstructured Group Discussion as a Method to Reduce Individual Biases.pdf:pdf},
journal = {The 15th Annual Workshop of the  {\ldots}},
keywords = {effort estimation,expert bias,expert judgment,group processes,software development},
pages = {1--12},
title = {{Software Effort Estimation: Unstructured Group Discussion as a Method to Reduce Individual Biases}},
url = {http://folk.uio.no/isu/INCO/Papers/ppig{\_}molokken{\_}2003.pdf},
year = {2003}
}
@article{Moløkken2003,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2003 - Software Effort Estimation Unstructured Group Discussion as a Method to Reduce Individual Biases.pdf:pdf},
journal = {The 15th Annual Workshop of the  {\ldots}},
keywords = {effort estimation,expert bias,expert judgment,group processes,software development},
pages = {1--12},
title = {{Software Effort Estimation: Unstructured Group Discussion as a Method to Reduce Individual Biases}},
url = {http://folk.uio.no/isu/INCO/Papers/ppig{\_}molokken{\_}2003.pdf},
year = {2003}
}
@article{Moløkken2003,
author = {Mol{\o}kken, K and J{\o}rgensen, M},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mol{\o}kken, J{\o}rgensen - 2003 - Software Effort Estimation Unstructured Group Discussion as a Method to Reduce Individual Biases.pdf:pdf},
journal = {The 15th Annual Workshop of the  {\ldots}},
keywords = {effort estimation,expert bias,expert judgment,group processes,software development},
pages = {1--12},
title = {{Software Effort Estimation: Unstructured Group Discussion as a Method to Reduce Individual Biases}},
url = {http://folk.uio.no/isu/INCO/Papers/ppig{\_}molokken{\_}2003.pdf},
year = {2003}
}
@article{Jørgensen2001,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag I K},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Sj{\o}berg - 2001 - Software Process Improvement and Human Judgement Heuristics.pdf:pdf},
journal = {Scandinavian Journal of Information Systems},
keywords = {expert judgement,human judgement heuristics,software effort estimation,software process improvement},
number = {1},
pages = {63--80},
title = {{Software Process Improvement and Human Judgement Heuristics}},
url = {http://iris.cs.aau.dk/tl{\_}files/volumes/volume13/no1/05{\_}jorgensen{\_}p63-80.pdf},
volume = {13},
year = {2001}
}
@article{Jørgensen2001,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag I K},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Sj{\o}berg - 2001 - Software Process Improvement and Human Judgement Heuristics.pdf:pdf},
journal = {Scandinavian Journal of Information Systems},
keywords = {expert judgement,human judgement heuristics,software effort estimation,software process improvement},
number = {1},
pages = {63--80},
title = {{Software Process Improvement and Human Judgement Heuristics}},
url = {http://iris.cs.aau.dk/tl{\_}files/volumes/volume13/no1/05{\_}jorgensen{\_}p63-80.pdf},
volume = {13},
year = {2001}
}
@article{Jørgensen2001,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag I K},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Sj{\o}berg - 2001 - Software Process Improvement and Human Judgement Heuristics.pdf:pdf},
journal = {Scandinavian Journal of Information Systems},
keywords = {expert judgement,human judgement heuristics,software effort estimation,software process improvement},
number = {1},
pages = {63--80},
title = {{Software Process Improvement and Human Judgement Heuristics}},
url = {http://iris.cs.aau.dk/tl{\_}files/volumes/volume13/no1/05{\_}jorgensen{\_}p63-80.pdf},
volume = {13},
year = {2001}
}
@article{Abdel-Hamid1993,
abstract = {Software project management is becoming an increasingly critical task in many organizations. While the macro-level aspects of project planning and control have been addressed extensively, there is a serious lack of research on the micro-empirical analysis of individual decision making behavior. The heuristics deployed to cope with the problems of poor estimation and poor visibility that hamper software project planning and control are investigated, and the implications for software project management are examined. A laboratory experiment in which subjects managed a simulated software development project is reviewed. The subjects were given project status information at different stages of the lifecycle and had to assess software productivity in order to dynamically readjust project plans. A conservative anchoring and adjustment heuristic is shown to explain the subjects' decisions quite well. Implications for software project planning and control are presented},
author = {Abdel-Hamid, Tarek K. and Sengupta, Kishore and Ronan, Daniel},
doi = {10.1109/32.232025},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Abdel-Hamid, Sengupta, Ronan - 1993 - Software Project Control An Experimental Investigation of Judgment with Fallible Information.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Anchoring,experimentation,project control,software productivity,software project management},
number = {6},
pages = {603--612},
title = {{Software Project Control: An Experimental Investigation of Judgment with Fallible Information}},
volume = {19},
year = {1993}
}
@article{Abdel-Hamid1993,
abstract = {Software project management is becoming an increasingly critical task in many organizations. While the macro-level aspects of project planning and control have been addressed extensively, there is a serious lack of research on the micro-empirical analysis of individual decision making behavior. The heuristics deployed to cope with the problems of poor estimation and poor visibility that hamper software project planning and control are investigated, and the implications for software project management are examined. A laboratory experiment in which subjects managed a simulated software development project is reviewed. The subjects were given project status information at different stages of the lifecycle and had to assess software productivity in order to dynamically readjust project plans. A conservative anchoring and adjustment heuristic is shown to explain the subjects' decisions quite well. Implications for software project planning and control are presented},
author = {Abdel-Hamid, Tarek K. and Sengupta, Kishore and Ronan, Daniel},
doi = {10.1109/32.232025},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Abdel-Hamid, Sengupta, Ronan - 1993 - Software Project Control An Experimental Investigation of Judgment with Fallible Information.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Anchoring,experimentation,project control,software productivity,software project management},
number = {6},
pages = {603--612},
title = {{Software Project Control: An Experimental Investigation of Judgment with Fallible Information}},
volume = {19},
year = {1993}
}
@article{Abdel-Hamid1993,
abstract = {Software project management is becoming an increasingly critical task in many organizations. While the macro-level aspects of project planning and control have been addressed extensively, there is a serious lack of research on the micro-empirical analysis of individual decision making behavior. The heuristics deployed to cope with the problems of poor estimation and poor visibility that hamper software project planning and control are investigated, and the implications for software project management are examined. A laboratory experiment in which subjects managed a simulated software development project is reviewed. The subjects were given project status information at different stages of the lifecycle and had to assess software productivity in order to dynamically readjust project plans. A conservative anchoring and adjustment heuristic is shown to explain the subjects' decisions quite well. Implications for software project planning and control are presented},
author = {Abdel-Hamid, Tarek K. and Sengupta, Kishore and Ronan, Daniel},
doi = {10.1109/32.232025},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Abdel-Hamid, Sengupta, Ronan - 1993 - Software Project Control An Experimental Investigation of Judgment with Fallible Information.pdf:pdf},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Anchoring,experimentation,project control,software productivity,software project management},
number = {6},
pages = {603--612},
title = {{Software Project Control: An Experimental Investigation of Judgment with Fallible Information}},
volume = {19},
year = {1993}
}
@article{Salama2021,
abstract = {With the increasing dependence on software systems, their longevity is becoming a pressing need. Stability is envisioned as a primary property to achieve longevity. Stability has been defined and treated in many different ways in the literature. We conduct a systematic literature review to analyse the state-of-the-art related to stability as a software property. We formulate a taxonomy for characterising the notion, analyse the definitions found in the literature, and present research studies dealing with stability. Also, as architecture is one of the software artefacts with profound effects throughout the software lifecycle, we focus on software engineering practices for realising architectural stability. The analysis results show a wide variation in dimensions when dealing with stability. The state-of-the-art indicates the need for a shift towards a multi-dimensional concept that could cope with runtime dynamics and emerging software paradigms. More research efforts should be directed toward the identified gaps. The presented taxonomy and analysis of the literature aim to help the research community in consolidating the existing research efforts and deriving future developments.},
author = {Salama, Maria and Bahsoon, Rami and Lago, Patricia},
doi = {10.1109/TSE.2019.2925616},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Stability{\_}in{\_}Software{\_}Engineering{\_}Survey{\_}of{\_}the{\_}State-of-the-Art{\_}and{\_}Research{\_}Directions.pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Software architecture,architectural stability,architecture design,architecture evaluation,longevity,quality,stability},
number = {7},
pages = {1468--1510},
publisher = {IEEE},
title = {{Stability in Software Engineering: Survey of the State-of-the-Art and Research Directions}},
volume = {47},
year = {2021}
}
@article{Salama2021,
abstract = {With the increasing dependence on software systems, their longevity is becoming a pressing need. Stability is envisioned as a primary property to achieve longevity. Stability has been defined and treated in many different ways in the literature. We conduct a systematic literature review to analyse the state-of-the-art related to stability as a software property. We formulate a taxonomy for characterising the notion, analyse the definitions found in the literature, and present research studies dealing with stability. Also, as architecture is one of the software artefacts with profound effects throughout the software lifecycle, we focus on software engineering practices for realising architectural stability. The analysis results show a wide variation in dimensions when dealing with stability. The state-of-the-art indicates the need for a shift towards a multi-dimensional concept that could cope with runtime dynamics and emerging software paradigms. More research efforts should be directed toward the identified gaps. The presented taxonomy and analysis of the literature aim to help the research community in consolidating the existing research efforts and deriving future developments.},
author = {Salama, Maria and Bahsoon, Rami and Lago, Patricia},
doi = {10.1109/TSE.2019.2925616},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Stability{\_}in{\_}Software{\_}Engineering{\_}Survey{\_}of{\_}the{\_}State-of-the-Art{\_}and{\_}Research{\_}Directions.pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Software architecture,architectural stability,architecture design,architecture evaluation,longevity,quality,stability},
number = {7},
pages = {1468--1510},
publisher = {IEEE},
title = {{Stability in Software Engineering: Survey of the State-of-the-Art and Research Directions}},
volume = {47},
year = {2021}
}
@article{Kahneman1972,
abstract = {The thirty-five chapters in this book describe various judgmental heuristics and the biases they produce, not only in laboratory experiments but in important social, medical, and political situations as well. Individual chapters discuss the representativeness and availability heuristics, problems in judging covariation and control, overconfidence, multistage inference, social perception, medical diagnosis, risk perception, and methods for correcting and improving judgments under uncertainty. About half of the chapters are edited versions of classic articles; the remaining chapters are newly written for this book. Most review multiple studies or entire subareas of research and application rather than describing single experimental studies. This book will be useful to a wide range of students and researchers, as well as to decision makers seeking to gain insight into their judgments and to improve them.},
author = {Kahneman, Daniel and Tversky, Amos},
doi = {10.1017/cbo9780511809477.007},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ADA099502-1.pdf:pdf},
journal = {Cognitive psychology},
title = {{Subjective probability: A judgment of representativeness}},
year = {1972}
}
@inproceedings{Becker2019,
abstract = {Technical Debt management decisions always imply a trade-off among outcomes at different points in time. In such intertemporal choices, distant outcomes are often valued lower than close ones, a phenomenon known as temporal discounting. Technical Debt research largely develops prescriptive approaches for how software engineers should make such decisions. Few have studied how they actually make them. This leaves open central questions about how software practitioners make decisions. This paper investigates how software practitioners discount uncertain future outcomes and whether they exhibit temporal discounting. We adopt experimental methods from intertemporal choice, an active area of research. We administered an online questionnaire to 33 developers from two companies in which we presented choices between developing a feature and making a longer-term investment in architecture. The results show wide-spread temporal discounting with notable differences in individual behavior. The results are consistent with similar studies in consumer behavior and raise a number of questions about the causal factors that influence temporal discounting in software engineering. As the first empirical study on intertemporal choice in SE, the paper establishes an empirical basis for understanding how software developers approach intertemporal choice and provides a blueprint for future studies.},
annote = {Temporal discounting - dyskusyjne czy to bias (chyba nie) ale chodzi o zjawisko gdzie przek{\l}ada si{\c{e}} "short-time benefits" nad d{\l}ugoterminowymi.

Dzie{\l}o wskazuje jasno {\.{z}}e to znajwisko jest bardzo cz{\c{e}}ste w projektach informatycznych, i st{\c{a}}d si{\c{e}} bierze sporo d{\l}ugi.

Na pewno pasuje nam do naszych obserwacji, bo to jeden z problemow na kt{\'{o}}ry zwracamy uwag{\c{e}}},
archivePrefix = {arXiv},
arxivId = {1901.07024},
author = {Becker, Christoph and Fagerholm, Fabian and Mohanani, Rahul and Chatzigeorgiou, Alexander},
booktitle = {Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019},
doi = {10.1109/TechDebt.2019.00011},
eprint = {1901.07024},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Becker et al. - 2019 - Temporal discounting in technical debt How do software practitioners discount the future.pdf:pdf},
isbn = {9781728133713},
keywords = {Behavioral software engineering,Decision making,Intertemporal choice,Psychology,Questionnaire,Technical debt,Technical debt management,Temporal discounting},
pages = {23--32},
title = {{Temporal discounting in technical debt: How do software practitioners discount the future?}},
year = {2019}
}
@inproceedings{Becker2019,
abstract = {Technical Debt management decisions always imply a trade-off among outcomes at different points in time. In such intertemporal choices, distant outcomes are often valued lower than close ones, a phenomenon known as temporal discounting. Technical Debt research largely develops prescriptive approaches for how software engineers should make such decisions. Few have studied how they actually make them. This leaves open central questions about how software practitioners make decisions. This paper investigates how software practitioners discount uncertain future outcomes and whether they exhibit temporal discounting. We adopt experimental methods from intertemporal choice, an active area of research. We administered an online questionnaire to 33 developers from two companies in which we presented choices between developing a feature and making a longer-term investment in architecture. The results show wide-spread temporal discounting with notable differences in individual behavior. The results are consistent with similar studies in consumer behavior and raise a number of questions about the causal factors that influence temporal discounting in software engineering. As the first empirical study on intertemporal choice in SE, the paper establishes an empirical basis for understanding how software developers approach intertemporal choice and provides a blueprint for future studies.},
annote = {Temporal discounting - dyskusyjne czy to bias (chyba nie) ale chodzi o zjawisko gdzie przek{\l}ada si{\c{e}} "short-time benefits" nad d{\l}ugoterminowymi.

Dzie{\l}o wskazuje jasno {\.{z}}e to znajwisko jest bardzo cz{\c{e}}ste w projektach informatycznych, i st{\c{a}}d si{\c{e}} bierze sporo d{\l}ugi.

Na pewno pasuje nam do naszych obserwacji, bo to jeden z problemow na kt{\'{o}}ry zwracamy uwag{\c{e}}},
archivePrefix = {arXiv},
arxivId = {1901.07024},
author = {Becker, Christoph and Fagerholm, Fabian and Mohanani, Rahul and Chatzigeorgiou, Alexander},
booktitle = {Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019},
doi = {10.1109/TechDebt.2019.00011},
eprint = {1901.07024},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Becker et al. - 2019 - Temporal discounting in technical debt How do software practitioners discount the future.pdf:pdf},
isbn = {9781728133713},
keywords = {Behavioral software engineering,Decision making,Intertemporal choice,Psychology,Questionnaire,Technical debt,Technical debt management,Temporal discounting},
pages = {23--32},
title = {{Temporal discounting in technical debt: How do software practitioners discount the future?}},
year = {2019}
}
@inproceedings{Becker2019,
abstract = {Technical Debt management decisions always imply a trade-off among outcomes at different points in time. In such intertemporal choices, distant outcomes are often valued lower than close ones, a phenomenon known as temporal discounting. Technical Debt research largely develops prescriptive approaches for how software engineers should make such decisions. Few have studied how they actually make them. This leaves open central questions about how software practitioners make decisions. This paper investigates how software practitioners discount uncertain future outcomes and whether they exhibit temporal discounting. We adopt experimental methods from intertemporal choice, an active area of research. We administered an online questionnaire to 33 developers from two companies in which we presented choices between developing a feature and making a longer-term investment in architecture. The results show wide-spread temporal discounting with notable differences in individual behavior. The results are consistent with similar studies in consumer behavior and raise a number of questions about the causal factors that influence temporal discounting in software engineering. As the first empirical study on intertemporal choice in SE, the paper establishes an empirical basis for understanding how software developers approach intertemporal choice and provides a blueprint for future studies.},
annote = {Temporal discounting - dyskusyjne czy to bias (chyba nie) ale chodzi o zjawisko gdzie przek{\l}ada si{\c{e}} "short-time benefits" nad d{\l}ugoterminowymi.

Dzie{\l}o wskazuje jasno {\.{z}}e to znajwisko jest bardzo cz{\c{e}}ste w projektach informatycznych, i st{\c{a}}d si{\c{e}} bierze sporo d{\l}ugi.

Na pewno pasuje nam do naszych obserwacji, bo to jeden z problemow na kt{\'{o}}ry zwracamy uwag{\c{e}}},
archivePrefix = {arXiv},
arxivId = {1901.07024},
author = {Becker, Christoph and Fagerholm, Fabian and Mohanani, Rahul and Chatzigeorgiou, Alexander},
booktitle = {Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019},
doi = {10.1109/TechDebt.2019.00011},
eprint = {1901.07024},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Becker et al. - 2019 - Temporal discounting in technical debt How do software practitioners discount the future.pdf:pdf},
isbn = {9781728133713},
keywords = {Behavioral software engineering,Decision making,Intertemporal choice,Psychology,Questionnaire,Technical debt,Technical debt management,Temporal discounting},
pages = {23--32},
title = {{Temporal discounting in technical debt: How do software practitioners discount the future?}},
year = {2019}
}
@book{Saldana2013,
abstract = {The Coding Manual for Qualitative Researchers addresses an important aspect of many qualitative research traditions, the process of attaching meaningful attributes (codes) to qualitative data that allows researchers to engage in a range of analytic processes (e.g. pattern detection, categorization and theory building). It is a book intended to "supplement introductory works in the subject" and provide an extensive collection of coding methods from a range of sources for a variety of purposes. It is a book that is probably best positioned to those in somewhere in the middle of the beginner-experienced continuum of qualitative researchers, especially to those looking for examples of different ways to analyze qualitative data. Salda{\~{n}}a states that this manual "serves primarily as a reference work" rather than a monograph to be read cover to cover. This is a claim important for a prospective reader to understand, and one that I agree with to a certain extent. A good reference work needs to have widely understood content in order for readers to know what to look for, and in this way the primary organizing scheme of the book into chapters on first and second cycle coding methods (and subsequently into a multitude of subcategories) is difficult to understand without a high degree of familiarity with this terminology. The opening chapter does a good job of exemplifying different approaches to coding and clarifying related terminology (e.g. patterns, codifying, categorization and themes) in a way that is helpful to the novice qualitative researcher. Perhaps less helpful in this part of the manual is the quick reference to dozens of specific coding types that are elaborated upon in later chapters and defined in the glossaries contained in the book's appendices. Despite what for me is too much material covered in only a surface way to start the manual, it is otherwise well organized, through and thoughtful. Salda{\~{n}}a's many examples are very helpful, showing how particular data segments can be coded. Where this was particularly helpful was in the otherwise unclear discussion of selecting the appropriate coding method(s) for a particular study to start Chapter 3. That chapter alone describes 33 choices of "first cycle coding methods," those that happen during the initial stages of data analysis. Arguably it is difficult to provide a concise answer to that question, because quite obviously the decision rests on many factors related to the researcher and the phenomenon researched. It was therefore interesting to see a short example of how an interview excerpt could be coded using descriptive codes (what is being talked about), in vivo codes (derived from the actual language used) and process coding (conceptual actions relayed by participants), each producing different yet equally valid insights about qualitative data. Another useful aspect of the manual is the discussion of how computer-aided qualitative data analysis software (CAQDAS) can be used, complete with screen shots from many of these programs. The companion website provides a wide range of online resources, particularly to the CAQDAS options available to researchers. I agree with Salda{\~{n}}a's claim that manual data analysis processes are perfectly fine for small-scale projects, but can be less than efficient or manageable with larger qualitative data sets. I dislike seeing},
annote = {Tu jest opis hypothesis coding},
author = {Salda{\~{n}}a, Johnny},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wicks - 2017 - The Coding Manual for Qualitative Researchers (2nd edition).pdf:pdf},
isbn = {9781446247365},
issn = {1746-5648},
number = {2},
pages = {169--170},
title = {{The Coding Manual for Qualitative Researchers (2nd edition)}},
volume = {12},
year = {2013}
}
@book{Wicks2017,
abstract = {The Coding Manual for Qualitative Researchers addresses an important aspect of many qualitative research traditions, the process of attaching meaningful attributes (codes) to qualitative data that allows researchers to engage in a range of analytic processes (e.g. pattern detection, categorization and theory building). It is a book intended to "supplement introductory works in the subject" and provide an extensive collection of coding methods from a range of sources for a variety of purposes. It is a book that is probably best positioned to those in somewhere in the middle of the beginner-experienced continuum of qualitative researchers, especially to those looking for examples of different ways to analyze qualitative data. Salda{\~{n}}a states that this manual "serves primarily as a reference work" rather than a monograph to be read cover to cover. This is a claim important for a prospective reader to understand, and one that I agree with to a certain extent. A good reference work needs to have widely understood content in order for readers to know what to look for, and in this way the primary organizing scheme of the book into chapters on first and second cycle coding methods (and subsequently into a multitude of subcategories) is difficult to understand without a high degree of familiarity with this terminology. The opening chapter does a good job of exemplifying different approaches to coding and clarifying related terminology (e.g. patterns, codifying, categorization and themes) in a way that is helpful to the novice qualitative researcher. Perhaps less helpful in this part of the manual is the quick reference to dozens of specific coding types that are elaborated upon in later chapters and defined in the glossaries contained in the book's appendices. Despite what for me is too much material covered in only a surface way to start the manual, it is otherwise well organized, through and thoughtful. Salda{\~{n}}a's many examples are very helpful, showing how particular data segments can be coded. Where this was particularly helpful was in the otherwise unclear discussion of selecting the appropriate coding method(s) for a particular study to start Chapter 3. That chapter alone describes 33 choices of "first cycle coding methods," those that happen during the initial stages of data analysis. Arguably it is difficult to provide a concise answer to that question, because quite obviously the decision rests on many factors related to the researcher and the phenomenon researched. It was therefore interesting to see a short example of how an interview excerpt could be coded using descriptive codes (what is being talked about), in vivo codes (derived from the actual language used) and process coding (conceptual actions relayed by participants), each producing different yet equally valid insights about qualitative data. Another useful aspect of the manual is the discussion of how computer-aided qualitative data analysis software (CAQDAS) can be used, complete with screen shots from many of these programs. The companion website provides a wide range of online resources, particularly to the CAQDAS options available to researchers. I agree with Salda{\~{n}}a's claim that manual data analysis processes are perfectly fine for small-scale projects, but can be less than efficient or manageable with larger qualitative data sets. I dislike seeing},
address = {London, England},
author = {Salda{\~{n}}a, Johnny},
doi = {10.1108/qrom-08-2016-1408},
edition = {2nd Editio},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wicks - 2017 - The Coding Manual for Qualitative Researchers (2nd edition).pdf:pdf},
isbn = {9781446247365},
issn = {1746-5648},
publisher = {SAGE publications},
title = {{The Coding Manual for Qualitative Researchers (2nd edition)}},
year = {2013}
}
@book{Wicks2017,
abstract = {The Coding Manual for Qualitative Researchers addresses an important aspect of many qualitative research traditions, the process of attaching meaningful attributes (codes) to qualitative data that allows researchers to engage in a range of analytic processes (e.g. pattern detection, categorization and theory building). It is a book intended to "supplement introductory works in the subject" and provide an extensive collection of coding methods from a range of sources for a variety of purposes. It is a book that is probably best positioned to those in somewhere in the middle of the beginner-experienced continuum of qualitative researchers, especially to those looking for examples of different ways to analyze qualitative data. Salda{\~{n}}a states that this manual "serves primarily as a reference work" rather than a monograph to be read cover to cover. This is a claim important for a prospective reader to understand, and one that I agree with to a certain extent. A good reference work needs to have widely understood content in order for readers to know what to look for, and in this way the primary organizing scheme of the book into chapters on first and second cycle coding methods (and subsequently into a multitude of subcategories) is difficult to understand without a high degree of familiarity with this terminology. The opening chapter does a good job of exemplifying different approaches to coding and clarifying related terminology (e.g. patterns, codifying, categorization and themes) in a way that is helpful to the novice qualitative researcher. Perhaps less helpful in this part of the manual is the quick reference to dozens of specific coding types that are elaborated upon in later chapters and defined in the glossaries contained in the book's appendices. Despite what for me is too much material covered in only a surface way to start the manual, it is otherwise well organized, through and thoughtful. Salda{\~{n}}a's many examples are very helpful, showing how particular data segments can be coded. Where this was particularly helpful was in the otherwise unclear discussion of selecting the appropriate coding method(s) for a particular study to start Chapter 3. That chapter alone describes 33 choices of "first cycle coding methods," those that happen during the initial stages of data analysis. Arguably it is difficult to provide a concise answer to that question, because quite obviously the decision rests on many factors related to the researcher and the phenomenon researched. It was therefore interesting to see a short example of how an interview excerpt could be coded using descriptive codes (what is being talked about), in vivo codes (derived from the actual language used) and process coding (conceptual actions relayed by participants), each producing different yet equally valid insights about qualitative data. Another useful aspect of the manual is the discussion of how computer-aided qualitative data analysis software (CAQDAS) can be used, complete with screen shots from many of these programs. The companion website provides a wide range of online resources, particularly to the CAQDAS options available to researchers. I agree with Salda{\~{n}}a's claim that manual data analysis processes are perfectly fine for small-scale projects, but can be less than efficient or manageable with larger qualitative data sets. I dislike seeing},
address = {London, England},
author = {Salda{\~{n}}a, Johnny},
doi = {10.1108/qrom-08-2016-1408},
edition = {2nd Editio},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wicks - 2017 - The Coding Manual for Qualitative Researchers (2nd edition).pdf:pdf},
isbn = {9781446247365},
issn = {1746-5648},
publisher = {SAGE publications},
title = {{The Coding Manual for Qualitative Researchers (2nd edition)}},
year = {2013}
}
@article{Jørgensen2010a,
abstract = {In this paper we study the effects of a change from the traditional request "How much effort is required to complete X?" to the alternative "How much can be completed in Y work-hours?". Studies 1 and 2 report that software professionals receiving the alternative format provided much lower, and presumably more optimistic, effort estimates of the same software development work than those receiving the traditional format. Studies 3 and 4 suggest that the effect belongs to the family of anchoring effects. An implication of our results is that project managers and clients should avoid the alternative estimation request format. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Halkjelsvik, Torleif},
doi = {10.1016/j.jss.2009.03.076},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Halkjelsvik - 2010 - The effects of request formats on judgment-based effort estimation.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Anchoring,Effort estimation,Human judgment},
number = {1},
pages = {29--36},
publisher = {Elsevier Inc.},
title = {{The effects of request formats on judgment-based effort estimation}},
url = {http://dx.doi.org/10.1016/j.jss.2009.03.076},
volume = {83},
year = {2010}
}
@article{Jørgensen2010a,
abstract = {In this paper we study the effects of a change from the traditional request "How much effort is required to complete X?" to the alternative "How much can be completed in Y work-hours?". Studies 1 and 2 report that software professionals receiving the alternative format provided much lower, and presumably more optimistic, effort estimates of the same software development work than those receiving the traditional format. Studies 3 and 4 suggest that the effect belongs to the family of anchoring effects. An implication of our results is that project managers and clients should avoid the alternative estimation request format. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Halkjelsvik, Torleif},
doi = {10.1016/j.jss.2009.03.076},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Halkjelsvik - 2010 - The effects of request formats on judgment-based effort estimation.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Anchoring,Effort estimation,Human judgment},
number = {1},
pages = {29--36},
publisher = {Elsevier Inc.},
title = {{The effects of request formats on judgment-based effort estimation}},
url = {http://dx.doi.org/10.1016/j.jss.2009.03.076},
volume = {83},
year = {2010}
}
@article{Jørgensen2010a,
abstract = {In this paper we study the effects of a change from the traditional request "How much effort is required to complete X?" to the alternative "How much can be completed in Y work-hours?". Studies 1 and 2 report that software professionals receiving the alternative format provided much lower, and presumably more optimistic, effort estimates of the same software development work than those receiving the traditional format. Studies 3 and 4 suggest that the effect belongs to the family of anchoring effects. An implication of our results is that project managers and clients should avoid the alternative estimation request format. {\textcopyright} 2009 Elsevier Inc. All rights reserved.},
author = {J{\o}rgensen, Magne and Halkjelsvik, Torleif},
doi = {10.1016/j.jss.2009.03.076},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\o}rgensen, Halkjelsvik - 2010 - The effects of request formats on judgment-based effort estimation.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Anchoring,Effort estimation,Human judgment},
number = {1},
pages = {29--36},
publisher = {Elsevier Inc.},
title = {{The effects of request formats on judgment-based effort estimation}},
url = {http://dx.doi.org/10.1016/j.jss.2009.03.076},
volume = {83},
year = {2010}
}
@article{Bhat2020,
abstract = {Literature review studies are essential and form the foundation for any type of research. They serve as the point of departure for those seeking to understand a research topic, as well as, helps research communities to reflect on the ideas, fundamentals, and approaches that have emerged, been acknowledged, and formed the state-of-the-art. In this paper, we present a semi-systematic literature review of 218 papers published over the last four decades that have contributed to a better understanding of architectural design decisions (ADDs). These publications cover various related topics including tool support for managing ADDs, human aspects in architectural decision making (ADM), and group decision making. The results of this paper should be treated as a getting-started guide for researchers who are entering the investigation phase of research on ADM. In this paper, the readers will find a brief description of the contributions made by the established research community over the years. Based on those insights, we recommend our readers to explore the publications and the topics in depth.},
author = {Bhat, Manoj and Shumaiev, Klym and Hohenstein, Uwe and Biesdorf, Andreas and Matthes, Florian},
doi = {10.1109/ICSA47634.2020.00015},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/The{\_}Evolution{\_}of{\_}Architectural{\_}Decision{\_}Making{\_}as{\_}a{\_}Key{\_}Focus{\_}Area{\_}of{\_}Software{\_}Architecture{\_}Research{\_}A{\_}Semi-Systematic{\_}Literature{\_}Study.pdf:pdf},
isbn = {9781728146591},
journal = {Proceedings - IEEE 17th International Conference on Software Architecture, ICSA 2020},
keywords = {Architectural design decisions,Decision making,Literature review,Software architecture},
number = {c},
pages = {69--80},
title = {{The evolution of architectural decision making as a key focus area of software architecture research: A semi-systematic literature study}},
year = {2020}
}
@article{Bhat2020a,
abstract = {Literature review studies are essential and form the foundation for any type of research. They serve as the point of departure for those seeking to understand a research topic, as well as, helps research communities to reflect on the ideas, fundamentals, and approaches that have emerged, been acknowledged, and formed the state-of-the-art. In this paper, we present a semi-systematic literature review of 218 papers published over the last four decades that have contributed to a better understanding of architectural design decisions (ADDs). These publications cover various related topics including tool support for managing ADDs, human aspects in architectural decision making (ADM), and group decision making. The results of this paper should be treated as a getting-started guide for researchers who are entering the investigation phase of research on ADM. In this paper, the readers will find a brief description of the contributions made by the established research community over the years. Based on those insights, we recommend our readers to explore the publications and the topics in depth.},
author = {Bhat, Manoj and Shumaiev, Klym and Hohenstein, Uwe and Biesdorf, Andreas and Matthes, Florian},
doi = {10.1109/ICSA47634.2020.00015},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/The{\_}Evolution{\_}of{\_}Architectural{\_}Decision{\_}Making{\_}as{\_}a{\_}Key{\_}Focus{\_}Area{\_}of{\_}Software{\_}Architecture{\_}Research{\_}A{\_}Semi-Systematic{\_}Literature{\_}Study.pdf:pdf},
isbn = {9781728146591},
journal = {Proceedings - IEEE 17th International Conference on Software Architecture, ICSA 2020},
keywords = {Architectural design decisions,Decision making,Literature review,Software architecture},
number = {c},
pages = {69--80},
title = {{The evolution of architectural decision making as a key focus area of software architecture research: A semi-systematic literature study}},
year = {2020}
}
@inproceedings{DeGraaf2014,
abstract = {Software documents are used to capture and communicate knowledge in software projects. It is important that this knowledge can be retrieved efficiently and effectively, to prevent wasted time and errors that negatively affect the quality of software. In this paper we investigate how software professionals search for knowledge in documentation. We studied the search behaviour of professionals in industry. Prior knowledge helps professionals to search software documents efficiently and effectively. However, it can also misguide professionals to an incomplete search.$\backslash$n},
author = {de Graaf, Klaas Andries and Liang, Peng and Tang, Antony and van Vliet, Hans},
booktitle = {Proceedings of the 2014 ACM symposium on Document engineering},
doi = {10.1145/2644866.2644878},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/de Graaf et al. - 2014 - The impact of prior knowledge on searching in software documentation.pdf:pdf},
isbn = {9781450329491},
keywords = {cognitive bias,gies,heuristics,information retrieval,prior knowledge,search strate-,software documentation},
title = {{The impact of prior knowledge on searching in software documentation}},
year = {2014}
}
@inproceedings{DeGraaf2014,
abstract = {Software documents are used to capture and communicate knowledge in software projects. It is important that this knowledge can be retrieved efficiently and effectively, to prevent wasted time and errors that negatively affect the quality of software. In this paper we investigate how software professionals search for knowledge in documentation. We studied the search behaviour of professionals in industry. Prior knowledge helps professionals to search software documents efficiently and effectively. However, it can also misguide professionals to an incomplete search.$\backslash$n},
author = {de Graaf, Klaas Andries and Liang, Peng and Tang, Antony and van Vliet, Hans},
booktitle = {Proceedings of the 2014 ACM symposium on Document engineering},
doi = {10.1145/2644866.2644878},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/de Graaf et al. - 2014 - The impact of prior knowledge on searching in software documentation.pdf:pdf},
isbn = {9781450329491},
keywords = {cognitive bias,gies,heuristics,information retrieval,prior knowledge,search strate-,software documentation},
title = {{The impact of prior knowledge on searching in software documentation}},
year = {2014}
}
@inproceedings{DeGraaf2014,
abstract = {Software documents are used to capture and communicate knowledge in software projects. It is important that this knowledge can be retrieved efficiently and effectively, to prevent wasted time and errors that negatively affect the quality of software. In this paper we investigate how software professionals search for knowledge in documentation. We studied the search behaviour of professionals in industry. Prior knowledge helps professionals to search software documents efficiently and effectively. However, it can also misguide professionals to an incomplete search.$\backslash$n},
author = {de Graaf, Klaas Andries and Liang, Peng and Tang, Antony and van Vliet, Hans},
booktitle = {Proceedings of the 2014 ACM symposium on Document engineering},
doi = {10.1145/2644866.2644878},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/de Graaf et al. - 2014 - The impact of prior knowledge on searching in software documentation.pdf:pdf},
isbn = {9781450329491},
keywords = {cognitive bias,gies,heuristics,information retrieval,prior knowledge,search strate-,software documentation},
title = {{The impact of prior knowledge on searching in software documentation}},
year = {2014}
}
@inproceedings{Sjøberg2000,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag},
booktitle = {European Software Process Improvement Conference},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sj{\o}berg - 2002 - The Importance of NOT Learning From Experience Better Titles.pdf:pdf},
title = {{The Importance of NOT Learning From Experience}},
year = {2000}
}
@inproceedings{Sjøberg2000,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag},
booktitle = {European Software Process Improvement Conference},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sj{\o}berg - 2002 - The Importance of NOT Learning From Experience Better Titles.pdf:pdf},
title = {{The Importance of NOT Learning From Experience}},
year = {2000}
}
@inproceedings{Sjøberg2000,
author = {J{\o}rgensen, Magne and Sj{\o}berg, Dag},
booktitle = {European Software Process Improvement Conference},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sj{\o}berg - 2002 - The Importance of NOT Learning From Experience Better Titles.pdf:pdf},
title = {{The Importance of NOT Learning From Experience}},
year = {2000}
}
@article{Siau1997,
abstract = {This paper describes an experiment designed to investigate the use of structural constraints and surface semantics by modeling experts. The experimental results indicated that when interpreting information models, modeling experts focused almost entirely on the structural constraints, and ignored the surface semantics, even in situations where the structural constraints were in contradiction to the real world situation. These biases exhibited by modeling experts are explained using the learning model in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
doi = {10.1016/s0306-4379(97)00009-4},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 1997 - The relative importance of structural constraints and surface semantics in information modeling.pdf:pdf},
issn = {03064379},
journal = {Information Systems},
keywords = {cognitive biases,conceptual modeling,experimental study,human behavior,information modeling,requirements engineering},
number = {2-3},
pages = {155--170},
title = {{The relative importance of structural constraints and surface semantics in information modeling}},
volume = {22},
year = {1997}
}
@article{Siau1997,
abstract = {This paper describes an experiment designed to investigate the use of structural constraints and surface semantics by modeling experts. The experimental results indicated that when interpreting information models, modeling experts focused almost entirely on the structural constraints, and ignored the surface semantics, even in situations where the structural constraints were in contradiction to the real world situation. These biases exhibited by modeling experts are explained using the learning model in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
doi = {10.1016/s0306-4379(97)00009-4},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 1997 - The relative importance of structural constraints and surface semantics in information modeling.pdf:pdf},
issn = {03064379},
journal = {Information Systems},
keywords = {cognitive biases,conceptual modeling,experimental study,human behavior,information modeling,requirements engineering},
number = {2-3},
pages = {155--170},
title = {{The relative importance of structural constraints and surface semantics in information modeling}},
volume = {22},
year = {1997}
}
@article{Siau1997,
abstract = {This paper describes an experiment designed to investigate the use of structural constraints and surface semantics by modeling experts. The experimental results indicated that when interpreting information models, modeling experts focused almost entirely on the structural constraints, and ignored the surface semantics, even in situations where the structural constraints were in contradiction to the real world situation. These biases exhibited by modeling experts are explained using the learning model in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
doi = {10.1016/s0306-4379(97)00009-4},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 1997 - The relative importance of structural constraints and surface semantics in information modeling.pdf:pdf},
issn = {03064379},
journal = {Information Systems},
keywords = {cognitive biases,conceptual modeling,experimental study,human behavior,information modeling,requirements engineering},
number = {2-3},
pages = {155--170},
title = {{The relative importance of structural constraints and surface semantics in information modeling}},
volume = {22},
year = {1997}
}
@inproceedings{Ramin2020,
author = {Ramin, Frederike},
booktitle = {2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09270321.pdf:pdf},
isbn = {9781450371223},
keywords = {2020,acm reference format,agile software development,bias in undergraduate agile,egocentric bias,frederike ramin,scrum,teamwork,the role of egocentric},
pages = {122--124},
title = {{The Role of Egocentric Bias}},
year = {2020}
}
@inproceedings{Ramin2020,
author = {Ramin, Frederike},
booktitle = {2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09270321.pdf:pdf},
isbn = {9781450371223},
keywords = {2020,acm reference format,agile software development,bias in undergraduate agile,egocentric bias,frederike ramin,scrum,teamwork,the role of egocentric},
pages = {122--124},
title = {{The Role of Egocentric Bias}},
year = {2020}
}
@inproceedings{Ramin2020,
author = {Ramin, Frederike},
booktitle = {2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/09270321.pdf:pdf},
isbn = {9781450371223},
keywords = {2020,acm reference format,agile software development,bias in undergraduate agile,egocentric bias,frederike ramin,scrum,teamwork,the role of egocentric},
pages = {122--124},
title = {{The Role of Egocentric Bias}},
year = {2020}
}
@article{Ralph2018,
abstract = {The most profound conflict in software engineering is not between positivist and interpretivist research approaches or Agile and Heavyweight software development methods, but between the Rational and Empirical Design Paradigms. The Rational and Empirical Paradigms are disparate constellations of beliefs about how software is and should be created. The Rational Paradigm remains dominant in software engineering research, standards and curricula despite being contradicted by decades of empirical research. The Rational Paradigm views analysis, design and programming as separate activities despite empirical research showing that they are simultaneous and inextricably interconnected. The Rational Paradigm views developers as executing plans despite empirical research showing that plans are a weak resource for informing situated action. The Rational Paradigm views success in terms of the Project Triangle (scope, time, cost and quality) despite empirical researching showing that the Project Triangle omits critical dimensions of success. The Rational Paradigm assumes that analysts elicit requirements despite empirical research showing that analysts and stakeholders co-construct preferences. The Rational Paradigm views professionals as using software development methods despite empirical research showing that methods are rarely used, very rarely used as intended, and typically weak resources for informing situated action. This article therefore elucidates the Empirical Design Paradigm, an alternative view of software development more consistent with empirical evidence. Embracing the Empirical Paradigm is crucial for retaining scientific legitimacy, solving numerous practical problems and improving software engineering education.},
author = {Ralph, Paul},
doi = {10.1016/j.scico.2018.01.002},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0167642318300030-main.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Empirical software engineering,Empiricism,Philosophy of science,Rationalism,Software design},
pages = {68--89},
publisher = {Elsevier B.V.},
title = {{The two paradigms of software development research}},
url = {https://doi.org/10.1016/j.scico.2018.01.002},
volume = {156},
year = {2018}
}
@article{Ralph2018,
abstract = {The most profound conflict in software engineering is not between positivist and interpretivist research approaches or Agile and Heavyweight software development methods, but between the Rational and Empirical Design Paradigms. The Rational and Empirical Paradigms are disparate constellations of beliefs about how software is and should be created. The Rational Paradigm remains dominant in software engineering research, standards and curricula despite being contradicted by decades of empirical research. The Rational Paradigm views analysis, design and programming as separate activities despite empirical research showing that they are simultaneous and inextricably interconnected. The Rational Paradigm views developers as executing plans despite empirical research showing that plans are a weak resource for informing situated action. The Rational Paradigm views success in terms of the Project Triangle (scope, time, cost and quality) despite empirical researching showing that the Project Triangle omits critical dimensions of success. The Rational Paradigm assumes that analysts elicit requirements despite empirical research showing that analysts and stakeholders co-construct preferences. The Rational Paradigm views professionals as using software development methods despite empirical research showing that methods are rarely used, very rarely used as intended, and typically weak resources for informing situated action. This article therefore elucidates the Empirical Design Paradigm, an alternative view of software development more consistent with empirical evidence. Embracing the Empirical Paradigm is crucial for retaining scientific legitimacy, solving numerous practical problems and improving software engineering education.},
author = {Ralph, Paul},
doi = {10.1016/j.scico.2018.01.002},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0167642318300030-main.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Empirical software engineering,Empiricism,Philosophy of science,Rationalism,Software design},
pages = {68--89},
publisher = {Elsevier B.V.},
title = {{The two paradigms of software development research}},
url = {https://doi.org/10.1016/j.scico.2018.01.002},
volume = {156},
year = {2018}
}
@article{Mahabaleshwar2020,
author = {Mahabaleshwar, Manoj},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/documen-phd-tool-support.pdf:pdf},
title = {{Tool support for architectural decision making in large software intensive projects}},
year = {2019}
}
@article{Mahabaleshwar2020,
author = {Mahabaleshwar, Manoj},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/documen-phd-tool-support.pdf:pdf},
title = {{Tool support for architectural decision making in large software intensive projects}},
year = {2019}
}
@article{Ralph2011,
abstract = {Despite increasingly sophisticated programming languages, software developer training, testing tools, integrated development environments and project management techniques, software project failure, abandonment and overrun rates remain high. One way to address this is to focus on common systematic errors made by software project participants. In many cases, such errors are manifestations of cognitive biases. Consequently this paper proposes a theory of the role of cognitive biases in software development project success. The proposed theory posits that such errors are mutual properties of people and tasks; they may therefore be avoided by modifying the person-task system using specific sociotechnical interventions. The theory is illustrated using the case of planning poker, a task estimation technique designed to overcome anchoring bias. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
author = {Ralph, Paul},
doi = {10.1007/978-3-642-25676-9_8},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2011 - Toward a theory of debiasing software development.pdf:pdf},
isbn = {9783642256752},
issn = {18651348},
journal = {Lecture Notes in Business Information Processing},
keywords = {Cognitive Bias,Debiasing,Design Science,Heuristics,Illusions,Software Engineering,Theory Development},
pages = {92--105},
title = {{Toward a theory of debiasing software development}},
volume = {93 LNBIP},
year = {2011}
}
@article{Ralph2011,
abstract = {Despite increasingly sophisticated programming languages, software developer training, testing tools, integrated development environments and project management techniques, software project failure, abandonment and overrun rates remain high. One way to address this is to focus on common systematic errors made by software project participants. In many cases, such errors are manifestations of cognitive biases. Consequently this paper proposes a theory of the role of cognitive biases in software development project success. The proposed theory posits that such errors are mutual properties of people and tasks; they may therefore be avoided by modifying the person-task system using specific sociotechnical interventions. The theory is illustrated using the case of planning poker, a task estimation technique designed to overcome anchoring bias. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
author = {Ralph, Paul},
doi = {10.1007/978-3-642-25676-9_8},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2011 - Toward a theory of debiasing software development.pdf:pdf},
isbn = {9783642256752},
issn = {18651348},
journal = {Lecture Notes in Business Information Processing},
keywords = {Cognitive Bias,Debiasing,Design Science,Heuristics,Illusions,Software Engineering,Theory Development},
pages = {92--105},
title = {{Toward a theory of debiasing software development}},
volume = {93 LNBIP},
year = {2011}
}
@article{Ralph2011,
abstract = {Despite increasingly sophisticated programming languages, software developer training, testing tools, integrated development environments and project management techniques, software project failure, abandonment and overrun rates remain high. One way to address this is to focus on common systematic errors made by software project participants. In many cases, such errors are manifestations of cognitive biases. Consequently this paper proposes a theory of the role of cognitive biases in software development project success. The proposed theory posits that such errors are mutual properties of people and tasks; they may therefore be avoided by modifying the person-task system using specific sociotechnical interventions. The theory is illustrated using the case of planning poker, a task estimation technique designed to overcome anchoring bias. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
author = {Ralph, Paul},
doi = {10.1007/978-3-642-25676-9_8},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ralph - 2011 - Toward a theory of debiasing software development.pdf:pdf},
isbn = {9783642256752},
issn = {18651348},
journal = {Lecture Notes in Business Information Processing},
keywords = {Cognitive Bias,Debiasing,Design Science,Heuristics,Illusions,Software Engineering,Theory Development},
pages = {92--105},
title = {{Toward a theory of debiasing software development}},
volume = {93 LNBIP},
year = {2011}
}
@article{Sharafi2021,
abstract = {Understanding how developers carry out different computer science activities with objective measures can help to improve productivity and guide the use and development of supporting tools in software engineering. In this article, we present two controlled experiments involving 112 students to explore multiple computing activities (code comprehension, code review, and data structure manipulations) using three different objective measures including neuroimaging (functional near-infrared spectroscopy (fNIRS) and functional magnetic resonance imaging (fMRI)) and eye tracking. By examining code review and prose review using fMRI, we find that the neural representations of programming languages vs. natural languages are distinct. We can classify which task a participant is undertaking based solely on brain activity, and those task distinctions are modulated by expertise. We leverage insights from the psychological notion of spatial ability to decode the neural representations of several fundamental data structures and their manipulations using fMRI, fNIRS, and eye tracking. We examine list, array, tree, and mental rotation tasks and find that data structure and spatial operations use the same focal regions of the brain but to different degrees: they are related but distinct neural tasks. We demonstrate best practices and describe the implication and tradeoffs between fMRI, fNIRS, eye tracking, and self-reporting for software engineering research.},
author = {Sharafi, Zohreh and Huang, Y U and Leach, Kevin and Weimer, Westley and Huang, Yu},
doi = {10.1145/3434643},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharafi et al. - 2021 - Toward an Objective Measure of Devel-opers.pdf:pdf},
journal = {Cognitive Activities. ACM Trans. Softw. Eng. Methodol},
keywords = {Additional Key Words and Phrases: Neuroimaging,CCS Concepts: • Software and its engineering → Mai,code comprehension,data,eye tracking,prose review},
title = {{Toward an Objective Measure of Developers}},
url = {https://doi.org/10.1145/3434643},
volume = {30},
year = {2021}
}
@article{Sharafi2021,
abstract = {Understanding how developers carry out different computer science activities with objective measures can help to improve productivity and guide the use and development of supporting tools in software engineering. In this article, we present two controlled experiments involving 112 students to explore multiple computing activities (code comprehension, code review, and data structure manipulations) using three different objective measures including neuroimaging (functional near-infrared spectroscopy (fNIRS) and functional magnetic resonance imaging (fMRI)) and eye tracking. By examining code review and prose review using fMRI, we find that the neural representations of programming languages vs. natural languages are distinct. We can classify which task a participant is undertaking based solely on brain activity, and those task distinctions are modulated by expertise. We leverage insights from the psychological notion of spatial ability to decode the neural representations of several fundamental data structures and their manipulations using fMRI, fNIRS, and eye tracking. We examine list, array, tree, and mental rotation tasks and find that data structure and spatial operations use the same focal regions of the brain but to different degrees: they are related but distinct neural tasks. We demonstrate best practices and describe the implication and tradeoffs between fMRI, fNIRS, eye tracking, and self-reporting for software engineering research.},
author = {Sharafi, Zohreh and Huang, Y U and Leach, Kevin and Weimer, Westley and Huang, Yu},
doi = {10.1145/3434643},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharafi et al. - 2021 - Toward an Objective Measure of Devel-opers.pdf:pdf},
journal = {Cognitive Activities. ACM Trans. Softw. Eng. Methodol},
keywords = {Additional Key Words and Phrases: Neuroimaging,CCS Concepts: • Software and its engineering → Mai,code comprehension,data,eye tracking,prose review},
title = {{Toward an Objective Measure of Developers}},
url = {https://doi.org/10.1145/3434643},
volume = {30},
year = {2021}
}
@article{Sharafi2021,
abstract = {Understanding how developers carry out different computer science activities with objective measures can help to improve productivity and guide the use and development of supporting tools in software engineering. In this article, we present two controlled experiments involving 112 students to explore multiple computing activities (code comprehension, code review, and data structure manipulations) using three different objective measures including neuroimaging (functional near-infrared spectroscopy (fNIRS) and functional magnetic resonance imaging (fMRI)) and eye tracking. By examining code review and prose review using fMRI, we find that the neural representations of programming languages vs. natural languages are distinct. We can classify which task a participant is undertaking based solely on brain activity, and those task distinctions are modulated by expertise. We leverage insights from the psychological notion of spatial ability to decode the neural representations of several fundamental data structures and their manipulations using fMRI, fNIRS, and eye tracking. We examine list, array, tree, and mental rotation tasks and find that data structure and spatial operations use the same focal regions of the brain but to different degrees: they are related but distinct neural tasks. We demonstrate best practices and describe the implication and tradeoffs between fMRI, fNIRS, eye tracking, and self-reporting for software engineering research.},
author = {Sharafi, Zohreh and Huang, Y U and Leach, Kevin and Weimer, Westley and Huang, Yu},
doi = {10.1145/3434643},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sharafi et al. - 2021 - Toward an Objective Measure of Devel-opers.pdf:pdf},
journal = {Cognitive Activities. ACM Trans. Softw. Eng. Methodol},
keywords = {Additional Key Words and Phrases: Neuroimaging,CCS Concepts: • Software and its engineering → Mai,code comprehension,data,eye tracking,prose review},
title = {{Toward an Objective Measure of Developers}},
url = {https://doi.org/10.1145/3434643},
volume = {30},
year = {2021}
}
@article{Calikli2013,
abstract = {The goal of software metrics is the identification and measurement of the essential parameters that affect software development. Metrics can be used to improve software quality and productivity. Existing metrics in the literature are mostly product or process related. However, thought processes of people have a significant impact on software quality as software is designed, implemented and tested by people. Therefore, in defining new metrics, we need to take into account human cognitive aspects. Our research aims to address this need through the proposal of a new metric scheme to quantify a specific human cognitive aspect, namely 'confirmation bias'. In our previous research, in order to quantify confirmation bias, we defined a methodology to measure confirmation biases of people. In this research, we propose a metric suite that would be used by practitioners during daily decision making. Our proposed metric set consists of six metrics with a theoretical basis in cognitive psychology and measurement theory. Empirical sample of these metrics are collected from two software companies that are specialized in two different domains in order to demonstrate their feasibility. We suggest ways in which practitioners may use these metrics to improve software development process. {\textcopyright} 2013 IEEE.},
author = {Calikli, Gul and Bener, Ayse and Aytac, Turgay and Bozcan, Ovunc},
doi = {10.1109/ESEM.2013.47},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli et al. - 2013 - Towards a metric suite proposal to quantify confirmation biases of developers.pdf:pdf},
isbn = {9780769550565},
issn = {19493770},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Software Psychology,confirmation bias,metrics},
pages = {363--372},
title = {{Towards a metric suite proposal to quantify confirmation biases of developers}},
year = {2013}
}
@article{Calikli2013,
abstract = {The goal of software metrics is the identification and measurement of the essential parameters that affect software development. Metrics can be used to improve software quality and productivity. Existing metrics in the literature are mostly product or process related. However, thought processes of people have a significant impact on software quality as software is designed, implemented and tested by people. Therefore, in defining new metrics, we need to take into account human cognitive aspects. Our research aims to address this need through the proposal of a new metric scheme to quantify a specific human cognitive aspect, namely 'confirmation bias'. In our previous research, in order to quantify confirmation bias, we defined a methodology to measure confirmation biases of people. In this research, we propose a metric suite that would be used by practitioners during daily decision making. Our proposed metric set consists of six metrics with a theoretical basis in cognitive psychology and measurement theory. Empirical sample of these metrics are collected from two software companies that are specialized in two different domains in order to demonstrate their feasibility. We suggest ways in which practitioners may use these metrics to improve software development process. {\textcopyright} 2013 IEEE.},
author = {Calikli, Gul and Bener, Ayse and Aytac, Turgay and Bozcan, Ovunc},
doi = {10.1109/ESEM.2013.47},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli et al. - 2013 - Towards a metric suite proposal to quantify confirmation biases of developers.pdf:pdf},
isbn = {9780769550565},
issn = {19493770},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Software Psychology,confirmation bias,metrics},
pages = {363--372},
title = {{Towards a metric suite proposal to quantify confirmation biases of developers}},
year = {2013}
}
@article{Calikli2013,
abstract = {The goal of software metrics is the identification and measurement of the essential parameters that affect software development. Metrics can be used to improve software quality and productivity. Existing metrics in the literature are mostly product or process related. However, thought processes of people have a significant impact on software quality as software is designed, implemented and tested by people. Therefore, in defining new metrics, we need to take into account human cognitive aspects. Our research aims to address this need through the proposal of a new metric scheme to quantify a specific human cognitive aspect, namely 'confirmation bias'. In our previous research, in order to quantify confirmation bias, we defined a methodology to measure confirmation biases of people. In this research, we propose a metric suite that would be used by practitioners during daily decision making. Our proposed metric set consists of six metrics with a theoretical basis in cognitive psychology and measurement theory. Empirical sample of these metrics are collected from two software companies that are specialized in two different domains in order to demonstrate their feasibility. We suggest ways in which practitioners may use these metrics to improve software development process. {\textcopyright} 2013 IEEE.},
author = {Calikli, Gul and Bener, Ayse and Aytac, Turgay and Bozcan, Ovunc},
doi = {10.1109/ESEM.2013.47},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Calikli et al. - 2013 - Towards a metric suite proposal to quantify confirmation biases of developers.pdf:pdf},
isbn = {9780769550565},
issn = {19493770},
journal = {International Symposium on Empirical Software Engineering and Measurement},
keywords = {Software Psychology,confirmation bias,metrics},
pages = {363--372},
title = {{Towards a metric suite proposal to quantify confirmation biases of developers}},
year = {2013}
}
@article{DaCunha2015,
abstract = {Although the ability to make right decisions is considered a main indicator of organizational project management professionalism, many project, program, and portfolio managers are unwilling to try to improve the quality of their decisions. This ongoing research aims to develop a substantive theory about the decision-making processes considering four elements: cognitive biases, tools and techniques, emotions and organizational factors in the context of software development project-based organizations considering the three levels of project governance: project, program, and portfolio. This paper presents the first results of the research and proposes to shed light on the susceptibility of IT project managers to cognitive biases and how they deal with them, including techniques and tools they use to minimize their negative effects. This study evaluates eight cognitive biases: anchoring bias, exposure effect, hindsight bias, halo effect, planning fallacy, sunk-cost fallacy, availability-related bias, and Parkinson's law effect. The qualitative approach was based on semi-structured interviews with project managers from IT organizations from Brazil and Portugal. Agile practices and knowledge management activities were cited as good practices.},
author = {{Da Cunha}, Jos{\'{e}} Adson Oliveira Guedes and {De Moura}, Hermano Perrelli},
doi = {10.1109/CISTI.2015.7170515},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Da Cunha, De Moura - 2015 - Towards a substantive theory of project decisions in software development project-based organizations A cros.pdf:pdf},
isbn = {9789899843455},
journal = {2015 10th Iberian Conference on Information Systems and Technologies, CISTI 2015},
keywords = {decision-making,project governance,qualitative approach},
title = {{Towards a substantive theory of project decisions in software development project-based organizations: A cross-case analysis of IT organizations from Brazil and Portugal}},
year = {2015}
}
@article{DaCunha2015,
abstract = {Although the ability to make right decisions is considered a main indicator of organizational project management professionalism, many project, program, and portfolio managers are unwilling to try to improve the quality of their decisions. This ongoing research aims to develop a substantive theory about the decision-making processes considering four elements: cognitive biases, tools and techniques, emotions and organizational factors in the context of software development project-based organizations considering the three levels of project governance: project, program, and portfolio. This paper presents the first results of the research and proposes to shed light on the susceptibility of IT project managers to cognitive biases and how they deal with them, including techniques and tools they use to minimize their negative effects. This study evaluates eight cognitive biases: anchoring bias, exposure effect, hindsight bias, halo effect, planning fallacy, sunk-cost fallacy, availability-related bias, and Parkinson's law effect. The qualitative approach was based on semi-structured interviews with project managers from IT organizations from Brazil and Portugal. Agile practices and knowledge management activities were cited as good practices.},
author = {{Da Cunha}, Jos{\'{e}} Adson Oliveira Guedes and {De Moura}, Hermano Perrelli},
doi = {10.1109/CISTI.2015.7170515},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Da Cunha, De Moura - 2015 - Towards a substantive theory of project decisions in software development project-based organizations A cros.pdf:pdf},
isbn = {9789899843455},
journal = {2015 10th Iberian Conference on Information Systems and Technologies, CISTI 2015},
keywords = {decision-making,project governance,qualitative approach},
title = {{Towards a substantive theory of project decisions in software development project-based organizations: A cross-case analysis of IT organizations from Brazil and Portugal}},
year = {2015}
}
@article{DaCunha2015,
abstract = {Although the ability to make right decisions is considered a main indicator of organizational project management professionalism, many project, program, and portfolio managers are unwilling to try to improve the quality of their decisions. This ongoing research aims to develop a substantive theory about the decision-making processes considering four elements: cognitive biases, tools and techniques, emotions and organizational factors in the context of software development project-based organizations considering the three levels of project governance: project, program, and portfolio. This paper presents the first results of the research and proposes to shed light on the susceptibility of IT project managers to cognitive biases and how they deal with them, including techniques and tools they use to minimize their negative effects. This study evaluates eight cognitive biases: anchoring bias, exposure effect, hindsight bias, halo effect, planning fallacy, sunk-cost fallacy, availability-related bias, and Parkinson's law effect. The qualitative approach was based on semi-structured interviews with project managers from IT organizations from Brazil and Portugal. Agile practices and knowledge management activities were cited as good practices.},
author = {{Da Cunha}, Jos{\'{e}} Adson Oliveira Guedes and {De Moura}, Hermano Perrelli},
doi = {10.1109/CISTI.2015.7170515},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Da Cunha, De Moura - 2015 - Towards a substantive theory of project decisions in software development project-based organizations A cros.pdf:pdf},
isbn = {9789899843455},
journal = {2015 10th Iberian Conference on Information Systems and Technologies, CISTI 2015},
keywords = {decision-making,project governance,qualitative approach},
title = {{Towards a substantive theory of project decisions in software development project-based organizations: A cross-case analysis of IT organizations from Brazil and Portugal}},
year = {2015}
}
@article{Liu2019,
abstract = {Developers spend a significant portion of their time searching for solutions and methods online. While numerous tools have been developed to support this exploratory process, in many cases the answers to developers' questions involve trade-offs among multiple valid options and not just a single solution. Through interviews, we discovered that developers express a desire for help with decision-making and understanding trade-offs. Through an analysis of Stack Overflow posts, we observed that many answers describe such trade-offs. These findings suggest that tools designed to help a developer capture information and make decisions about trade-offs can provide crucial benefits for both the developers and others who want to understand their design rationale. In this work, we probe this hypothesis with a prototype system named Unakite that collects, organizes, and keeps track of information about tradeoffs and builds a comparison table, which can be saved as a design rationale for later use. Our evaluation results show that Unakite reduces the cost of capturing tradeoff-related information by 45{\%}, and that the resulting comparison table speeds up a subsequent developer's ability to understand the trade-offs by about a factor of three.},
author = {Liu, Michael Xieyang and Hsieh, Jane and Hahn, Nathan and Zhou, Angelina and Deng, Emily and Burley, Shaun and Taylor, Cynthia and Kittur, Aniket and Myers, Brad A.},
doi = {10.1145/3332165.3347908},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3332165.3347908.pdf:pdf},
isbn = {9781450368162},
journal = {UIST 2019 - Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
keywords = {Decision making,Programming support tools,Trade-offs},
pages = {67--80},
title = {{Unakite: Scaffolding developers' decision-making using the web}},
year = {2019}
}
@article{Liu2019,
abstract = {Developers spend a significant portion of their time searching for solutions and methods online. While numerous tools have been developed to support this exploratory process, in many cases the answers to developers' questions involve trade-offs among multiple valid options and not just a single solution. Through interviews, we discovered that developers express a desire for help with decision-making and understanding trade-offs. Through an analysis of Stack Overflow posts, we observed that many answers describe such trade-offs. These findings suggest that tools designed to help a developer capture information and make decisions about trade-offs can provide crucial benefits for both the developers and others who want to understand their design rationale. In this work, we probe this hypothesis with a prototype system named Unakite that collects, organizes, and keeps track of information about tradeoffs and builds a comparison table, which can be saved as a design rationale for later use. Our evaluation results show that Unakite reduces the cost of capturing tradeoff-related information by 45{\%}, and that the resulting comparison table speeds up a subsequent developer's ability to understand the trade-offs by about a factor of three.},
author = {Liu, Michael Xieyang and Hsieh, Jane and Hahn, Nathan and Zhou, Angelina and Deng, Emily and Burley, Shaun and Taylor, Cynthia and Kittur, Aniket and Myers, Brad A.},
doi = {10.1145/3332165.3347908},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/3332165.3347908.pdf:pdf},
isbn = {9781450368162},
journal = {UIST 2019 - Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
keywords = {Decision making,Programming support tools,Trade-offs},
pages = {67--80},
title = {{Unakite: Scaffolding developers' decision-making using the web}},
year = {2019}
}
@article{Mohan2008,
abstract = {The article discusses the potential for cognitive bias to appear in the development of computer software, examining the use of traceability to eradicate the effect of cognitive bias while individuals perform change to design artifacts. Software developers may employ heuristics that are informed by cognitive biases when changing software artifacts, the article states. Other topics include the use of the cognitive aid traceability, simplifying complex inference tasks, the use of anchoring and adjustment, and peoples' initial estimates about a problem.},
author = {Mohan, Kannan and Jain, Radhika},
doi = {10.1145/1378727.1389970},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Jain - 2008 - Using traceability to mitigate cognitive biases in software development.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
number = {9},
pages = {110},
title = {{Using traceability to mitigate cognitive biases in software development}},
volume = {51},
year = {2008}
}
@article{Mohan2008,
abstract = {The article discusses the potential for cognitive bias to appear in the development of computer software, examining the use of traceability to eradicate the effect of cognitive bias while individuals perform change to design artifacts. Software developers may employ heuristics that are informed by cognitive biases when changing software artifacts, the article states. Other topics include the use of the cognitive aid traceability, simplifying complex inference tasks, the use of anchoring and adjustment, and peoples' initial estimates about a problem.},
author = {Mohan, Kannan and Jain, Radhika},
doi = {10.1145/1378727.1389970},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Jain - 2008 - Using traceability to mitigate cognitive biases in software development.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
number = {9},
pages = {110},
title = {{Using traceability to mitigate cognitive biases in software development}},
volume = {51},
year = {2008}
}
@article{Mohan2008,
abstract = {The article discusses the potential for cognitive bias to appear in the development of computer software, examining the use of traceability to eradicate the effect of cognitive bias while individuals perform change to design artifacts. Software developers may employ heuristics that are informed by cognitive biases when changing software artifacts, the article states. Other topics include the use of the cognitive aid traceability, simplifying complex inference tasks, the use of anchoring and adjustment, and peoples' initial estimates about a problem.},
author = {Mohan, Kannan and Jain, Radhika},
doi = {10.1145/1378727.1389970},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Mohan, Jain - 2008 - Using traceability to mitigate cognitive biases in software development.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
number = {9},
pages = {110},
title = {{Using traceability to mitigate cognitive biases in software development}},
volume = {51},
year = {2008}
}
@article{Xia2017,
abstract = {Developers commonly make use of a web search engine such as Google to locate online resources to improve their productivity. A better understanding of what developers search for could help us understand their behaviors and the problems that they meet during the software development process. Unfortunately, we have a limited understanding of what developers frequently search for and of the search tasks that they often find challenging. To address this gap, we collected search queries from 60 developers, surveyed 235 software engineers from more than 21 countries across five continents. In particular, we asked our survey participants to rate the frequency and difficulty of 34 search tasks which are grouped along the following seven dimensions: general search, debugging and bug fixing, programming, third party code reuse, tools, database, and testing. We find that searching for explanations for unknown terminologies, explanations for exceptions/error messages (e.g., HTTP 404), reusable code snippets, solutions to common programming bugs, and suitable third-party libraries/services are the most frequent search tasks that developers perform, while searching for solutions to performance bugs, solutions to multi-threading bugs, public datasets to test newly developed algorithms or systems, reusable code snippets, best industrial practices, database optimization solutions, solutions to security bugs, and solutions to software configuration bugs are the most difficult search tasks that developers consider. Our study sheds light as to why practitioners often perform some of these tasks and why they find some of them to be challenging. We also discuss the implications of our findings to future research in several research areas, e.g., code search engines, domain-specific search engines, and automated generation and refinement of search queries.},
author = {Xia, Xin and Bao, Lingfeng and Lo, David and Kochhar, Pavneet Singh and Hassan, Ahmed E. and Xing, Zhenchang},
doi = {10.1007/s10664-017-9514-4},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/s10664-017-9514-4.pdf:pdf},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {Empirical study,Search task,Survey,Understanding},
number = {6},
pages = {3149--3185},
title = {{What do developers search for on the web?}},
volume = {22},
year = {2017}
}
@article{Xia2017,
abstract = {Developers commonly make use of a web search engine such as Google to locate online resources to improve their productivity. A better understanding of what developers search for could help us understand their behaviors and the problems that they meet during the software development process. Unfortunately, we have a limited understanding of what developers frequently search for and of the search tasks that they often find challenging. To address this gap, we collected search queries from 60 developers, surveyed 235 software engineers from more than 21 countries across five continents. In particular, we asked our survey participants to rate the frequency and difficulty of 34 search tasks which are grouped along the following seven dimensions: general search, debugging and bug fixing, programming, third party code reuse, tools, database, and testing. We find that searching for explanations for unknown terminologies, explanations for exceptions/error messages (e.g., HTTP 404), reusable code snippets, solutions to common programming bugs, and suitable third-party libraries/services are the most frequent search tasks that developers perform, while searching for solutions to performance bugs, solutions to multi-threading bugs, public datasets to test newly developed algorithms or systems, reusable code snippets, best industrial practices, database optimization solutions, solutions to security bugs, and solutions to software configuration bugs are the most difficult search tasks that developers consider. Our study sheds light as to why practitioners often perform some of these tasks and why they find some of them to be challenging. We also discuss the implications of our findings to future research in several research areas, e.g., code search engines, domain-specific search engines, and automated generation and refinement of search queries.},
author = {Xia, Xin and Bao, Lingfeng and Lo, David and Kochhar, Pavneet Singh and Hassan, Ahmed E. and Xing, Zhenchang},
doi = {10.1007/s10664-017-9514-4},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/s10664-017-9514-4.pdf:pdf},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {Empirical study,Search task,Survey,Understanding},
number = {6},
pages = {3149--3185},
title = {{What do developers search for on the web?}},
volume = {22},
year = {2017}
}
@misc{Garvin1984,
author = {Garvin, David A.},
booktitle = {Sloan Management Review},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/What{\_}does{\_}product{\_}quality{\_}really{\_}means.pdf:pdf},
pages = {25--45},
title = {{What does product quality really mean?}},
year = {1984}
}
@misc{Garvin1984,
author = {Garvin, David A.},
booktitle = {Sloan Management Review},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/What{\_}does{\_}product{\_}quality{\_}really{\_}means.pdf:pdf},
pages = {25--45},
title = {{What does product quality really mean?}},
year = {1984}
}
@article{Tang2010,
author = {Tang, Antony and Aleti, Aldeida and Burge, Janet and Vliet, Hans Van},
doi = {10.1016/j.destud.2010.09.004},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0142694X10000669-main.pdf:pdf},
issn = {0142-694X},
journal = {Design Studies},
keywords = {decision making,design effectiveness,design reasoning,software design},
number = {6},
pages = {614--640},
publisher = {Elsevier Ltd},
title = {{What makes software design effective?}},
url = {http://dx.doi.org/10.1016/j.destud.2010.09.004},
volume = {31},
year = {2010}
}
@article{Tang2010,
author = {Tang, Antony and Aleti, Aldeida and Burge, Janet and Vliet, Hans Van},
doi = {10.1016/j.destud.2010.09.004},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0142694X10000669-main.pdf:pdf},
issn = {0142-694X},
journal = {Design Studies},
keywords = {decision making,design effectiveness,design reasoning,software design},
number = {6},
pages = {614--640},
publisher = {Elsevier Ltd},
title = {{What makes software design effective?}},
url = {http://dx.doi.org/10.1016/j.destud.2010.09.004},
volume = {31},
year = {2010}
}
@article{Schubanz2020,
abstract = {Documenting design decisions and their rationale (Design Rationale, DR) in software development projects is vital for supporting the comprehension of the product, product quality, and future maintenance. Although an increasing number of research publications address this topic, systematic approaches and supporting DR tools are found very rarely in practice. In software engineering education, DR is usually not well covered in teaching. The lack of suitable decision documentation is mainly an issue in agile software development. In agile approaches, documentation is regarded as less important than working products. To explore possibilities for integrating decision documentation into Scrum processes for educational software development projects, we conducted a series of eight case studies. These were part of software lab courses in three universities, i.e., BTU Cottbus, PUT Poznan, University of Stuttgart, with about 400 participants in 82 project teams. We introduced additional process elements in Scrum and developed a lightweight capture technique to support the decision capture. This paper describes the case study setup and corresponding implementation and, thus, an example approach of managing rationale in Scrum. Additionally, it presents a data analysis of the students' most relevant decisions documented throughout the case studies. We conclude the paper with a discussion on the observations we made during the case study executions and the applicability of the approach in educational software projects.},
author = {Schubanz, Mathias and Lewerentz, Claus},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/What{\_}Matters{\_}to{\_}Students{\_}A{\_}Rationale{\_}Man.pdf:pdf},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
keywords = {Agile software development,Case study,Decision types,Design decision,Rationale management,Scrum,Teaching},
pages = {17--26},
title = {{What matters to students - A rationale management case study in agile software development}},
volume = {2531},
year = {2020}
}
@article{Schubanz2020,
abstract = {Documenting design decisions and their rationale (Design Rationale, DR) in software development projects is vital for supporting the comprehension of the product, product quality, and future maintenance. Although an increasing number of research publications address this topic, systematic approaches and supporting DR tools are found very rarely in practice. In software engineering education, DR is usually not well covered in teaching. The lack of suitable decision documentation is mainly an issue in agile software development. In agile approaches, documentation is regarded as less important than working products. To explore possibilities for integrating decision documentation into Scrum processes for educational software development projects, we conducted a series of eight case studies. These were part of software lab courses in three universities, i.e., BTU Cottbus, PUT Poznan, University of Stuttgart, with about 400 participants in 82 project teams. We introduced additional process elements in Scrum and developed a lightweight capture technique to support the decision capture. This paper describes the case study setup and corresponding implementation and, thus, an example approach of managing rationale in Scrum. Additionally, it presents a data analysis of the students' most relevant decisions documented throughout the case studies. We conclude the paper with a discussion on the observations we made during the case study executions and the applicability of the approach in educational software projects.},
author = {Schubanz, Mathias and Lewerentz, Claus},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/What{\_}Matters{\_}to{\_}Students{\_}A{\_}Rationale{\_}Man.pdf:pdf},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
keywords = {Agile software development,Case study,Decision types,Design decision,Rationale management,Scrum,Teaching},
pages = {17--26},
title = {{What matters to students - A rationale management case study in agile software development}},
volume = {2531},
year = {2020}
}
@inproceedings{Borowa2023,
archivePrefix = {arXiv},
arxivId = {2309.14164},
author = {Borowa, Klara and Lewanczyk, Rafa{\l} and Stpiczy{\'{n}}ska, Klaudia and Stradomski, Patryk and Zalewski, Andrzej},
booktitle = {European Conference on Software Architecture (ECSA)},
doi = {10.1007/978-3-031-42592-9_21},
eprint = {2309.14164},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/2309.14164.pdf:pdf},
isbn = {9783031425912},
issn = {16113349},
keywords = {architectural decision-making,ra-,software architecture,software quality attributes,tionale},
pages = {303--318},
title = {{What Rationales Drive Architectural Decisions? An Empirical Inquiry}},
year = {2023}
}
@article{Hadar2013,
abstract = {This paper presents difficulties illustrated by software development practitioners with regard to the use and understanding of concepts and principles of the object-oriented paradigm. In order to understand these difficulties and the sources from which they stem, a theoretical framework borrowed from cognitive psychology, called the dual-process theory, was used. The empirical findings, collected using tools based on the qualitative research approach and analyzed through the lens of the dual-process theory, suggest that a tension between intuitive and logical thinking modes may lead to simple mistakes software engineers exhibit when practicing object-oriented analysis and design (OOA/D). Examining the understanding of OOA/D from this perspective helps explain some of the previously documented, as well as some newly identified difficulties in learning and practicing OOA/D, as well as guide the design of future quantitative experiments to understand how prevalent these phenomena are. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
author = {Hadar, Irit},
doi = {10.1016/j.scico.2012.10.006},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hadar - 2013 - When intuition and logic clash The case of the object-oriented paradigm.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Cognitive processes,Intuition,Object-oriented analysis and design,Qualitative research},
number = {9},
pages = {1407--1426},
publisher = {Elsevier B.V.},
title = {{When intuition and logic clash: The case of the object-oriented paradigm}},
url = {http://dx.doi.org/10.1016/j.scico.2012.10.006},
volume = {78},
year = {2013}
}
@article{Hadar2013,
abstract = {This paper presents difficulties illustrated by software development practitioners with regard to the use and understanding of concepts and principles of the object-oriented paradigm. In order to understand these difficulties and the sources from which they stem, a theoretical framework borrowed from cognitive psychology, called the dual-process theory, was used. The empirical findings, collected using tools based on the qualitative research approach and analyzed through the lens of the dual-process theory, suggest that a tension between intuitive and logical thinking modes may lead to simple mistakes software engineers exhibit when practicing object-oriented analysis and design (OOA/D). Examining the understanding of OOA/D from this perspective helps explain some of the previously documented, as well as some newly identified difficulties in learning and practicing OOA/D, as well as guide the design of future quantitative experiments to understand how prevalent these phenomena are. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
author = {Hadar, Irit},
doi = {10.1016/j.scico.2012.10.006},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hadar - 2013 - When intuition and logic clash The case of the object-oriented paradigm.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Cognitive processes,Intuition,Object-oriented analysis and design,Qualitative research},
number = {9},
pages = {1407--1426},
publisher = {Elsevier B.V.},
title = {{When intuition and logic clash: The case of the object-oriented paradigm}},
url = {http://dx.doi.org/10.1016/j.scico.2012.10.006},
volume = {78},
year = {2013}
}
@article{Hadar2013,
abstract = {This paper presents difficulties illustrated by software development practitioners with regard to the use and understanding of concepts and principles of the object-oriented paradigm. In order to understand these difficulties and the sources from which they stem, a theoretical framework borrowed from cognitive psychology, called the dual-process theory, was used. The empirical findings, collected using tools based on the qualitative research approach and analyzed through the lens of the dual-process theory, suggest that a tension between intuitive and logical thinking modes may lead to simple mistakes software engineers exhibit when practicing object-oriented analysis and design (OOA/D). Examining the understanding of OOA/D from this perspective helps explain some of the previously documented, as well as some newly identified difficulties in learning and practicing OOA/D, as well as guide the design of future quantitative experiments to understand how prevalent these phenomena are. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
author = {Hadar, Irit},
doi = {10.1016/j.scico.2012.10.006},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hadar - 2013 - When intuition and logic clash The case of the object-oriented paradigm.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Cognitive processes,Intuition,Object-oriented analysis and design,Qualitative research},
number = {9},
pages = {1407--1426},
publisher = {Elsevier B.V.},
title = {{When intuition and logic clash: The case of the object-oriented paradigm}},
url = {http://dx.doi.org/10.1016/j.scico.2012.10.006},
volume = {78},
year = {2013}
}
@inproceedings{Siau1996,
abstract = {Cognitive biases associated with human judgment and choice are widely studied, recognized, and documented in behavioral decision research. It is also well accepted that an understanding and acknowledgment of these biases are vital to mitigate their effects. However, research into cognitive biases in information modeling is virtually lacking. Lest one assumes that research on cognitive biases is irrelevant to the field, information modeling is a cognitively intensive activity and is, thus, highly susceptible to such biases. There is a pressing need then, to identify and understand these human biases in order to lessen their effects. This paper describes an experiment designed to investigate the use of syntactic and semantic information by modeling experts. The experimental results indicate that when interpreting information models, modeling experts tend to focus on the syntactic aspects of information and totally ignore the semantic information, even in situations where the semantic information is clearly more representative of the real world situation. These biases exhibited by modeling experts are explained using the learning paradigm in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
booktitle = {International Conference on Advanced Information Systems Engineering},
doi = {10.1007/3-540-61292-0_22},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 2012 - When parents need not have children — Cognitive biases in information modeling.pdf:pdf},
title = {{When parents need not have children — Cognitive biases in information modeling}},
year = {1996}
}
@inproceedings{Siau1996,
abstract = {Cognitive biases associated with human judgment and choice are widely studied, recognized, and documented in behavioral decision research. It is also well accepted that an understanding and acknowledgment of these biases are vital to mitigate their effects. However, research into cognitive biases in information modeling is virtually lacking. Lest one assumes that research on cognitive biases is irrelevant to the field, information modeling is a cognitively intensive activity and is, thus, highly susceptible to such biases. There is a pressing need then, to identify and understand these human biases in order to lessen their effects. This paper describes an experiment designed to investigate the use of syntactic and semantic information by modeling experts. The experimental results indicate that when interpreting information models, modeling experts tend to focus on the syntactic aspects of information and totally ignore the semantic information, even in situations where the semantic information is clearly more representative of the real world situation. These biases exhibited by modeling experts are explained using the learning paradigm in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
booktitle = {International Conference on Advanced Information Systems Engineering},
doi = {10.1007/3-540-61292-0_22},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 2012 - When parents need not have children — Cognitive biases in information modeling.pdf:pdf},
title = {{When parents need not have children — Cognitive biases in information modeling}},
year = {1996}
}
@inproceedings{Siau1996,
abstract = {Cognitive biases associated with human judgment and choice are widely studied, recognized, and documented in behavioral decision research. It is also well accepted that an understanding and acknowledgment of these biases are vital to mitigate their effects. However, research into cognitive biases in information modeling is virtually lacking. Lest one assumes that research on cognitive biases is irrelevant to the field, information modeling is a cognitively intensive activity and is, thus, highly susceptible to such biases. There is a pressing need then, to identify and understand these human biases in order to lessen their effects. This paper describes an experiment designed to investigate the use of syntactic and semantic information by modeling experts. The experimental results indicate that when interpreting information models, modeling experts tend to focus on the syntactic aspects of information and totally ignore the semantic information, even in situations where the semantic information is clearly more representative of the real world situation. These biases exhibited by modeling experts are explained using the learning paradigm in cognitive psychology.},
author = {Siau, Keng and Wand, Yair and Benbasat, Izak},
booktitle = {International Conference on Advanced Information Systems Engineering},
doi = {10.1007/3-540-61292-0_22},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Siau, Wand, Benbasat - 2012 - When parents need not have children — Cognitive biases in information modeling.pdf:pdf},
title = {{When parents need not have children — Cognitive biases in information modeling}},
year = {1996}
}
@article{Alroobaea2014,
abstract = {The growth of the Internet and related technologies has enabled the development of a new breed of dynamic websites, applications and software products that are growing rapidly in use and that have had a great impact on many businesses. These technologies need to be continuously evaluated by usability evaluation methods (UEMs) to measure their efficiency and effectiveness, to assess user satisfaction, and ultimately to improve their quality. However, estimating the sample sizes for these methods has become the source of considerable debate at usability conferences. This paper aims to determine an appropriate sample size through empirical studies on the social network and educational domains by employing three types of UEM; it also examines further the impact of sample size on the findings of usability tests. Moreover, this paper quantifies the sample size required for the Domain Specific-to-context Inspection (DSI) method, which itself is developed through an adaptive framework. The results show that there is no certain number of participants for finding all usability problems; however, the rule of 16 4 users gains much validity in user testing. The magic number of five evaluators fails to find 80{\%} of problems in heuristic evaluation, whereas three evaluators are enough to find 91{\%} of usability problems in the DSI method.},
author = {Alroobaea, Roobaea and Mayhew, Pam J.},
doi = {10.1109/SAI.2014.6918171},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/How{\_}many{\_}participants{\_}are{\_}really{\_}enough{\_}for{\_}usability{\_}studies.pdf:pdf},
isbn = {9780989319317},
journal = {Proceedings of 2014 Science and Information Conference, SAI 2014},
keywords = {Domain Specific Inspection (DSI),Heuristic evaluation (HE),User Testing (UT),methodological framework,sample size},
pages = {48--56},
publisher = {The Science and Information (SAI) Organization},
title = {{How many participants are really enough for usability studies?}},
year = {2014}
}
@article{Nielsen1993,
abstract = {For 11 studies, we find that the detection of usability problems as a function of number of users tested or heuristic evaluators employed is well modeled as a Poisson process. The model can be used to plan the amount of evaluation required to achieve desired levels of thoroughness or benefits. Results of early tests can provide estimates of the number of problems left to be found and the number of additional evaluations needed to find a given fraction. With quantitative evaluation costs and detection values, the model can estimate the numbers of evaluations at which optimal cost/benefit ratios are obtained and at which marginal utility vanishes. For a 'medium' example, we estimate that 16 evaluations would be worth their cost, with maximum benefit/cost ratio at four.},
author = {Nielsen, Jakob and Landauer, Thomas K.},
doi = {10.1145/169059.169166},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/169059.169166.pdf:pdf},
journal = {Conference on Human Factors in Computing Systems - Proceedings},
pages = {206--213},
title = {{Mathematical model of the finding of usability problems}},
year = {1993}
}
@inproceedings{Borowa2021a,
author = {Borowa, Klara and Dwornik, Robert and Zalewski, Andrzej},
booktitle = {PROFES 2021},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/{\_}camera{\_}ready{\_}test{\_}{\_}Debiasing{\_}pilot(2).pdf:pdf},
keywords = {architectural,cognitive biases,debiasing,decision-making,software architecture},
pages = {1--8},
title = {{Is knowledge the key? An experiment on debiasing architectural decision-making - a pilot study}},
year = {2021}
}
@inproceedings{Borowa2021b,
author = {Borowa, Klara and Zalewski, Andrzej and Kijas, Szymon},
booktitle = {International Conference on Software Architecture (ICSA)},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/ICSA2021(8).pdf:pdf},
title = {{The Influence of Cognitive Biases on Architectural Technical Debt}},
year = {2021}
}

@book{Ericsson1993,
abstract = {In this revised edition of the book . . . the authors review major advances in verbal reports over the past decade, including new evidence on how giving verbal reports affects subjects' cognitive processes, and on the validity and completeness of such reports. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
address = {Cambridge,  MA,  US},
author = {Ericsson, Karl Anders and Simon, Herbert Alexander},
booktitle = {Protocol analysis: Verbal reports as data, Rev. ed.},
isbn = {0-262-05047-1 (Hardcover); 0-262-55023-7 (Paperback)},
keywords = {*Content Analysis,*Self-Report,Thinking},
pages = {liii, 443--liii, 443},
publisher = {The MIT Press},
title = {{Protocol analysis: Verbal reports as data, Rev. ed.}},
year = {1993}
}


@article{kahneman2011think,
  title={Think fast, think slow},
  author={Kahneman, D},
  journal={Farrar, Straus and Giroux, New York},
  year={2011}
}

@inproceedings{soliman2021exploring,
  title={Exploring web search engines to find architectural knowledge},
  author={Soliman, Mohamed and Wiese, Marion and Li, Yikun and Riebisch, Matthias and Avgeriou, Paris},
  booktitle={2021 IEEE 18th International Conference on Software Architecture (ICSA)},
  pages={162--172},
  year={2021},
  organization={IEEE}
}

@book{cervantes2016designing,
  title={Designing software architectures: a practical approach},
  author={Cervantes, Humberto and Kazman, Rick},
  year={2016},
  publisher={Addison-Wesley Professional}
}

@article{fischhoff1982debiasing,
  title={Debiasing. Judgment under uncertainty: Heuristics and biases},
  author={Fischhoff, Baruch},
  journal={Judgment under uncertainty: Heuristics and biases},
  pages={422--444},
  year={1982}
}

@article{rollwage2020confidence,
  title={Confidence drives a neural confirmation bias},
  author={Rollwage, Max and Loosen, Alisa and Hauser, Tobias U and Moran, Rani and Dolan, Raymond J and Fleming, Stephen M},
  journal={Nature communications},
  volume={11},
  number={1},
  pages={2634},
  year={2020},
  publisher={Nature Publishing Group UK London}
}

@article{furnham2011literature,
  title={A literature review of the anchoring effect},
  author={Furnham, Adrian and Boo, Hua Chu},
  journal={The journal of socio-economics},
  volume={40},
  number={1},
  pages={35--42},
  year={2011},
  publisher={Elsevier}
}

@article{deWilde2018anchoring,
  title={The anchoring-bias in groups},
  author={de Wilde, Tim RW and Ten Velden, Femke S and De Dreu, Carsten KW},
  journal={Journal of Experimental Social Psychology},
  volume={76},
  pages={116--126},
  year={2018},
  publisher={Elsevier}
}

@article{sharot2011optimism,
  title={The optimism bias},
  author={Sharot, Tali},
  journal={Current biology},
  volume={21},
  number={23},
  pages={R941--R945},
  year={2011},
  publisher={Elsevier}
}

@article{weinstein1989optimistic,
  title={Optimistic biases about personal risks},
  author={Weinstein, Neil D},
  journal={Science},
  volume={246},
  number={4935},
  pages={1232--1233},
  year={1989},
  publisher={American Association for the Advancement of Science}
}

@article{nickerson1998confirmation,
  title={Confirmation bias: A ubiquitous phenomenon in many guises},
  author={Nickerson, Raymond S},
  journal={Review of general psychology},
  volume={2},
  number={2},
  pages={175--220},
  year={1998},
  publisher={SAGE Publications Sage CA: Los Angeles, CA}
}

@article{kaplan2016neural,
  title={Neural correlates of maintaining one’s political beliefs in the face of counterevidence},
  author={Kaplan, Jonas T and Gimbel, Sarah I and Harris, Sam},
  journal={Scientific reports},
  volume={6},
  number={1},
  pages={39589},
  year={2016},
  publisher={Nature Publishing Group UK London}
}

@inproceedings{jansen2005software,
  title={Software architecture as a set of architectural design decisions},
  author={Jansen, Anton and Bosch, Jan},
  booktitle={5th Working IEEE/IFIP Conference on Software Architecture (WICSA'05)},
  pages={109--120},
  year={2005},
  organization={IEEE}
}

@article{vanHeesch2012documentation,
  title={A documentation framework for architecture decisions},
  author={Van Heesch, Uwe and Avgeriou, Paris and Hilliard, Rich},
  journal={Journal of Systems and Software},
  volume={85},
  number={4},
  pages={795--820},
  year={2012},
  publisher={Elsevier}
}

@article{zimmermann2009managing,
  title={Managing architectural decision models with dependency relations, integrity constraints, and production rules},
  author={Zimmermann, Olaf and Koehler, Jana and Leymann, Frank and Polley, Ronny and Schuster, Nelly},
  journal={Journal of Systems and Software},
  volume={82},
  number={8},
  pages={1249--1267},
  year={2009},
  publisher={Elsevier}
}

@article{jugnandan2023towards,
  title={Towards an integrated debiasing framework for consumer financial decisions: A reflection on debiasing research},
  author={Jugnandan, Shreeya and Willows, Gizelle D},
  journal={International Journal of Consumer Studies},
  year={2023},
  publisher={Wiley Online Library}
}

@article{pavicevic2021role,
  title={The role of procedural rationality in debiasing acquisition decisions of overconfident CEOs},
  author={Pavi{\'c}evi{\'c}, Stevo and Keil, Thomas},
  journal={Strategic Management Journal},
  volume={42},
  number={9},
  pages={1696--1715},
  year={2021},
  publisher={Wiley Online Library}
}

@article{baltes2022sampling,
  title={Sampling in software engineering research: A critical review and guidelines},
  author={Baltes, Sebastian and Ralph, Paul},
  journal={Empirical Software Engineering},
  volume={27},
  number={4},
  pages={94},
  year={2022},
  publisher={Springer}
}

@article{galster2023empirical,
  title={Empirical research in software architecture—Perceptions of the community},
  author={Galster, Matthias and Weyns, Danny},
  journal={Journal of Systems and Software},
  volume={202},
  pages={111684},
  year={2023},
  publisher={Elsevier}
}

@article{razavian2016two,
  title={In two minds: how reflections influence software design thinking},
  author={Razavian, Maryam and Tang, Antony and Capilla, Rafael and Lago, Patricia},
  journal={Journal of Software: Evolution and Process},
  volume={28},
  number={6},
  pages={394--426},
  year={2016},
  publisher={Wiley Online Library}
}

@article{norman2017causes,
  title={The causes of errors in clinical reasoning: cognitive biases, knowledge deficits, and dual process thinking},
  author={Norman, Geoffrey R and Monteiro, Sandra D and Sherbino, Jonathan and Ilgen, Jonathan S and Schmidt, Henk G and Mamede, Silvia},
  journal={Academic Medicine},
  volume={92},
  number={1},
  pages={23--30},
  year={2017},
  publisher={LWW}
}

@article{turner2006determining,
  title={Determining usability test sample size},
  author={Turner, Carl W and Lewis, James R and Nielsen, Jakob},
  journal={International encyclopedia of ergonomics and human factors},
  volume={3},
  number={2},
  pages={3084--3088},
  year={2006},
  publisher={CRC Press Boca Raton, FL}
}

@article{muccini2018group,
  title={Group decision-making in software architecture: A study on industrial practices},
  author={Muccini, Henry and others},
  journal={Information and software technology},
  volume={101},
  pages={51--63},
  year={2018},
  publisher={Elsevier}
}

@incollection{wilcoxon1992individual,
  title={Individual comparisons by ranking methods},
  author={Wilcoxon, Frank},
  booktitle={Breakthroughs in statistics: Methodology and distribution},
  pages={196--202},
  year={1992},
  publisher={Springer}
}

@book{james1890,
    author = {James, William },
    title = {Principles of Psychology (1980)},
    publisher = {Henry Holt and Company},
    year = {1931}
}

@dataset{additional_material,
  author       = {Borowa, Klara and
                  Rebouças de Almeida, Rodrigo and
                  Wiese, Marion},
  title        = {Additional Material for: Debiasing Architectural
                   Decision-Making: An Experiment With Students and
                   Practitioners
                  },
  month        = jan,
  year         = 2025,
  publisher    = {Zenodo},
  doi          = {10.5281/zenodo.14740330},
  url          = {https://doi.org/10.5281/zenodo.14740330},
}

@dataset{ACM_standards_experiment,
  title        = {{ACM SIGSOFT Empirical Standards for Software Engineering}},
  month        = dec,
  year         = 2024,
  publisher    = {ACM},
  url          = {https://www2.sigsoft.org/EmpiricalStandards/docs/standards
      }
}
@book{myers2006experimental,
  title={Experimental psychology},
  author={Myers, Anne and Hansen, Christine},
  year={2006},
  publisher={Thomson Wadsworth}
}

@article{tang2010comparative,
  title={A comparative study of architecture knowledge management tools},
  author={Tang, Antony and Avgeriou, Paris and Jansen, Anton and Capilla, Rafael and Babar, Muhammad Ali},
  journal={Journal of Systems and Software},
  volume={83},
  number={3},
  pages={352--370},
  year={2010},
  publisher={Elsevier}
}

@inproceedings{borowa2021knowledge,
  title={Is knowledge the key? an experiment on debiasing architectural decision-making-a Pilot study},
  author={Borowa, Klara and Dwornik, Robert and Zalewski, Andrzej},
  booktitle={Product-Focused Software Process Improvement: 22nd International Conference, PROFES 2021, Turin, Italy, November 26, 2021, Proceedings 22},
  pages={207--214},
  year={2021},
  organization={Springer}
}

@article{Knapp2016,
author = {Thomas R. Knapp},
title ={Why Is the One-Group Pretest–Posttest Design Still Used?},
journal = {Clinical Nursing Research},
volume = {25},
number = {5},
pages = {467-472},
year = {2016},
doi = {10.1177/1054773816666280}}

@inproceedings{calikli2010empirical,
  title={Empirical analyses of the factors affecting confirmation bias and the effects of confirmation bias on software developer/tester performance},
  author={Calikli, Gul and Bener, Ayse},
  booktitle={Proceedings of the 6th international conference on predictive models in software engineering},
  pages={1--11},
  year={2010}
}

@article{gonccales2021measuring,
  title={Measuring the cognitive load of software developers: An extended Systematic Mapping Study},
  author={Gon{\c{c}}ales, Lucian Jos{\'e} and Farias, Kleinner and da Silva, Bruno C},
  journal={Information and Software Technology},
  volume={136},
  pages={106563},
  year={2021},
  publisher={Elsevier}
}

@article{blankenship2008elaboration,
  title={Elaboration and consequences of anchored estimates: An attitudinal perspective on numerical anchoring},
  author={Blankenship, Kevin L and Wegener, Duane T and Petty, Richard E and Detweiler-Bedell, Brian and Macy, Cheryl L},
  journal={Journal of Experimental Social Psychology},
  volume={44},
  number={6},
  pages={1465--1476},
  year={2008},
  publisher={Elsevier}
}