\section{Related Work}
\label{sec:related_work}

\rev{Researchers have investigated bug reports for a variety of purposes including bug report management **Zimmermann, "Evaluating the Maintainability of Software Systems"**, understanding bug resolution **Dit et al., "Analyzing Bug Reports to Improve Defect Detection"**, predicting bug priority and severity **Linstead et al., "Bug Report Coherence Analysis with Latent Topics"**, categorizing bug types **Bo et al., "ChatBR: Chat-Based Bug Reporting for S2Rs"**,  identifying duplicate bugs **Chaparro et al., "EulerC: Quality Annotation for S2Rs in Bug Reports"**, reproducing bugs **Fazzini et al., "Yakusu: Automated Test Case Generation for Bug Reproduction"**, and localizing buggy code **Zhao et al., "ReCDroid: Dynamic Event Tree Formulation for Crash Reproduction"**. We discuss the most  closely related work in this section.}

\textbf{Assessing Bug Report Quality.} 
Past research in assessing the quality of bug reports is primarily focused on the readability, coherence, and inclusion of the necessary components within bug reports. Zimmermann **Zimmermann, "Evaluating the Maintainability of Software Systems"** proposed an approach to assess the quality of bug reports by classifying them as bad, neutral, or good, considering various features such as keyword completeness, patches, screenshots, and readability.
Dit  \etal **Dit et al., "Analyzing Bug Reports to Improve Defect Detection"** evaluates the quality of bug reports based on the coherence of comments in bug report discussions.  
Linstead  \etal **Linstead et al., "Bug Report Coherence Analysis with Latent Topics"** later proposed a different textual coherence calculation technique, utilizing an information-theory-based approach by measuring the entropy of the distribution of latent topics in bug reports. 
Very recently, Bo  \etal introduced **Bo et al., "ChatBR: Chat-Based Bug Reporting for S2Rs"**, which assesses and generates S2Rs if absent but does not evaluate generated S2R quality. \tool advances upon **Bo et al., "ChatBR: Chat-Based Bug Reporting for S2Rs"** by assessing S2Rs using annotations by determining whether S2Rs can be mapped to application UI interactions.
\looseness=-1

Chaparro  \etal **Chaparro et al., "EulerC: Quality Annotation for S2Rs in Bug Reports"** introduced **EulerC, an approach that provides quality annotation for the S2Rs in bug reports.**
**EulerC is the closest related work, in as much as they produce the same type of quality reports, given a bug description.**
Unlike **Chaparro et al., "EulerC: Quality Annotation for S2Rs in Bug Reports"**, \tool uses LLMs to generate the quality reports. In consequence, its internals are fundamentally different, particularly in how the app model is explored. These improvements lead to more effective quality annotations as illustrated by the results of \tool's evaluation.  

\textbf{Automated Bug Reproduction.} 
Researchers introduced various techniques to generate test cases for automated bug reproduction to diagnose, validate, and understand bugs. Fazzini  \etal **Fazzini et al., "Yakusu: Automated Test Case Generation for Bug Reproduction"** developed Yakusu, which combines program analysis and text processing techniques to create test cases for bug reproduction.  
Zhao  \etal **Zhao et al., "ReCDroid: Dynamic Event Tree Formulation for Crash Reproduction"** proposed ReCDroid, to reproduce crashes. ReCDroid formulates a dynamic ordered event tree (DOET) leveraging GUI components and event transitions, which aids in traversing GUIs for a given app and prioritizes relevant GUI components for exploration. 
Feng and Chen **Feng and Chen, "AdbGPT: Automated Bug Reproduction with LLMs"** introduced AdbGPT, which focuses on automatically reproducing bugs using LLMs. AdbGPT extracts actions and objects from S2Rs through prompt engineering and later leverages GUI encoding and LLMs to replay bugs within app screens. Wang  \etal **Wang et al., "ReBL: Reproducing Bugs with LLMs and Bug Report Context"** proposed ReBL that mitigates different limitations of AdbGPT and utilizes the entire bug report instead of only using S2Rs to improve the contextual reasoning of the LLMs in automatically reproducing bugs.

\textbf{Interactive Bug Reporting Systems.}
Researchers have proposed systems for interactive bug reporting, which typically aim also at improving the quality of the bug reports.
 Moran  \etal **Moran et al., "Fusion: Interactive Bug Reporting with GUI Components"** proposed \Fusion that allows reporters to choose available actions and GUI components from dropdown lists, resulting in more structured and comprehensive bug reports. 
 Fazzini  \etal **Fazzini et al., "ebug: Extended Fusion with S2R Suggestions"** proposed \ebug that extends \Fusion and suggests potential S2Rs to the reporters alongside the dropdown lists available to \Fusion.
 Song  \etal **Song et al., "Burt: A Chatbot for Interactive Bug Reporting"** proposed \burt , a chatbot that guides the reported and verifies the quality of bug information in real-time, providing suggestions to the reporters.