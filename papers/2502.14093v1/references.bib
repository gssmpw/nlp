@inproceedings{layering,
    author = {Liem, Clifford and Gu, Yuan Xiang and Johnson, Harold},
    title = {A Compiler-Based Infrastructure for Software-Protection},
    year = {2008},
    month = {06},
    doi = {10.1145/1375696.1375702},
    isbn = {9781595939364},
    publisher = {ACM},
    address = {New York, NY, USA},
    booktitle = {Proc.\ Third ACM SIGPLAN Workshop on Programming Languages and Analysis for Security},
    pages = {33--44},
    numpages = {12},
    keywords = {software protection, compiler-based techniques, tamper resistance, code transformation},
    OPTlocation = {Tucson, AZ, USA},
    series = {PLAS '08},
}

@Misc{recipes,
  OPTkey = 	 {},
  author = 	 {Christian Collberg},
  title = 	 {Tigress Recipes},
  howpublished = {\url{https://tigress.wtf/recipes.html}},
  OPTmonth = 	 {},
  year = 	 {2024},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@article{Foket14,
   author = {Foket, Christophe and De Sutter, Bjorn and De Bosschere, K.},
   title = {Pushing {Java} Type Obfuscation to the Limit},
   journal = {IEEE Trans.\ on Dependable and Secure Computing},
   volume = {11},
   number = {6},
   month = {2},
   year = {2014},
   pages = {553--567}
} 

@INPROCEEDINGS{obfuscation_detection5,
  author={Wang, Yan and Rountev, Atanas},
  booktitle={IEEE/ACM 4th Int'l Conf. on Mobile Software Engineering and Systems (MOBILESoft)}, 
  title={Who Changed You? Obfuscator Identification for Android}, 
  year={2017},
  volume={},
  number={},
  pages={154-164},
  keywords={Tools;Androids;Humanoid robots;Companies;Java;Cloning;Libraries;Android;App analysis;Obfuscation},
  doi={10.1109/MOBILESoft.2017.18}}

@INPROCEEDINGS{cognitive_functional_size,
  author={Yingxu Wang and Jingqiu Shao},
  booktitle={Proc.\ The Second IEEE Int'l Conf.\ on Cognitive Informatics}, 
  title={Measurement of the cognitive functional complexity of software}, 
  year={2003},
  volume={},
  number={},
  pages={67-74},
  keywords={Software measurement;Software maintenance;Software engineering;Size measurement;Character recognition;Cognitive informatics;Weight control;Size control;Computer languages;Phase measurement},
  doi={10.1109/COGINF.2003.1225955}}


@inproceedings{checkmate24,
author = {Faingnaert, Thomas and Zhang, Tab and Van Iseghem, Willem and Everaert, Gertjan and Coppens, Bart and Collberg, Christian and De Sutter, Bjorn},
title = {Tools and Models for Software Reverse Engineering Research},
year = {2024},
isbn = {9798400712302},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689934.3690817},
doi = {10.1145/3689934.3690817},
abstract = {Software protection researchers often struggle with the evaluation of MATE software protections and attacks. Evaluations often are incomplete and not representative of the practice. This can in part be explained by a lack of standardized, generally applicable models, tools, and methodologies for evaluating how reverse engineering attack strategies are executed. The framework of related components proposed in this paper is an attempt to provide exactly that. It includes a meta-model and supporting tools for modeling the knowledge that reverse engineers acquire as they execute their strategies, a meta-model to estimate the required effort of those strategies, and tools to capture strategic activities from data streams collected during human reverse engineering experiments. Their use is demonstrated on three example reverse engineering strategies.},
booktitle = {Proc.\ Workshop on Research on Offensive and Defensive Techniques in the Context of Man At The End (MATE) Attacks},
pages = {44â€“58},
numpages = {15},
keywords = {reverse engineering, strategy modeling, simulation, and capturing},
OPTlocation = {Salt Lake City, UT, USA},
series = {CheckMATE '24}
}


@INPROCEEDINGS{generic_deobfuscation,
  author={Yadegari, Babak and Johannesmeyer, Brian and Whitely, Ben and Debray, Saumya},
  booktitle={IEEE Symposium on Security and Privacy},
  title={A Generic Approach to Automatic Deobfuscation of Executable Code},
  year={2015},
  volume={},
  number={},
  pages={674--691},
  doi={10.1109/SP.2015.47}
  }


@inproceedings{bitleveltaint,
  title = {Bit-{{Level Taint Analysis}}},
  booktitle = {2014 {{IEEE}} 14th {{Int'l Working Conf.}} on {{Source Code Analysis}} and {{Manipulation}}},
  author = {Yadegari, Babak and Debray, Saumya},
  year = {2014},
  date = {2014-09},
  pages = {255--264},
  publisher = {{IEEE}},
  OPTlocation = {{Victoria, BC, Canada}},
  doi = {10.1109/SCAM.2014.43},
  url = {http://ieeexplore.ieee.org/document/6975659/},
  urldate = {2021-08-27},
  eventtitle = {2014 {{IEEE}} 14th {{Int'l Working Conf.}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  isbn = {978-1-4799-6148-1},
  langid = {english}
}  

@InProceedings{obfuscation_detection6,
author="Kim, Jeongwoo
and Kang, Seoyeon
and Cho, Eun-Sun
and Paik, Joon-Young",
OPTeditor="Kim, Hyoungshick",
title="LOM: Lightweight Classifier for Obfuscation Methods",
booktitle="Information Security Applications",
year="2021",
publisher="Springer Int'l Publishing",
address="Cham",
pages="3--15",
abstract="Obfuscation is an important technique that renders it difficult to analyze programs and has been developed for copyright protection. When an obfuscation is applied to a program, the logic of a program can be very complex and de-obfuscation can be very difficult. However, obfuscation can be used to conceal malicious codes in malware. Therefore, de-obfuscation for binary codes is required for malicious code analysis. In addition, the type of obfuscation technique applied to a program must be identified as it determines the de-obfuscation solution. However, it is difficult to acquire information regarding obfuscation from binary codes, where various obfuscation techniques are mixed. Herein, we propose a lightweight neural network-based classifier (LOM) to detect obfuscation techniques. LOM involves only a lightweight procedure using an opcode histogram, which is designed based on the effects of obfuscation methods on opcodes. It is experimentally shown that LOM yields competitive performance compared with other obfuscation technique classifiers.",
isbn="978-3-030-89432-0"
}

@inproceedings{obfuscation_detection7,
author = {Tofighi-Shirazi, Ramtine and As\u{a}voae, Irina M\u{a}riuca and Elbaz-Vincent, Philippe},
title = {Fine-grained static detection of obfuscation transforms using ensemble-learning and semantic reasoning},
year = {2019},
isbn = {9781450377461},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3371307.3371313},
doi = {10.1145/3371307.3371313},
abstract = {The ability to efficiently detect the software protections used is at a prime to facilitate the selection and application of adequate deobfuscation techniques. We present a novel approach that combines semantic reasoning techniques with ensemble learning classification for the purpose of providing a static detection framework for obfuscation transformations. By contrast to existing work, we provide a methodology that can detect multiple layers of obfuscation, without depending on knowledge of the underlying functionality of the training-set used. We also extend our work to detect constructions of obfuscation transformations, thus providing a fine-grained methodology. To that end, we provide several studies for the best practices of the use of machine learning techniques for a scalable and efficient model. According to our experimental results and evaluations on obfuscators such as Tigress and OLLVM, our models have up to 91\% accuracy on state-of-the-art obfuscation transformations. Our overall accuracies for their constructions are up to 100\%.},
booktitle = {Proc.\ 9th Workshop on Software Security, Protection, and Reverse Engineering},
articleno = {4},
numpages = {12},
keywords = {symbolic execution, reverse engineering, obfuscation, machine learning, ensemble learning, deobfuscation},
OPTlocation = {San Juan, Puerto Rico, USA},
series = {SSPREW9 '19}
}

@article{obfuscation_detection8,
title = {Semantics-aware obfuscation scheme prediction for binary},
journal = {Computers \& Security},
volume = {99},
pages = {102072},
year = {2020},
issn = {0167-4048},
doi = {https://doi.org/10.1016/j.cose.2020.102072},
url = {https://www.sciencedirect.com/science/article/pii/S016740482030345X},
author = {Yujie Zhao and Zhanyong Tang and Guixin Ye and Dongxu Peng and Dingyi Fang and Xiaojiang Chen and Zheng Wang},
keywords = {Deobfuscation, Reverse engineering, Deep neural networks, Disassembled binary analysis, Semantic expression},
abstract = {By restoring the program into an easier understandable form, deobfuscation is an important technique for detecting and analyzing malicious software. To enable deobfuscation, one must know if the target program is obfuscated and what types of obfuscation schemes may be used. However, obtaining such information is challenging without having access to the original program source code. This paper presents a new way to estimate the obfuscation scheme of a compiled binary. It achieves this by using semantic information of the disassembled binary to predict if the program has been obfuscated and if so, what type of obfuscation scheme may be used. At the core of our approach is a set of deep neural networks that can effectively characterize and leverage the contextual information available in the assembly code. Our models are first trained offline, and the learned models can then be applied to new previously unseen obfuscated binaries. We evaluate our approach by applying it to a large dataset of over 277,000 obfuscated samples with different individual obfuscation schemes and their combinations. Experimental results show that our approach is highly effective in identifying the obfuscation scheme, with a prediction accuracy of at least 83% (up to 98%).}
}

@InProceedings{obfuscation_recognition,
author="Tian, Zhenzhou
and Mao, Hengchao
and Huang, Yaqian
and Tian, Jie
and Li, Jinrui",
OPTeditor="Gladyshev, Pavel
and Goel, Sanjay
and James, Joshua
and Markowsky, George
and Johnson, Daryl",
title="Fine-Grained Obfuscation Scheme Recognition on Binary Code",
booktitle="Digital Forensics and Cyber Crime",
year="2022",
publisher="Springer Int'l Publishing",
address="Cham",
pages="215--228",
abstract="Code obfuscation is to change program characteristics through code transformation, so as to avoid detection by virus scanners or prevent security analysts from performing reverse analysis. This paper proposes a new method of extracting from functions their reduced shortest paths (RSP), through path search and abstraction, to identify functions in a more fine-grained manner. The method of deep representation learning is utilized to identify whether the binary code is obfuscated and the specific obfuscation algorithms used. In order to evaluate the performance of the model, a data set of 60,000 obfuscation samples is constructed. The extensive experimental evaluation results show that the model can successfully identify the characteristics of code obfuscation. The accuracy for the task of identifying whether the code is obfuscated reaches 98.6{\%}, while the accuracy for the task of identifying the specific obfuscation algorithm performed reaches 97.6{\%}.",
isbn="978-3-031-06365-7"
}

@article{obfuscation_detection,
title = {Android application forensics: A survey of obfuscation, obfuscation detection and deobfuscation techniques and their impact on investigations},
journal = {Forensic Science Int'l: Digital Investigation},
volume = {39},
pages = {301285},
year = {2021},
issn = {2666-2817},
doi = {https://doi.org/10.1016/j.fsidi.2021.301285},
url = {https://www.sciencedirect.com/science/article/pii/S2666281721002031},
author = {Xiaolu Zhang and Frank Breitinger and Engelbert Luechinger and Stephen O'Shaughnessy},
keywords = {Android application forensic, Obfuscation, Deobfuscation, Obfuscation detection, Literature review, Survey, Reverse engineering},
abstract = {Android obfuscation techniques include not only classic code obfuscation techniques that were adapted to Android, but also obfuscation methods that target the Android platform specifically. This work examines the status-quo of Android obfuscation, obfuscation detection and deobfuscation. Specifically, it first summarizes obfuscation approaches that are commonly used by app developers for code optimization, to protect their software against code theft and code tampering but are also frequently misused by malware developers to circumvent anti-malware products. Secondly, the article focuses on obfuscation detection techniques and presents various available tools and current research. Thirdly, deobfuscation (which aims at reinstating the original state before obfuscation) is discussed followed by a brief discussion how this impacts forensic investigation. We conclude that although obfuscation is widely used in Android app development (benign and malicious), available tools and the practices on how to deal with obfuscation are not standardized, and so are inherently lacking from a forensic standpoint.}
}

@incollection{obfuscation_detection4,
  title={Code Obfuscation Classification using Singular Value Decomposition on Grayscale Image Representations},
  author={Raubitzek, Sebastian and Schrittwieser, Sebastian and Lawitschka, Caroline and Mallinger, Kevin and Ekelhart, Andreas and Weippl, Edgar R},
  booktitle={SECRYPT},
  year={2024}
}

@InProceedings{modeling_stealth,
author="Schrittwieser, Sebastian
and Wimmer, Elisabeth
and Mallinger, Kevin
and Kochberger, Patrick
and Lawitschka, Caroline
and Raubitzek, Sebastian
and Weippl, Edgar R.",
OPTeditor="Katsikas, Sokratis
and Abie, Habtamu
and Ranise, Silvio
and Verderame, Luca
and Cambiaso, Enrico
and Ugarelli, Rita
and Pra{\c{c}}a, Isabel
and Li, Wenjuan
and Meng, Weizhi
and Furnell, Steven
and Katt, Basel
and Pirbhulal, Sandeep
and Shukla, Ankur
and Ianni, Michele
and Dalla Preda, Mila
and Choo, Kim-Kwang Raymond
and Pupo Correia, Miguel
and Abhishta, Abhishta
and Sileno, Giovanni
and Alishahi, Mina
and Kalutarage, Harsha
and Yanai, Naoto",
title="Modeling Obfuscation Stealth Through Code Complexity",
booktitle="Computer Security. ESORICS 2023 Int'l Workshops",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="392--408",
abstract="Code obfuscation is often utilized by authors of malware to protect it from detection or to hide its maliciousness from code analysis. Obfuscation stealth describes how difficult it is to determine which protection technique has been applied to a program and which parts of the code have been protected. In previous literature, most of the presented obfuscation identification methods analyze the program code itself (for example, the frequency and distribution of opcodes). However, simple countermeasures such as instruction substitution can have a negative impact on the identification rate. In this paper, we present a novel approach for an accurate obfuscation identification model based on a combination of multiple code complexity metrics. An evaluation with 4124 samples protected with 11 different obfuscations, combinations of obfuscations, and various compiler configurations demonstrates an overall classification accuracy of 86.5{\%}.",
isbn="978-3-031-54129-2"
}

@article{obfuscation_detection2,
title = {Function-level obfuscation detection method based on Graph Convolutional Networks},
journal = {Journal of Information Security and Applications},
volume = {61},
pages = {102953},
year = {2021},
issn = {2214-2126},
doi = {https://doi.org/10.1016/j.jisa.2021.102953},
url = {https://www.sciencedirect.com/science/article/pii/S2214212621001654},
author = {Shuai Jiang and Yao Hong and Cai Fu and Yekui Qian and Lansheng Han},
keywords = {Obfuscation detection, Graph Convolutional Network, Control Flow Graph},
abstract = {The obfuscation detection technology is an important auxiliary means of malware detection. Also, for security practitioners, it can carry out automatic obfuscation detection before manual reverse analysis, which helps reverse engineers to perform reverse analysis more specifically. Existing obfuscation detection methods are mainly for Android applications and based on traditional machine learning, whose detection granularity is coarse, generality is poor, and the performance is not good enough. To address these issues, in this paper, we propose a function-level obfuscation detection method based on Graph Convolutional Networks for X86 assembly code and Android applications. Firstly, our method is function-level obfuscation detection, and we extract the Control Flow Graph (CFG) of each function as its feature, including the adjacency matrix and the basic block feature matrix. Secondly, we build a hybrid neural network model GCN-LSTM as our obfuscation detection model, which combines the Graph Convolutional Network (GCN) and the Long Short-Term Memory (LSTM). Finally, we conduct experiments using real-world open-source programs and compare results with baseline methods. For function-level detection, the accuracy of our method is 94.7575\% for X86 assembly code and 98.9457\% for Android applications, both of which are better than baseline methods. For APK-level detection, our method can almost completely detect the obfuscated APKs. Experimental results show that our method performs well for both X86 assembly code and Android applications and is superior to the baseline methods in both function-level detection and APK-level detection. Our research showcases a successful application of the Graph Convolutional Network and the Control Flow Graph on code obfuscation detection problems.}
}

@inproceedings{obfuscation_detection3,
author = {Bacci, Alessandro and Bartoli, Alberto and Martinelli, Fabio and Medvet, Eric and Mercaldo, Francesco},
title = {Detection of Obfuscation Techniques in Android Applications},
year = {2018},
isbn = {9781450364485},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3230833.3232823},
doi = {10.1145/3230833.3232823},
abstract = {Current signature detection mechanisms can be easily evaded by malware writers by applying obfuscation techniques. Employing morphing code techniques, attackers are able to generate several variants of one malicious sample, making the corresponding signature obsolete. Considering that the signature definition is a laborious process manually performed by security analysts, in this paper we propose a method, exploiting static analysis and Machine Learning classification algorithms, to identify whether a mobile application is modified by means of one or more morphing techniques. We perform experiments on a real-world dataset of Android applications (morphed and original), obtaining encouraging results in the obfuscation technique(s) identification.},
booktitle = {Proc.\ 13th Int'l Conf.\ on Availability, Reliability and Security},
articleno = {57},
numpages = {9},
OPTlocation = {Hamburg, Germany},
series = {ARES '18}
}

@article{vortex,
author = {Grove, David and Chambers, Craig},
title = {A framework for call graph construction algorithms},
year = {2001},
issue_date = {November 2001},
publisher = {ACM},
address = {New York, NY, USA},
volume = {23},
number = {6},
issn = {0164-0925},
url = {https://doi.org/10.1145/506315.506316},
doi = {10.1145/506315.506316},
abstract = {A large number of call graph construction algorithms for object-oriented and functional languages have been proposed, each embodying different tradeoffs between analysis cost and call graph precision. In this article we present a unifying framework for understanding call graph construction algorithms and an empirical comparison of a representative set of algorithms. We first present a general parameterized algorithm that encompasses many well-known and novel call graph construction algorithms. We have implemented this general algorithm in the Vortex compiler infrastructure, a mature, multilanguage, optimizing compiler. The Vortex implementation provides a "level playing field" for meaningful cross-algorithm performance comparisons. The costs and benefits of a number of call graph construction algorithms are empirically assessed by applying their Vortex implementation to a suite of sizeable (5,000 to 50,000 lines of code) Cecil and Java programs. For many of these applications, interprocedural analysis enabled substantial speed-ups over an already highly optimized baseline. Furthermore, a significant fraction of these speed-ups can be obtained through the use of a scalable, near-linear time call graph construction algorithm.},
journal = {ACM Trans. Program. Lang. Syst.},
month = nov,
pages = {685â€“746},
numpages = {62},
keywords = {interprocedural analysis, control flow analysis, Call graph construction}
}


@article{Daikon,
title = {The Daikon system for dynamic detection of likely invariants},
journal = {Science of Computer Programming},
volume = {69},
number = {1},
pages = {35-45},
year = {2007},
note = {Special issue on Experimental Software and Toolkits},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2007.01.015},
url = {https://www.sciencedirect.com/science/article/pii/S016764230700161X},
author = {Michael D. Ernst and Jeff H. Perkins and Philip J. Guo and Stephen McCamant and Carlos Pacheco and Matthew S. Tschantz and Chen Xiao},
keywords = {Daikon, Dynamic analysis, Dynamic invariant detection, Inductive logic programming, Inference, Invariant, Likely invariant, Program understanding, Specification, Specification mining},
abstract = {Daikon is an implementation of dynamic detection of likely invariants; that is, the Daikon invariant detector reports likely program invariants. An invariant is a property that holds at a certain point or points in a program; these are often used in assert statements, documentation, and formal specifications. Examples include being constant (x=a), non-zero (xâ‰ 0), being in a range (aâ‰¤xâ‰¤b), linear relationships (y=ax+b), ordering (xâ‰¤y), functions from a library (x=fn(y)), containment (xâˆˆy), sortedness (xissorted), and many more. Users can extend Daikon to check for additional invariants. Dynamic invariant detection runs a program, observes the values that the program computes, and then reports properties that were true over the observed executions. Dynamic invariant detection is a machine learning technique that can be applied to arbitrary data. Daikon can detect invariants in C, C++, Java, and Perl programs, and in record-structured data sources; it is easy to extend Daikon to other applications. Invariants can be useful in program understanding and a host of other applications. Daikonâ€™s output has been used for generating test cases, predicting incompatibilities in component integration, automating theorem proving, repairing inconsistent data structures, and checking the validity of data streams, among other tasks. Daikon is freely available in source and binary form, along with extensive documentation, at http://pag.csail.mit.edu/daikon/.}
}

@inproceedings{khunt++,
author = {Faingnaert, Thomas and Van Iseghem, Willem and De Sutter, Bjorn},
title = {K-Hunt++: Improved Dynamic Cryptographic Key Extraction},
year = {2024},
isbn = {9798400712302},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689934.3690818},
doi = {10.1145/3689934.3690818},
abstract = {We identified several weaknesses in the state-of-the-art cryptographic key extraction algorithm, K-Hunt. It cannot handle code in which key loading and use are spread apart, has problems with modes such as AES CBC that use small data buffers of constant size, and with complex apps in which functionality handles both the key and data. K-Hunt++ overcomes those weaknesses. We demonstrate it on two apps that trigger them and present an ablation study and qualitative analysis of its robustness in the face of obfuscation.},
booktitle = {Proc.\ Workshop on Research on Offensive and Defensive Techniques in the Context of Man At The End (MATE) Attacks},
pages = {22â€“29},
numpages = {8},
keywords = {cryptographic key identification, dynamic binary code analysis},
OPTlocation = {Salt Lake City, UT, USA},
series = {CheckMATE '24}
}

@inproceedings{banescu15,
	address = {Florence, Italy},
	title = {A {Framework} for {Measuring} {Software} {Obfuscation} {Resilience} against {Automated} {Attacks}},
	isbn = {978-1-4673-7094-3},
	url = {http://ieeexplore.ieee.org/document/7174810/},
	doi = {10.1109/SPRO.2015.16},
	urldate = {2020-02-06},
	booktitle = {2015 {IEEE}/{ACM} 1st {Int'l} {Workshop} on {Software} {Protection}},
	publisher = {IEEE},
	author = {Banescu, Sebastian and Ochoa, Martin and Pretschner, Alexander},
	month = {05},
	year = {2015},
	keywords = {deobfuscator, measurement},
	pages = {45--51}
}

@inproceedings{2017_predicting_the_resilience_of_obfuscated_code_against_symbolic_execution_attacks_via_machine_learning,
author = {Banescu, Sebastian and Collberg, Christian and Pretschner, Alexander},
title = {Predicting the Resilience of Obfuscated Code against Symbolic Execution Attacks via Machine Learning},
year = {2017},
isbn = {9781931971409},
publisher = {USENIX Association},
address = {USA},
booktitle = {Proc.\ 26th USENIX Security Symposium},
pages = {661--678},
numpages = {18},
OPTlocation = {Vancouver, BC, Canada},
series = {SEC'17}
}


@inproceedings{hardcoded1,
author = {Lazar, David and Chen, Haogang and Wang, Xi and Zeldovich, Nickolai},
title = {Why does cryptographic software fail? a case study and open problems},
year = {2014},
isbn = {9781450330244},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2637166.2637237},
doi = {10.1145/2637166.2637237},
abstract = {Mistakes in cryptographic software implementations often undermine the strong security guarantees offered by cryptography. This paper presents a systematic study of cryptographic vulnerabilities in practice, an examination of state-of-the-art techniques to prevent such vulnerabilities, and a discussion of open problems and possible future research directions. Our study covers 269 cryptographic vulnerabilities reported in the CVE database from January 2011 to May 2014. The results show that just 17\% of the bugs are in cryptographic libraries (which often have devastating consequences), and the remaining 83\% are misuses of cryptographic libraries by individual applications. We observe that preventing bugs in different parts of a system requires different techniques, and that no effective techniques exist to deal with certain classes of mistakes, such as weak key generation.},
booktitle = {Proc.\ 5th Asia-Pacific Workshop on Systems},
articleno = {7},
numpages = {7},
OPTlocation = {Beijing, China},
series = {APSys '14}
}

@inproceedings{bruni2022repair,
author = {Bruni, Roberto and Giacobazzi, Roberto and Gori, Roberta and Ranzato, Francesco},
title = {Abstract interpretation repair},
year = {2022},
isbn = {9781450392655},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3519939.3523453},
doi = {10.1145/3519939.3523453},
abstract = {Abstract interpretation is a sound-by-construction method for program verification: any erroneous program will raise some alarm. However, the verification of correct programs may yield false-alarms, namely it may be incomplete. Ideally, one would like to perform the analysis on the most abstract domain that is precise enough to avoid false-alarms. We show how to exploit a weaker notion of completeness, called local completeness, to optimally refine abstract domains and thus enhance the precision of program verification. Our main result establishes necessary and sufficient conditions for the existence of an optimal, locally complete refinement, called pointed shell. On top of this, we define two repair strategies to remove all false-alarms along a given abstract computation: the first proceeds forward, along with the concrete computation, while the second moves backward within the abstract computation. Our results pave the way for a novel modus operandi for automating program verification that we call Abstract Interpretation Repair (AIR): instead of choosing beforehand the right abstract domain, we can start in any abstract domain and progressively repair its local incompleteness as needed. In this regard, AIR is for abstract interpretation what CEGAR is for abstract model checking.},
booktitle = {Proc.\ 43rd ACM SIGPLAN Int'l Conf.\ on Programming Language Design and Implementation},
pages = {426â€“441},
numpages = {16},
keywords = {program verification, program analysis, local completeness, abstract interpretation, CEGAR},
OPTlocation = {San Diego, CA, USA},
series = {PLDI 2022}
}

@article{2017GMDP,
	author = {Giacobazzi, Roberto and Mastroeni, Isabella and Dalla Preda, Mila},
	journal = {Formal Aspects of Computing},
	number = {1},
	pages = {3--31},
	title = {Maximal incompleteness as obfuscation potency},
	volume = {29},
	year = {2017},
}

@article{bruni2018code1,
  title={Code obfuscation against abstraction refinement attacks},
  author={Bruni, Roberto and Giacobazzi, Roberto and Gori, Roberta},
  journal={Formal Aspects of Computing},
  volume={30},
  number={6},
  pages={685--711},
  year={2018},
  publisher={Springer}
}

@InProceedings{bruni2018code2,
author="Bruni, Robert and Giacobazzi, Roberto and Gori, Roberta",
OPTeditor="Dillig, Isil and Palsberg, Jens",
title="Code Obfuscation Against Abstract Model Checking Attacks",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2018",
publisher="Springer Int'l Publishing",
address="Cham",
pages="94--115",
isbn="978-3-319-73721-8"
}


@InProceedings{mila05a,
author="Dalla Preda, Mila
and Giacobazzi, Roberto",
OPTeditor="Caires, Lu{\'i}s
and Italiano, Giuseppe F.
and Monteiro, Lu{\'i}s
and Palamidessi, Catuscia
and Yung, Moti",
title="Semantic-Based Code Obfuscation by Abstract Interpretation",
booktitle="Automata, Languages and Programming",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1325--1336"
}

@inproceedings{Linn2003,
address = {New York, New York, USA},
author = {Linn, Cullen and Debray, Saumya},
booktitle = {Proc.\ 10th ACM Conf.\ on Computer and communications security (CCS '03)},
doi = {10.1145/948109.948149},
file = {:C$\backslash$:/Users/Stijn/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Linn, Debray - 2003 - Obfuscation of executable code to improve resistance to static disassembly.pdf:pdf},
isbn = {1581137389},
keywords = {code obfuscation,disassembly},
pages = {290--299},
publisher = {ACM Press},
title = {{Obfuscation of executable code to improve resistance to static disassembly}},
url = {http://portal.acm.org/citation.cfm?doid=948109.948149},
year = {2003}
}



@PhdThesis{mila07,
  author = 	 {Dalla Preda, Mila},
  title = 	 {Code obfuscation and malware detection by abstract interpretation},
  school = 	 {Universit{\`a} degli Studi di Verona},
  year = 	 {2007},
  OPTkey = 	 {},
  OPTtype = 	 {},
  OPTaddress = 	 {},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@INPROCEEDINGS{mila05b,
  author={Dalla Preda, M. and Giacobazzi, R.},
  booktitle={Third IEEE Int'l Conf.\ on Software Engineering and Formal Methods (SEFM'05)}, 
  title={Control code obfuscation by abstract interpretation}, 
  year={2005},
  volume={},
  number={},
  pages={301-310},
  keywords={Reverse engineering;Resilience;Electronic mail;Control systems;Particle measurements;Data structures;Transformers;Taxonomy;Software engineering},
  doi={10.1109/SEFM.2005.13},
  publisher={IEEE Computer Society},
  address = {Los Alamitos, CA}
}

@inproceedings{roberto2012,
author = {Giacobazzi, Roberto and Jones, Neil and Mastroeni, Isabella},
year = {2012},
month = {01},
pages = {63--72},
title = {Obfuscation by partial evaluation of distorted interpreters},
booktitle = {Conf.\ Record of the Annual ACM Symposium on Principles of Programming Languages},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2103746.2103761},
doi = {10.1145/2103746.2103761}
}

@InProceedings{campion23,
author="Campion, Marco
and Urban, Caterina
and Dalla Preda, Mila
and Giacobazzi, Roberto",
OPTeditor="Hermenegildo, Manuel V.
and Morales, Jos{\'e} F.",
title="A Formal Framework toÂ Measure theÂ Incompleteness ofÂ Abstract Interpretations",
booktitle="Static Analysis",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="114--138",
abstract="In program analysis by abstract interpretation, backward-completeness represents no loss of precision between the result of the analysis and the abstraction of the concrete execution, while forward-completeness stands for no imprecision between the concretization of the analysis result and the concrete execution. Program analyzers satisfying one of the two properties (or both) are considered precise. Regrettably, as for all approximation methods, the presence of false-alarms is most of the time unavoidable and therefore we need to deal somehow with incompleteness of both. To this end, a new property called partial completeness has recently been formalized as a relaxation of backward-completeness allowing a limited amount of imprecision measured by quasi-metrics. However, the use of quasi-metrics enforces distance functions to adhere precisely the abstract domain ordering, thus not suitable to be used to weaken the forward-completeness property which considers also abstract domains that are not necessarily based on Galois Connections. In this paper, we formalize a weaker form of quasi-metric, called pre-metric, which can be defined on all domains equipped with a pre-order relation. We show how this newly defined notion of pre-metric allows us to derive other pre-metrics on other domains by exploiting the concretization and, when available, the abstraction maps, according to the information and the corresponding level of approximation that we want to measure. Finally, by exploiting pre-metrics as our imprecision meter, we introduce the partial forward/backward-completeness properties.",
isbn="978-3-031-44245-2"
}

@article{cavallaro2007anti,
  title={Anti-taint-analysis: Practical evasion techniques against information flow based malware defense},
  author={Cavallaro, Lorenzo and Saxena, Prateek and Sekar, R},
  journal={Secure Systems Lab at Stony Brook University, Tech. Rep},
  pages={1--18},
  year={2007}
}

@inproceedings{babil2013effectiveness,
  title={On the effectiveness of dynamic taint analysis for protecting against private information leaks on android-based devices},
  author={Babil, Golam Sarwar and Mehani, Olivier and Boreli, Roksana and Kaafar, Mohamed-Ali},
  booktitle={2013 Int'l Conf.\ on Security and Cryptography (SECRYPT)},
  pages={1--8},
  year={2013},
  organization={IEEE}
}

@INPROCEEDINGS{stephensanti,
  author={Stephens, Jon and Yadegari, Babak and Collberg, Christian and Debray, Saumya and Scheidegger, Carlos},
  booktitle={IEEE European Symposium on Security and Privacy}, 
  title={Probabilistic Obfuscation Through Covert Channels}, 
  year={2018},
  volume={},
  number={},
  pages={243--257},
  keywords={Semantics;Probabilistic logic;Runtime;Cryptography;Privacy;Operating systems;Obfuscation;Covert Channels;Malware;Symbolic Analysis;Privacy;System Security},
  doi={10.1109/EuroSP.2018.00025}
  }

@INPROCEEDINGS{hardcoded2,
  author={Chandavarkar, B. R.},
  booktitle={2020 11th Int'l Conf.\ on Computing, Communication and Networking Technologies (ICCCNT)}, 
  title={Hardcoded Credentials and Insecure Data Transfer in IoT: National and Int'l Status}, 
  year={2020},
  volume={},
  number={},
  pages={1--7},
  keywords={Malware;Security;Password;Data transfer;Internet of Things;Computer crime;Encryption;IoT;Hardcoded Credentials;Mirai;Hajime;Persirai},
  doi={10.1109/ICCCNT49239.2020.9225520}}

@book{game_hacking,
  title={Game hacking: developing autonomous bots for online games},
  author={Cano, Nick},
  year={2016},
  publisher={No Starch Press}
}

@inproceedings{Taylor2019,
  author    = {C. Taylor and C. Collberg},
  title     = {Getting revenge: A system for analyzing reverse engineering behavior},
  booktitle = {Proc.\ Malware Conf.},
  year      = {2019}
}

@inproceedings{bellard2005qemu,
  title={QEMU, a fast and portable dynamic translator.},
  author={Bellard, Fabrice},
  booktitle={USENIX annual technical Conf., FREENIX Track},
  volume={41},
  number={46},
  pages={10--5555},
  year={2005},
  organization={California, USA}
}

@phdthesis{Taylor2022,
  author    = {C. Taylor},
  title     = {Remotely Observing Reverse Engineers to Evaluate Software Protection},
  school    = {The University of Arizona},
  year      = {2022}
}

@techreport{kaliski2000pkcs,
  title={PKCS\# 5: Password-based cryptography specification version 2.0},
  author={Kaliski, Burt},
  year={2000}
}

@misc{OSHI2024,
  author = {{Operating System and Hardware Information}},
  title = {Operating System and Hardware Information Documentation},
  year = {2024},
  version = {6.5.0},
  note = {Last Published: 2024-03-10},
  howpublished = {\url{https://www.oshi.ooo/}},
  license = {MIT License},
}

@inproceedings{groundtruth,
  title={Ground truth for binary disassembly is not easy},
  author={Pang, Chengbin and Zhang, Tiantai and Yu, Ruotong and Mao, Bing and Xu, Jun},
  booktitle={31st USENIX Security Symposium},
  pages={2479--2495},
  year={2022}
}

@article{Sutherland2006,
  author    = {Iain Sutherland and George E. Kalb and Andrew Blyth and Gaius Mulley},
  title     = {An empirical examination of the reverse engineering process for binary files},
  journal   = {Computers \& Security},
  volume    = {25},
  number    = {3},
  pages     = {221--228},
  year      = {2006}
}

@InProceedings{entropy_metric,
  author = 	 {Roberto Giacobazzi and Andrea Toppan},
  title = 	 {On Entropy Measures for Code Obfuscation},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {Proc.\ ACM SIGPLAN Software Security and Protection Workshop},
  year = 	 {2012},
  OPTeditor = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  OPTpages = 	 {},
  OPTmonth = 	 {},
  OPTaddress = 	 {},
  OPTorganization = {},
  OPTpublisher = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@INPROCEEDINGS{1232480,
  author={Nakamura, M. and Monden, A. and Itoh, T. and Matsumoto, K. and Kanzaki, Y. and Satoh, H.},
  booktitle={Proceedings. 5th Int'l Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)}, 
  title={Queue-based cost evaluation of mental simulation process in program comprehension}, 
  year={2003},
  volume={},
  number={},
  pages={351-360},
  keywords={Computational modeling;Humans;Computer simulation;Cost function;Computer hacking;Information science;Programming profession;Debugging;Computer crime;Protection},
  doi={10.1109/METRIC.2003.1232480}}



@inproceedings{practice_malware,
author = {Yong Wong, Miuyin and Landen, Matthew and Antonakakis, Manos and Blough, Douglas M. and Redmiles, Elissa M. and Ahamad, Mustaque},
title = {An Inside Look into the Practice of Malware Analysis},
year = {2021},
isbn = {9781450384544},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3460120.3484759},
doi = {10.1145/3460120.3484759},
abstract = {Malware analysis aims to understand how malicious software carries out actions necessary for a successful attack and identify the possible impacts of the attack. While there has been substantial research focused on malware analysis and it is an important tool for practitioners in industry, the overall malware analysis process used by practitioners has not been studied. As a result, an understanding of common malware analysis workflows and their goals is lacking. A better understanding of these workflows could help identify new research directions that are impactful in practice. In order to better understand malware analysis processes, we present the results of a user study with 21 professional malware analysts with diverse backgrounds who work at 18 different companies. The study focuses on answering three research questions: (1) What are the different objectives of malware analysts in practice?, (2) What comprises a typical professional malware analyst workflow, and (3) When analysts decide to conduct dynamic analysis, what factors do they consider when setting up a dynamic analysis system? Based on participant responses, we propose a taxonomy of malware analysts and identify five common analysis workflows. We also identify challenges that analysts face during the different stages of their workflow. From the results of the study, we propose two potential directions for future research, informed by challenges described by the participants. Finally, we recommend guidelines for developers of malware analysis tools to consider in order to improve the usability of such tools.},
booktitle = {Proc.\ ACM SIGSAC Conf.\ on Computer and Communications Security},
pages = {3053â€“3069},
numpages = {17},
keywords = {malware analysis, usable security},
OPTlocation = {Virtual Event, Republic of Korea},
series = {CCS '21}
}

@ARTICLE{qmood,
  author={Bansiya, J. and Davis, C.G.},
  journal={IEEE Transactions on Software Engineering}, 
  title={A hierarchical model for object-oriented design quality assessment}, 
  year={2002},
  volume={28},
  number={1},
  pages={4-17},
  keywords={Object oriented modeling;Quality assessment},
  doi={10.1109/32.979986}}



@inproceedings{Ceccato2017,
  author    = {Ceccato, M. and Tonella, P. and Basile, C. and Coppens, B. and De Sutter, B. and Falcarin, P. and Torchiano, M.},
  title     = {How professional hackers understand protected code while performing attack tasks},
  booktitle = {IEEE/ACM 25th Int'l Conf.\ on Program Comprehension (ICPC)},
  year      = {2017},
  doi       = {10.1109/icpc.2017.2}
}

@inproceedings{Votipka2019,
  author    = {D. Votipka and S. Rabin and K. Micinski and J. S. Foster and M. L. Mazurek},
  title     = {An observational investigation of reverse engineers' process and mental models},
  booktitle = {Extended Abstracts of the 2019 CHI Conf.\ on Human Factors in Computing Systems},
  year      = {2019},
  doi       = {10.1145/3290607.3313040}
}

@inproceedings{Mantovani2022,
  author    = {A. Mantovani and S. Aonzo and Y. Fratantonio and D. Balzarotti},
  title     = {{RE-Mind}: a First Look Inside the Mind of a Reverse Engineer},
  booktitle = {Proc. 31st USENIX Security Symposium},
  year      = {2022},
  pages     = {2727--2745}
}

@inproceedings{Savin2023,
  author    = {Savin, Georgel M. and Asseri, Ammar and Dykstra, Josiah and Goohs, Jonathan and Melaragno, Anthony and Casey, William},
  title     = {Battle Ground: Data Collection and Labeling of CTF Games to Understand Human Cyber Operators},
  booktitle = {Proc. 16th Cyber Security Experimentation and Test Workshop},
  year      = {2023}
}

@inproceedings{Malkadi2020,
  author    = {A. Malkadi and M. Alahmadi and S. Haiduc},
  title     = {A study on the accuracy of OCR engines for source code transcription from programming screencasts},
  booktitle = {Proc. 17th Int'l Conf.\ on Mining Software Repositories},
  year      = {2020}
}


@article{Bradski2000,
  author    = {Gary Bradski},
  title     = {The openCV Library},
  journal   = {Dr. Dobb's Journal: Software Tools for the Professional Programmer},
  volume    = {25},
  number    = {11},
  pages     = {120--123},
  year      = {2000}
}
@misc{ida_graph_view,
  author = {{Hex-Rays}},
  title = {IDA Help: Graph View},
  year = {2023},
  howpublished = {\url{https://hex-rays.com/products/ida/support/idadoc/42.shtml}},
  note = {Accessed: 2024-03-05}
}


@inbook{sayood2017,
  author = {Sayood, Khalid},
  title = {Introduction to Data Compression},
  chapter = {1.1.1},
  publisher = {Morgan Kaufmann},
  year = {2017}
}

@book{miano1999,
  author = {Miano, John},
  title = {Compressed Image File Formats: JPEG, PNG, GIF, XBM, BMP},
  publisher = {Addison-Wesley Professional},
  year = {1999}
}

@article{plank2016keystroke,
  title={Keystroke dynamics as signal for shallow syntactic parsing},
  author={Plank, Barbara},
  journal={arXiv preprint arXiv:1610.03321},
  year={2016}
}

@inproceedings{taylor2016tool,
  title={A tool for teaching reverse engineering},
  author={Taylor, Clark and Colberg, Christian},
  booktitle={2016 USENIX Workshop on Advances in Security Education (ASE 16)},
  year={2016}
}

@inproceedings{smith2007overview,
  author = {Smith, Ray},
  title = {An overview of the Tesseract OCR engine},
  booktitle = {Ninth Int'l Conf.\ on Document Analysis and Recognition (ICDAR 2007)},
  volume = {2},
  publisher = {IEEE},
  year = {2007}
}


@manual{tesseract_manual,
  title = {Tesseract User Manual},
  author = {{Tesseract OCR Team}},
  year = {2023},
  month = {Mar},
  url = {https://tesseract-ocr.github.io/tessdoc/},
  note = {Accessed: 2024-03-05}
}

@misc{binary_ninja_guide,
  author = {{Vector 35 LLC}},
  title = {Binary Ninja User Documentation: User Guide},
  year = {2023},
  howpublished = {\url{https://docs.binary.ninja/guide/index.html}},
  note = {Accessed: 2024-03-05}
}

@misc{ghidra_guide,
  author = {Jim Clausing},
  title = {A few Ghidra tips for IDA users, part 4 - function call graphs},
  year = {2019},
  month = {6},
  day = {14},
  note = {Last Updated: 2019-06-14 20:17:47 UTC},
  howpublished = {\url{https://isc.sans.edu/diary/A+few+Ghidra+tips+for+IDA+users+part+4+function+call+graphs/25032}},
  publisher = {{SANS Internet Storm Center}},
}

@article{levenshtein1966binary,
  title={Binary codes capable of correcting deletions, insertions, and reversals},
  author={Levenshtein, V.I.},
  journal={Soviet Physics Doklady},
  volume={10},
  number={8},
  pages={707--710},
  year={1966},
  month={February}
}

@article{Pearson1900,
  doi = {10.1080/14786440009463897},
  url = {https://doi.org/10.1080/14786440009463897},
  year = {1900},
  month = jul,
  publisher = {Informa {UK} Limited},
  volume = {50},
  number = {302},
  pages = {157--175},
  author = {Karl Pearson},
  title = {X. On the criterion that a given system of deviations from the probable in the case of a correlated system of variables is such that it can be reasonably supposed to have arisen from random sampling},
  journal = {The London,  Edinburgh,  and Dublin Philosophical Magazine and Journal of Science}
}

@misc{Pillow2024,
  author = {Fredrik Lundh and Jeffrey A. Clark and contributors},
  title = {{Pillow (PIL Fork) Documentation}},
  howpublished = {\url{https://pillow.readthedocs.io/en/stable/}},
  year = 2024,
  note = {Version 10.2.0}
}

@article{Hall1980ApproximateSM,
  title={Approximate string matching},
  author={Patrick A.V. Hall and Geoff R. Dowling},
  journal={ACM Computing Surveys (CSUR)},
  volume={12},
  number={4},
  pages={381-402},
  year={1980}
}

@InCollection{Parsons2017,
  author    = {Parsons, V. L.},
  title     = {Stratified Sampling},
  booktitle = {Wiley StatsRef: Statistics Reference Online},
  publisher = {Wiley},
  year      = {2017},
  OPTeditor    = {N. Balakrishnan and T. Colton and B. Everitt and W. Piegorsch and F. Ruggeri and J.L. Teugels},
  doi       = {10.1002/9781118445112.stat05999.pub2},
  url       = {https://doi.org/10.1002/9781118445112.stat05999.pub2},
}

@article{Sporici2020,
  author    = {Dan Sporici and Elena CuÈ™nir and Costin-Anton Boiangiu},
  title     = {Improving the accuracy of Tesseract 4.0 OCR engine using convolution-based preprocessing},
  journal   = {Symmetry},
  volume    = {12},
  number    = {5},
  pages     = {715},
  year      = {2020}
}

@misc{grand2024challenge,
    title = {Grand Reverse Engineering Challenge},
    howpublished = {\url{https://grand-re-challenge.org}},
    note = {Accessed: 2024-04-10}
}

@article{Nunkoosing2005,
  title={The problems with interviews},
  author={Nunkoosing, Karl},
  journal={Qualitative Health Research},
  volume={15},
  number={5},
  pages={698--706},
  year={2005},
  publisher={SAGE Publications Sage CA: Los Angeles, CA}
}

@misc{Kakilla2021,
  title={Strengths and Weaknesses of Semi-Structured Interviews in Qualitative Research: A Critical Essay},
  author={Kakilla, Chaitanya},
  year={2021},
  publisher={ResearchGate}
}

@inproceedings{wong2021inside,
  title={An inside look into the practice of malware analysis},
  author={Wong, Yong M. and Landen, M. and Antonakakis, M. and Blough, D. M. and Redmiles, E. M. and Ahamad, M.},
  booktitle={Proc.\ ACM SIGSAC Conf.\ on Computer and Communications Security},
  pages={3053--3069},
  year={2021},
  month={Nov}
}

@inproceedings{ceccato2014need,
  title={On the need for more human studies to assess software protection},
  author={Ceccato, Mariano},
  booktitle={Workshop on Continuously Upgradeable Software Security and Protection},
  pages={55--56},
  year={2014}
}

@book{bryant2012understanding,
  title={Understanding how reverse engineers make sense of programs from assembly language representations},
  author={Bryant, Adam R},
  year={2012},
  publisher={Air Force Institute of Technology}
}

@article{2021inputoutput,
    author = {Zhao, Yujie and Tang, Zhanyong and Ye, Guixin and Gong, Xiaoqing and Fang, Dingyi and Tan, Zhiyuan},
    title = {Input-Output Example-Guided Data Deobfuscation on Binary},
    year = {2021},
    month = {01},
    doi = {10.1155/2021/4646048},
    journal = {Security and Communication Networks},
    issue_date = {2021},
    publisher = {John Wiley & Sons, Inc.},
    volume = {2021},
    issn = {1939-0114},
}

@InProceedings{exp_eval_obf_against_reveng,
    author = {Bin Shamlan, Mohammed H. and Alaidaroos, Alawi S. and Bin Merdhah, Mansoor H. and Bamatraf, Mohammed A. and Zain, Adnan A.},
    title = {Experimental Evaluation of the Obfuscation Techniques Against Reverse Engineering},
    year = {2021},
    doi = {10.1007/978-981-15-6048-4_33},
    isbn = {978-981-15-6048-4},
    booktitle = {Advances on Smart and Soft Computing},
    OPTeditor = {Saeed, Faisal and Al-Hadhrami, Tawfik and Mohammed, Fathey and Mohammed, Errais},
    publisher = {Springer Singapore},
    address = {Singapore},
    pages = {383--390},
    abstract = {Source code obfuscation is one of the techniques used by software developers to protect their software. Obfuscation techniques transform the original code to a new protected version which is harder for the attackers to understand but have the same function as the original one. Most of obfuscation techniques are not based on well-defined measurements to clarify their effectiveness in protecting the source code from reveres engineering attacks. This paper presents an experimental study to investigate the effectiveness of specific control flows obfuscation technique---A parameterized flattening---in software protection against human attacks. We conduct an experiment, where software developers participate to perform an attack task on two applications written in C sharp programming language where one of the applications is clear and the other one is obfuscated with control flow obfuscation technique. As a result of the statistical analysis used in this paper, it is shown that only the obfuscation treatment significantly affects the correctness of the attacker to perform a successful attack, where the obfuscation reduced the correctness of the attacker by 50{\%}. The complexity of the application has no significant effect on the correctness of the understanding tasks. Also, neither obfuscation treatment nor the complexity of the application has any effect on the correctness of the modification attack tasks.},
}

@article{2020splitting,
	author = {Viticchi{\'e}, Alessio and Regano, Leonardo and Basile, Cataldo and Torchiano, Marco and Ceccato, Mariano and Tonella, Paolo},
	journal = {Empirical Software Engineering},
	number = {1},
	pages = {1--48},
	title = {Empirical assessment of the effort needed to attack programs protected with client/server code splitting},
	volume = {25},
	year = {2020}
}
	
@INPROCEEDINGS{2019impact,
  author={BinShamlan, Mohammed H. and Bamatraf, Mohammed A. and Zain, Adnan A.},
  booktitle={2019 First Int'l Conf.\ of Intelligent Computing and Engineering (ICOICE)}, 
  title={The Impact of Control Flow Obfuscation Technique on Software Protection Against Human Attacks}, 
  year={2019},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/ICOICE48418.2019.9035187}
}

@ARTICLE{2019resilient,
  author={Zeng, Qiang and Luo, Lannan and Qian, Zhiyun and Du, Xiaojiang and Li, Zhoujun and Huang, Chin-Tser and Farkas, Csilla},
  journal={IEEE Transactions on Dependable and Secure Computing}, 
  title={Resilient User-Side Android Application Repackaging and Tampering Detection Using Cryptographically Obfuscated Logic Bombs}, 
  year={2019},
  volume={},
  number={},
  pages={1--1},
  doi={10.1109/TDSC.2019.2957787}
}

@inproceedings{reganoMetric,
author="Canavese, Daniele
and Regano, Leonardo
and Basile, Cataldo
and Viticchi{\'e}, Alessio",
editor="Livraga, Giovanni
and Mitchell, Chris",
title="Estimating Software Obfuscation Potency with Artificial Neural Networks",
booktitle="Security and Trust Management",
year="2017",
publisher="Springer Int'l Publishing",
address="Cham",
pages="193--202",
abstract="This paper presents an approach to estimate the potency of obfuscation techniques. Our approach uses neural networks to accurately predict the value of complexity metrics -- which are used to compute the potency -- after an obfuscation transformation is applied to a code region. This work is the first step towards a decision support to optimally protect software applications.",
isbn="978-3-319-68063-7"
}

@article{vmguards,
	title = {VMGuards: A novel virtual machine based code protection system with VM security as the first class design concern},
	author = {Tang, Zhanyong and Li, Meng and Ye, Guixin and Cao, Shuai and Chen, Meiling and Gong, Xiaoqing and Fang, Dingyi and Wang, Zheng},
	journal = {Applied Sciences},
	volume = {8},
	number = {5},
	pages = {771},
	year = {2018},
	publisher = {Multidisciplinary Digital Publishing Institute}
}


@article{survey2016,
author = {Schrittwieser, Sebastian and Katzenbeisser, Stefan and Kinder, Johannes and Merzdovnik, Georg and Weippl, Edgar},
title = {Protecting Software through Obfuscation: Can It Keep Pace with Progress in Code Analysis?},
year = {2016},
issue_date = {March 2017},
publisher = {ACM},
address = {New York, NY, USA},
volume = {49},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/2886012},
doi = {10.1145/2886012},
abstract = {Software obfuscation has always been a controversially discussed research area. While theoretical results indicate that provably secure obfuscation in general is impossible, its widespread application in malware and commercial software shows that it is nevertheless popular in practice. Still, it remains largely unexplored to what extent todayâ€™s software obfuscations keep up with state-of-the-art code analysis and where we stand in the arms race between software developers and code analysts. The main goal of this survey is to analyze the effectiveness of different classes of software obfuscation against the continuously improving deobfuscation techniques and off-the-shelf code analysis tools.The answer very much depends on the goals of the analyst and the available resources. On the one hand, many forms of lightweight static analysis have difficulties with even basic obfuscation schemes, which explains the unbroken popularity of obfuscation among malware writers. On the other hand, more expensive analysis techniques, in particular when used interactively by a human analyst, can easily defeat many obfuscations. As a result, software obfuscation for the purpose of intellectual property protection remains highly challenging.},
journal = {ACM Comput. Surv.},
month = {apr},
articleno = {4},
numpages = {37},
keywords = {software protection, reverse engineering, program analysis, malware, Software obfuscation}
}

@inproceedings{khunt,
  title = {K-{{Hunt}}: {{Pinpointing Insecure Cryptographic Keys}} from {{Execution Traces}}},
  shorttitle = {K-{{Hunt}}},
  booktitle = {Proc.\ {{ACM SIGSAC Conf.}} on {{Computer}} and {{Communications Security}}},
  author = {Li, Juanru and Lin, Zhiqiang and Caballero, Juan and Zhang, Yuanyuan and Gu, Dawu},
  year = {2018},
  date = {2018-10-15},
  pages = {412--425},
  publisher = {ACM},
  address = {New York, NY, USA},
  doi = {10.1145/3243734.3243783},
  url = {https://dl.acm.org/doi/10.1145/3243734.3243783},
  urldate = {2021-01-20},
  eventtitle = {{{CCS}} '18: 2018 {{ACM SIGSAC Conf.}} on {{Computer}} and {{Communications Security}}},
  isbn = {978-1-4503-5693-0},
  langid = {english}
}

@inproceedings{10.1145/2951913.2951936,
author = {Gilray, Thomas and Adams, Michael D. and Might, Matthew},
title = {Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis},
year = {2016},
isbn = {9781450342193},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2951913.2951936},
doi = {10.1145/2951913.2951936},
abstract = {The polyvariance of a static analysis is the degree to which it structurally differentiates approximations of program values. Polyvariant techniques come in a number of different flavors that represent alternative heuristics for managing the trade-off an analysis strikes between precision and complexity. For example, call sensitivity supposes that values will tend to correlate with recent call sites, object sensitivity supposes that values will correlate with the allocation points of related objects, the Cartesian product algorithm supposes correlations between the values of arguments to the same function, and so forth.  In this paper, we describe a unified methodology for implementing and understanding polyvariance in a higher-order setting (i.e., for control-flow analyses). We do this by extending the method of abstracting abstract machines (AAM), a systematic approach to producing an abstract interpretation of abstract-machine semantics. AAM eliminates recursion within a languageâ€™s semantics by passing around an explicit store, and thus places importance on the strategy an analysis uses for allocating abstract addresses within the abstract heap or store. We build on AAM by showing that the design space of possible abstract allocators exactly and uniquely corresponds to the design space of polyvariant strategies. This allows us to both unify and generalize polyvariance as tunings of a single function. Changes to the behavior of this function easily recapitulate classic styles of analysis and produce novel variations, combinations of techniques, and fundamentally new techniques.},
booktitle = {Proc.\ 21st ACM SIGPLAN Int'l Conf.\ on Functional Programming},
pages = {407â€“420},
numpages = {14},
keywords = {Abstract allocation, Abstract interpretation, Context sensitivity, Control-flow analysis, Polyvariance, Static analysis},
OPTlocation = {Nara, Japan},
series = {ICFP 2016}
}

@inproceedings{10.1145/1375581.1375615,
author = {Dillig, Isil and Dillig, Thomas and Aiken, Alex},
title = {Sound, complete and scalable path-sensitive analysis},
year = {2008},
isbn = {9781595938602},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1375581.1375615},
doi = {10.1145/1375581.1375615},
abstract = {We present a new, precise technique for fully path- and context-sensitive program analysis. Our technique exploits two observations: First, using quantified, recursive formulas, path- and context-sensitive conditions for many program properties can be expressed exactly. To compute a closed form solution to such recursive constraints, we differentiate between observable and unobservable variables, the latter of which are existentially quantified in our approach. Using the insight that unobservable variables can be eliminated outside a certain scope, our technique computes satisfiability- and validity-preserving closed-form solutions to the original recursive constraints. We prove the solution is as precise as the original system for answering may and must queries as well as being small in practice, allowing our technique to scale to the entire Linux kernel, a program with over 6 million lines of code.},
booktitle = {Proc.\ 29th ACM SIGPLAN Conf.\ on Programming Language Design and Implementation},
pages = {270â€“280},
numpages = {11},
keywords = {path- and context-sensitive analysis, static analysis, strongest necessary/weakest sufficient conditons},
OPTlocation = {Tucson, AZ, USA},
series = {PLDI '08}
}

@INPROCEEDINGS{optimization, 
    author={S. Guelton and A. Guinet and P. Brunet and J. M. Martinez and F. Dagnat and N. Szlifierski}, 
    booktitle={IEEE 18th Int'l Working Conf.\ on Source Code Analysis and Manipulation (SCAM)}, 
    title={Combining Obfuscation and Optimizations in the Real World}, 
    year={2018}, 
    volume={}, 
    number={}, 
    pages={24-33}, 
    keywords={cryptography;optimisation;program compilers;reverse engineering;rewriting systems;scheduling;pass combinations;sequential pass management techniques;industrial-strength obfuscator;code obfuscation;code tangling techniques;white-box encryption calls;tool-specific countermeasures;reverse engineer;scheduling code transformations;pass scheduling problem;code obfuscator;multicriteria optimization problem;reverse engineering;Optimization;Virtualization;Kernel;Tools;Job shop scheduling;Cryptography;Heuristic algorithms;obfuscation;pass ordering}, 
    doi={10.1109/SCAM.2018.00010}, 
    ISSN={2470-6892}, 
    month={09},
}
@inproceedings{batchelder2007obfuscating,
    author = {Batchelder, Michael and Hendren, Laurie},
    title = {Obfuscating Java: The Most Pain for the Least Gain},
    year = {2007},
    doi = {10.1007/978-3-540-71229-9_7},
    isbn = {978-3-540-71229-9},
    booktitle = {Int'l Conf.\ on Compiler Construction},
    volume = {4420},
    pages = {96--110},
    publisher = {Springer},
}

@inproceedings{common_criteria,
  title={Common criteria certification of a smartcard: a technical overview},
  author={Lomne, Victor},
  booktitle={Proc. Int. Workshop Cryptographic Hardware Embedded Syst. Tut},
  pages={1--105},
  year={2016}
}

@inproceedings{deobf_virtualization,
    author = {Rolles, Rolf},
    title = {Unpacking Virtualization Obfuscators},
    year = {2009},
    publisher = {USENIX Association},
    booktitle = {Proc.\ 3rd USENIX Conf.\ on Offensive Technologies},
    pages = {1--7},
    OPTlocation = {Montreal, Canada},
    series = {WOOT'09},
    OPTurl = {https://www.usenix.org/legacy/events/woot09/tech/full_papers/rolles.pdf},
}

@INPROCEEDINGS{kinder,
    author = {J. {Kinder}},
    booktitle = {2012 19th Working Conf.\ on Reverse Engineering},
    title = {Towards Static Analysis of Virtualization-Obfuscated Binaries},
    year = {2012},
    pages = {61--70},
    doi = {10.1109/WCRE.2012.16},
    ISSN = {1095-1350},
    month = {10}
}


@Misc{Gartner-report-riskanalysis,
  author = {{Gartner, Inc.}},
  title = {Risk Assessment Process and Methodologies Primer for 2019},
  howpublished = {Online at \url{https://www.gartner.com/en/documents/3938592}},
  year = {2019}
}

@techreport{nistSP800-39,
	author = {{Joint Task Force Transformation Initiative}},
	title = {{SP 800-39}. Managing Information Security Risk: Organization, Mission, and Information System View},
	year = {2011},
	institution = {National Institute of Standards \& Technology},
	OPTBJORNaddress = {Gaithersburg, MD, United States}
}



@INPROCEEDINGS{ollvm,
    author = {P. Junod and J. Rinaldini and J. Wehrli and J. Michielin},
    booktitle = {IEEE/ACM 1st Int'l Workshop on Software Protection (SPRO)},
    title = {Obfuscator-LLVM -- Software Protection for the Masses},
    year = {2015},
    volume = {00},
    number = {},
    pages = {3-9},
    keywords={Software;Cryptography;Software algorithms;Resistance;Routing;Merging},
    doi = {10.1109/SPRO.2015.10},
    url = {doi.ieeecomputersociety.org/10.1109/SPRO.2015.10},
    ISSN = {},
    month={05},
}


@inproceedings{epona,
    author = {Brunet, Pierrick and Creusillet, B\'{e}atrice and Guinet, Adrien and Martinez, Juan Manuel},
    title = {Epona and the Obfuscation Paradox: Transparent for Users and Developers, a Pain for Reversers},
    year = {2019},
    isbn = {9781450368353},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3338503.3357722},
    doi = {10.1145/3338503.3357722},
    booktitle = {Proc.\ 3rd ACM Workshop on Software Protection},
    pages = {41--52},
    keywords = {traceability, obfuscation, compilers},
    OPTlocation = {London, United Kingdom},
    OPTseries = {SPRO'19}
}


@article{path-sensitive,
author = {Dillig, Isil and Dillig, Thomas and Aiken, Alex},
title = {Sound, complete and scalable path-sensitive analysis},
year = {2008},
issue_date = {June 2008},
publisher = {ACM},
address = {New York, NY, USA},
volume = {43},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1379022.1375615},
doi = {10.1145/1379022.1375615},
abstract = {We present a new, precise technique for fully path- and context-sensitive program analysis. Our technique exploits two observations: First, using quantified, recursive formulas, path- and context-sensitive conditions for many program properties can be expressed exactly. To compute a closed form solution to such recursive constraints, we differentiate between observable and unobservable variables, the latter of which are existentially quantified in our approach. Using the insight that unobservable variables can be eliminated outside a certain scope, our technique computes satisfiability- and validity-preserving closed-form solutions to the original recursive constraints. We prove the solution is as precise as the original system for answering may and must queries as well as being small in practice, allowing our technique to scale to the entire Linux kernel, a program with over 6 million lines of code.},
journal = {SIGPLAN Not.},
month = jun,
pages = {270â€“280},
numpages = {11},
keywords = {path- and context-sensitive analysis, static analysis, strongest necessary/weakest sufficient conditons}
}

@article{ni2018malware,
  title={Malware identification using visualization images and deep learning},
  author={Ni, Sang and Qian, Quan and Zhang, Rui},
  journal={Computers \& Security},
  year={2018},
  publisher={Elsevier}
}

@misc{banerjee2021variablerecoverydecompiledbinary,
      title={Variable Name Recovery in Decompiled Binary Code using Constrained Masked Language Modeling}, 
      author={Pratyay Banerjee and Kuntal Kumar Pal and Fish Wang and Chitta Baral},
      year={2021},
      eprint={2103.12801},
      archivePrefix={arXiv},
      primaryClass={cs.LG},
      url={https://arxiv.org/abs/2103.12801}, 
}

@article{hash1,
author = {Xie, Xin and Lu, Bin and Gong, Daofu and Luo, Xiangyang and Liu, Fenlin},
title = {Random table and hash coding-based binary code obfuscation against stack trace analysis},
journal = {IET Information Security},
volume = {10},
number = {1},
pages = {18-27},
keywords = {program diagnostics, reverse engineering, cryptography, hash coding-based binary code obfuscation method, stack trace analysis, random table, thwart reverse engineering, call chains, stack tracing, reverse program analysis, ret instructions, call instructions},
doi = {https://doi.org/10.1049/iet-ifs.2013.0137},
url = {https://ietresearch.onlinelibrary.wiley.com/doi/abs/10.1049/iet-ifs.2013.0137},
eprint = {https://ietresearch.onlinelibrary.wiley.com/doi/pdf/10.1049/iet-ifs.2013.0137},
abstract = {Code obfuscation is intended to thwart reverse engineering by making programmes hard to understand. Call chains collected by stack tracing can be used to understand the behaviour of programmes. To hinder reverse analysis of stack tracing, a binary code obfuscation method based on random obfuscated table and hash coding is proposed. Random obfuscated table is used to map call addresses while call and ret instructions are executing. Hash coding and random value can be used to encode and decode the data of stack frames in the run-time programmes. Experiment and analysis show that the obfuscation can effectively impede stack trace analysis and increase the cost of reverse analysis for programmes.},
year = {2016}
}

@INPROCEEDINGS{hash2,
  author={Tsoutsos, Nektarios Georgios and Maniatakos, Michail},
  booktitle={2017 Asian Hardware Oriented Security and Trust Symposium (AsianHOST)}, 
  title={Obfuscating branch decisions based on encrypted data using MISR and hash digests}, 
  year={2017},
  volume={},
  number={},
  pages={115-120},
  doi={10.1109/AsianHOST.2017.8354005}}


@inproceedings{2017_recovering_clear_natural_identifiers_from_obfuscated_js_names,
    author = {Vasilescu, Bogdan and Casalnuovo, Casey and Devanbu, Premkumar},
    title = {Recovering Clear, Natural Identifiers from Obfuscated JS Names},
    year = {2017},
    isbn = {9781450351058},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3106237.3106289},
    doi = {10.1145/3106237.3106289},
    booktitle = {Proc.\ 11th Joint Meeting on Foundations of Software Engineering},
    pages = {683--693},
    keywords = {Statistical Machine Translation, Deobfuscation, JavaScript},
    OPTlocation = {Paderborn, Germany},
    series = {ESEC/FSE 2017}
}

@Conf.{secrypt21,
    author={Colby B. Parker. and J. Todd McDonald. and Dimitrios Damopoulos.},
    title={Machine Learning Classification of Obfuscation using Image Visualization},
    booktitle={Proc.\ 18th Int'l Conf.\ on Security and Cryptography (SECRYPT)},
    year={2021},
    pages={854--859},
    publisher={SciTePress},
    organization={INSTICC},
    doi={10.5220/0010607408540859},
    isbn={978-989-758-524-1},
    issn={2184-7711},
}


@article{polyvariance,
author = {Gilray, Thomas and Adams, Michael D. and Might, Matthew},
title = {Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis},
year = {2016},
issue_date = {September 2016},
publisher = {ACM},
address = {New York, NY, USA},
volume = {51},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/3022670.2951936},
doi = {10.1145/3022670.2951936},
abstract = {The polyvariance of a static analysis is the degree to which it structurally differentiates approximations of program values. Polyvariant techniques come in a number of different flavors that represent alternative heuristics for managing the trade-off an analysis strikes between precision and complexity. For example, call sensitivity supposes that values will tend to correlate with recent call sites, object sensitivity supposes that values will correlate with the allocation points of related objects, the Cartesian product algorithm supposes correlations between the values of arguments to the same function, and so forth.  In this paper, we describe a unified methodology for implementing and understanding polyvariance in a higher-order setting (i.e., for control-flow analyses). We do this by extending the method of abstracting abstract machines (AAM), a systematic approach to producing an abstract interpretation of abstract-machine semantics. AAM eliminates recursion within a languageâ€™s semantics by passing around an explicit store, and thus places importance on the strategy an analysis uses for allocating abstract addresses within the abstract heap or store. We build on AAM by showing that the design space of possible abstract allocators exactly and uniquely corresponds to the design space of polyvariant strategies. This allows us to both unify and generalize polyvariance as tunings of a single function. Changes to the behavior of this function easily recapitulate classic styles of analysis and produce novel variations, combinations of techniques, and fundamentally new techniques.},
journal = {SIGPLAN Not.},
month = sep,
pages = {407â€“420},
numpages = {14},
keywords = {Abstract allocation, Abstract interpretation, Context sensitivity, Control-flow analysis, Polyvariance, Static analysis}
}



@article{mariano24,
author = {Mariano, Benjamin and Wang, Ziteng and Pailoor, Shankara and Collberg, Christian and Dillig, I\c{s}il},
title = {Control-Flow Deobfuscation using Trace-Informed Compositional Program Synthesis},
year = {2024},
issue_date = {October 2024},
publisher = {ACM},
address = {New York, NY, USA},
volume = {8},
number = {OOPSLA2},
url = {https://doi.org/10.1145/3689789},
doi = {10.1145/3689789},
abstract = {Code deobfuscation, which attempts to simplify code that has been intentionally obfuscated to prevent understanding, is a critical technique for downstream security analysis tasks like malware detection. While there has been significant prior work on code deobfuscation, most techniques either do not handle control flow obfuscations that modify control flow or they target specific classes of control flow obfuscations, making them unsuitable for handling new types of obfuscations or combinations of existing ones. In this paper, we study a new deobfuscation technique that is based on program synthesis and that can handle a broad class of control flow obfuscations. Given an obfuscated program P, our approach aims to synthesize a smallest program that is a control-flow reduction of P and that is semantically equivalent. Since our method does not assume knowledge about the types of obfuscations that have been applied to the original program, the underlying synthesis problem ends up being very challenging. To address this challenge, we propose a novel trace-informed compositional synthesis algorithm that leverages hints present in dynamic traces of the obfuscated program to decompose the synthesis problem into a set of simpler subproblems. In particular, we show how dynamic traces can be useful for inferring a suitable control-flow skeleton of the deobfuscated program and performing independent synthesis of each basic block. We have implemented this approach in a tool called Chisel and evaluate it on 546 benchmarks that have been obfuscated using combinations of six different obfuscation techniques. Our evaluation shows that our approach is effective and that it produces code that is almost identical (modulo variable renaming) to the original (non-obfuscated) program in 86\% of cases. Our evaluation also shows that Chisel significantly outperforms existing techniques.},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {349},
numpages = {31},
keywords = {Deobfuscation, Obfuscation, Program Synthesis}
}

@article{desutter2024evaluation,
author = {De Sutter, Bjorn and Schrittwieser, Sebastian and Coppens, Bart and Kochberger, Patrick},
title = {Evaluation Methodologies in Software Protection Research},
year = {2024},
issue_date = {April 2025},
publisher = {ACM},
address = {New York, NY, USA},
volume = {57},
number = {4},
issn = {0360-0300},
url = {https://doi.org/10.1145/3702314},
doi = {10.1145/3702314},
abstract = {Man-at-the-end (MATE) attackers have full control over the system on which the attacked software runs, and try to break the confidentiality or integrity of assets embedded in the software. Both companies and malware authors want to prevent such attacks. This has driven an arms race between attackers and defenders, resulting in a plethora of different protection and analysis methods. However, it remains difficult to measure the strength of protections because MATE attackers can reach their goals in many different ways and a universally accepted evaluation methodology does not exist. This survey systematically reviews the evaluation methodologies of papers on obfuscation, a major class of protections against MATE attacks. For 571 papers, we collected 113 aspects of their evaluation methodologies, ranging from sample set types and sizes, over sample treatment, to performed measurements. We provide detailed insights into how the academic state of the art evaluates both the protections and analyses thereon. In summary, there is a clear need for better evaluation methodologies. We identify nine challenges for software protection evaluations, which represent threats to the validity, reproducibility, and interpretation of research results in the context of MATE attacks and formulate a number of concrete recommendations for improving the evaluations reported in future research papers.},
journal = {ACM Comput. Surv.},
month = dec,
articleno = {86},
numpages = {41},
keywords = {Survey, software protection, obfuscation, deobfuscation, diversification}
}



@inproceedings{hansch2018programming,
  title={Programming experience might not help in comprehending obfuscated source code efficiently},
  author={H{\"a}nsch, Norman and Schankin, Andrea and Protsenko, Mykolai and Freiling, Felix and Benenson, Zinaida},
  booktitle={Fourteenth Symposium on Usable Privacy and Security (SOUPS 2018)},
  pages={341--356},
  year={2018}
}

@inproceedings{viticchie2016assessment,
  title={Assessment of source code obfuscation techniques},
  author={Viticchi{\'e}, Alessio and Regano, Leonardo and Torchiano, Marco and Basile, Cataldo and Ceccato, Mariano and Tonella, Paolo and Tiella, Roberto},
  booktitle={IEEE 16th Int'l working Conf.\ on source code analysis and manipulation (SCAM)},
  pages={11--20},
  year={2016},
  organization={IEEE}
}

@article{Basile23,
title = {Design, implementation, and automation of a risk management approach for man-at-the-End software protection},
journal = {Computers \& Security},
volume = {132},
pages = {103321},
year = {2023},
issn = {0167-4048},
doi = {https://doi.org/10.1016/j.cose.2023.103321},
url = {https://www.sciencedirect.com/science/article/pii/S0167404823002316},
author = {Cataldo Basile and Bjorn {De Sutter} and Daniele Canavese and Leonardo Regano and Bart Coppens},
keywords = {Software protection, Standardization, Risk framing, Risk assessment, Risk mitigation},
abstract = {The last years have seen an increase in Man-at-the-End (MATE) attacks against software applications, both in number and severity. However, software protection, which aims at mitigating MATE attacks, is dominated by fuzzy concepts and security-through-obscurity. This paper presents a rationale for adopting and standardizing the protection of software as a risk management process according to the NIST SP800-39 approach. We examine the relevant constructs, models, and methods needed for formalizing and automating the activities in this process in the context of MATE software protection. We highlight the open issues that the research community still has to address. We discuss the benefits that such an approach can bring to all stakeholders. In addition, we present a Proof of Concept (PoC) decision support system that instantiates many of the discussed construct, models, and methods and automates many activities in the risk analysis methodology for the protection of software. Despite being a prototype, the PoCâ€™s validation with industry experts indicated that several aspects of the proposed risk management process can already be formalized and automated with our existing toolbox and that it can actually assist decision making in industrially relevant settings.}
}

@article{kuang2018enhance,
  title={Enhance virtual-machine-based code obfuscation security through dynamic bytecode scheduling},
  author={Kuang, Kaiyuan and Tang, Zhanyong and Gong, Xiaoqing and Fang, Dingyi and Chen, Xiaojiang and Wang, Zheng},
  journal={Computers \& Security},
  volume={74},
  pages={202--220},
  year={2018},
  publisher={Elsevier}
}

@inproceedings{anckaert,
   author = {Anckaert, Bertrand and Madou, Matias and De Sutter, Bjorn and De Bus, Bruno and De Bosschere, Koen and Preneel, Bart},
   title = {Program obfuscation: a quantitative approach},
   booktitle = {QoP '07: Proc.\ ACM workshop on Quality of protection},
   year = {2007},
   pages = {15--20},
   publisher = {ACM},
   address = {New York, NY, USA},
   url = {https://doi.org/10.1145/1314257.1314263},
   doi = {10.1145/1314257.1314263}
}

@TechReport{D4.06,
  author =       {Mariano Ceccato},
  title =        {{ASPIRE Security Evaluation Methodology}},
  institution =  {{ASPIRE EU FP7 Project}},
  year =         {2016},
  key =       {},
  type =         {Deliverable},
  number =       {D4.06},
  address =   {},
  month =     {},
  note =      {},
  annote =    {}
}


@inproceedings{obf_googleplay,
    author = {Wermke, Dominik and Huaman, Nicolas and Acar, Yasemin and Reaves, Bradley and Traynor, Patrick and Fahl, Sascha},
    title = {A Large Scale Investigation of Obfuscation Use in Google Play},
    year = {2018},
    isbn = {9781450365697},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3274694.3274726},
    doi = {10.1145/3274694.3274726},
    booktitle = {Proc.\ 34th Annual Computer Security Applications Conf.},
    pages = {222--235},
    keywords = {Obfuscation, Android, User Study},
    OPTlocation = {San Juan, PR, USA},
    series = {ACSAC '18}
}

@inproceedings{viticchie2016reactive,
author = {Viticchi\'{e}, Alessio and Basile, Cataldo and Avancini, Andrea and Ceccato, Mariano and Abrath, Bert and Coppens, Bart},
title = {Reactive Attestation: Automatic Detection and Reaction to Software Tampering Attacks},
year = {2016},
isbn = {9781450345767},
publisher = {ACM},
OPTBJORNaddress = {New York, NY, USA},
OPTBJORNurl = {https://doi.org/10.1145/2995306.2995315},
OPTBJORNdoi = {10.1145/2995306.2995315},
abstract = {Anti-tampering is a form of software protection conceived to detect and avoid the execution of tampered programs. Tamper detection assesses programs' integrity with load or execution-time checks. Avoidance reacts to tampered programs by stopping or rendering them unusable. General purpose reactions (such as halting the execution) stand out like a lighthouse in the code and are quite easy to defeat by an attacker. More sophisticated reactions, which degrade the user experience or the quality of service, are less easy to locate and remove but are too tangled with the program's business logic, and are thus difficult to automate by a general purpose protection tool. In the present paper, we propose a novel approach to anti-tampering that (i) fully automatically applies to a target program, (ii) uses Remote Attestation for detection purposes and (iii) adopts a server-side reaction that is difficult to block by an attacker. By means of Client/Server Code Splitting, a crucial part of the program is removed from the client and executed on a remote trusted server in sync with the client. If a client program provides evidences of its integrity, the part moved to the server is executed. Otherwise, a server-side reaction logic may (temporarily or definitely) decide to stop serving it. Therefore, a tampered client application can not continue its execution. We assessed our automatic protection tool on a case study Android application. Experimental results show that all the original and tampered executions are correctly detected, reactions are promptly applied, and execution overhead is on an acceptable level.},
booktitle = {Proc.\ ACM Workshop on Software PROtection},
pages = {73â€“84},
numpages = {12},
keywords = {tamper detection, anti-tampering, remote attestation, software attestation, tamper reaction, code splitting, software security},
OPTlocation = {Vienna, Austria},
series = {SPRO '16}
}

@INPROCEEDINGS{liu2017stochastic, 
    author={H. Liu and C. Sun and Z. Su and Y. Jiang and M. Gu and J. Sun}, 
    booktitle={IEEE/ACM 39th Int'l Conf.\ on Software Engineering (ICSE)}, 
    title={Stochastic Optimization of Program Obfuscation}, 
    year={2017}, 
    volume={}, 
    number={}, 
    pages={221-231}, 
    keywords={Java;Markov processes;Monte Carlo methods;software engineering;stochastic optimization;program obfuscation;software development;source code;binary code;mathematical optimization problem;guided stochastic algorithm;obscurity language model;Markov chain Monte Carlo methods;JavaScript;Optimization;Mathematical model;Reactive power;Markov processes;Google;Lenses;Software;program obfuscation;obscurity language model;markov chain monte carlo methods}, 
    doi={10.1109/ICSE.2017.28}, 
    ISSN={1558-1225}, 
    month={05},
}

@inproceedings{obf_optvialangmods,
    author = {Liu, Han},
    title = {Towards Better Program Obfuscation: Optimization via Language Models},
    year = {2016},
    isbn = {9781450342056},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2889160.2891040},
    doi = {10.1145/2889160.2891040},
    booktitle = {Proc.\ 38th Int'l Conf.\ on Software Engineering Companion},
    pages = {680--682},
    keywords = {MCMC random search, obfuscation, obscurity language model},
    OPTlocation = {Austin, Texas},
    series = {ICSE'16}
}

@inproceedings{2016comparing,
author = {Manikyam, Ramya and McDonald, J. Todd and Mahoney, William R. and Andel, Todd R. and Russ, Samuel H.},
title = {Comparing the Effectiveness of Commercial Obfuscators against MATE Attacks},
year = {2016},
isbn = {9781450348416},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3015135.3015143},
doi = {10.1145/3015135.3015143},
booktitle = {Proc.\ 6th Workshop on Software Security, Protection, and Reverse Engineering},
articleno = {8},
numpages = {11},
keywords = {static analysis, anti-tamper, software protection, malicious reverse engineering, dynamic analysis, obfuscation, cracked programs, man-at-the-end (MATE) attacks, commercial obfuscators},
OPTlocation = {Los Angeles, California, USA},
series = {SSPREW '16}
}



@INPROCEEDINGS{2014another,
  author={Zhuang, Yan and Protsenko, Mykola and Muller, Tilo and Freiling, Felix C.},
  booktitle={2014 25th Int'l Workshop on Database and Expert Systems Applications}, 
  title={An(other) Exercise in Measuring the Strength of Source Code Obfuscation}, 
  year={2014},
  volume={},
  number={},
  pages={313--317},
  doi={10.1109/DEXA.2014.69}
}

@article{2014afamily,
	author = {Ceccato, Mariano and Di Penta, Massimiliano and Falcarin, Paolo and Ricca, Filippo and Torchiano, Marco and Tonella, Paolo},
	journal = {Empirical Software Engineering},
	number = {4},
	pages = {1040--1074},
	title = {A family of experiments to assess the effectiveness and efficiency of source code obfuscation techniques},
	volume = {19},
	year = {2014}
}

@inproceedings{malware_visualcomp,
    title = {Visualizing compiled executables for malware analysis},
    author = {Quist, Daniel A and Liebrock, Lorie M},
    booktitle = {2009 6th Int'l Workshop on Visualization for Cyber Security},
    pages = {27--32},
    year = {2009},
    doi = {10.1109/VIZSEC.2009.5375539},
}

@INPROCEEDINGS{2009assessment,
  author={Mariano Ceccato and Massimiliano Di Penta and Jasvir Nagra and Paolo Falcarin and Filippo Ricca and Marco Torchiano and Paolo Tonella},
  booktitle={IEEE 17th Int'l Conf.\ on Program Comprehension}, 
  title={The effectiveness of source code obfuscation: An experimental assessment}, 
  year={2009},
  month={05},
  pages={178--187},
  doi={10.1109/ICPC.2009.5090041},
  issn={1092-8138},
}

@inproceedings{2008twoardsexperimental,
    author = {Ceccato, Mariano and Di Penta, Massimiliano and Nagra, Jasvir and Falcarin, Paolo and Ricca, Filippo and Torchiano, Marco and Tonella, Paolo},
    title = {Towards Experimental Evaluation of Code Obfuscation Techniques},
    year = {2008},
    month = {10},
    doi = {10.1145/1456362.1456371},
    isbn = {9781605583211},
    booktitle = {Proc.\ 4th ACM Workshop on Quality of Protection},
    publisher = {ACM},
    address = {New York, NY, USA},
    pages = {39--46},
    keywords = {software obfuscation, empirical studies},
    OPTlocation = {Alexandria, Virginia, USA},
    series = {QoP '08},
}

@article{dongleprot_secmeasure,
    author = {Piazzalunga, Ugo and Salvaneschi, Paolo and Balducci, Francesco and Jacomuzzi, Pablo and Moroncelli, Cristiano},
    title = {Security Strength Measurement for Dongle-Protected Software},
    year = {2007},
    month = {12},
    doi = {10.1109/MSP.2007.176},
    publisher = {IEEE Educational Activities Department},
    volume = {5},
    number = {6},
    issn = {1558-4046},
    journal = {IEEE Security \& Privacy},
    pages = {32--40},
    keywords = {hardware, security, hacking, software, phreaking},
}

@Article{binprot_semiautotamp,
    author = {Guillot, Yoann and Gazet, Alexandre},
    title = {Semi-automatic binary protection tampering},
    journal = {Journal in Computer Virology},
    year = {2009},
    month = {05},
    volume = {5},
    number = {2},
    pages = {119--149},
    issn = {1772-9904},
    doi = {10.1007/s11416-009-0118-4},
}

@article{guillot2010automatic,
    title = {Automatic binary deobfuscation},
    author = {Guillot, Yoann and Gazet, Alexandre},
    journal = {Journal in computer virology},
    volume = {6},
    number = {3},
    pages = {261--276},
    year = {2010},
    publisher = {Springer}
}


@book{Flick,
	Address = {London},
	Author = {Uwe Flick},
	Publisher = {Sage},
	Title = {An Introduction to Qualitative Research (4th edition)},
	Year = {2009}
}

@book{Wohlin,
	author = {Wohlin, C. and Runeson, P. and H\"ost, M. and Ohlsson, M.C. and Regnell, B. and Wessl\'en, A.},
	publisher = {Kluwer Academic Publishers},
	title = {Experimentation in Software Engineering},
        edition = {2nd},
	year = {2024}
}

@inproceedings{desclaux2006silver,
  title={Silver Needle in the Skype},
  author={Desclaux, Philippe Biondi Fabrice},
  year={2006},
  booktitle = {Black Hat Europe},
  volume={6}
}

@inproceedings{abrath2016tightly,
  title={Tightly-coupled self-debugging software protection},
  author={Abrath, Bert and Coppens, Bart and Volckaert, Stijn and Wijnant, Joris and De Sutter, Bjorn},
  booktitle={Proc.\ 6th Workshop on Software Security, Protection, and Reverse Engineering},
  pages={1--10},
  year={2016},
  publisher = {ACM},
  address = {New York, NY, USA}
}



@inproceedings{abrath2020resilient,
  title={Resilient self-debugging software protection},
  author={Abrath, Bert and Coppens, Bart and Nevolin, Ilja and De Sutter, Bjorn},
  booktitle={IEEE European Symposium on Security and Privacy Workshops (EuroS\&PW)},
  pages={606--615},
  year={2020},
  organization={IEEE}
}

@article{beginnersantidebugging,
  author = {Miller, Henry},
  journal = {CodeBreakers Journal},
  keywords = {Anti-Anti-Debugging,Anti-Debugging,Linux,Reverse Code Engineering,Software Protection},
  title = {{Beginners Guide to Basic Linux Anti-Anti-Debugging Techniques}},
  year = {2005}
}
@misc{StarCraft2,
  author = {Pellsson},
  title = {{Starcraft 2 Anti-Debugging}},
  url = {https://tinyurl.com/tyxjkeb},
  year = {2010}
}
@inproceedings{nanomites,
  author = {Ferrie, Peter},
  booktitle = {CARO},
  title = {{Anti-Unpacker Tricks}},
  year = {2008}
}

@misc{reAnalyst,
      title={reAnalyst: Scalable Analysis of Reverse Engineering Activities}, 
      author={Tab Zhang and Claire Taylor and Bart Coppens and Waleed Mebane and Christian Collberg and Bjorn De Sutter},
      year={2024},
      eprint={2406.04427},
      archivePrefix={arXiv}
}

@Article{Dagstuhl,
  author =	{Bjorn {De Sutter} and Christian Collberg and Mila Dalla Preda and Brecht Wyseur},
  title =	{{Software Protection Decision Support and Evaluation Methodologies (Dagstuhl Seminar 19331)}},
  pages =	{1--25},
  journal =	{Dagstuhl Reports},
  ISSN =	{2192-5283},
  year =	{2019},
  volume =	{9},
  number =	{8},
  OPTeditor =	{{De Sutter}, Bjorn and Collberg, Christian  and {Dalla Preda}, Mila and Wyseur, Brecht},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2019/11682},
  URN =		{urn:nbn:de:0030-drops-116825},
  doi =		{10.4230/DagRep.9.8.1},
  annote =	{Keywords: Benchmarks, Decision Support Systems, Evaluation Methodology, man-at-the-end attacks, metrics, predictive models, reverse engineering and tampering, software protection}
}

@article{cegar,
author = {Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
title = {Counterexample-guided abstraction refinement for symbolic model checking},
year = {2003},
issue_date = {September 2003},
publisher = {ACM},
address = {New York, NY, USA},
volume = {50},
number = {5},
issn = {0004-5411},
url = {https://doi.org/10.1145/876638.876643},
doi = {10.1145/876638.876643},
abstract = {The state explosion problem remains a major hurdle in applying symbolic model checking to large hardware designs. State space abstraction, having been essential for verifying designs of industrial complexity, is typically a manual process, requiring considerable creativity and insight.In this article, we present an automatic iterative abstraction-refinement methodology that extends symbolic model checking. In our method, the initial abstract model is generated by an automatic analysis of the control structures in the program to be verified. Abstract models may admit erroneous (or "spurious") counterexamples. We devise new symbolic techniques that analyze such counterexamples and refine the abstract model correspondingly. We describe aSMV, a prototype implementation of our methodology in NuSMV. Practical experiments including a large Fujitsu IP core design with about 500 latches and 10000 lines of SMV code confirm the effectiveness of our approach.},
journal = {J. ACM},
month = sep,
pages = {752â€“794},
numpages = {43},
keywords = {Abstraction, hardware verification, symbolic model checking, temporal logic}
}

@inproceedings{chow2003white,
  title={White-box cryptography and an AES implementation},
  author={Chow, Stanley and Eisen, Philip and Johnson, Harold and Van Oorschot, Paul C},
  booktitle={Selected Areas in Cryptography: 9th Annual Int'l Workshop, SAC 2002 St. Johnâ€™s, Newfoundland, Canada, August 15--16, 2002 Revised Papers 9},
  pages={250--270},
  year={2003},
  organization={Springer}
}


@PhdThesis{wyseur,
  author = 	 {Brecht Wyseur},
  title = 	 {White Box Cryptography},
  school = 	 {KU Leuven},
  year = 	 {2009},
  OPTkey = 	 {},
  OPTtype = 	 {},
  OPTaddress = 	 {},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

  
@article{flow_metrics,
  title={Software structure metrics based on information flow},
  author={Henry, Sallie and Kafura, Dennis},
  journal={IEEE Transactions on Software Engineering},
  volume = {SE-7},
  number={5},
  pages={510--518},
  year={1981},
  publisher={IEEE}
}

@InProceedings{2012_making,
author="Giacobazzi, Roberto
and Mastroeni, Isabella",
OPTeditor="Min{\'e}, Antoine
and Schmidt, David",
title="Making Abstract Interpretation Incomplete: Modeling the Potency of Obfuscation",
booktitle="Static Analysis",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="129--145",
abstract="Recent studies on code protection showed that incompleteness, in the abstract interpretation framework, has a key role in understanding program obfuscation. In particular, it is well known that completeness corresponds to exactness of a given analysis for a fixed program semantics, hence incompleteness implies the imprecision of an analysis with respect to the program semantics. In code protection, if the analysis corresponds to attacker capability of understanding a program semantics, then to study incompleteness means to study how to make an attacker harmless. We recently showed that this is possible by transforming the program semantics towards incompleteness, which corresponds to a code obfuscation. In this paper, we show that incompleteness can be induced also by transforming abstract domains. In this way we can associate with each obfuscated program (semantics) the most imprecise, harmless, analysis. We show that, for both the forms of completeness, backward and forward, we can uniquely simplify domains towards incompleteness, while in general it is not possible to uniquely refine domains. Finally, we show some examples of known code protection techniques that can be characterized in the new framework of abstract interpretation incompleteness.",
isbn="978-3-642-33125-1"
}



@InProceedings{fitting_roberto,
author="Giacobazzi, Roberto and Mastroeni, Isabella and Perantoni, Elia",
OPTeditor="Hermenegildo, Manuel V. and Morales, Jos{\'e} F.",
title="How Fitting is Your Abstract Domain?",
booktitle="Static Analysis",
year="2023",
publisher="Springer Nature Switzerland",
address="Cham",
pages="286--309",
abstract="Abstract interpretation offers sound and decidable approximations for undecidable queries related to program behavior. The effectiveness of an abstract domain is entirely reliant on the abstract domain itself, and the worst-case scenario is when the abstract interpreter provides a response of ``don't know``, indicating that anything could happen during runtime. Conversely, a desirable outcome is when the abstract interpreter provides information that exceeds a specified level of precision, resulting in a more precise answer. The concept of completeness relates to the level of precision that is forfeited when performing computations within the abstract domain. Our focus is on the domain's ability to express program behaviour, which we refer to as adequacy. In this paper, we present a domain refinement strategy towards adequacy and a simple sound proof system for adequacy, designed to determine whether an abstract domain is capable of providing satisfactory responses to specified program queries. Notably, this proof system is both language and domain agnostic, and can be readily incorporated to support static program analysis.",
isbn="978-3-031-44245-2"
}

@article{feitelson,
author = {Feitelson, Dror G.},
title = {From Code Complexity Metrics to Program Comprehension},
year = {2023},
issue_date = {May 2023},
publisher = {ACM},
address = {New York, NY, USA},
volume = {66},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/3546576},
doi = {10.1145/3546576},
abstract = {Understanding code depends not only on the code but also on the brain.},
journal = {Commun. ACM},
month = apr,
pages = {52â€“61},
numpages = {10}
}

@article{2024campion,
author = {Campion, Marco and Dalla Preda, Mila and Giacobazzi, Roberto and Urban, Caterina},
title = {Monotonicity and the Precision of Program Analysis},
year = {2024},
issue_date = {January 2024},
publisher = {ACM},
address = {New York, NY, USA},
volume = {8},
number = {POPL},
url = {https://doi.org/10.1145/3632897},
doi = {10.1145/3632897},
abstract = {It is widely known that the precision of a program analyzer is closely related to intensional program properties,  
namely, properties concerning how the program is written.  
This explains, for instance, the interest in code obfuscation techniques, namely, tools  
explicitly designed to degrade the results of program analysis by operating syntactic program transformations.  
Less is known about a possible relation between what the program extensionally computes,  
namely, its input-output relation, and the precision of a program analyzer.  
In this paper we explore this potential connection in an effort to isolate program fragments  
that can be precisely analyzed by abstract interpretation, namely,  
programs for which there exists a complete abstract interpretation.  
In the field of static inference of numeric invariants, this happens for programs,  
or parts of programs, that manifest a monotone (either non-decreasing or non-increasing) behavior.  
We first formalize the notion of program monotonicity with respect to a given input and a set of numerical variables of interest.  
A sound proof system is then introduced with judgments specifying whether a  
program is monotone relatively to a set of variables and a set of inputs.  
The interest in monotonicity is justified because we prove that the family  
of monotone programs admits a complete abstract interpretation over  
a specific class of non-trivial numerical abstractions and inputs.  
This class includes all non-relational abstract domains that refine interval analysis  
(i.e., at least as precise as the intervals abstraction) and that satisfy a topological convexity hypothesis.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {55},
numpages = {34},
keywords = {Abstract Interpretation, Complete-Analyzability, Completeness, Program Analysis, Program Monotonicity}
}

@article{2025roberto,
author = {Giacobazzi, Roberto and Ranzato, Francesco},
title = {The Best of Abstract Interpretations},
year = {2025},
issue_date = {January 2025},
publisher = {ACM},
address = {New York, NY, USA},
volume = {9},
number = {POPL},
url = {https://doi.org/10.1145/3704882},
doi = {10.1145/3704882},
abstract = {},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {46},
numpages = {31},
keywords = {}
}

@article{Campion2022,
author = {Campion, Marco and Dalla Preda, Mila and Giacobazzi, Roberto},
title = {Partial (In)Completeness in abstract interpretation: limiting the imprecision in program analysis},
year = {2022},
issue_date = {January 2022},
publisher = {ACM},
address = {New York, NY, USA},
volume = {6},
number = {POPL},
url = {https://doi.org/10.1145/3498721},
doi = {10.1145/3498721},
abstract = {Imprecision is inherent in any decidable (sound) approximation of undecidable program properties. In abstract interpretation this corresponds to the release of false alarms, e.g., when it is used for program analysis and program verification. As all alarming systems, a program analysis tool is credible when few false alarms are reported. As a consequence, we have to live together with false alarms, but also we need methods to control them. As for all approximation methods, also for abstract interpretation we need to estimate the accumulated imprecision during program analysis. In this paper we introduce a theory for estimating the error propagation in abstract interpretation, and hence in program analysis. We enrich abstract domains with a weakening of a metric distance. This enriched structure keeps coherence between the standard partial order relating approximated objects by their relative precision and the effective error made in this approximation. An abstract interpretation is precise when it is complete. We introduce the notion of partial completeness as a weakening of precision. In partial completeness the abstract interpreter may produce a bounded number of false alarms. We prove the key recursive properties of the class of programs for which an abstract interpreter is partially complete with a given bound of imprecision. Then, we introduce a proof system for estimating an upper bound of the error accumulated by the abstract interpreter during program analysis. Our framework is general enough to be instantiated to most known metrics for abstract domains.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {59},
numpages = {31},
keywords = {Abstract Domain, Abstract Interpretation, Partial Completeness, Program Analysis}
}

@inproceedings{Roberto2022,
author = {Giacobazzi, Roberto and Mastroeni, Isabella},
title = {Property-Driven Code Obfuscations Reinterpreting Jones-Optimality in Abstract Interpretation},
year = {2022},
isbn = {978-3-031-22307-5},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-031-22308-2_12},
doi = {10.1007/978-3-031-22308-2_12},
abstract = {Jones-optimality determines whether a specializer improves program performances. Reinterpreting this concept in terms of the precision of an abstract interpreter means to determine whether specializing a source program is able to improve the precision of a given static analysis. In the opposite direction, a specializer failing optimality (disoptimal) would decrease the precision of the analysis when applied to the specialized code. In this paper, we exploit this reinterpretation of Jones-optimality relatively to the precision of an abstract interpreter with the aim of systematically deriving obfuscated code. In line with the idea behind Futamuraâ€™s projections, we factorize the construction of the obfuscated code by separating specialization and interpretation. An interpreter specializer is then systematically made disoptimal by means of language transduction. The result is a language agnostic code obfuscator which is able to foil any given static analyzer.},
booktitle = {Static Analysis: 29th Int'l Symposium, SAS 2022, Auckland, New Zealand, December 5â€“7, 2022, Proceedings},
pages = {247â€“271},
numpages = {25},
keywords = {Jones-optimality, Program interpretation, Code obfuscation, Abstract interpretation},
OPTlocation = {Auckland, New Zealand}
}

@InProceedings{DP2013, 
author="Dalla Preda, Mila
and Mastroeni, Isabella
and Giacobazzi, Roberto",
OPTeditor="G{\k{a}}sieniec, Leszek
and Wolter, Frank",
title="A Formal Framework for Property-Driven Obfuscation Strategies",
booktitle="Fundamentals of Computation Theory",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="133--144",
abstract="We study the existence and the characterization of function transformers that minimally or maximally modify a function in order to reveal or conceal a certain property. Based on this general formal framework we develop a strategy for the design of the maximal obfuscating transformation that conceals a given property while revealing the desired observational behaviour.",
isbn="978-3-642-40164-0"
}


@book{collbergbook,
  title={Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection: Obfuscation, Watermarking, and Tamperproofing for Software Protection},
  author={Nagra, Jasvir and Collberg, Christian},
  year={2009},
  publisher={Pearson Education}
}

@book{hollander2013nonparametric,
  title={Nonparametric statistical methods},
  author={Hollander, Myles and Wolfe, Douglas A and Chicken, Eric},
  year={2013},
  publisher={John Wiley \& Sons}
}

@book{geisser2006modes,
  title={Modes of parametric statistical inference},
  author={Geisser, Seymour and Johnson, Wesley O},
  year={2006},
  publisher={John Wiley \& Sons}
}

@inproceedings{rnc,
  title={Assessment of data obfuscation with residue number coding},
  author={Demissie, Biniam Fisseha and Ceccato, Mariano and Tiella, Roberto},
  booktitle={IEEE/ACM 1st Int'l Workshop on Software Protection},
  pages={38--44},
  year={2015},
  organization={IEEE}
}

@incollection{strom2018mitre,
  title={Mitre att\&ck: Design and philosophy},
  author={Strom, Blake E and Applebaum, Andy and Miller, Doug P and Nickels, Kathryn C and Pennington, Adam G and Thomas, Cody B},
  booktitle={Technical report},
  year={2018},
  publisher={The MITRE Corporation}
}

@article{jens2022flexible,
  title={Flexible software protection},
  author={Van den Broeck, Jens and Coppens, Bart and De Sutter, Bjorn},
  journal={Computers \& Security},
  volume={116},
  pages={102636},
  year={2022},
  publisher={Elsevier}
}

@Book{Levine,
  author = 	 {Levine, J.R.},
  ALTeditor = 	 {},
  title = 	 {Linkers \& Loaders},
  publisher = 	 {Morgan Kaufmann Publishers},
  year = 	 {2000},
  OPTkey = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  OPTaddress = 	 {},
  OPTedition = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@Article{statistics,
  author = 	 {David Martin Powers},
  title = 	 {From precision, recall and {F-measure} to {ROC}, informedness, markedness and correlation},
  journal = 	 {Int. J. Mach. Learn. Technol.},
  year = 	 {2011},
  OPTkey = 	 {},
  volume = 	 {2},
  number = 	 {1},
  pages = 	 {37--63},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@INPROCEEDINGS{disassembler_sok,
  author={Pang, Chengbin and Yu, Ruotong and Chen, Yaohui and Koskinen, Eric and Portokalidis, Georgios and Mao, Bing and Xu, Jun},
  booktitle={IEEE Symposium on Security and Privacy (SP)},
  title={SoK: All You Ever Wanted to Know About x86/x64 Binary Disassembly But Were Afraid to Ask},
  year={2021},
  volume={},
  number={},
  pages={833-851},
  doi={10.1109/SP40001.2021.00012}}



@InProceedings{blinding,
author="Kocher, Paul C.",
OPTeditor="Koblitz, Neal",
title="Timing Attacks on Implementations of {Diffie-Hellman}, {RSA}, {DSS}, and Other Systems",
booktitle="Advances in Cryptology --- {CRYPTO '96}",
year="1996",
OPTpublisher="Springer Berlin Heidelberg",
OPTaddress="Berlin, Heidelberg",
pages="104--113",
abstract="By carefully measuring the amount of time required to perform private key operations, attackers may be able to find fixed Diffie-Hellman exponents, factor RSA keys, and break other cryptosystems. Against a vulnerable system, the attack is computationally inexpensive and often requires only known ciphertext. Actual systems are potentially at risk, including cryptographic tokens, network-based cryptosystems, and other applications where attackers can make reasonably accurate timing measurements. Techniques for preventing the attack for RSA and Diffie-Hellman are presented. Some cryptosystems will need to be revised to protect against the attack, and new protocols and algorithms may need to incorporate measures to prevent timing attacks.",
isbn="978-3-540-68697-2"
}

@inproceedings{barf,
  title={{BARF}: a multiplatform open source binary analysis and reverse engineering framework},
  author={Heitman, Christian and Arce, Iv{\'a}n},
  booktitle={XX Congreso Argentino de Ciencias de la Computaci{\'o}n (Buenos Aires, 2014)},
  year={2014},
  note = {\url{https://github.com/programa-stic/barf-project}}

}

@inproceedings{argon,
    title = {Argon: A Toolbase for Evaluating Software Protection Techniques Against Symbolic Execution Attacks},
    author = {Adhikari, Deepak and McDonald, J. Todd and Andel, Todd R. and Richardson, Joseph D.},
    year = {2022},
    month = {03},
    pages = {743--750},
    doi = {10.1109/SoutheastCon48659.2022.9764028},
    isbn = {978-1-6654-0652-9},
    issn = {1558-058X},
    OPTlocation = {Mobile, AL, USA},
    publisher = {IEEE},
    booktitle={Proc.\ SoutheastCon 2022}
}

@InProceedings{mba,
    author = {Zhou, Yongxin and Main, Alec and Gu, Yuan X. and Johnson, Harold},
    title = {Information Hiding in Software with Mixed Boolean-Arithmetic Transforms},
    year = {2007},
    doi = {10.1007/978-3-540-77535-5_5},
    isbn = {978-3-540-77535-5},
    booktitle = {Information Security Applications},
    volume = {4867},
    OPTeditor = {Kim, Sehun and Yung, Moti and Lee, Hyung-Woo},
    OPTpublisher = {Springer Berlin Heidelberg},
    pages = {61--75},
}

@inproceedings{mba-blast,
    author = {Binbin Liu and Junfu Shen and Jiang Ming and Qilong Zheng and Jing Li and Dongpeng Xu},
    title = {{MBA-Blast}: Unveiling and Simplifying Mixed {Boolean-Arithmetic} Obfuscation},
    year = {2021},
    month = {08},
    OPTurl = {https://www.usenix.org/Conf./usenixsecurity21/presentation/liu-binbin},
    isbn = {978-1-939133-24-3},
    booktitle = {30th USENIX Security Symposium},
    pages = {1701--1718},
    OPTpublisher = {USENIX Association},
}

@InProceedings{BAP,
    author = {Brumley, David and Jager, Ivan and Avgerinos, Thanassis and Schwartz, Edward J.},
    OPTeditor = {Gopalakrishnan, Ganesh and Qadeer, Shaz},
    title = {BAP: A Binary Analysis Platform},
    booktitle = {Computer Aided Verification},
    year = {2011},
    OPTpublisher = {Springer Berlin Heidelberg},
    OPTaddress = {Berlin, Heidelberg},
    pages = {463--469},
    isbn = {978-3-642-22110-1}
}

@InProceedings{jakstab,
author="Kinder, Johannes
and Veith, Helmut",
OPTeditor="Gupta, Aarti and Malik, Sharad",
title="Jakstab: A Static Analysis Platform for Binaries ",
booktitle="Computer Aided Verification",
year="2008",
OPTpublisher="Springer Berlin Heidelberg",
OPTaddress="Berlin, Heidelberg",
pages="423--427",
abstract="For processing compiled code, model checkers require accurate model extraction from binaries. We present our fully configurable binary analysis platform Jakstab, which resolves indirect branches by multiple rounds of disassembly interleaved with dataflow analysis. We demonstrate that this iterative disassembling strategy achieves better results than the state-of-the-art tool IDA Pro.",
isbn="978-3-540-70545-1"
}



@InProceedings{CodeSurfer,
author="Balakrishnan, Gogul
and Gruian, Radu
and Reps, Thomas
and Teitelbaum, Tim",
OPTeditor="Bodik, Rastislav",
title="CodeSurfer/x86---A Platform for Analyzing x86 Executables",
booktitle="Compiler Construction",
year="2005",
OPTpublisher="Springer Berlin Heidelberg",
OPTaddress="Berlin, Heidelberg",
pages="250--254",
abstract="CodeSurfer/x86 is a prototype system for analyzing x86 executables. It uses a static-analysis algorithm called value-set analysis (VSA) to recover intermediate representations that are similar to those that a compiler creates for a program written in a high-level language. A major challenge in building an analysis tool for executables is in providing useful information about operations involving memory. This is difficult when symbol-table and debugging information is absent or untrusted. CodeSurfer/x86 overcomes these challenges to provide an analyst with a powerful and flexible platform for investig`ating the properties and behaviors of potentially malicious code (such as COTS components, plugins, mobile code, worms, Trojans, and virus-infected code) using (i) CodeSurfer/x86's GUI, (ii) CodeSurfer/x86's scripting language, which provides access to all of the intermediate representations that CodeSurfer/x86 builds for the executable, and (iii) GrammaTech's Path Inspector, which is a tool that uses a sophisticated pattern-matching engine to answer questions about the flow of execution in a program.",
isbn="978-3-540-31985-6"
}


@misc{msynth,
    author = {Blazytko, Tim and Schloegel, Moritz},
    title = {msynth},
    OPTyear = {2023},
    note = {\url{https://github.com/mrphrazer/msynth/}}
}

@techreport{CFF,
    author = {Wang, Chenxi and Hill, Jonathan and Knight, John and Davidson, Jack},
    title = {Software Tamper Resistance: Obstructing Static Analysis of Programs},
    year = {2000},
    month = {10},
    doi = {10.18130/V36T9V},
    institution = {University of Virginia},
    number = {CS-2000-12},
}


@inproceedings{angr,
  title={{SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis}},
  author={Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and
          Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and
          Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={IEEE Symposium on Security and Privacy},
  year={2016}
}

@inproceedings{ReMind,
author = {Alessandro Mantovani and Simone Aonzo and Yanick Fratantonio and Davide Balzarotti},
title = {{RE-Mind}: a First Look Inside the Mind of a Reverse Engineer},
booktitle = {31st USENIX Security Symposium},
year = {2022},
isbn = {978-1-939133-31-1},
OPTaddress = {Boston, MA},
pages = {2727--2745},
OPTurl = {https://www.usenix.org/Conf./usenixsecurity22/presentation/mantovani},
OPTpublisher = {USENIX Association},
month = aug,
}


@misc{pavlov20227Zip, 
    author = {Pavlov, Igor},
    title = {7-Zip},
    year = {2023},
    note = {\url{https://www.7-zip.org}}
}

@misc{gnupg2022GPG,
    author = {The GnuPG Project},
    title = {The GNU Privacy Guard},
    year = {2023},
    note = {\url{https://gnupg.org}}
}

@misc{neo4j2022Neo4j,
    author = {{Neo4j, Inc.}},
    title = {Neo4j Graph Data Platform},
    year = {2023},
    note = {\url{https://neo4j.com}}
}

@misc{neo4j2022WhatIsAGraphDatabase,
    author = {{Neo4j, Inc.}},
    title = {What is a Graph Database?},
    year = {2023},
    note = {\url{https://neo4j.com/developer/graph-database}}
}

@misc{clang2022ClangASTMatchers,
    author = {{The Clang Team}},
    title = {Matching the {Clang} {AST}},
    year = {2023},
    note = {\url{https://clang.llvm.org/docs/LibASTMatchers.html}}
}

@misc{intel2022SDE,
    author = {{Intel Corporation}},
    title = {{Intel Software Development Emulator (Intel SDE)}},
    year = {2023},
    note = {\url{https://www.intel.com/content/www/us/en/developer/articles/tool/software-development-emulator.html}}
}

@misc{intel2022Pin,
    author = {{Intel Corporation}},
    title = {{Pin - A Dynamic Binary Instrumentation Tool}},
    year = {2023},
    note = {\url{https://www.intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html}}
}

@article{luk2005pin,
  title={Pin: building customized program analysis tools with dynamic instrumentation},
  author={Luk, Chi-Keung and Cohn, Robert and Muth, Robert and Patil, Harish and Klauser, Artur and Lowney, Geoff and Wallace, Steven and Reddi, Vijay Janapa and Hazelwood, Kim},
  journal={Acm sigplan notices},
  volume={40},
  number={6},
  pages={190--200},
  year={2005},
  publisher={ACM New York, NY, USA}
}

@article{shepherd2007tiny,
  title={The tiny encryption algorithm},
  author={Shepherd, Simon J},
  journal={Cryptologia},
  volume={31},
  number={3},
  pages={233--245},
  year={2007},
  publisher={Taylor \& Francis}
}

@article{halderman2009lest,
  title={Lest we remember: cold-boot attacks on encryption keys},
  author={Halderman, J Alex and Schoen, Seth D and Heninger, Nadia and Clarkson, William and Paul, William and Calandrino, Joseph A and Feldman, Ariel J and Appelbaum, Jacob and Felten, Edward W},
  journal={Communications of the ACM},
  volume={52},
  number={5},
  pages={91--98},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@article{maartmann2009persistence,
  title={The persistence of memory: Forensic identification and extraction of cryptographic keys},
  author={Maartmann-Moe, Carsten and Thorkildsen, Steffen E and {\AA}rnes, Andr{\'e}},
  journal={digital investigation},
  volume={6},
  pages={S132--S140},
  year={2009},
  publisher={Elsevier}
}

@Inbook{RC4,
author="Fontaine, Caroline",
editor="van Tilborg, Henk C. A.
and Jajodia, Sushil",
title="RC4",
bookTitle="Encyclopedia of Cryptography and Security",
year="2011",
publisher="Springer US",
address="Boston, MA",
pages="1031--1032",
isbn="978-1-4419-5906-5",
doi="10.1007/978-1-4419-5906-5_365",
url="https://doi.org/10.1007/978-1-4419-5906-5_365"
}

@techreport{kim2017aria,
  title={The ARIA Algorithm and Its Use with the Secure Real-Time Transport Protocol (SRTP)},
  author={Kim, W and Lee, J and Park, J and Kwon, D and Kim, D},
  year={2017}
}

@article{li2012cipherxray,
  title={CipherXRay: Exposing cryptographic operations and transient secrets from monitored binary execution},
  author={Li, Xin and Wang, Xinyuan and Chang, Wentao},
  journal={IEEE transactions on dependable and secure computing},
  volume={11},
  number={2},
  pages={101--114},
  year={2012},
  publisher={IEEE}
}

@inproceedings{calvet2012aligot,
  title={Aligot: Cryptographic function identification in obfuscated binary programs},
  author={Calvet, Joan and Fernandez, Jos{\'e} M and Marion, Jean-Yves},
  booktitle={Proc.\ ACM Conf.\ on Computer and communications security},
  pages={169--182},
  year={2012}
}

@article{dworkin2015sha,
  title={SHA-3 standard: Permutation-based hash and extendable-output functions},
  author={Dworkin, Morris J},
  year={2015},
  doi={10.6028/NIST.FIPS.202}
}

@inproceedings{Lestringant15,
author = {Lestringant, Pierre and Guih\'{e}ry, Fr\'{e}d\'{e}ric and Fouque, Pierre-Alain},
title = {Automated Identification of Cryptographic Primitives in Binary Code with Data Flow Graph Isomorphism},
year = {2015},
isbn = {9781450332453},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2714576.2714639},
doi = {10.1145/2714576.2714639},
abstract = {Softwares use cryptographic algorithms to secure their communications and to protect their internal data. However the algorithm choice, its implementation design and the generation methods of its input parameters may have dramatic consequences on the security of the data it was initially supposed to protect. Therefore to assess the security of a binary program involving cryptography, analysts need to check that none of these points will cause a system vulnerability. It implies, as a first step, to precisely identify and locate the cryptographic code in the binary program. Since binary analysis is a difficult and cumbersome task, it is interesting to devise a method to automatically retrieve cryptographic primitives and their parameters.In this paper, we present a novel approach to automatically identify symmetric cryptographic algorithms and their parameters inside binary code. Our approach is static and based on DFG isomorphism. To cope with binary codes produced from different source codes and by different compilers and options, the DFG is normalized using code rewrite mechanisms. Our approach differs from previous works, that either use statistical criteria leading to imprecise results, or rely on heavy dynamic instrumentation. To validate our approach, we present experimental results on a set of synthetic samples including several cryptographic algorithms, binary code of well-known cryptographic libraries and reference source implementation compiled using different compilers and options.},
booktitle = {Proc.\ 10th ACM Symposium on Information, Computer and Communications Security},
pages = {203â€“214},
numpages = {12},
keywords = {static binary analysis, reverse engineering, cryptography},
OPTlocation = {Singapore, Republic of Singapore},
series = {ASIA CCS '15}
}





@MastersThesis{hosfelt,
  author = 	 {Diane Duros Hosfelt},
  title = 	 {Automated detection and classification of cryptographic algorithms in binary programs through machine learning},
  school = 	 {Johns Hopkins University},
  year = 	 {},
  OPTkey = 	 {2015},
  OPTtype = 	 {},
  OPTaddress = 	 {},
  month = 	 {3},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@INPROCEEDINGS{yadegari2015GenericApproachAutomatic,
  author={Yadegari, Babak and Johannesmeyer, Brian and Whitely, Ben and Debray, Saumya},
  booktitle={IEEE Symposium on Security and Privacy},
  title={A Generic Approach to Automatic Deobfuscation of Executable Code},
  year={2015},
  volume={},
  number={},
  pages={674--691},
  doi={10.1109/SP.2015.47}}


@inproceedings{yadegari2014BitLevelTaintAnalysis,
  title = {Bit-{{Level Taint Analysis}}},
  booktitle = {2014 {{IEEE}} 14th {{Int'l Working Conf.}} on {{Source Code Analysis}} and {{Manipulation}}},
  author = {Yadegari, Babak and Debray, Saumya},
  year = {2014},
  date = {2014-09},
  pages = {255--264},
  publisher = {{IEEE}},
  OPTlocation = {{Victoria, BC, Canada}},
  doi = {10.1109/SCAM.2014.43},
  url = {http://ieeexplore.ieee.org/document/6975659/},
  urldate = {2021-08-27},
  eventtitle = {2014 {{IEEE}} 14th {{Int'l Working Conf.}} on {{Source Code Analysis}} and {{Manipulation}} ({{SCAM}})},
  isbn = {978-1-4799-6148-1},
  langid = {english}
}

@misc{fsf2022GDB,
    author = {{Free Software Foundation}},
    title = {{GDB}: The {GNU} Project Debugger},
    year = {2023},
    note = {\url{https://www.sourceware.org/gdb}}
}

@misc{lldb2022LLDB,
    author = {{The LLDB Team}},
    title = {The {LLDB} Debugger},
    year = {2023},
    note = {\url{https://lldb.llvm.org}}
}

@misc{hexrays2022IDAPro,
    author = {{Hex-Rays}},
    title = {{IDA Pro}: A powerful disassembler and a versatile debugger},
    year = {2023},
    note = {\url{https://hex-rays.com/ida-pro}}
}

@misc{hexrays2023decompiler,
    author = {{Hex-Rays}},
    title = {{Hex-Rays} Decompiler},
    year = {2023},
    note = {\url{https://hex-rays.com/decompiler/}}
}


@misc{hexrays2022FLIRT,
    author = {{Hex-Rays}},
    title = {{F.L.I.R.T}: Fast Library Identification and Recognition Technology},
    year = {2023},
    note = {\url{https://hex-rays.com/products/ida/tech/flirt}}
}

@misc{cheatengine,
    key = {cheatengine},
    title = {{Cheat Engine}},
    year = {2023},
    note = {\url{https://www.cheatengine.org/}}
}

@inproceedings{packers,
author = {Hai, Nguyen Minh and Ogawa, Mizuhito and Tho, Quan Thanh},
title = {Packer Identification Based on Metadata Signature},
year = {2017},
isbn = {9781450353878},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3151137.3160687},
doi = {10.1145/3151137.3160687},
abstract = {Malware applies lots of obfuscation techniques, which are often automatically generated by the use of packers. This paper presents a packer identification of packed code based on metadata signature, which is a frequency vector of occurrences of classified obfuscation techniques. First, BE-PUM (Binary Emulator for PUshdown Model generation) disassembles and generates the control flow graph of malware in an on-the-fly manner, using concolic testing. Second, obfuscation techniques in the generated control flow graph are detected based on the formal criteria of each obfuscation technique. Last, the used packer is identified with the chisquare test on the metadata signature of a packed code. The precision is evaluated with experiments on 12814 malware from VX heaven and Virusshare, in which 608 examples are detected inconsistent with commercial packer identification at PEiD, CFF Explore, and VirusTotal. We manually confirm that, except for 1 example, BE-PUM is correct. The only case that BE-PUM misunderstands is between MEW and FSG, which are quite similar packers and current BE-PUM extension does not support MEW.},
booktitle = {Proc.\ 7th Software Security, Protection, and Reverse Engineering / Software Security and Protection Workshop},
articleno = {5},
numpages = {11},
keywords = {malware, binary code analysis, packer, concolic testing},
OPTlocation = {Orlando, FL, USA},
series = {SSPREW-7}
}

@InProceedings{zobernig19,
  author       = {Zobernig, Lukas and Galbraith, Steven and Russello, Giovanni},
  booktitle    = {18th IEEE Int'l Conf.\ On Trust, Security And Privacy In Computing And Communications},
  title        = {When are {O}paque {P}redicates {U}seful?},
  year         = {2019},
  OPTorganization = {IEEE},
  pages        = {168--175},
}

@inproceedings{virtualization,
    author = {Kochberger, Patrick and Schrittwieser, Sebastian and Schweighofer, Stefan and Kieseberg, Peter and Weippl, Edgar},
    title = {SoK: Automatic Deobfuscation of Virtualization-Protected Applications},
    year = {2021},
    month = {08},
    doi = {10.1145/3465481.3465772},
    isbn = {9781450390514},
    publisher = {ACM},
    address = {New York, NY, USA},
    booktitle = {The 16th Int'l Conf.\ on Availability, Reliability and Security},
    articleno = {6},
    keywords = {Virtualiziation-based obfuscation, Application security, Deobfuscation},
    OPTOPTlocation = {Vienna, Austria},
    OPTseries = {ARES 2021},
}

@article{miasm2012,
  title = {Miasm: Framework de reverse engineering},
  author = {Desclaux, Fabrice},
  journal = {Actes du SSTIC. SSTIC},
  year = {2012},
  note = {\url{https://github.com/cea-sec/miasm}}
}

@phdthesis{ahmadvand,
	author = {Ahmadvand, Mohsen},
	title = {Strengthened, Composable, and Quantifiable Software Integrity Protection},
	year = {2021},
	school = {Technische UniversitÃ¤t MÃ¼nchen},
	pages = {250},
	language = {en},
	abstract = {Man-At-The-End (MATE) attackers are almighty adversaries. Protecting programs' integrity is amongst the challenging problems in the context of MATE attackers. This thesis proposes new defenses and combinations (compositions) of protections to improve security and applicability. We conduct performance and security evaluations using a data set of real-world programs to evaluate our protections. Finally, we propose metrics to estimate the resilience of protections against state-of-the-art attacks.},
	keywords = {},
	note = {},
}
@techreport{collberg1997taxonomy,
    author = {Collberg, Christian and Thomborson, C. and Low, Douglas},
    title = {A Taxonomy of Obfuscating Transformations},
    institution = {University of Auckland},
    year = {1997},
    month = {07},
    number = {148},
    url = {https://researchspace.auckland.ac.nz/handle/2292/3491},
}

@inproceedings{collberg1998manufacturing,
    author = {Collberg, Christian and Thomborson, Clark and Low, Douglas},
    title = {Manufacturing Cheap, Resilient, and Stealthy Opaque Constructs},
    year = {1998},
    doi = {10.1145/268946.268962},
    isbn = {0897919793},
    publisher = {ACM},
    address = {New York, NY, USA},
    booktitle = {Proc.\ 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
    pages = {184--196},
    OPTlocation = {San Diego, California, USA},
    series = {POPL '98},
}




@Article{mila24,
  author = 	 {Vittoria Cozza and Mila {Dalla Preda} and Ruggero Lanotte and Marco Lucchesea and Massimo Merroa and Nicola Zannone},
  title = 	 {Obfuscation strategies for industrial control systems},
  journal = 	 {Int'l Journal of Critical Infrastructure Protection},
  year = 	 {2024},
  OPTkey = 	 {},
  volume = 	 {47},
  OPTnumber = 	 {},
  pages = {100717},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {},
  doi = {https://doi.org/10.1016/j.ijcip.2024.100717},
  url = {https://www.sciencedirect.com/science/article/pii/S1874548224000581},
}

@book{cousot2021principles,
  title={Principles of abstract interpretation},
  author={Cousot, Patrick},
  year={2021},
  publisher={MIT Press}
}


@inproceedings{cousot1977abstract,
  title={Abstract interpretation: a unified lattice model for static analysis of programs by construction or approximation of fixpoints},
  author={Cousot, Patrick and Cousot, Radhia},
  booktitle={Proc.\ 4th ACM SIGACT-SIGPLAN symposium on Principles of programming languages},
  pages={238--252},
  year={1977},
  publisher = {ACM},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/512950.512973},
  doi = {10.1145/512950.512973}
}

@inproceedings{2008hiding,
author = {Giacobazzi, Roberto},
title = {Hiding Information in Completeness Holes: New Perspectives in Code Obfuscation and Watermarking},
year = {2008},
isbn = {9780769534374},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SEFM.2008.41},
doi = {10.1109/SEFM.2008.41},
abstract = {In this paper we show how abstract interpretation, and more specifically completeness, provides anadequate model for reasoning about code obfuscation and watermarking. The idea is that makinga program obscure, or equivalently hiding information in it, corresponds to force an interpreter (the attacker) to become incomplete in its attempts to extractinformation about the program. Here abstract interpretation provides the model of the attacker (malicious host) and abstract interpretation transformers provide driving methods for understanding and designing new obfuscation and watermarking strategies: Obfuscation corresponds to make the malicious host incomplete and watermarking corresponds to hide secrets where incomplete attackers cannot extract them unless some secret key is given.},
booktitle = {Proc.\ Sixth IEEE Int'l Conf.\ on Software Engineering and Formal Methods},
pages = {7â€“18},
numpages = {12},
keywords = {Code obfuscation, software watermarking, semantics, abstract interpretation, static analysis},
series = {SEFM '08}
}

@ARTICLE{code_metrics,
  author={Curtis, B. and Sheppard, S.B. and Milliman, P. and Borst, M.A. and Love, T.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Measuring the Psychological Complexity of Software Maintenance Tasks with the Halstead and McCabe Metrics}, 
  year={1979},
  volume={SE-5},
  number={2},
  pages={96-104},
  keywords={Software measurement;Psychology;Software maintenance;Programming profession;Companies;Length measurement;Resource management;Software performance;Documentation;Human factors;Commenting;complexity metrics;documentation;Halstead's E;human factors in software engineering;McCabe's u(G);mnemonic variable names;modem programming practices modifica-tions;software science;structured programming},
  doi={10.1109/TSE.1979.234165}
  }

@book{halstead,
  title={Elements of Software Science (Operating and programming systems series)},
  author={Halstead, Maurice H},
  year={1977},
  publisher={Elsevier Science Inc.}
}
  

@InProceedings{oviedo80,
  author = 	 {E.I. Oviedo},
  title = 	 {Control Flow, Data Flow, and Program Complexity},
  OPTcrossref =  {},
  OPTkey = 	 {},
  booktitle = {Proc.\ {IEEE COMPSAC}},
  year = 	 {1980},
  OPTeditor = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTseries = 	 {},
  pages = 	 {146--152},
  OPTmonth = 	 {},
  OPTaddress = 	 {},
  OPTorganization = {},
  OPTpublisher = {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@inproceedings{reganoL2P,
	title={Towards Optimally Hiding Protected Assets in Software Applications},
	author={Regano, Leonardo and Canavese, Daniele and Basile, Cataldo and Lioy, Antonio},
	booktitle={Proc.\ Int'l Conf.\ on Software Quality, Reliability and Security},
	pages={374--385},
	year={2017},
	OPTBJORNorganization={IEEE},
    publisher = {IEEE Computer Society},
    OPTBJORNaddress = {Los Alamitos, CA, USA},
}

@article{coppens2013feedback,
  title={Feedback-driven binary code diversification},
  author={Coppens, Bart and De Sutter, Bjorn and Maebe, Jonas},
  journal={ACM Transactions on Architecture and Code Optimization (TACO)},
  volume={9},
  number={4},
  pages={1--26},
  year={2013},
  publisher={ACM New York, NY, USA}
}

@inbook{oviedo,
author = {Oviedo, Enrique I.},
title = {Control flow, data flow and program complexity},
year = {1993},
isbn = {0077074106},
publisher = {McGraw-Hill, Inc.},
address = {USA},
booktitle = {Software Engineering Metrics I: Measures and Validations},
pages = {52â€“65},
numpages = {14}
}

@article{munson1993,
  title={Measurement of data structure complexity},
  author={Munson, John C and Kohshgoftaar, Taghi M},
  journal={Journal of Systems and Software},
  volume={20},
  number={3},
  pages={217--225},
  year={1993},
  publisher={Elsevier}
}

@article{harrison1981,
  title={A complexity measure based on nesting level},
  author={Harrison, Warren A and Magel, Kenneth I},
  journal={ACM Sigplan Notices},
  volume={16},
  number={3},
  pages={63--74},
  year={1981},
  publisher={ACM New York, NY, USA}
}

@article{mccabe1976,
  title={A complexity measure},
  author={McCabe, Thomas J},
  journal={IEEE Transactions on software Engineering},
  number={4},
  pages={308--320},
  year={1976},
  publisher={IEEE}
}

@article{emse2019,
  author       = {Ceccato, Mariano and Tonella, Paolo and Basile, Cataldo and Falcarin, Paolo and Torchiano, Marco and Coppens, Bart and De Sutter, Bjorn},
  issn         = {1382-3256},
  journal      = {Empirical Software Engineering},
  language     = {eng},
  number       = {1},
  pages        = {240--286},
  OPTpublisher    = {Springer Nature},
  title        = {Understanding the behaviour of hackers while performing attack tasks in a professional setting and in a public challenge},
  OPTurl          = {http://dx.doi.org/10.1007/s10664-018-9625-6},
  volume       = {24},
  year         = {2019},
}

@article{jens21,
    author = {Van den Broeck, Jens and Coppens, Bart and De Sutter, Bjorn},
    title = {Obfuscated integration of software protections},
    year = {2021},
    month = {02},
    doi = {10.1007/s10207-020-00494-8},
    journal = {Int'l Journal of Information Security},
    pages = {73--101},
    volume = {20},
}

@misc{vector352022BinaryNinja,
    author = {{Vector 35}},
    title = {{Binary Ninja}},
    year = {2023},
    note = {\url{https://binary.ninja/}}
}

@misc{nsa2022Ghidra,
    author = {{National Security Agency}},
    title = {{Ghidra}},
    year = {2023},
    note = {\url{https://ghidra-sre.org}}
}

@inproceedings{2016_new_negative_results_on_differing_inputs_obfuscation,
  doi = {10.1007/978-3-662-49896-5},
  url = {https://doi.org/10.1007/F978-3-662-49896-5},
  title={New negative results on differing-inputs obfuscation},
  author={Bellare, Mihir and Stepanovs, Igors and Waters, Brent},
  booktitle={Advances in Cryptology--EUROCRYPT 2016: 35th Annual Int'l Conf.\ on the Theory and Applications of Cryptographic Techniques, Vienna, Austria, May 8-12, 2016, Proceedings, Part II 35},
  address="Berlin, Heidelberg",
  pages={792--821},
  year={2016},
  publisher = {Springer Berlin Heidelberg},
  editor = {Marc Fischlin and Jean-S{\'{e}}bastien Coron},
} 

@InProceedings{2004_positive_results_and_techniques_for_obfuscation,
    author = {Lynn, Benjamin and Prabhakaran, Manoj and Sahai, Amit},
    title = {Positive Results and Techniques for Obfuscation},
    year = {2004},
    doi = {10.1007/978-3-540-24676-3_2},
    isbn = {978-3-540-24676-3},
    booktitle = {Advances in Cryptology - EUROCRYPT 2004},
    volume = {3027},
    editor = {Cachin, Christian and Camenisch, Jan L.},
    publisher = {Springer Berlin Heidelberg},
    pages = {20--39},
}

@misc{radare2022Radare2,
    author = {{Radare Developers}},
    title = {{radare}: Libre and Portable Reverse Engineering Framework},
    year = {2023},
    note = {\url{https://rada.re/n/radare2.html}}
}

@misc{zynamics2022BinDiff,
    author = {{Zynamics}},
    title = {{BinDiff}},
    year = {2023},
    note = {\url{https://www.zynamics.com/bindiff.html}}
}

@misc{virustotal2022YARA,
    author = {{VirusTotal}},
    title = {{YARA}},
    year = {2023},
    note = {\url{https://github.com/VirusTotal/yara}}
}




@Misc{rizin,
  key = 	 {rizin},
  OPTauthor = 	 {},
  title = 	 {rizin - Free and Open Source Reverse Engineering Framework},
  OPThowpublished = {},
  OPTmonth = 	 {},
  year = 	 {2023},
  note = 	 {\url{https://rizin.re/}},
  OPTannote = 	 {}
}

@misc{quosec2022Grap,
    author = {{QuoSec GmbH}},
    title = {{grap}: Define and match graph patterns within binaries},
    year = {2023},
    note = {\url{https://github.com/QuoSecGmbH/grap}}
}

@misc{coseinc2022Capstone,
    author = {{COSEINC}},
    title = {{capstone}: The Ultimate Disassembly Framework},
    year = {2023},
    note = {\url{https://www.capstone-engine.org}}
}

@misc{tigress2023,
    author = {{Christian Collberg}},
    title = {The {Tigress} {C} Obfuscator},
    year = {2023},
    note = {\url{https://tigress.wtf/}}
}

@article{ullmann_isomorph,
author = {Ullmann, J. R.},
title = {An Algorithm for Subgraph Isomorphism},
year = {1976},
issue_date = {Jan. 1976},
publisher = {ACM},
address = {New York, NY, USA},
volume = {23},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/321921.321925},
doi = {10.1145/321921.321925},
abstract = {Subgraph isomorphism can be determined by means of a brute-force tree-search enumeration procedure. In this paper a new algorithm is introduced that attains efficiency by inferentially eliminating successor nodes in the tree search. To assess the time actually taken by the new algorithm, subgraph isomorphism, clique detection, graph isomorphism, and directed graph isomorphism experiments have been carried out with random and with various nonrandom graphs.A parallel asynchronous logic-in-memory implementation of a vital part of the algorithm is also described, although this hardware has not actually been built. The hardware implementation would allow very rapid determination of isomorphism.},
journal = {J. ACM},
month = {jan},
pages = {31â€“42},
numpages = {12}
}

@techreport{rivest1992md5,
  title={The MD5 message-digest algorithm},
  author={Rivest, Ronald},
  year={1992},
  number={RFC 1321},
  month={4}
}

@techreport{nir2018chacha20,
  title={ChaCha20 and Poly1305 for IETF Protocols},
  author={Nir, Yoav and Langley, Adam},
  year={2015},
  number={RFC 7539},
  month={5}
}

@phdthesis{verdult2015security,
  title={The (in) security of proprietary cryptography},
  author={Verdult, Roel},
  year={2015},
  school={KU Leuven and Radboud University Nijmegen}
}

@article{benedetti2017detection,
  title={Detection of cryptographic algorithms with grap},
  author={Benedetti, L{\'e}onard and Thierry, Aur{\'e}lien and Francq, Julien},
  journal={Cryptology ePrint Archive},
  year={2017},
  number={2017/1119},
  url={https://eprint.iacr.org/2017/1119}
}

@inproceedings{xu2017cryptographic,
  title={Cryptographic function detection in obfuscated binaries via bit-precise symbolic loop mapping},
  author={Xu, Dongpeng and Ming, Jiang and Wu, Dinghao},
  booktitle={IEEE Symposium on Security and Privacy (SP)},
  pages={921--937},
  year={2017},
  organization={IEEE}
}

@article{taubmann2018droidkex,
  title={DroidKex: Fast extraction of ephemeral TLS keys from the memory of Android apps},
  author={Taubmann, Benjamin and Alabduljaleel, Omar and Reiser, Hans P},
  journal={Digital Investigation},
  volume={26},
  pages={S67--S76},
  year={2018},
  publisher={Elsevier}
}

@inproceedings{meijer2021s,
  title={Where's Crypto?: Automated Identification and Classification of Proprietary Cryptographic Primitives in Binary Code},
  author={Meijer, Carlo and Moonsamy, Veelasha and Wetzels, Jos},
  booktitle={30th USENIX Security Symposium},
  pages={555--572},
  year={2021}
}

@article{schonbrodt2023package,
  title={Package â€˜RSAâ€™},
  author={Sch{\"o}nbrodt, Felix and Humberg, Sarah},
  journal={RSA Inc Rural Hall NC USA},
  year={2023},
  url={https://cran.r-project.org/package=RSA}
}



@inproceedings{espinoza2016vdift,
  title={{V-DIFT}: Vector-based dynamic information flow tracking with application to locating cryptographic keys for reverse engineering},
  author={Espinoza, Antonio M and Knockel, Jeffrey and Comesa{\~n}a-Alfaro, Pedro and Crandall, Jedidiah R},
  booktitle={2016 11th Int'l Conf.\ on Availability, Reliability and Security (ARES)},
  pages={266--271},
  year={2016},
  organization={IEEE}
}


@article{aes2002design,
  title={The design of Rijndael: AES-the advanced encryption standard},
  author={Joan, Daemen and Vincent, Rijmen},
  journal={Information Security and Cryptography},
  volume={196},
  year={2002},
  publisher={springer}
}

@article{needham1997tea,
  title={Tea extensions},
  author={Needham, Roger M and Wheeler, David J},
  journal={Report (Cambridge University, Cambridge, UK, 1997)},
  year={1997}
}

@techreport{rivest1998description,
  title={A Description of the RC2 (r) Encryption Algorithm},
  author={Rivest, Ron},
  year={1998},
  number={RFC 2268},
  month={3}
}

@techreport{altman2000telnet,
  title={Telnet Encryption: CAST-128 64 bit Cipher Feedback},
  author={Altman, J},
  year={2000},
  number={RFC 2950},
  month={9}
}

@techreport{eastlake2001us,
  title={US secure hash algorithm 1 (SHA1)},
  author={Eastlake 3rd, D and Jones, Paul},
  year={2001},
  number={RFC 3174},
  month={9}
  
}


@Misc{goomba,
  OPTkey = 	 {},
  author = 	 {Alex Petrov},
  title = 	 {Hands-Free Binary Deobfuscation with {gooMBA}},
  howpublished = {\url{https://hex-rays.com/blog/deobfuscation-with-goomba/}},
  OPTmonth = 	 {},
  year = 	 {2023},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@Misc{binsec2023,
  key = 	 {binsec},
  OPTauthor = 	 {},
  OPTtitle = 	 {{BINSEC} - Binary Code Analysis for Security},
  OPThowpublished = {},
  OPTmonth = 	 {},
  year = 	 {2023},
  note = 	 {\url{https://binsec.github.io/}},
  OPTannote = 	 {}
}



@Misc{amoco,
  OPTkey = 	 {amoco},
  author = 	 {Axel Tillequin},
  OPTtitle = 	 {Amoco},
  OPThowpublished = {},
  OPTmonth = 	 {},
  year = 	 {2023},
  note = 	 {\url{https://github.com/bdcht/amoco}},
  OPTannote = 	 {}
}

@inproceedings{klee2008,
  author       = {Cristian Cadar and
                  Daniel Dunbar and
                  Dawson R. Engler},
  OPTeditor       = {Richard Draves and
                  Robbert van Renesse},
  title        = {{KLEE:} Unassisted and Automatic Generation of High-Coverage Tests
                  for Complex Systems Programs},
  booktitle    = {Proc.\ 8th {USENIX} Symposium on Operating Systems Design and Implementation {(OSDI)}},
  pages        = {209--224},
  OPTpublisher    = {{USENIX} Association},
  year         = {2008},
  OPTurl          = {http://www.usenix.org/events/osdi08/tech/full\_papers/cadar/cadar.pdf},
  timestamp    = {Thu, 12 Mar 2020 11:35:55 +0100},
  biburl       = {https://dblp.org/rec/conf/osdi/CadarDE08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{henry1981software,
  title={Software structure metrics based on information flow},
  author={Henry, Sallie and Kafura, Dennis},
  journal={IEEE transactions on Software Engineering},
  number={5},
  pages={510--518},
  year={1981},
  publisher={IEEE}
}

@article{woodward1979measure,
  title={A measure of control flow complexity in program text},
  author={Woodward, Martin R. and Hennell, Michael A. and Hedley, David},
  journal={IEEE Transactions on Software Engineering},
  number={1},
  pages={45--50},
  year={1979},
  publisher={IEEE}
}

@thesis{lutz2008towards,
  title={Towards revealing attackerâ€™s intent by automatically decrypting network traffic},
  author={Lutz, No{\'e}},
  type={Master Thesis},
  institution={ETH Zurich},
  year={2008}
}

@inproceedings{matenaar2012CISCryptoIntelligence,
  title = {{{CIS}}: {{The Crypto Intelligence System}} for Automatic Detection and Localization of Cryptographic Functions in Current Malware},
  shorttitle = {{{CIS}}},
  booktitle = {2012 7th {{Int'l Conf.\}} on {{Malicious}} and {{Unwanted Software}}},
  author = {Matenaar, Felix and Wichmann, Andre and Leder, Felix and Gerhards-Padilla, Elmar},
  date = {2012-10},
  pages = {46--53},
  publisher = {{IEEE}},
  OPTlocation = {{Fajardo, PR, USA}},
  doi = {10.1109/MALWARE.2012.6461007},
  url = {http://ieeexplore.ieee.org/document/6461007/},
  urldate = {2020-12-07},
  eventtitle = {2012 7th {{Int'l Conf.\}} on {{Malicious}} and {{Unwanted Software}} ({{MALWARE}})},
  isbn = {978-1-4673-4879-9 978-1-4673-4880-5 978-1-4673-4878-2},
  langid = {english}
}

@incollection{grobert2011AutomatedIdentificationCryptographic,
  title = {Automated {{Identification}} of {{Cryptographic Primitives}} in {{Binary Programs}}},
  booktitle = {Recent {{Advances}} in {{Intrusion Detection}}},
  author = {GrÃ¶bert, Felix and Willems, Carsten and Holz, Thorsten},
  editor = {Sommer, Robin and Balzarotti, Davide and Maier, Gregor},
  date = {2011},
  volume = {6961},
  pages = {41--60},
  OPTpublisher = {{Springer Berlin Heidelberg}},
  OPTlocation = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-23644-0_3},
  url = {http://link.springer.com/10.1007/978-3-642-23644-0_3},
  urldate = {2020-12-07},
  isbn = {978-3-642-23643-3 978-3-642-23644-0},
  langid = {english}
}

@inproceedings{2018_programming_experience_might_not_help_in_comprehending_obfuscated_source_code_efficiently,
author = {Norman H{\"a}nsch and Andrea Schankin and Mykolai Protsenko and Felix Freiling and Zinaida Benenson},
title = {Programming Experience Might Not Help in Comprehending Obfuscated Source Code Efficiently},
booktitle = {SOUPS},
year = {2018},
isbn = {978-1-939133-10-6},
address = {Baltimore, MD},
pages = {341--356},
OPTurl = {https://www.usenix.org/Conf./soups2018/presentation/hansch},
publisher = {{USENIX} Association},
month = {08}
}

@article{DP2018,
  title={Characterizing a property-driven obfuscation strategy},
  author={Dalla Preda, Mila and Mastroeni, Isabella},
  journal={Journal of Computer Security},
  volume={26},
  number={1},
  pages={31--69},
  year={2018},
  publisher={IOS Press}
}

@ARTICLE{OO-metric,
  author={Chidamber, S.R. and Kemerer, C.F.},
  journal={IEEE Transactions on Software Engineering}, 
  title={A metrics suite for object oriented design}, 
  year={1994},
  volume={20},
  number={6},
  pages={476-493},
  keywords={Programming;Information management;Software measurement;Engineering management;Application software;Information technology;Software development management;Technology management;Ontologies;Software engineering},
  doi={10.1109/32.295895}
}

@INPROCEEDINGS{mental_metrics,
  author={Nakamura, M. and Monden, A. and Itoh, T. and Matsumoto, K. and Kanzaki, Y. and Satoh, H.},
  booktitle={Proc.\ 5th Int'l Workshop on Enterprise Networking and Computing in Healthcare Industry (IEEE Cat. No.03EX717)}, 
  title={Queue-based cost evaluation of mental simulation process in program comprehension}, 
  year={2003},
  volume={},
  number={},
  pages={351-360},
  keywords={Computational modeling;Humans;Computer simulation;Cost function;Computer hacking;Information science;Programming profession;Debugging;Computer crime;Protection},
  doi={10.1109/METRIC.2003.1232480},
  publisher = {IEEE Computer Society}
}

@Misc{IDA,
  key = 	 {IDA Pro},
  author = 	 {Hex-Rays},
  title = 	 {IDA Pro},
  howpublished = {\url{https://hex-rays.com/ida-pro}},
  OPTmonth = 	 {},
  year = 	 {2024},
  OPTnote = 	 {},
  OPTannote = 	 {}
}


@Misc{ninja,
  key = 	 {Binary Ninja},
  author = 	 {Vector 35},
  title = 	 {Binary Ninja},
  howpublished = {\url{https://binary.ninja/}},
  OPTmonth = 	 {},
  year = 	 {2024},
  OPTnote = 	 {},
  OPTannote = 	 {}
}



@Misc{WALA,
  key = 	 {WALA},
  OPTauthor = 	 {},
  title = 	 {{WAtson Libraries for Analysis (WALA)}},
  howpublished = {\url{https://github.com/wala/WALA}},
  OPTmonth = 	 {},
  year = 	 {2024},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@Misc{binutils,
  key = 	 {{GNU Binutils}},
  author = 	 {{GNU Project}},
  title = 	 {objdump - {GNU Binutils}},
  howpublished = {\url{https://www.gnu.org/software/binutils/}},
  OPTmonth = 	 {},
  year = 	 {2024},
  OPTnote = 	 {},
  OPTannote = 	 {}
}

@techreport{flattening,
    author = {Wang, Chenxi and Hill, Jonathan and Knight, John and Davidson, Jack}, 
    title = {Software Tamper Resistance: Obstructing Static Analysis of Programs},
    year = {2000},
    month = {10},
    doi = {10.18130/V36T9V},
    institution = {University of Virginia, Department of Computer Science},
    number = {CS-2000-12},
}

@article{interp_cp,
  title={Interprocedural constant propagation},
  author={Callahan, David and Cooper, Keith D and Kennedy, Ken and Torczon, Linda},
  journal={ACM SIGPLAN Notices},
  volume={21},
  number={7},
  pages={152--161},
  year={1986},
  publisher={ACM New York, NY, USA}
}

@inproceedings{2022_chosen_instruction_attack_against_commercial_code_virtualization_obfuscators,
    title={Chosen-Instruction Attack Against Commercial Code Virtualization Obfuscators},
    author={Shijia, Li and Chunfu, Jia and Pengda, Qiu and Qiyuan, Chen and Jiang, Ming and Debin, Gao},
    booktitle={NDSS Symposium 2022},
    year={2022},
    organization={Internet Society},
    url={https://www.ndss-symposium.org/ndss-paper/auto-draft-210/},
}

@inproceedings{2021_mba_blast_unveiling_and_simplifying_mixed_boolean_arithmetic_obfuscation,
    author = {Binbin Liu and Junfu Shen and Jiang Ming and Qilong Zheng and Jing Li and Dongpeng Xu},
    title = {{MBA-Blast}: Unveiling and Simplifying Mixed {Boolean-Arithmetic} Obfuscation},
    year = {2021},
    month = {08},
    OPTurl = {https://www.usenix.org/Conf./usenixsecurity21/presentation/liu-binbin},
    isbn = {978-1-939133-24-3},
    booktitle = {30th USENIX Security Symposium},
    pages = {1701--1718},
    publisher = {USENIX Association},
}


@inproceedings{2017_syntia_synthesizing_the_semantics_of_obfuscated_code,
author = {Tim Blazytko and Moritz Contag and Cornelius Aschermann and Thorsten Holz},
title = {Syntia: Synthesizing the Semantics of Obfuscated Code},
booktitle = {26th {USENIX} Security Symposium},
year = {2017},
isbn = {978-1-931971-40-9},
address = {Vancouver, BC},
pages = {643--659},
OPTurl = {https://www.usenix.org/Conf./usenixsecurity17/technical-sessions/presentation/blazytko},
publisher = {{USENIX} Association},
}

@inproceedings{2015_a_generic_approach_to_automatic_deobfuscation_of_executable_code,
	title = {A generic approach to automatic deobfuscation of executable code},
	author = {Yadegari, Babak and Johannesmeyer, Brian and Whitely, Ben and Debray, Saumya},
	booktitle = {IEEE Symposium on Security and Privacy},
	pages = {674--691},
	year = {2015},
	organization = {IEEE}
}

@article{marastoni2021data,
  title={Data augmentation and transfer learning to classify malware images in a deep learning context},
  author={Marastoni, Niccol{\`o} and Giacobazzi, Roberto and Dalla Preda, Mila},
  journal={Journal of Computer Virology and Hacking Techniques},
  volume={17},
  number={4},
  pages={279--297},
  year={2021},
  publisher={Springer}
}

@inproceedings{2022_loki_hardening_code_obfuscation_against_automated_attacks,
    author = {Moritz Schloegel and Tim Blazytko and Moritz Contag and Cornelius Aschermann and Julius Basler and Thorsten Holz and Ali Abbasi},
    title = {Loki: Hardening Code Obfuscation Against Automated Attacks},
    booktitle = {31st USENIX Security Symposium},
    year = {2022},
    month = {08},
    isbn = {978-1-939133-31-1},
    address = {Boston, MA},
    pages = {3055--3073},
    OPTurl = {https://www.usenix.org/Conf./usenixsecurity22/presentation/schloegel},
    publisher = {USENIX Association},
}

@inproceedings{2021_search_based_local_black_box_deobfuscation_understand_improve_and_mitigate,
    author = {Menguy, Gr\'{e}goire and Bardin, S\'{e}bastien and Bonichon, Richard and Lima, Cauim de Souza},
    title = {Search-Based Local Black-Box Deobfuscation: Understand, Improve and Mitigate},
    year = {2021},
    month = {11},
    doi = {10.1145/3460120.3485250},
    isbn = {9781450384544},
    publisher = {ACM},
    address = {New York, NY, USA},
    booktitle = {Proc.\ ACM SIGSAC Conf.\ on Computer and Communications Security},
    pages = {2513--2525},
    keywords = {artificial intelligence, deobfuscation, binary-level code analysis, S-metaheuristics},
    OPTlocation = {Virtual Event, Republic of Korea},
    series = {CCS '21},
}

@INPROCEEDINGS{code_artificiality,
	author={Y. Kanzaki and A. Monden and C. Collberg},
	booktitle={IEEE/ACM 1st Int'l Workshop on Software Protection},
	title={Code Artificiality: A Metric for the Code Stealth Based on an N-Gram Model},
	year={2015},
	volume={},
	number={},
	pages={31-37},
	keywords={security of data;code artificiality;N-gram model;code stealth;man-at-the-end attacks;program obfuscation;program encryption;Assembly;Optimization;Encoding;Software;Encryption;Computational modeling;Software Protection;Code Obfuscation;Program Analysis;Code Stealth},
	doi={10.1109/SPRO.2015.14},
	ISSN={},
	month={05},
  publisher = {IEEE Press},
}

@ARTICLE{2018_hybrid_obfuscation_to_protect_against_disclosure_attacks_on_embedded_microprocessors,
  author={Fyrbiak, Marc and Rokicki, Simon and Bissantz, Nicolai and Tessier, Russell and Paar, Christof},
  journal={IEEE Transactions on Computers}, 
  title={Hybrid Obfuscation to Protect Against Disclosure Attacks on Embedded Microprocessors}, 
  year={2018},
  volume={67},
  number={3},
  pages={307--321},
  doi={10.1109/TC.2017.2649520}
}                                                                                                                                                                                                             
@inproceedings{2018_protecting_million_user_ios_apps_with_obfuscation_motivations_pitfalls_and_experience,
    author = {Wang, Pei and Wu, Dinghao and Chen, Zhaofeng and Wei, Tao},
    title = {Protecting Million-User IOS Apps with Obfuscation: Motivations, Pitfalls, and Experience},
    year = {2018},
    isbn = {9781450356596},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3183519.3183524},
    doi = {10.1145/3183519.3183524},
    booktitle = {Proc.\ 40th Int'l Conf.\ on Software Engineering: Software Engineering in Practice},
    pages = {235--244},
    keywords = {iOS, mobile, reverse engineering, obfuscation, software protection},
    OPTlocation = {Gothenburg, Sweden},
    series = {ICSE-SEIP '18}
}

@inproceedings{2019_anything_to_hide_studying_minified_and_obfuscated_code_in_the_web,
    author = {Skolka, Philippe and Staicu, Cristian-Alexandru and Pradel, Michael},
    title = {Anything to Hide? Studying Minified and Obfuscated Code in the Web},
    year = {2019},
    isbn = {9781450366748},
    publisher = {ACM},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3308558.3313752},
    doi = {10.1145/3308558.3313752},
    booktitle = {The World Wide Web Conf.},
    pages = {1735--1746},
    keywords = {web security, machine learning, obfuscation, empirical study},
    OPTlocation = {San Francisco, CA, USA},
    series = {WWW '19}
}

@inproceedings{2004_static_disassembly_of_obfuscated_binaries,
    author = {Kruegel, Christopher and Robertson, William and Valeur, Fredrik and Vigna, Giovanni},
    title = {Static Disassembly of Obfuscated Binaries},
    year = {2004},
    month = {08},
    OPTurl = {https://www.usenix.org/Conf./13th-usenix-security-symposium/static-disassembly-obfuscated-binaries},
    booktitle = {13th USENIX Security Symposium)},
    address = {San Diego, CA},
    publisher = {USENIX Association},
    pages = {255--270},
}

@inproceedings{2007_binary_obfuscation_using_signals,
    author = {Popov, Igor V. and Debray, Saumya K. and Andrews, Gregory R.},
    title = {Binary Obfuscation Using Signals},
    year = {2007},
    month = {08},
    OPTurl = {https://www.usenix.org/Conf./16th-usenix-security-symposium/binary-obfuscation-using-signals},
    booktitle = {16th USENIX Security Symposium},
    pages = {275--290},
    address = {Boston, MA },
    publisher = {USENIX Association},
}

@inproceedings{2010_mimimorphism_a_new_approach_to_binary_code_obfuscation,
    author = {Wu, Zhenyu and Gianvecchio, Steven and Xie, Mengjun and Wang, Haining},
    title = {Mimimorphism: A New Approach to Binary Code Obfuscation},
    year = {2010},
    isbn = {9781450302456},
    publisher = {ACM},
    url = {https://doi.org/10.1145/1866307.1866368},
    doi = {10.1145/1866307.1866368},
    booktitle = {Proc.\ 17th ACM Conf.\ on Computer and Communications Security},
    pages = {536--546},
    series = {CCS '10}
}

@inproceedings{2016_reliable_third_party_library_detection_in_android_and_its_security_applications,
author = {Backes, Michael and Bugiel, Sven and Derr, Erik},
title = {Reliable Third-Party Library Detection in Android and Its Security Applications},
year = {2016},
isbn = {9781450341394},
publisher = {ACM},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976749.2978333},
doi = {10.1145/2976749.2978333},
abstract = {Third-party libraries on Android have been shown to be security and privacy hazards by adding security vulnerabilities to their host apps or by misusing inherited access rights. Correctly attributing improper app behavior either to app or library developer code or isolating library code from their host apps would be highly desirable to mitigate these problems, but is impeded by the absence of a third-party library detection that is effective and reliable in spite of obfuscated code. This paper proposes a library detection technique that is resilient against common code obfuscations and that is capable of pinpointing the exact library version used in apps. Libraries are detected with profiles from a comprehensive library database that we generated from the original library SDKs. We apply our technique to the top apps on Google Play and their complete histories to conduct a longitudinal study of library usage and evolution in apps. Our results particularly show that app developers only slowly adapt new library versions, exposing their end-users to large windows of vulnerability. For instance, we discovered that two long-known security vulnerabilities in popular libs are still present in the current top apps. Moreover, we find that misuse of cryptographic APIs in advertising libs, which increases the host apps' attack surface, affects 296 top apps with a cumulative install base of 3.7bn devices according to Play. To the best of our knowledge, our work is first to quantify the security impact of third-party libs on the Android ecosystem.},
booktitle = {Proc.\ ACM SIGSAC Conf.\ on Computer and Communications Security},
pages = {356--367},
numpages = {12},
keywords = {third-party library detection, android},
OPTlocation = {Vienna, Austria},
series = {CCS '16}
}

@ARTICLE{2017_semantics_based_obfuscation_resilient_binary_code_similarity_comparison_with_applications_to_software_and_algorithm_plagiarism_detection,
  author={Luo, Lannan and Ming, Jiang and Wu, Dinghao and Liu, Peng and Zhu, Sencun},
  journal={IEEE Transactions on Software Engineering}, 
  title={Semantics-Based Obfuscation-Resilient Binary Code Similarity Comparison with Applications to Software and Algorithm Plagiarism Detection}, 
  year={2017},
  volume={43},
  number={12},
  pages={1157-1177},
  doi={10.1109/TSE.2017.2655046}}

@inproceedings{2018_software_protection_on_the_go_a_large_scale_empirical_study_on_mobile_app_obfuscation,
	address = {Gothenburg, Sweden},
	title = {Software protection on the go: a large-scale empirical study on mobile app obfuscation},
	isbn = {978-1-4503-5638-1},
	shorttitle = {Software protection on the go},
	url = {http://dl.acm.org/citation.cfm?doid=3180155.3180169},
	doi = {10.1145/3180155.3180169},
	language = {en},
	urldate = {2020-02-07},
	booktitle = {Proc\. 40th {Int'l} {Conf.} on {Software} {Engineering} - {ICSE}},
	publisher = {ACM Press},
	author = {Wang, Pei and Bao, Qinkun and Wang, Li and Wang, Shuai and Chen, Zhaofeng and Wei, Tao and Wu, Dinghao},
	year = {2018},
	keywords = {detection, ios},
	pages = {26--36}
}                     

@INPROCEEDINGS{2019_cfhider_control_flow_obfuscation_with_intel_sgx,
  author={Wang, Yongzhi and Shen, Yulong and Su, Cuicui and Cheng, Ke and Yang, Yibo and Faree, ANter and Liu, Yao},
  booktitle={IEEE INFOCOM 2019 - IEEE Conf.\ on Computer Communications}, 
  title={CFHider: Control Flow Obfuscation with Intel SGX}, 
  year={2019},
  volume={},
  number={},
  pages={541-549},
  doi={10.1109/INFOCOM.2019.8737444}}

@INPROCEEDINGS{2019_asm2vec_boosting_static_representation_robustness_for_binary_clone_search_against_code_obfuscation_and_compiler_optimization,
  author={Ding, Steven H. H. and Fung, Benjamin C. M. and Charland, Philippe},
  booktitle={IEEE Symposium on Security and Privacy (SP)}, 
  title={Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization}, 
  year={2019},
  volume={},
  number={},
  pages={472-489},
  doi={10.1109/SP.2019.00003}}

@INPROCEEDINGS{2020_ui_obfuscation_and_its_effects_on_automated_ui_analysis_for_android_apps,
  author={Zhou, Hao and Chen, Ting and Wang, Haoyu and Yu, Le and Luo, Xiapu and Wang, Ting and Zhang, Wei},
  booktitle={2020 35th IEEE/ACM Int'l Conf.\ on Automated Software Engineering (ASE)}, 
  title={UI Obfuscation and Its Effects on Automated UI Analysis for Android Apps}, 
  year={2020},
  volume={},
  number={},
  pages={199-210},
  doi={}}

@inproceedings{lukyanenko2014instantiation,
  title={Instantiation validity in IS design research},
  author={Lukyanenko, Roman and Evermann, Joerg and Parsons, Jeffrey},
  booktitle={Prooc.\ 9th Int'l Conf.\ Advancing the Impact of Design Science: Moving from Theory to Practice},
  pages={321--328},
  year={2014},
  organization={Springer}
}
