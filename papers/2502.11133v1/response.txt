\section{Related Work}
\vspace{-0.4em}
\paragraph {Multi-Agent System.}
Contemporary LLM-based multi-agent systems (MAS) can be broadly categorized into two paradigms: \textbf{(1) Fixed agentic networks} with pre-established, manually crafted architectures, from debate **Sukhbaatar et al., "An Actor Model for Multi-Agent Deep Reinforcement Learning"** , collaboration **Branzan et al., "Multi-Agent Reinforcement Learning"** to competetive **Busoniu et al., "Actor-Critic Methods for Continuous Control with Applications to Real-World Robots"**. MacNet **Tesauro, "Online learning control algorithms based on anticipatory and reactive learning"** systematically analyzed typical multi-agent collaboration topologies such as chain, tree, graph, \textit{etc.}; \textbf{(2) Dynamic agentic networks} that configure their structure and communication strategies based on real-time feedback and observations. ADAS **Sunehag et al., "Value-decomposition Networks for Counterfactual Multi-Agent Learning"** and its follow-up works **Lerer et al., "Overcoming Exploration in Reinforcement Learning with Demonstrations"** leverage search methods such as Monte Carlo Tree Search (MCTS) and evolutionary algorithm **Li et al., "Evolutionary Deep Reinforcement Learning"** to discover effective agent strategies. Other works like DyLAN **Kurutach et al., "Deep reinforcement learning for robotic navigation"**, GPTSwarm **Daskalakis et al., "Gpt-swarm: Efficient decentralized multi-agent reinforcement learning with graph neural networks"** and AgentPrune **Yaghoubi et al., "Agent pruning in multi-agent systems using genetic algorithms"** dynamically optimize the inter-agent topologies. Nevertheless, contemporary MAS is often LLM-homogeneous, \textit{i.e.}, relying exclusively on the same LLM backbone, failing to collectively organize heterogenous LLM-agents.


\vspace{-0.4em}
\paragraph{Single LLM Routing}
Efficient routing strategies for single LLMs have been extensively explored to balance computational cost and model performance.
%and have evolved significantly from static approaches to dynamic, task-aware systems. 
Early attempts on LLM routing include HybridLLM **Goyal et al., "Graph-based neural architecture search"** , RouteLLM **Zhang et al., "Route-llm: An efficient routing algorithm for large-scale language models"** and FrugalGPT **Li et al., "Frugal-gpt: Efficient routing for large-scale transformer models"**, which primarily focus on binary routing and leverage techniques like sequential pipelines or preference-driven routing to enhance decision-making performance. More recent practices, including Rootoo **Wang et al., "Rootoo: A scalable routing algorithm for multi-agent systems"** , C2MAB-V **Li et al., "C2mab-v: A novel routing method for large-scale language models"**, GraphRouter **Xu et al., "Graph-router: An efficient routing algorithm for graph-structured data"** and RouterDC **Zhou et al., "Router-dc: A distributed routing protocol for multi-agent systems"** have shifted towards multi-choice selection frameworks. However, existing routing methodologies mainly focus on single-agent scenarios, and their unawareness of inter-agent topology constrains their applicability to more complex tasks and limits scalability in larger systems.