@inproceedings{lin2017quixbugs,
  title={QuixBugs: A multi-lingual program repair benchmark set based on the Quixey Challenge},
  author={Lin, Derrick and Koppel, James and Chen, Angela and Solar-Lezama, Armando},
  booktitle={Proceedings Companion of the 2017 ACM SIGPLAN international conference on systems, programming, languages, and applications: software for humanity},
  pages={55--56},
  year={2017}
}

@inproceedings{soto2016deeper,
  title={A deeper look into bug fixes: patterns, replacements, deletions, and additions},
  author={Soto, Mauricio and Thung, Ferdian and Wong, Chu-Pan and Le Goues, Claire and Lo, David},
  booktitle={Proceedings of the 13th International Conference on Mining Software Repositories},
  pages={512--515},
  year={2016}
}


@inproceedings{sun2017empirical,
  title={An empirical study on real bugs for machine learning programs},
  author={Sun, Xiaobing and Zhou, Tianchi and Li, Gengjie and Hu, Jiajun and Yang, Hui and Li, Bin},
  booktitle={2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
  pages={348--357},
  year={2017},
  organization={IEEE}
}


@article{livshits2005dynamine,
  title={Dynamine: finding common error patterns by mining software revision histories},
  author={Livshits, Benjamin and Zimmermann, Thomas},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={30},
  number={5},
  pages={296--305},
  year={2005},
  publisher={ACM New York, NY, USA}
}


@article{williams2005automatic,
  title={Automatic mining of source code repositories to improve bug finding techniques},
  author={Williams, Chadd C and Hollingsworth, Jeffrey K},
  journal={IEEE Transactions on Software Engineering},
  volume={31},
  number={6},
  pages={466--480},
  year={2005},
  publisher={IEEE}
}



@inproceedings{campos2017common,
  title={Common bug-fix patterns: A large-scale observational study},
  author={Campos, Eduardo Cunha and de Almeida Maia, Marcelo},
  booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={404--413},
  year={2017},
  organization={IEEE}
}
@inproceedings{gazzola2018automatic,
  title={Automatic software repair: A survey},
  author={Gazzola, Luca and Micucci, Daniela and Mariani, Leonardo},
  booktitle={Proceedings of the 40th International Conference on Software Engineering},
  pages={1219--1219},
  year={2018}
}

@inproceedings{liu2018lsrepair,
  title={LSRepair: Live search of fix ingredients for automated program repair},
  author={Liu, Kui and Koyuncu, Anil and Kim, Kisub and Kim, Dongsun and Bissyand{\'e}, Tegawend{\'e} F},
  booktitle={2018 25th Asia-Pacific Software Engineering Conference (APSEC)},
  pages={658--662},
  year={2018},
  organization={IEEE}
}

@article{chillarege1992orthogonal,
  title={Orthogonal defect classification-a concept for in-process measurements},
  author={Chillarege, Ram and Bhandari, Inderpal S and Chaar, Jarir K and Halliday, Michael J and Moebus, Diane S and Ray, Bonnie K and Wong, Man-Yuen},
  journal={IEEE Transactions on software Engineering},
  volume={18},
  number={11},
  pages={943--956},
  year={1992}
}

@article{duraes2006emulation,
  title={Emulation of software faults: A field data study and a practical approach},
  author={Duraes, Joao A and Madeira, Henrique S},
  journal={Ieee transactions on software engineering},
  volume={32},
  number={11},
  pages={849--867},
  year={2006},
  publisher={IEEE}
}



@article{catolino2019not,
  title={Not all bugs are the same: Understanding, characterizing, and classifying bug types},
  author={Catolino, Gemma and Palomba, Fabio and Zaidman, Andy and Ferrucci, Filomena},
  journal={Journal of Systems and Software},
  volume={152},
  pages={165--181},
  year={2019},
  publisher={Elsevier}
}

@inproceedings{just2014defects4j,
  title={Defects4J: A database of existing faults to enable controlled testing studies for Java programs},
  author={Just, Ren{\'e} and Jalali, Darioush and Ernst, Michael D},
  booktitle={Proceedings of the 2014 international symposium on software testing and analysis},
  pages={437--440},
  year={2014}
}

@inproceedings{sobreira2018dissection,
  title={Dissection of a bug dataset: Anatomy of 395 patches from defects4j},
  author={Sobreira, Victor and Durieux, Thomas and Madeiral, Fernanda and Monperrus, Martin and de Almeida Maia, Marcelo},
  booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={130--140},
  year={2018},
  organization={IEEE}
}


@article{wei2012branch,
  title={Is branch coverage a good measure of testing effectiveness?},
  author={Wei, Yi and Meyer, Bertrand and Oriol, Manuel},
  journal={Empirical Software Engineering and Verification: International Summer Schools, LASER 2008-2010, Elba Island, Italy, Revised Tutorial Lectures},
  pages={194--212},
  year={2012},
  publisher={Springer}
}

@book{meyer1994reusable,
  title={Reusable software: the Base object-oriented component libraries},
  author={Meyer, Bertrand},
  year={1994},
  publisher={Prentice-Hall, Inc.}
}

@article{meyer2023ai,
  title={AI Does Not Help Programmers},
  author={Meyer, Bertrand},
  journal={Blog article at Communications of the ACM (CACM)},
  year={2023},
    month = {June},
day = {3}
}
  %publisher={Communications of the ACM (CACM)}


@INPROCEEDINGS {9438573,
author = {A. Nilizadeh and G. T. Leavens and X. D. Le and C. S. Pasareanu and D. R. Cok},
booktitle = {International Conference on Software Testing, Verification and Validation (ICST)},
title = {Exploring true test overfitting in dynamic automated program repair using formal methods},
year = {2021},
volume = {},
issn = {2159-4848},
pages = {229-240},
abstract = {Automated program repair (APR) techniques have shown a promising ability to generate patches that fix program bugs automatically. Typically such APR tools are dynamic in the sense that they find bugs by testing and they validate patches by running a program&#x27;s test suite. Patches can also be validated manually. However, neither of these methods for validating patches can truly tell whether a patch is correct. Test suites are usually incomplete, and thus APR-generated patches may pass the tests but not be truly correct; in other words, the APR tools may be overfitting to the tests. The possibility of test overfitting leads to manual validation, which is costly, potentially biased, and can also be incomplete. Therefore, we must move past these methods to truly assess APR&#x27;s overfitting problem.We aim to evaluate the test overfitting problem in dynamic APR tools using ground truth given by a set of programs equipped with formal behavioral specifications. Using these formal specifications and an automated verification tool, we found that there is definitely overfitting in the generated patches of seven well-studied APR tools, although many (about 59%) of the generated patches were indeed correct. Our study further points out two new problems that can affect APR tools: changes to the complexity of programs and numeric problems. An additional contribution is that we introduce the first publicly available data set of formally specified and verified Java programs, their test suites, and buggy variants, each of which has exactly one bug.},
keywords = {software testing;java;annotations;conferences;computer bugs;manuals;tools},
publisher = {IEEE}, 
month = {apr}
}

@article{10.1145/2398857.2384626, author = {Logozzo, Francesco and Ball, Thomas}, title = {Modular and Verified Automatic Program Repair}, year = {2012}, publisher = {ACM}, volume = {47}, number = {10}, issn = {0362-1340}, abstract = {We study the problem of suggesting code repairs at design time, based on the warnings issued by modular program verifiers. We introduce the concept of a verified repair, a change to a program's source that removes bad execution traces while increasing the number of good traces, where the bad/good traces form a partition of all the traces of a program. Repairs are property-specific. We demonstrate our framework in the context of warnings produced by the modular cccheck (a.k.a. Clousot) abstract interpreter, and generate repairs for missing contracts, incorrect locals and objects initialization, wrong conditionals, buffer overruns, arithmetic overflow and incorrect floating point comparisons. We report our experience with automatically generating repairs for the .NET framework libraries, generating verified repairs for over 80\% of the warnings generated by cccheck.}, journal = {SIGPLAN Notices}, pages = {133â€“146}, numpages = {14}, keywords = {program repair, design by contract, abstract interpretation, static analysis, refactoring, program transformation} }
 
 
@inproceedings{10.1145/2384616.2384626, author = {Logozzo, Francesco and Ball, Thomas}, title = {Modular and Verified Automatic Program Repair}, year = {2012}, isbn = {9781450315616}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/2384616.2384626}, doi = {10.1145/2384616.2384626}, abstract = {We study the problem of suggesting code repairs at design time, based on the warnings issued by modular program verifiers. We introduce the concept of a verified repair, a change to a program's source that removes bad execution traces while increasing the number of good traces, where the bad/good traces form a partition of all the traces of a program. Repairs are property-specific. We demonstrate our framework in the context of warnings produced by the modular cccheck (a.k.a. Clousot) abstract interpreter, and generate repairs for missing contracts, incorrect locals and objects initialization, wrong conditionals, buffer overruns, arithmetic overflow and incorrect floating point comparisons. We report our experience with automatically generating repairs for the .NET framework libraries, generating verified repairs for over 80\% of the warnings generated by cccheck.}, booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications}, pages = {133â€“146}, numpages = {14}, keywords = {design by contract, program repair, static analysis, abstract interpretation, program transformation, refactoring}, location = {Tucson, Arizona, USA}, series = {OOPSLA '12} }

@article{monperrus2018automatic,
  title={Automatic software repair: A bibliography},
  author={Monperrus, Martin},
  journal={ACM Computing Surveys (CSUR)},
  volume={51},
  number={1},
  pages={1--24},
  year={2018},
  publisher={ACM New York, NY, USA}
}

@phdthesis{monperrus2018living,
  title={The living review on automated program repair},
  author={Monperrus, Martin},
  year={2018},
  school={HAL Archives Ouvertes}
}

@inproceedings{raluca,
  title={Systematic evaluation of test failure results},
  author={Meyer, Bertrand and Ciupa, Ilinca and Liu, Lisa Ling and Oriol, Manuel and Leitner, Andreas and Borca-Muresan, Raluca},
  booktitle={Workshop on Reliability Analysis of System Failure Data (RAF)},
  year={2007}
}

@inproceedings{nguyen2019automatic,
  title={Automatic program repair using formal verification and expression templates},
  author={Nguyen, Thanh-Toan and Ta, Quang-Trung and Chin, Wei-Ngan},
  booktitle={International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI)},
  pages={70--91},
  year={2019},
  organization={Springer}
}
@inproceedings{10.1145/3180155.3180250, author = {van Tonder, Rijnard and Goues, Claire Le}, title = {Static Automated Program Repair for Heap Properties}, year = {2018}, isbn = {9781450356381}, publisher = {ACM}, abstract = {Static analysis tools have demonstrated effectiveness at finding bugs in real world code. Such tools are increasingly widely adopted to improve software quality in practice. Automated Program Repair (APR) has the potential to further cut down on the cost of improving software quality. However, there is a disconnect between these effective bug-finding tools and APR. Recent advances in APR rely on test cases, making them inapplicable to newly discovered bugs or bugs difficult to test for deterministically (like memory leaks). Additionally, the quality of patches generated to satisfy a test suite is a key challenge. We address these challenges by adapting advances in practical static analysis and verification techniques to enable a new technique that finds and then accurately fixes real bugs without test cases. We present a new automated program repair technique using Separation Logic. At a high-level, our technique reasons over semantic effects of existing program fragments to fix faults related to general pointer safety properties: resource leaks, memory leaks, and null dereferences. The procedure automatically translates identified fragments into source-level patches, and verifies patch correctness with respect to reported faults. In this work we conduct the largest study of automatically fixing undiscovered bugs in real-world code to date. We demonstrate our approach by correctly fixing 55 bugs, including 11 previously undiscovered bugs, in 11 real-world projects.}, booktitle = {International Conference on Software Engineering (ICSE)}, pages = {151â€“162}, numpages = {12}, keywords = {automated program repair, separation logic} }

@inproceedings{aprlisbon,
  title={BUGFIX: towards a common language and framework for the AutomaticProgram Repair community},
  author={Meyer, Bertrand and Kananchuk, Viktoryia and Huang, Li},
  booktitle={APR Workshop at ICSE 2024 (International Conference on Software Engineering), Lisbon, 14-20 April 2024},
  year={2024},
  organization={ACM and IEEE},
  url= {https://arxiv.org/abs/2402.14471}
}

@inproceedings{chen2017contract,
  title={Contract-based program repair without the contracts},
  author={Chen, Liushan and Pei, Yu and Furia, Carlo A},
  booktitle={International Conference on Automated Software Engineering (ASE)},
  pages={637--647},
  year={2017},
  organization={IEEE}
}

@ARTICLE{7463060,
  author={Xuan, Jifeng and Martinez, Matias and DeMarco, Favio and ClÃ©ment, Maxime and Marcote, Sebastian Lamelas and Durieux, Thomas and Le Berre, Daniel and Monperrus, Martin},
  journal={Transactions on Software Engineering}, 
  title={Nopol: Automatic Repair of Conditional Statement Bugs in Java Programs}, 
  year={2017},
  volume={43},
  number={1},
  pages={34-55},
  publisher={IEEE}
}


@inproceedings{nguyen2013semfix,
  title={Semfix: Program repair via semantic analysis},
  author={Nguyen, Hoang Duong Thien and Qi, Dawei and Roychoudhury, Abhik and Chandra, Satish},
  booktitle={International Conference on Software Engineering (ICSE)},
  pages={772--781},
  year={2013},
  organization={IEEE}
}
@ARTICLE{6776507,
  author={Pei, Yu and Furia, Carlo A. and Nordio, Martin and Wei, Yi and Meyer, Bertrand and Zeller, Andreas},
  journal={Transactions on Software Engineering}, 
  title={Automated Fixing of Programs with Contracts}, 
  year={2014},
  volume={40},
  number={5},
  pages={427-449},
  publisher={IEEE}
}

@INPROCEEDINGS{7203042,
  author={Pei, Yu and Furia, Carlo A. and Nordio, Martin and Meyer, Bertrand},
  booktitle={International Conference on Software Engineering (ICSE)}, 
  title={Automated Program Repair in an Integrated Development Environment}, 
  year={2015},
  volume={2},
  number={},
  pages={681-684},
  publisher={IEEE}
}


@article{le2011genprog,
  title={Genprog: A generic method for automatic software repair},
  author={Le Goues, Claire and Nguyen, ThanhVu and Forrest, Stephanie and Weimer, Westley},
  journal={Transactions on Software Engineering},
  volume={38},
  number={1},
  pages={54--72},
  year={2011},
  publisher={IEEE}
}

@article{ernst2007daikon,
  title={The Daikon system for dynamic detection of likely invariants},
  author={Ernst, Michael D and Perkins, Jeff H and Guo, Philip J and McCamant, Stephen and Pacheco, Carlos and Tschantz, Matthew S and Xiao, Chen},
  journal={Science of computer programming},
  volume={69},
  number={1-3},
  pages={35--45},
  year={2007},
  publisher={Elsevier}
}

@article{boyapati2002korat,
  title={Korat: Automated testing based on Java predicates},
  author={Boyapati, Chandrasekhar and Khurshid, Sarfraz and Marinov, Darko},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={27},
  number={4},
  pages={123--133},
  year={2002},
  publisher={ACM}
}

@inproceedings{pacheco2007randoop,
  title={Randoop: feedback-directed random testing for Java},
  author={Pacheco, Carlos and Ernst, Michael D},
  booktitle={Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems and applications companion},
  pages={815--816},
  year={2007},
publisher={ACM}
}

@article{fedchin2023toolkit,
  title={{A Toolkit for Automated Testing of Dafny}},
  author={Fedchin, Aleksandr and Dean, Tyler and Foster, Jeffrey S and Mercer, Eric and Rakamaric, Zvonimir and Reger, Giles and Rungta, Neha and Salkeld, Robin and Wagner, Lucas and Waldrip, Cassidy},
  booktitle={NASA Formal Method (NFM)},
  year={2023}
}

@article{brenguier2023jbmc,
  title={{JBMC: A Bounded Model Checking Tool for Java Bytecode}},
  author={Brenguier, Romain and Cordeiro, Lucas and Kroening, Daniel and Schrammel, Peter},
  journal={arXiv:2302.02381},
  year={2023}
}

@inproceedings{angeletti2009automatic,
  title={{Automatic Test Generation for Coverage Analysis Using CBMC}},
  author={Angeletti, Damiano and Giunchiglia, Enrico and Narizzano, Massimo and Puddu, Alessandra and Sabina, Salvatore},
  booktitle={International Conference on Computer Aided Systems Theory (EUROCAST)},
  pages={287--294},
  year={2009},
  organization={Springer}
}

@inproceedings{angeletti2009improving,
  title={{Improving the Automatic Test Generation Process for Coverage Analysis Using CBMC}},
  author={Angeletti, Damiano and Giunchiglia, Enrico and Narizzano, Massimo and Palma, Gabriele and Puddu, Alessandra and Sabina, Salvatore},
  booktitle={International RCRA Workshop},
  year={2009}
}

@inproceedings{kroening2014cbmc,
  title={{CBMC--C Bounded Model Checker: (Competition Contribution)}},
  author={Kroening, Daniel and Tautschnig, Michael},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={389--391},
  year={2014},
  organization={Springer}
}

@inproceedings{williams2021towards,
  title={{Towards Exhaustive Branch Coverage with PathCrawler}},
  author={Williams, Nicky},
  booktitle={Int. Conference on Automation of Software Tests (AST)},
  pages={117--120},
  year={2021},
  organization={IEEE}
}


@inproceedings{cadar2008klee,
  title={{KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs}},
  author={Cadar, Cristian and Dunbar, Daniel and Engler, Dawson R and others},
  booktitle={USENIX Symposium on Operating Systems Design and Implementation (OSDI)},
  volume={8},
  pages={209--224},
  year={2008}
}

@inproceedings{huang2022improving,
  title={{Improving Counterexample Quality from Failed Program Verification}},
  author={Huang, Li and Meyer, Bertrand and Oriol, Manuel},
  booktitle={International Symposium on Software Reliability Engineering Workshops (ISSREW)},
  pages={268--273},
  year={2022},
  organization={IEEE}
}

@inproceedings{tillmann2008pex,
  title={{Pex--White Box Test Generation for  .Net}},
  author={Tillmann, Nikolai and De Halleux, Jonathan},
  booktitle={International Conference on Tests and Proofs (TAP)},
  pages={134--153},
  year={2008},
  organization={Springer}
}

@book{leino2023program,
  title={{Program Proofs}},
  author={Leino, K Rustan M},
  year={2023},
  publisher={MIT Press}
}

@article{huang2022failed,
  title={{A Failed Proof Can Yield a Useful Test}},
  author={Huang, Li and Meyer, Bertrand},
  journal={arXiv:2208.09873},
  year={2022}
}


@inproceedings{barnett2005spec,
  title={{The Spec\# Programming System: An Overview}},
  author={Barnett, Mike and Leino, K Rustan M and Schulte, Wolfram},
  booktitle={International Workshop on Construction and Analysis of Safe, Secure, and Interoperable Smart Devices 
  (CASSIS)},
  pages={49--69},
  year={2005},
  organization={Springer}
}

@inproceedings{carre1990spark,
  title={{SPARKâ€”an Annotated Ada Subset for Safety-critical Programming}},
  author={Carr{\'e}, Bernard and Garnsworthy, Jonathan},
  booktitle={Proceedings of the Conference on TRI-ADA},
  pages={392--402},
  year={1990}
}

@inproceedings{leavens1998jml,
  title={JML: a Java modeling language},
  author={Leavens, Gary T and Baker, Albert L and Ruby, Clyde},
  booktitle={Formal Underpinnings of Java Workshop (at OOPSLAâ€™98)},
  pages={404--420},
  year={1998},
  organization={Citeseer}
}

@inproceedings{ahrendt2014key,
  title={The KeY platform for verification and analysis of Java programs},
  author={Ahrendt, Wolfgang and Beckert, Bernhard and Bruns, Daniel and Bubel, Richard and Gladisch, Christoph and Grebing, Sarah and H{\"a}hnle, Reiner and Hentschel, Martin and Herda, Mihai and Klebanov, Vladimir and others},
  booktitle={Verified Software: Theories, Tools and Experiments: 6th International Conference, VSTTE 2014, Vienna, Austria, July 17-18, 2014, Revised Selected Papers 6},
  pages={55--71},
  year={2014},
  organization={Springer}
}

@inproceedings{engel2007generating,
  title={Generating unit tests from formal proofs},
  author={Engel, Christian and H{\"a}hnle, Reiner},
  booktitle={Tests and Proofs: First International Conference, TAP 2007, Zurich, Switzerland, February 12-13, 2007. Revised Papers 1},
  pages={169--188},
  year={2007},
  organization={Springer}
}

@article{ahrendt2016proof,
  title={Proof-based test case generation},
  author={Ahrendt, Wolfgang and Gladisch, Christoph and Herda, Mihai},
  journal={Deductive Software Verification--The KeY Book: From Theory to Practice},
  pages={415--451},
  year={2016},
  publisher={Springer}
}


@inproceedings{nilizadeh2021more,
  title={{More Reliable Test Suites for Dynamic APR by Using Counterexamples}},
  author={Nilizadeh, Amirfarhad and Calvo, Marlon and Leavens, Gary T and Le, Xuan-Bach D},
  booktitle={International Symposium on Software Reliability Engineering (ISSRE)},
  pages={208 -- 219},
  year={2021},
  organization={IEEE}
}

@misc{leinoboogie,
    Key = {Boogie2},
   author={Leino, K Rustan M and R{\"u}mmer, Philipp},
    title={{The Boogie 2 Type System: Design and Verification Condition Generation}},
     url= {https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.146.4277}
}


@inproceedings{bjorner2018programming,
  title={{Programming Z3}},
  author={Bj{\o}rner, Nikolaj and Moura, Leonardo de and Nachmanson, Lev and Wintersteiger, Christoph M},
  booktitle={International Summer School on Engineering Trustworthy Software Systems},
  pages={148--201},
  year={2018},
  organization={Springer}
}

@inproceedings{nilizadeh2022generating,
  title={{Generating Counterexamples in the Form of Unit Tests from Hoare-style Verification Attempts}},
  author={Nilizadeh, Amirfarhad and Calvo, Marlon and Leavens, Gary T and Cok, David R},
  booktitle={International Conference on Formal Methods in Software Engineering (FormaliSE)},
  pages={124--128},
  year={2022},
  organization={IEEE}
}


@inproceedings{chakarov2022better,
  title={{Better Counterexamples for Dafny}},
  author={Chakarov, Aleksandar and Fedchin, Aleksandr and Rakamari{\'c}, Zvonimir and Rungta, Neha},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={404--411},
  year={2022},
  organization={Springer}
}

@inproceedings{bormer2011cost,
  title={{The COST IC0701 Verification Competition}},
  author={Bormer, Thorsten and Brockschmidt, Marc and Distefano, Dino and others},
  booktitle={International Conference on Formal Verification of Object-Oriented Software (FoVeOO)},
  pages={3--21},
  year={2011},
  organization={Springer}
}

@inproceedings{weide2008incremental,
  title={{Incremental Benchmarks for Software Verification Tools and Techniques}},
  author={Weide, Bruce W and Sitaraman, Murali and Harton, Heather K and Adcock, Bruce and Bucci, Paolo and Bronish, Derek and Heym, Wayne D and Kirschenbaum, Jason and Frazier, David},
  booktitle={Working Conference on Verified Software: Theories, Tools, and Experiments (VSTTE)},
  pages={84--98},
  year={2008},
  organization={Springer}
}

@inproceedings{polikarpova2014flexible,
  title={{Flexible Invariants through Semantic Collaboration}},
  author={Polikarpova, Nadia and Tschannen, Julian and Furia, Carlo A and Meyer, Bertrand},
  booktitle={International Symposium on Formal Methods (FM)},
  pages={514--530},
  year={2014},
  organization={Springer}
}

@inproceedings{leino2004object,
  title={{Object Invariants in Dynamic Contexts}},
  author={Leino, K Rustan M and M{\"u}ller, Peter},
  booktitle={European Conference on Object-Oriented Programming (ECOOP)},
  pages={491--515},
  year={2004},
  organization={Springer}
}


@article{meyer1992applying,
  title={{Applying ``Design by Contract''}},
  author={Meyer, Bertrand},
  journal={Computer},
  volume={25},
  number={10},
  pages={40--51},
  year={1992},
  publisher={IEEE}
}

@inproceedings{klebanov20111st,
  title={{The 1st Verified Software Competition: Experience Report}},
  author={Klebanov, Vladimir and M{\"u}ller, Peter and and others},
  booktitle={International Symposium on Formal Methods (FM)},
  pages={154--168},
  year={2011},
  organization={Springer}
}

@inproceedings{christakis2012collaborative,
  title={Collaborative Verification and Testing with Explicit Assumptions},
  author={Christakis, Maria and M{\"u}ller, Peter and W{\"u}stholz, Valentin},
  booktitle={International Symposium on Formal Methods (FM)},
  pages={132--146},
  year={2012},
  organization={Springer}
}

@article{csallner2008dsd,
  title={{DSD-Crasher: A Hybrid Analysis Tool for Bug Finding}},
  author={Csallner, Christoph and Smaragdakis, Yannis and Xie, Tao},
  journal={Transactions on Software Engineering and Methodology (TOSEM)},
  volume={17},
  number={2},
  pages={1--37},
  year={2008},
  publisher={ACM}
}

@inproceedings{tschannen2011usable,
  title={{Usable Verification of Object-Oriented Programs by Combining Static and Dynamic Techniques}},
  author={Tschannen, Julian and Furia, Carlo A and Nordio, Martin and Meyer, Bertrand},
  booktitle={International Conference on Software Engineering and Formal Methods (SEFM)},
  pages={382--398},
  year={2011},
  organization={Springer}
}

@article{kirchner2015frama,
  title={{Frama-C: A Software Analysis Perspective}},
  author={Kirchner, Florent and Kosmatov, Nikolai and Prevosto, Virgile and Signoles, Julien and Yakobowski, Boris},
  journal={Formal Aspects of Computing (FAC)},
  volume={27},
  number={3},
  pages={573--609},
  year={2015},
  publisher={Springer}
}

@inproceedings{muller2011using,
  title={{Using Debuggers to Understand Failed Verification Attempts}},
  author={M{\"u}ller, Peter and Ruskiewicz, Joseph N},
  booktitle={International Symposium on Formal Methods (FM)},
  pages={73--87},
  year={2011},
  organization={Springer}
}

@inproceedings{petiot2016your,
  title={{Your Proof Fails? Testing Helps to Find the Reason}},
  author={Petiot, Guillaume and Kosmatov, Nikolai and Botella, Bernard and Giorgetti, Alain and Julliand, Jacques},
  booktitle={International Conference on Tests and Proofs (TAP)},
  pages={130--150},
  year={2016},
  organization={Springer}
}

@article{petiot2018testing,
  title={{How Testing Helps to Diagnose Proof Failures}},
  author={Petiot, Guillaume and Kosmatov, Nikolai and Botella, Bernard and Giorgetti, Alain and Julliand, Jacques},
  journal={Formal Aspects of Computing (FAC)},
  volume={30},
  number={6},
  pages={629--657},
  year={2018},
  publisher={Springer}
}

@inproceedings{polikarpova2013run,
  title={{To Run What No One Has Run Before: Executing an Intermediate Verification Language}},
  author={Polikarpova, Nadia and Furia, Carlo A and West, Scott},
  booktitle={International Conference on Runtime Verification (RV)},
  pages={251--268},
  year={2013},
  organization={Springer}
}

@inproceedings{christakis2016integrated,
  title={{Integrated Environment for Diagnosing Verification Errors}},
  author={Christakis, Maria and Leino, K Rustan M and M{\"u}ller, Peter and W{\"u}stholz, Valentin},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={424--441},
  year={2016},
  organization={Springer}
}

@inproceedings{hauzar2016counterexamples,
  title={{Counterexamples from Proof Failures in SPARK}},
  author={Hauzar, David and March{\'e}, Claude and Moy, Yannick},
  booktitle={International Conference on Software Engineering and Formal Methods (SEFM)},
  pages={215--233},
  year={2016},
  organization={Springer}
}

@phdthesis{stoll2019smt,
  title={{SMT Models for Verification Debugging}},
  author={Stoll, C{\'e}dric},
  year={2019},
  school={ETH Zurich},
  type={Master thesis}
}

@inproceedings{muller2016viper,
  title={{Viper: A Verification Infrastructure for Permission-based Reasoning}},
  author={M{\"u}ller, Peter and Schwerhoff, Malte and Summers, Alexander J},
  booktitle={International Conference on Verification, Model Checking, and Abstract Interpretation (VMCAI)},
  pages={41--62},
  year={2016},
  organization={Springer}
}

@inproceedings{leino2010dafny,
  title={{Dafny: An Automatic Program Verifier for Functional Correctness}},
  author={Leino, K Rustan M},
  booktitle={International Conference on Logic for Programming Artificial Intelligence and Reasoning (LPAR)},
  pages={348--370},
  year={2010},
  organization={Springer}
}

@inproceedings{cohen2009vcc,
  title={{VCC: A Practical System for Verifying Concurrent C}},
  author={Cohen, Ernie and Dahlweid, Markus and Hillebrand, Mark and Leinenbach, Dirk and Moskal, Micha{\l} and Santen, Thomas and Schulte, Wolfram and Tobies, Stephan},
  booktitle={International Conference on Theorem Proving in Higher Order Logics (TPHOLs)},
  pages={23--42},
  year={2009},
  organization={Springer}
}

@inproceedings{barrett2010smt,
  title={{The SMT-LIB Standard: Version 2.0}},
  author={Barrett, Clark and Stump, Aaron and Tinelli, Cesare and others},
  booktitle={{International Workshop on Satisfiability Modulo Theories}},
  volume={13},
  pages={14},
  year={2010}
}

@article{hoare1969axiomatic,
  title={{An Axiomatic Basis for Computer Programming}},
  author={Hoare, Charles Antony Richard},
  journal={Communications of the ACM},
  volume={12},
  number={10},
  pages={576--580},
  year={1969},
  publisher={ACM}
}

@book{dijkstra1976discipline,
  title={{A Discipline of Programming}},
  author={Dijkstra, Edsger Wybe},
  year={1976},
  publisher={Prentice Hall}
}

@book{bertrand2016touch,
  title={{Touch of Class: Learning to Program Well with Objects and Contracts}},
  author={Meyer, Bertrand},
  year={2016},
  publisher={Springer}
}

@misc{autoproofsite,
    Key = {autoproofsite},
    Url = {http://autoproof.sit.org/},
    Title = {{AutoProof}}
}

@inproceedings{de2008z3,
  title={{Z3: An Efficient SMT Solver}},
  author={De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={337--340},
  year={2008},
  organization={Springer}
}

@inproceedings{barnett2005boogie,
  title={{Boogie: A Modular Reusable Verifier for Object-Oriented Programs}},
  author={Barnett, Mike and Chang, Bor-Yuh Evan and DeLine, Robert and Jacobs, Bart and Leino, K Rustan M},
  booktitle={Int. Symposium on Formal Methods for Components and Objects},
  pages={364--387},
  year={2005},
  organization={Springer}
}

@inproceedings{le2011boogie,
  title={{The Boogie Verification Debugger}},
  author={Le Goues, Claire and Leino, K Rustan M and Moskal, Micha{\l}},
  booktitle={International Conference on Software Engineering and Formal Methods (SEFM)},
  pages={407--414},
  year={2011},
  organization={Springer}
}

@inproceedings{tschannen2013program,
  title={{Program Checking with Less Hassle}},
  author={Tschannen, Julian and Furia, Carlo A and Nordio, Martin and Meyer, Bertrand},
  booktitle={Working Conference on Verified Software: Theories, Tools, and Experiments},
  pages={149--169},
  year={2013},
  organization={Springer}
}

@inproceedings{khazeev2016initial,
  title={{Initial Steps Towards Assessing the Usability of a Verification Tool}},
  author={Khazeev, Mansur and Rivera, Victor and Mazzara, Manuel and Johard, Leonard},
  booktitle={International Conference in Software Engineering for Defence Applications},
  pages={31--40},
  year={2016},
  organization={Springer}
}

@book{dijkstra2012predicate,
  title={{Predicate Calculus and Program Semantics}},
  author={Dijkstra, Edsger Wybe and Scholten, Carel S},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@book{meyer1997object,
  title={{Object-Oriented Software Construction, second edition}},
  author={Meyer, Bertrand},
  year={1997},
  publisher={Prentice Hall}
}

@article{leino2005generating,
  title={{Generating Error Traces from Verification-Condition Counterexamples}},
  author={Leino, K Rustan M and Millstein, Todd and Saxe, James B},
  journal={Science of Computer Programming},
  volume={55},
  number={1-3},
  pages={209--226},
  year={2005},
  publisher={Elsevier}
}

@inproceedings{tschannen2015autoproof,
  title={{AutoProof: Auto-active Functional Verification of Object-Oriented Programs}},
  author={Tschannen, Julian and Furia, Carlo A and Nordio, Martin and Polikarpova, Nadia},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={566--580},
  year={2015},
  organization={Springer}
}


@misc{autotest,
    Key = {AutoTest},
    Url = {https://www.eiffel.org/doc/eiffelstudio/Using_AutoTest},
    Title = {{AutoTest}}
}

@inproceedings{wei2010satisfying,
  title={{Satisfying Test Preconditions Through Guided Object Selection}},
  author={Wei, Yi and Gebhardt, Serge and Meyer, Bertrand and Oriol, Manuel},
  booktitle={International Conference on Software Testing, Verification and Validation (ICST)},
  pages={303--312},
  year={2010},
  organization={IEEE}
}

@inproceedings{cheon2002simple,
  title={{A Simple and Practical Approach to Unit Testing: The JML and JUnit Way}},
  author={Cheon, Yoonsik and Leavens, Gary T},
  booktitle={European Conference on Object-Oriented Programming (ECOOP)},
  pages={231--255},
  year={2002},
  organization={Springer}
}

@inproceedings{beyer2018tests,
  title={{Tests from Witnesses}},
  author={Beyer, Dirk and Dangl, Matthias and Lemberger, Thomas and Tautschnig, Michael},
  booktitle={International Conference on Tests and Proofs (TAP)},
  pages={3--23},
  year={2018},
  organization={Springer}
}

@inproceedings{black2000modeling,
  title={{Modeling and Marshaling: Making Tests from Model Checker Counterexamples}},
  author={Black, Paul E},
  booktitle={Digital Avionics Systems Conference (DASC)},
  volume={1},
  pages={1B3--1},
  year={2000},
  organization={IEEE}
}

@article{fantechi2005enhancing,
  title={{Enhancing Test Coverage by Back-tracing Model-Checker counterexamples}},
  author={Fantechi, Alessandro and Gnesi, Stefania and Maggiore, Adriana},
  journal={Electronic Notes in Theoretical Computer Science (ENTCS)},
  volume={116},
  pages={199--211},
  year={2005},
  publisher={Elsevier}
}

@inproceedings{beyer2004generating,
  title={{Generating Tests from Counterexamples}},
  author={Beyer, Dirk and Chlipala, Adam J and Henzinger, Thomas A and Jhala, Ranjit and Majumdar, Rupak},
  booktitle={International Conference on Software Engineering (ICSE)},
  pages={326--335},
  year={2004},
  organization={IEEE}
}

@inproceedings{cok2021jml,
  title={{JML and OpenJML for Java 16}},
  author={Cok, David R},
  booktitle={International Workshop on Formal Techniques for Java-like Programs (FTfJP)},
  pages={65--67},
  year={2021},
  publisher={ACM}
}


@article{csallner2008dsd,
  title={{DSD-Crasher: A Hybrid Analysis Tool for Bug Finding}},
  author={Csallner, Christoph and Smaragdakis, Yannis and Xie, Tao},
  journal={Transactions On Software Engineering and Methodology (TOSEM)},
  volume={17},
  number={2},
  pages={1--37},
  year={2008},
  publisher={ACM}
}


@article{kirchner2015frama,
  title={{Frama-C: A Software Analysis Perspective}},
  author={Kirchner, Florent and Kosmatov, Nikolai and Prevosto, Virgile and Signoles, Julien and Yakobowski, Boris},
  journal={Formal Aspects of Computing (FAC)},
  volume={27},
  number={3},
  pages={573--609},
  year={2015},
  publisher={Springer}
}


@inproceedings{christakis2016integrated,
  title={{Integrated Environment for Diagnosing Verification Errors}},
  author={Christakis, Maria and Leino, K Rustan M and M{\"u}ller, Peter and W{\"u}stholz, Valentin},
  booktitle={International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS)},
  pages={424--441},
  year={2016},
  organization={Springer}
}

@article{hoare1969axiomatic,
  title={{An Axiomatic Basis for Computer Programming}},
  author={Hoare, Charles Antony Richard},
  journal={Communications of the ACM},
  volume={12},
  number={10},
  pages={576--580},
  year={1969},
  publisher={ACM}
}


@inproceedings{khazeev2016initial,
  title={{Initial Steps Towards Assessing the Usability of a Verification Tool}},
  author={Khazeev, Mansur and Rivera, Victor and Mazzara, Manuel and Johard, Leonard},
  booktitle={International Conference in Software Engineering for Defence Applications (SEDA)},
  pages={31--40},
  year={2016},
  organization={Springer}
}

@misc{testdetails,
    Key = {experiment report},
     author = {Li, Huang and Bertrand, Meyer},
     title={{Deriving tests from failed proofs: experiments and results}},
     url= {https://github.com/huangl223/Proof2Test/blob/main/Deriving_tests_from_failed_proofs_experiments_and_results.pdf},
     month = {04}
}




@book{dijkstra2012predicate,
  title={{Predicate Calculus and Program Semantics}},
  author={Dijkstra, Edsger W and Scholten, Carel S},
  year={2012},
  publisher={Springer Science \& Business Media}
}

@article{meyer_class_invariants,
  title={{The Concept of Class Invariant in Object-Oriented Programming}},
  author={Meyer, Bertrand and Arkadova, Alisa and Kogtenkov, Alexander},
  journal={arXiv (preprint of article submitted for publication)},
  year={2022},
   url= {https://arxiv.org/abs/2109.06557}

}

@inproceedings{concolic,
  title={{CUTE: a Concolic Unit Testing Engine for C}},
  author={Sen, Koushik and Marinov, Darko and Agha, Ghoul},
  booktitle={The ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC-FSE)},
  pages={213-223},
  year={2005}
}

@inproceedings{artoo,
  title={{ARTOO: Adaptive Random Testing for Object-Oriented Software}},
  author={Ciupa, Ilinca and Leitner, Andreas and Oriol, Manuel and Meyer, Bertrand},
  booktitle={International Conference on Software Engineering (ICSE)},
  pages={71â€“80},
  year={2008}
}

@inproceedings{orsomints,
  title={{MINTS: A General Framework and Tool for Supporting Test-suite Minimization}},
  author={Orso, Alessandro and Hsu, Hwa-You},
  booktitle={International Conference on Software Engineering (ICSE)},
  pages={419-429},
  year={2009}
}

@software{preston2018jekyll,
  title={Jekyll},
  version={v4.3.3},
  author={Preston-Werner, Tom and others},
  year={2023},
  month= dec,
  publisher={GitHub},
  url={https://github.com/jekyll/jekyll/tree/v4.3.3}
}

@software{rix2024semantic,
  title={Semantic},
  version={ad281b52e3a399ff88126e3d06063c48eb245135},
  author={Rix, Rob and Vera, Josh and others},
  year={2024},
  month= may,
  publisher={GitHub},
  url={https://github.com/github/semantic/tree/ad281b52e3a399ff88126e3d06063c48eb245135}
}


@software{tree-sitter,
  author       = {Max Brunsfeld and
                  Amaan Qureshi and
                  Andrew Hlynskyi and
                  Patrick Thomson and
                  Josh Vera and
                  ObserverOfTime and
                  Phil Turnbull and
                  dundargoc and
                  Timothy Clem and
                  Douglas Creager and
                  Andrew Helwer and
                  Rob Rix and
                  Daumantas Kavolis and
                  Hendrik van Antwerpen and
                  Michael Davis and
                  Ika and
                  Tuáº¥n-Anh Nguyá»…n and
                  Amin Yahyaabadi and
                  Stafford Brunk and
                  Matt Massicotte and
                  bfredl and
                  Niranjan Hasabnis and
                  Christian Clason and
                  Mingkai Dong and
                  Samuel Moelius and
                  Steven Kalt and
                  Will Lillis and
                  Segev Finer and
                  Kolja},
  title        = {tree-sitter/tree-sitter: v0.23.0},
  month        = aug,
  year         = 2024,
  publisher    = {Zenodo},
  version      = {v0.23.0},
  doi          = {10.5281/zenodo.13375512},
  url          = {https://doi.org/10.5281/zenodo.13375512}
}

@article{dyer2015boa,
  title={Boa: Ultra-large-scale software repository and source-code mining},
  author={Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N},
  journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
  volume={25},
  number={1},
  pages={1--34},
  year={2015},
  publisher={ACM New York, NY, USA}
}

@inproceedings{sigurdson2024boidae,
  title={Boidae: Your Personal Mining Platform},
  author={Sigurdson, Brian and Flint, Samuel W and Dyer, Robert},
  booktitle={Proceedings of the 2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings},
  pages={40--43},
  year={2024}
}

@inproceedings{biswas2019boa,
  title={Boa meets python: A boa dataset of data science software in python language},
  author={Biswas, Sumon and Islam, Md Johirul and Huang, Yijia and Rajan, Hridesh},
  booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)},
  pages={577--581},
  year={2019},
  organization={IEEE}
}

@article{nielebock2019programmers,
  title={Programmers do not favor lambda expressions for concurrent object-oriented code},
  author={Nielebock, Sebastian and Heum{\"u}ller, Robert and Ortmeier, Frank},
  journal={Empirical Software Engineering},
  volume={24},
  pages={103--138},
  year={2019},
  publisher={Springer}
}

@inproceedings{keshk2023method,
  title={Method chaining redux: an empirical study of method chaining in Java, Kotlin, and Python},
  author={Keshk, Ali M and Dyer, Robert},
  booktitle={2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)},
  pages={546--557},
  year={2023},
  organization={IEEE}
}

@article{clem2021static,
  title={Static analysis at github: An experience report},
  author={Clem, Timothy and Thomson, Patrick},
  journal={Queue},
  volume={19},
  number={4},
  pages={42--67},
  year={2021},
  publisher={ACM New York, NY, USA}
}

@article{parr1995antlr,
  title={ANTLR: A predicated-LL (k) parser generator},
  author={Parr, Terence J. and Quong, Russell W.},
  journal={Software: Practice and Experience},
  volume={25},
  number={7},
  pages={789--810},
  year={1995},
  publisher={Wiley Online Library}
}

@inproceedings{le2022hyperast,
  title={HyperAST: Enabling efficient analysis of software histories at scale},
  author={Le Dilavrec, Quentin and Khelladi, Djamel Eddine and Blouin, Arnaud and J{\'e}z{\'e}quel, Jean-Marc},
  booktitle={Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
  pages={1--12},
  year={2022}
}

@inproceedings{latif2023comparison,
  title={Comparison of Leading Language Parsers--ANTLR, JavaCC, SableCC, Tree-sitter, Yacc, Bison},
  author={Latif, Afshan and Azam, Farooque and Anwar, Muhammad Waseem and Zafar, Amina},
  booktitle={2023 13th International Conference on Software Technology and Engineering (ICSTE)},
  pages={7--13},
  year={2023},
  organization={IEEE}
}
