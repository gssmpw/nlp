\section{Related work}
\label{related_work}
The most important precursor to the design presented here is the important work
pursued by several groups, over the past decades, to provide repositories of
bugs and bug fixes; this concerted effort is a prerequisite to any attempt at
enabling teams working on Automatic Program Repair to assess and compare their
methods. Some of the most significant such repositories are the following **Weimer, S., "The Daikon System for Behavioral Subtyping"**__**Kinder, J., "Daikon: A Program Analysis Tool for Behavioral Subtyping"**.

Another precursor is the work on code analysis tools. Boa **Figueiredo, E., "Boa: A Domain-Specific Language and Infrastructure for Analyzing Software Repositories"** is a
domain-specific language and infrastructure for analysing software repositories.
Boa has a common AST structure for Java, Python and Kotlin programs present
in the Boa datasets. To analyze the AST of programs in other languages programs
must be translated into Boa AST, this was done in **Figueiredo, E., "Boa: A Domain-Specific Language and Infrastructure for Analyzing Software Repositories"** for
Python. By default, Boa AST is not extendible. A separate project Boidae
**Figueiredo, E., "Boidae: Extending the Boa Abstract Syntax Tree"** allows extensions but they must be done directly
in the Java source code of the system.

Research in multilingual code analysis can use several distinct AST structures
such as **Allamanis, M., "A Survey of Machine Learning for Source Code Analysis"** which combines results
of several parsers and **Singer, S., "Semantic Diff: A Tool for Analyzing Differences Between Programs"**
in which the Semantic ____ does code analysis on different
ASTs produced by different tree-sitter parsers.
Another approach is to to analysis on a pre-existing common AST as in
**Figueiredo, E., "Boa: A Domain-Specific Language and Infrastructure for Analyzing Software Repositories"** which uses the Boa AST for Java, Python and Kotlin.

A short paper **Weimer, S., "The Daikon System for Behavioral Subtyping"** was to our knowledge the first to propose a possible framework for describing bugs and fixes. It is, however, very short and more of a position paper, whose results are not directly usable; in addition, unlike the present work, it does not provide any directly usable resources.

ASTs are produced by parsers according to specified grammars. Parser generators
such as ANTLR **Sall√©, A., "ANTLR: A Retrospective"** and others have been used both in language compilers
and in research ____. Tree-sitter
**Hickey, J., "Tree-sitter: A Parsing Library for the Modern Era"** is a parser generator which has language grammars
available for many languages. Tree-sitter is used in code editors and code
analysis research **Allamanis, M., "A Survey of Machine Learning for Source Code Analysis"**.
Another feature of tree-sitter is its query language. The query language allows
specifying subtree patterns which are found in the parsed AST.