
@MISC{ref1,
  author        = "Nome do Autor",
  title         = "Titulo",
  year          = "2006"
}

@Misc{manifesto2001,
  title        = {Manifesto for Agile Software Development},
  year         = {2001},
  organization = {Agilemanifesto.org},
  url          = {https://agilemanifesto.org/iso/en/manifesto.html},
  urldate      = {2023-10-13},
}

@Misc{principiosagile2001,
  title        = {Principles behind the Agile Manifesto},
  year         = {2001},
  organization = {agilemanifesto.org},
  url          = {https://agilemanifesto.org/iso/en/principles.html},
  urldate      = {2023-10-13},
}


@Conference{dreesen2021,
  author              = {Dreesen, Tim and Hennel, Phil and Rosenkranz, Christoph and Kude, Thomas},
  title               = {“The second vice is lying, the first is running into debt.” Antecedents and mitigating practices of social debt: An exploratory study in distributed software development teams},
  year                = {2021},
  editor              = {Bui T.X.},
  note                = {Cited by: 1},
  pages               = {6826 – 6835},
  publisher           = {IEEE Computer Society},
  volume              = {2020-January},
  abbrev_source_title = {Proc. Annu. Hawaii Int. Conf. Syst. Sci.},
  abstract            = {Although much is known about the concept of technical debt in software development, less is known about its social counterpart, also known as social debt. Social debt refers to future consequences of decisions related to people and their interactions. Omissions in social interactions or reduction of communication can foster social debt - and in turn result in negative outcomes in the long run. In this paper, we explore what factors drive and mitigate social debt in distributed agile software development teams. Utilizing an exploratory case study approach, we derive insights from two case organizations. We present antecedents and mitigating factors of social debt related to communication, collaboration, and coordination. © 2021 IEEE Computer Society. All rights reserved.},
  affiliations        = {University of Cologne, Germany; ESSEC Business School, Paris, France},
  isbn                = {978-099813314-0},
  issn                = {15301605},
  journal             = {Proceedings of the Annual Hawaii International Conference on System Sciences},
  keywords            = {Systems science; Agile software development; Distributed software development; Exploratory case studies; Exploratory studies; Mitigating factor; Social interactions; Technical debts; Software design},
  language            = {English},
  publication_stage   = {Final},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85108311913&partnerID=40&md5=3b57332a1ae6747acb1b4da3e99cdb5e},
}

@InProceedings{Tamburri2013,
  author    = {Tamburri, Damian A. and Kruchten, Philippe and Lago, Patricia and van Vliet, Hans},
  booktitle = {2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
  title     = {What is social debt in software engineering?},
  year      = {2013},
  month     = {May},
  pages     = {93-96},
  abstract  = {“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.},
  doi       = {10.1109/CHASE.2013.6614739},
}

@inproceedings{tamburri2019a,
  title={Splicing Community and Software Architecture Smells in Agile Teams: An industrial Study},
  author={Damian Andrew Tamburri and Rick Kazman and Willem-Jan van den Heuvel},
  booktitle={Hawaii International Conference on System Sciences},
  year={2019},
  url={https://api.semanticscholar.org/CorpusID:102351977}
}

@Article{tamburri2019b,
  author                 = {Tamburri, Damian A.},
  journal                = {IEEE Transactions on Computational Social Systems},
  title                  = {Software Architecture Social Debt: Managing the Incommunicability Factor},
  year                   = {2019},
  issn                   = {2329-924X},
  month                  = {Feb},
  note                   = {Cited by: 14; All Open Access, Green Open Access},
  number                 = {1},
  pages                  = {20-37},
  volume                 = {6},
  abbrev_source_title    = {IEEE Trans. Computat. Soc. Syst.},
  abstract               = {Architectural technical debt is the additional project cost connected to technical issues nested in software architectures. Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures. This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability. Evaluating the results in multiple focus groups, this paper concludes that studying social debt and community smells at the architecture level may prove vital to rid software development communities of critical organizational flaws incurring considerable additional cost.},
  affiliations           = {Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, 5612 AZ, Netherlands},
  author_keywords        = {Social debt; social debt cost estimation; social debt in software architecting; technical debt},
  correspondence_address = {D.A. Tamburri; Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, 5612 AZ, Netherlands; email: d.a.tamburri@tue.nl},
  doi                    = {10.1109/TCSS.2018.2886433},
  file                   = {:Tamburri2019 - Software Architecture Social Debt_ Managing the Incommunicability Factor (1).pdf:PDF;:Tamburri2019 - Software Architecture Social Debt_ Managing the Incommunicability Factor.pdf:PDF},
  groups                 = {selecionados, inclusos, catology, caballero-review},
  keywords               = {Cost estimating; Odors; Additional costs; Cost estimations; Development community; Organizational issues; Social debt; Software architecting; Technical debts; Underlying cause; Software design},
  language               = {English},
  publication_stage      = {Final},
  publisher              = {Institute of Electrical and Electronics Engineers Inc.},
  ranking                = {rank5},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Article},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061655975&doi=10.1109%2fTCSS.2018.2886433&partnerID=40&md5=e6693e173e86e6f5ee46cff0ae2f0a06},
}

@InProceedings{Catolino2020,
  author              = {Catolino, Gemma and Palomba, Fabio and Tamburri, Damian A. and Serebrenik, Alexander and Ferrucci, Filomena},
  booktitle           = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering in Society},
  title               = {Refactoring Community Smells in the Wild: The Practitioner's Field Manual},
  year                = {2020},
  address             = {New York, NY, USA},
  month               = {Oct},
  note                = {Cited by: 7},
  pages               = {25–34},
  publisher           = {Association for Computing Machinery},
  series              = {ICSE-SEIS '20},
  abbrev_source_title = {Proc Int Conf Software Eng},
  abstract            = {Community smells have been defined as sub-optimal organizational structures that may lead to social debt. Previous studies have shown that they are highly diffused in both open- and closed-source projects, are perceived as harmful by practitioners, and can even lead to the introduction of technical debt in source code. Despite the presence of this body of research, little is known on the practitioners' perceived prominence of community smells in practice as well as on the strategies adopted to deal with them. This paper aims at bridging this gap by proposing an empirical study in which 76 software practitioners are inquired on (i) the prominence of four well-known community smells, i.e., Organizational Silo, Black Cloud, Lone Wolf, and Radio Silence, in their contexts and (ii) the methods they adopted to "refactor" them. Our results first reveal that community smells frequently manifest themselves in software projects and, more importantly, there exist specific refactoring practices to deal with each of the considered community smells.},
  affiliations        = {University of Salerno, Fisciano, Italy; Jheronimus Academy of Data Science, s'Hertogenbosch, Netherlands; Eindhoven University of Technology, Eindhoven, Netherlands},
  author_keywords     = {Community Smells; Empirical Software Engineering; Social Debt},
  coden               = {PCSED},
  doi                 = {10.1145/3377815.3381380},
  file                = {:Catolino2020a - Refactoring Community Smells in the Wild_ the Practitioner’s Field Manual.pdf:PDF},
  isbn                = {9781450371254},
  issn                = {02705257},
  journal             = {Proceedings - International Conference on Software Engineering},
  keywords            = {empirical software engineering, social debt, community smells},
  language            = {English},
  location            = {Seoul, South Korea},
  numpages            = {10},
  publication_stage   = {Final},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://doi.org/10.1145/3377815.3381380},
}

@Article{tamburri2015,
  author     = {Tamburri, Damian A. and Kruchten, Philippe and Lago, Patricia and Vliet, Hans van},
  journal    = {Journal of Internet Services and Applications},
  title      = {Social debt in software engineering: insights from industry},
  year       = {2015},
  issn       = {1869-0238},
  number     = {1},
  pages      = {10},
  volume     = {6},
  abstract   = {Social debt is analogous to technical debt in many ways: it represents the state of software development organisations as the result of “accumulated” decisions. In the case of social debt, decisions are about people and their interactions. Our objective was to study the causality around social debt in practice. In so doing, we conducted exploratory qualitative research in a large software company. We found many forces together causing social debt; we represented them in a framework, and captured anti-patterns that led to the debt in the first place. Finally, we elicited best practices that technicians adopted to pay back some of the accumulated debt. We learned that social debt is strongly correlated with technical debt and both forces should be reckoned with together during the software process.},
  doi        = {10.1186/s13174-015-0024-6},
  readstatus = {read},
  refid      = {Tamburri2015},
  url        = {https://doi.org/10.1186/s13174-015-0024-6},
}

@Article{Tamburri2021,
  author                     = {Tamburri, Damian A. and Palomba, Fabio and Kazman, Rick},
  journal                    = {IEEE Transactions on Software Engineering},
  title                      = {Exploring Community Smells in Open-Source: An Automated Approach},
  year                       = {2021},
  issn                       = {1939-3520},
  month                      = {March},
  note                       = {Cited by: 20; All Open Access, Green Open Access},
  number                     = {3},
  pages                      = {630-652},
  volume                     = {47},
  abbrev_source_title        = {IEEE Trans Software Eng},
  abstract                   = {Software engineering is now more than ever a community effort. Its success often weighs on balancing distance, culture, global engineering practices and more. In this scenario many unforeseen socio-technical events may result into additional project cost or “social” debt, e.g., sudden, collective employee turnover. With industrial research we discovered community smells, that is, sub-optimal patterns across the organisational and social structure in a software development community that are precursors of such nasty socio-technical events. To understand the impact of community smells at large, in this paper we first introduce CodeFace4Smells, an automated approach able to identify four community smell types that reflect socio-technical issues that have been shown to be detrimental both the software engineering and organisational research fields. Then, we perform a large-scale empirical study involving over 100 years worth of releases and communication structures data of 60 open-source communities: we evaluate (i) their diffuseness, i.e., how much are they distributed in open-source, (ii) how developers perceive them, to understand whether practitioners recognize their presence and their negative effects in practice, and (iii) how community smells relate to existing socio-technical factors, with the aim of assessing the inter-relations between them. The key findings of our study highlight that community smells are highly diffused in open-source and are perceived by developers as relevant problems for the evolution of software communities. Moreover, a number of state-of-the-art socio-technical indicators (e.g., socio-technical congruence) can be used to monitor how healthy a community is and possibly avoid the emergence of social debt.},
  address                    = {10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA},
  affiliation                = {Palomba, F (Corresponding Author), Univ Zurich, CH-8006 Zurich, Switzerland. Tamburri, Damian A., Eindhoven Univ Technol, Eindhoven, Netherlands. Palomba, Fabio, Univ Zurich, CH-8006 Zurich, Switzerland. Kazman, Rick, Univ Hawaii, Informat Technol Management, Honolulu, HI 96822 USA. Kazman, Rick, SEI CMU, Honolulu, HI 96822 USA.},
  affiliations               = {Eindhoven University of Technology, Eindhoven, Netherlands; University of Zurich, Zurich, Switzerland; University of Hawaii SEI/CMU, Honolulu, HI, United States},
  author-email               = {d.a.tamburri@tue.nl palomba@ifi.uzh.ch kazman@hawaii.edu},
  author_keywords            = {empirical software engineering;; human aspects in software engineering; social software engineering; software community smells; Software organisational structures},
  coden                      = {IESED},
  correspondence_address     = {F. Palomba; University of Zurich, Zurich, Switzerland; email: palomba@ifi.uzh.ch},
  da                         = {2023-06-13},
  doc-delivery-number        = {RA1TM},
  doi                        = {10.1109/TSE.2019.2901490},
  eissn                      = {1939-3520},
  file                       = {:Tamburri2021 - Exploring Community Smells in Open Source_ an Automated Approach (1).pdf:PDF;:Tamburri2021 - Exploring Community Smells in Open Source_ an Automated Approach.pdf:PDF},
  funding-acknowledgement    = {SNSF Project named ``Data-driven Contemporary Code Review{''} {[}PP00P2\_170529]},
  funding-text               = {The authors would like to thank Dr. Simone Magnoni to the definition and refinement of the contents of this study and to Prof. Dr. Elisabetta Di Nitto for the feedback she gave during the inception of this study. Dr. Palomba gratefully acknowledges the support of the SNSF Project named ``Data-driven Contemporary Code Review{''} (No. PP00P2\_170529).},
  journal-iso                = {IEEE Trans. Softw. Eng.},
  keywords                   = {Balancing; Industrial research; Microstructure; Odors; Open systems; Social networking (online); Social sciences computing; Software design; Software engineering; Tools; Empirical Software Engineering; Human aspects; Organisational structure; Organizational aspects; Social software engineering; Software community; Open source software},
  keywords-plus              = {IMPACT},
  language                   = {English},
  number-of-cited-references = {79},
  oa                         = {Green Published},
  orcid-numbers              = {Tamburri, Damian Andrew/0000-0003-1230-8961 Palomba, Fabio/0000-0001-9337-5116 Kazman, Rick/0000-0003-0392-2783},
  publication_stage          = {Final},
  publisher                  = {Institute of Electrical and Electronics Engineers Inc.},
  readstatus                 = {read},
  research-areas             = {Computer Science; Engineering},
  researcherid-numbers       = {Tamburri, Damian Andrew/AAJ-2507-2021},
  source                     = {Scopus},
  times-cited                = {20},
  type                       = {Article},
  unique-id                  = {WOS:000631200300010},
  url                        = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062150097&doi=10.1109%2fTSE.2019.2901490&partnerID=40&md5=f9d049afe174884268c53fc7aceb0b06},
  usage-count-last-180-days  = {0},
  usage-count-since-2013     = {3},
  web-of-science-categories  = {Computer Science, Software Engineering; Engineering, Electrical \& Electronic},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)},
}

@Article{Tamburri2016,
  author              = {Tamburri, Damian A. and Kazman, Rick and Fahimi, Hamed},
  journal             = {IEEE Software},
  title               = {The Architect's Role in Community Shepherding},
  year                = {2016},
  issn                = {07407459},
  note                = {Cited by: 49},
  number              = {6},
  pages               = {70 – 79},
  volume              = {33},
  abbrev_source_title = {IEEE Software},
  abstract            = {Software architects don't just design architecture components or champion architecture qualities; they often must guide and harmonize the entire community of project stakeholders. The community-shepherding aspects of the architect's role have been gaining attention, given the increasing importance of complex 'organizational rewiring' scenarios such as DevOps, open source strategies, transitions to agile development, and corporate acquisitions. In these scenarios, architects would benefit by having effective models to align communities with architectures. This article discusses the 'smells' indicating that a community isn't functioning efficiently, offers a set of mitigations for those smells, and provides an overview of community types. © 2016 IEEE.},
  affiliations        = {Politecnico di Milano, Italy; University of Hawaii, United States; CGI, Canada},
  author_keywords     = {architectural social debt; social debt management; software architecture shepherds; software communities; software community smells; software development; software engineering; software organizational structure; software social debt},
  coden               = {IESOE},
  doi                 = {10.1109/MS.2016.144},
  file                = {:tamburri2016.pdf:PDF},
  groups              = {selecionados, inclusos, catology, caballero-review},
  keywords            = {Mergers and acquisitions; Odors; Open source software; Software architecture; Software engineering; Agile development; architectural social debt; Design architecture; Open sources; Organizational structures; Project stakeholders; Software architects; Software community; Software design},
  language            = {English},
  publication_stage   = {Final},
  publisher           = {IEEE Computer Society},
  ranking             = {rank5},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Article},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994403514&doi=10.1109%2fMS.2016.144&partnerID=40&md5=903721c96045a6521a1d30f38a44c46e},
}


@InProceedings{Tahsin2022,
  author                 = {Tahsin, Noshin and Sakib, Kazi},
  booktitle              = {2022 29th Asia-Pacific Software Engineering Conference (APSEC)},
  title                  = {Refactoring Community Smells: An Empirical Study on the Software Practitioners of Bangladesh},
  year                   = {2022},
  month                  = {Dec},
  note                   = {Cited by: 0},
  pages                  = {422-426},
  publisher              = {IEEE Computer Society},
  volume                 = {2022-December},
  abbrev_source_title    = {Proc. Asia Pac. Softw. Eng. Conf. APSEC},
  abstract               = {Community smells are organizational and social anti-patterns in the development community that need to be refactored. In the literature, studies on community smell refactoring are found from the very conceptual level. However, little is known about the practitioners’ perceptions, refactoring readiness and the refactoring strategies adopted in local software communities. This paper bridge this gap by exploring these issues in the software industry of Bangladesh. A depth interview-based study was conducted on local software practitioners chosen through a convenience sample recruitment strategy. Interviews were transcribed and analyzed using Straussian Grounded Theory. We collected data on the four prominent smells according to literature and introduced a new measure called ‘Refactoring Readiness’ to calculate the community smell refactoring preparedness of a software development community. Analyzing the data, it is seen that 85% local practitioners perceive community smells as harmful but less than half take step to mitigate those smells. We identified the refactoring strategies (e.g. creating a structured communication plan, mentoring) currently adopted by them and found that the Refactoring Readiness of the software industry of Bangladesh is 0.63 on a scale of 0-1. This provides evidence that more work needs to be done for refactoring community smells from the local sub-optimal development communities.},
  affiliations           = {University of Dhaka, Institute of Information Technology, Dhaka, Bangladesh},
  author_keywords        = {community smell; empirical study; refactoring},
  correspondence_address = {N. Tahsin; University of Dhaka, Institute of Information Technology, Dhaka, Bangladesh; email: bsse0914@iit.du.ac.bd},
  doi                    = {10.1109/APSEC57359.2022.00055},
  isbn                   = {978-166545537-4},
  issn                   = {2640-0715},
  journal                = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
  keywords               = {Odors; Anti-patterns; Bangladesh; Community smell; Development community; Empirical studies; Literature studies; Organisational; Refactorings; Software industry; Software practitioners; Software design},
  language               = {English},
  publication_stage      = {Final},
  readstatus             = {read},
  source                 = {Scopus},
  type                   = {Conference paper},
  url                    = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85149172008&doi=10.1109%2fAPSEC57359.2022.00055&partnerID=40&md5=21eb50e80022f084d7eb0dac443ad1cf},
}

@InProceedings{Sarmento2022,
  author              = {Sarmento, Camila and Massoni, Tiago and Serebrenik, Alexander and Catolino, Gemma and Tamburri, Damian and Palomba, Fabio},
  booktitle           = {2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title               = {Gender Diversity and Community Smells: A Double-Replication Study on Brazilian Software Teams},
  year                = {2022},
  month               = {March},
  note                = {Cited by: 2},
  pages               = {273-283},
  publisher           = {Institute of Electrical and Electronics Engineers Inc.},
  abbrev_source_title = {Proc. - IEEE Int. Conf. Softw. Anal., Evol. Reengineering, SANER},
  abstract            = {Social debts in software teams are gaining increasing attention from the research community due to their potential adverse effects on software quality. For instance, community smells are indicators of sub-optimal organizational structures and may well lead to the emergence of social debt. Previous studies analyzed which factors influence the emergence/mitigation of such smells. In particular, studies by Catolino et al. showed how factors related to team composition, particularly gender diversity, correlated to the mitigation of community smells. However, a confirmation survey on 60 practitioners suggested that these results were not aligned with the experts' perceptions. In a separate survey, Catolino et al. collected the most common team refactoring strategies for those community smells. In this work we replicate two studies by those authors, focusing on the Brazilian software teams; culture-specific expectations on the behavior of people of different genders might have affected the perception of the importance of gender diversity and refactoring strategies when mitigating community smells. We translated the survey instrument used by Catolino et al. to Brazilian Portuguese and recruited 184 Brazilian developers. Re-sults did not show significant differences from the original study; indeed, participants perceived gender diversity as less valuable to mitigate community smells than such factors like experience or team size. Additionally, we performed a qualitative analysis of an open question within the questionnaire for the refactoring strategies. Brazilian developers agree with the original studies for most smells, mainly promoting restructuring communities, creating a communication plan and mentoring. We believe these results provide further evidence on the problem and its implications when managing software teams, avoiding technical debt and maintenance issues due to team communication and coordination problems.},
  affiliations        = {Federal University of Campina Grande, Campina Grande, Brazil; Eindhoven University of Technology, Eindhoven, Netherlands; Jheronimus Academy of Data Science, 's-Hertogenbosch, Netherlands; University of Salerno, Salerno, Italy},
  author_keywords     = {Commu-nity Smells; Development Teams; Gender Diversity; Social Debt},
  doi                 = {10.1109/SANER53432.2022.00043},
  isbn                = {978-166543786-8},
  issn                = {1534-5351},
  journal             = {Proceedings - 2022 IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2022},
  keywords            = {Behavioral research; Computer software selection and evaluation; Human resource management; Odors; Structural optimization; Adverse effect; Commu-nity smell; Development teams; Gender diversity; Refactorings; Replication study; Research communities; Social debt; Software Quality; Software teams; Surveys},
  language            = {English},
  publication_stage   = {Final},
  readstatus          = {read},
  source              = {Scopus},
  type                = {Conference paper},
  url                 = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85133692894&doi=10.1109%2fSANER53432.2022.00043&partnerID=40&md5=e7fabf15f8c5c0dc44830467eb9dd6fd},
}

@InProceedings{martini2019,
author="Martini, Antonio
and Stray, Viktoria
and Moe, Nils Brede",
editor="Hoda, Rashina",
title="Technical-, Social- and Process Debt in Large-Scale Agile: An Exploratory Case-Study",
booktitle="Agile Processes in Software Engineering and Extreme Programming -- Workshops",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="112--119",
abstract="Large-scale agile projects bring inter-teams interaction challenges. Teams need to be autonomous, but often crosscutting concerns affect many teams. If the teams fail to collaborate on these concerns, the negative effects might hinder agility in the medium and long term. In other words, the organization and the system accumulate debt, on which the teams pay a high interest. Such debt must therefore be prioritized and ``repaid'' timely. We conducted a case study with interviews, observations and document analysis. Via both team- and large-scale retrospectives we investigated how teams coordinate and discuss Technical-, Social- and Process Debts.",
isbn="978-3-030-30126-2"
}

@book{agilepraticeguide2017,
  title={Agile Practice Guide, Project Management Institute, 2017: Agile Practice Guide},
  author={Alliance, Agile},
  volume={1},
  year={2017},
  publisher={Bukupedia}
}

@book{agiletrenches2015,
  title={Scrum and XP from the Trenches},
  author={Kniberg, Henrik},
  year={2015},
  publisher={Lulu. com}
}

@techreport{stateagile2016,
    author = {Version One},
    title = {11th State of Agile Report},
    institution = {Version One},
    year = {2016}
}

@book{kua2012retrohandbook,
    author = {Patrick Kua},
    title = {The Retrospective Handbook},
    publisher = {Leanpub},
    year = {2013} 
}

@book{derby2006agileretrospectives,
  title={Agile retrospectives: Making good teams great},
  author={Derby, Esther and Larsen, Diana and Schwaber, Ken},
  year={2006},
  publisher={Pragmatic Bookshelf}
}

@book{caroli2020funretrospectives,
  title={FunRetrospectives: activities and Ideas for making agile retrospectives more engaging},
  author={Caroli, Paulo and Coimbra, Tain{\~a} Caetano},
  year={2020},
  publisher={Editora Caroli}
}

@book{scrumguide2022bok,
  publisher = {Scrumstudy, A Brand Of Vmedu, Inc},
  author = {SCRUMStudy},
  title = {A Guide to the Scrum Body of Knowledge (SBOK® Guide) – Fourth edition},
  year = {2022}
}

@misc{scrumguide2020,
  author = {Schwaber, Ken and Sutherland, Jeff},
  month = {11},
  title = {Scrum Guide},
  url = {https://scrumguides.org/scrum-guide.html},
  year = {2020},
  organization = {Scrumguides.org}
}

@article{caballero2023,
title = {Community smells—The sources of social debt: A systematic literature review},
journal = {Information and Software Technology},
volume = {153},
pages = {107078},
year = {2023},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2022.107078},
url = {https://www.sciencedirect.com/science/article/pii/S0950584922001872},
author = {Eduardo Caballero-Espinosa and Jeffrey C. Carver and Kimberly Stowers},
keywords = {Community smells, Social debt, Software development teams, Systematic literature review, Teamwork, Team performance},
abstract = {Context:
Social debt describes the accumulation of unforeseen project costs (or potential costs) from sub-optimal software development processes. Community smells are sociotechnical anti-patterns and one source of social debt. Because community smells impact software teams, development processes, outcomes, and organizations, we to understand their impact on software engineering.
Objective:
To provide an overview of community smells in social debt, based on published literature, and describe future research.
Method:
We conducted a systematic literature review (SLR) to identify properties, understand origins and evolution, and describe the emergence of community smells. This SLR explains the impact of community smells on teamwork and team performance.
Results:
We include 25 studies. Social debt describes the impacts of poor socio-technical decisions on work environments, people, software products, and society. For each of the 30 community smells identified as sources of social debt, we provide a detailed description, management approaches, organizational strategies, and mitigation effectiveness. We identify five groups of management approaches: organizational strategies, frameworks, models, tools, and guidelines. We describe 11 common properties of community smells. We develop the Community Smell Stages Framework to concisely describe the origin and evolution of community smells. We then describe the causes and effects for each community smell. We identify and describe 8 types of causes and 11 types of effects related to the community smells. Finally, we provide 8 comprehensive Sankey diagrams that offer insights into threats the community smells pose to teamwork factors and team performance.
Conclusion:
Community smells explain the influence work conditions have on software developers. The literature is scarce and focuses on a small number of community smells. Thus, the community smells still need more research. This review helps by organizing the state of the art about community smells. Our contributions provide motivations for future research and provide educational material for software engineering professionals.}
}

@INPROCEEDINGS{muller2021,
  author={Müller, Debora and Kropp, Martin and Anslow, Craig and Meier, Andreas},
  booktitle={2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)}, 
  title={The Effects on Social Support and Work Engagement with Scrum Events}, 
  year={2021},
  volume={},
  number={},
  pages={101-104},
  doi={10.1109/CHASE52884.2021.00019}}

@inproceedings{law2005,
author = {Law, Amy and Charron, Raylene},
title = {Effects of Agile Practices on Social Factors},
year = {2005},
isbn = {1595931201},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1083106.1083115},
doi = {10.1145/1083106.1083115},
abstract = {Programmers are living in an age of accelerated change. State of the art technology that was employed to facilitate projects a few years ago are typically obsolete today. Presently, there are requirements for higher quality software with less tolerance for errors, produced in compressed timelines with fewer people. Therefore, project success is more elusive than ever and is contingent upon many key aspects. One of the most crucial aspects is social factors. These social factors, such as knowledge sharing. motivation, and customer collaboration, can be addressed through agile practices. This paper will demonstrate two successful industrial software projects which are different in all aspects; however, both still apply agile practices to address social factors. The readers will see how agile practices in both projects were adapted to fit each unique team environment. The paper will also provide lessons learned and recommendations based on retrospective reviews and observations. These recommendations can lead to an improved chance of success in a software development project.},
booktitle = {Proceedings of the 2005 Workshop on Human and Social Factors of Software Engineering},
pages = {1–5},
numpages = {5},
keywords = {knowledge sharing, agile practices, motivation, customer collaboration, social factors},
location = {St. Louis, Missouri},
series = {HSSE '05}
}

@ARTICLE{McHugh2012,
  author={McHugh, Orla and Conboy, Kieran and Lang, Michael},
  journal={IEEE Software}, 
  title={Agile Practices: The Impact on Trust in Software Project Teams}, 
  year={2012},
  volume={29},
  number={3},
  pages={71-76},
  doi={10.1109/MS.2011.118}}

@article{Pikkarainen2008,
author = {Pikkarainen, M. and Haikara, J. and Salo, O. and Abrahamsson, P. and Still, J.},
title = {The Impact of Agile Practices on Communication in Software Development},
year = {2008},
issue_date = {June      2008},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {13},
number = {3},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-008-9065-9},
doi = {10.1007/s10664-008-9065-9},
abstract = {Agile software development practices such as eXtreme Programming (XP) and SCRUM have increasingly been adopted to respond to the challenges of volatile business environments, where the markets and technologies evolve rapidly and present the unexpected. In spite of the encouraging results so far, little is known about how agile practices affect communication. This article presents the results from a study which examined the impact of XP and SCRUM practices on communication within software development teams and within the focal organization. The research was carried out as a case study in F-Secure where two agile software development projects were compared from the communication perspective. The goal of the study is to increase the understanding of communication in the context of agile software development: internally among the developers and project leaders and in the interface between the development team and stakeholders (i.e. customers, testers, other development teams). The study shows that agile practices improve both informal and formal communication. However, it further indicates that, in larger development situations involving multiple external stakeholders, a mismatch of adequate communication mechanisms can sometimes even hinder the communication. The study highlights the fact that hurdles and improvements in the communication process can both affect the feature requirements and task subtask dependencies as described in coordination theory. While the use of SCRUM and some XP practices facilitate team and organizational communication of the dependencies between product features and working tasks, the use of agile practices requires that the team and organization use also additional plan-driven practices to ensure the efficiency of external communication between all the actors of software development.},
journal = {Empirical Softw. Engg.},
month = {jun},
pages = {303–337},
numpages = {35},
keywords = {Agile software development practices, Communication, Coordination theory}
}


@InProceedings{dingsoyr2018,
author="Dings{\o}yr, Torgeir
and Mikalsen, Marius
and Solem, Anniken
and Vestues, Kathrine",
editor="Garbajosa, Juan
and Wang, Xiaofeng
and Aguiar, Ademar",
title="Learning in the Large - An Exploratory Study of Retrospectives in Large-Scale Agile Development",
booktitle="Agile Processes in Software Engineering and Extreme Programming",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="191--198",
abstract="Many see retrospectives as the most important practice of agile software development. Previous studies of retrospectives have focused on process and outcome at team level. In this article, we study how a large-scale agile development project uses retrospectives through an analysis of retrospective reports identifying a total of 109 issues and 36 action items as a part of a longitudinal case study. We find that most of the issues identified relate to team-level learning and improvement, and discuss these findings in relation to current advice to improve learning outcome in large-scale agile development.",
isbn="978-3-319-91602-6"
}

@book{strauss2014basics,
  title={Basics of qualitative research: Techniques and Procedures for Developing Grounded Theory},
  author={Strauss, Anselm and Corbin, Juliet},
  year={2014},
  publisher={Sage publications}
}

@book{creswell2017research,
  title={Research design: Qualitative, quantitative, and mixed methods approaches},
  author={Creswell, John W and Creswell, J David},
  year={2017},
  publisher={Sage publications}
}

@book{morgan1996,
  title={Focus groups as qualitative research},
  author={Morgan, David L},
  volume={16},
  year={1996},
  publisher={Sage publications}
}

 @article{paranhos2016,
title={Uma introdução aos métodos mistos},  volume={18},  ISSN={1517-4522},  url={https://doi.org/10.1590/15174522-018004221},  DOI={10.1590/15174522-018004221},  number={42},  journal={Sociologias},  publisher={Programa de Pós-Graduação em Sociologia - UFRGS},  author={Paranhos, Ranulfo and Figueiredo Filho, Dalson Britto and Rocha, Enivaldo Carvalho da and Silva Júnior, José Alexandre da and Freitas, Diego},  year={2016},  month={May},  pages={384–411} }

@article{palomba2021,
title = {Predicting the emergence of community smells using socio-technical metrics: A machine-learning approach},
journal = {Journal of Systems and Software},
volume = {171},
pages = {110847},
year = {2021},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2020.110847},
url = {https://www.sciencedirect.com/science/article/pii/S0164121220302375},
author = {Fabio Palomba and Damian Andrew Tamburri},
keywords = {Community smells, Social debt, Empirical software engineering},
abstract = {Community smells represent sub-optimal conditions appearing within software development communities (e.g., non-communicating sub-teams, deviant contributors, etc.) that may lead to the emergence of social debt and increase the overall project’s cost. Previous work has studied these smells under different perspectives, investigating their nature, diffuseness, and impact on technical aspects of source code. Furthermore, it has been shown that some socio-technical metrics like, for instance, the well-known socio-technical congruence, can potentially be employed to foresee their appearance. Yet, there is still a lack of knowledge of the actual predictive power of such socio-technical metrics. In this paper, we aim at tackling this problem by empirically investigating (i) the potential value of socio-technical metrics as predictors of community smells and (ii) what is the performance of within- and cross-project community smell prediction models based on socio-technical metrics. To this aim, we exploit a dataset composed of 60 open-source projects and consider four community smells such as Organizational Silo, Black Cloud, Lone Wolf, and Bottleneck. The key results of our work report that a within-project solution can reach F-Measure and AUC-ROC of 77% and 78%, respectively, while cross-project models still require improvements, being however able to reach an F-Measure of 62% and overcome a random baseline. Among the metrics investigated, socio-technical congruence, communicability, and turnover-related metrics are the most powerful predictors of the emergence of community smells.}
}

@ARTICLE{palomba2021b,
  author={Palomba, Fabio and Andrew Tamburri, Damian and Arcelli Fontana, Francesca and Oliveto, Rocco and Zaidman, Andy and Serebrenik, Alexander},
  journal={IEEE Transactions on Software Engineering}, 
  title={Beyond Technical Aspects: How Do Community Smells Influence the Intensity of Code Smells?}, 
  year={2021},
  volume={47},
  number={1},
  pages={108-129},
  keywords={Predictive models;Software engineering;Open source software;Convergence;Tools;Feature extraction;Code smells;organizational structure;community smells;mixed-methods study},
  doi={10.1109/TSE.2018.2883603}}


@Article{huang2022a,
  author                     = {Huang, Zi-Jie and Shao, Zhi-Qing and Fan, Gui-Sheng and Yu, Hui-Qun and Yang, Xing-Guang and Yang, Kang},
  journal                    = {Journal of Computer Science and Technology},
  title                      = {Community Smell Occurrence Prediction on Multi-Granularity by Developer-Oriented Features and Process Metrics},
  year                       = {2022},
  issn                       = {10009000},
  month                      = {FEB},
  note                       = {Cited by: 3},
  number                     = {1},
  pages                      = {182 – 206},
  volume                     = {37},
  abbrev_source_title        = {J Comput Sci Technol},
  abstract                   = {Community smells are sub-optimal developer community structures that hinder productivity. Prior studies performed smell prediction and provided refactoring guidelines from a top-down aspect to help community shepherds. Simultaneously, refactoring smells also requires bottom-up effort from every developer. However, supportive measures and guidelines for them are not available at a fine-grained level. Since recent work revealed developers’ personalities and working states could influence community smells’ emergence and variation, we build prediction models with experience, sentiment, and development process features of developers considering three smells including Organizational Silo, Lone Wolf, and Bottleneck, as well as two related classes including smelly developer and smelly quitter. We predict the five classes in the individual granularity, and we also generate forecasts for the number of smelly developers in the community granularity. The proposed models achieve F-measures ranging from 0.73 to 0.92 in individual-wide within-project, time-wise, and cross-project prediction, and mean R2 performance of 0.68 in community-wide Smelly Developer prediction. We also exploit SHAP (SHapley Additive exPlanations) to assess feature importance to explain our predictors. In conclusion, we suggest developers with heavy workload should foster more frequent communication in a straightforward and polite way to build healthier communities, and we recommend community shepherds to use the forecasting model for refactoring planning. © 2022, Institute of Computing Technology, Chinese Academy of Sciences.},
  address                    = {16 DONGHUANGCHENGGEN NORTH ST, BEIJING 100717, PEOPLES R CHINA},
  affiliation                = {Shao, ZQ; Fan, GS (Corresponding Author), East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai 200237, Peoples R China. Fan, GS (Corresponding Author), Shanghai Key Lab Comp Software Testing \& Evaluati, Shanghai 200237, Peoples R China. Huang, Zi-Jie; Shao, Zhi-Qing; Fan, Gui-Sheng; Yu, Hui-Qun; Yang, Xing-Guang; Yang, Kang, East China Univ Sci \& Technol, Dept Comp Sci \& Engn, Shanghai 200237, Peoples R China. Fan, Gui-Sheng, Shanghai Key Lab Comp Software Testing \& Evaluati, Shanghai 200237, Peoples R China. Yu, Hui-Qun, Shanghai Engn Res Ctr Smart Energy, Shanghai 200237, Peoples R China.},
  affiliations               = {Department of Computer Science and Engineering, East China University of Science and Technology, Shanghai, 200237, China; Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 200237, China; Shanghai Engineering Research Center of Smart Energy, Shanghai, 200237, China},
  author-email               = {hzj@mail.ecust.edu.cn zshao@ecust.edu.cn gsfan@ecust.edu.cn yhq@ecust.edu.cn y12180301@mail.ecust.edu.cn y12190041@mail.ecust.edu.cn},
  author_keywords            = {community smell; developer sentiment; empirical software engineering; socio-technical analysis},
  coden                      = {JCTEE},
  correspondence_address     = {Z.-Q. Shao; Department of Computer Science and Engineering, East China University of Science and Technology, Shanghai, 200237, China; email: zshao@ecust.edu.cn; G.-S. Fan; Shanghai Key Laboratory of Computer Software Testing and Evaluating, Shanghai, 200237, China; email: gsfan@ecust.edu.cn},
  da                         = {2023-06-13},
  doc-delivery-number        = {ZC9NM},
  doi                        = {10.1007/s11390-021-1596-1},
  eissn                      = {1860-4749},
  file                       = {:msl-resultados/s11390-021-1596-1.pdf:PDF},
  funding-acknowledgement    = {National Natural Science Foundation of China {[}61772200]; Natural Science Foundation of Shanghai {[}21ZR1416300]},
  funding-text               = {This work was partially supported by the National Natural Science Foundation of China under Grant No. 61772200, and the Natural Science Foundation of Shanghai under Grant No. 21ZR1416300.},
  groups                     = {selecionados, inclusos, catology, caballero-review},
  journal-iso                = {J. Comput. Sci. Technol.},
  keywords                   = {Odors; Software engineering; Structural optimization; Community smell; Developer sentiment; Empirical Software Engineering; Multi-granularity; Oriented features; Oriented process; Refactorings; Socio-technical analyse; Sociotechnical; Technical analysis; Forecasting},
  keywords-plus              = {SOFTWARE DEVELOPERS; IMPACT},
  language                   = {English},
  number-of-cited-references = {59},
  orcid-numbers              = {Huang, Zijie/0000-0002-8911-9889},
  publication_stage          = {Final},
  publisher                  = {Springer},
  ranking                    = {rank4},
  readstatus                 = {read},
  research-areas             = {Computer Science},
  source                     = {Scopus},
  times-cited                = {3},
  type                       = {Article},
  unique-id                  = {WOS:000757837300010},
  url                        = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85125323743&doi=10.1007%2fs11390-021-1596-1&partnerID=40&md5=8e4c15f6f3181100378d973e884107f4},
  usage-count-last-180-days  = {2},
  usage-count-since-2013     = {4},
  web-of-science-categories  = {Computer Science, Hardware \& Architecture; Computer Science, Software Engineering},
  web-of-science-index       = {Science Citation Index Expanded (SCI-EXPANDED)},
}

@phdthesis{magnoni2016,
  author = {Magnoni, Simone},
  title = {An Approach To Measure Community Smells in Software Development Communities},
    school = {Politecnico di Milano},
  year = {2016}
}

@inproceedings{matthies2020,
   series={HICSS},
   title={Towards Empirically Validated Remedies for Scrum Retrospective Headaches},
   ISSN={2572-6862},
   url={a://dx.doi.org/10.24251/HICSS.2020.762},
   DOI={10.24251/hicss.2020.762},
   booktitle={Proceedings of the 53rd Hawaii International Conference on System Sciences},
   publisher={Hawaii International Conference on System Sciences},
   author={Matthies, Christoph and Dobrigkeit, Franziska},
   year={2020},
   collection={HICSS}
}

@InProceedings{matthies2019,
author="Matthies, Christoph
and Dobrigkeit, Franziska
and Ernst, Alexander",
editor="Walker, Alastair
and O'Connor, Rory V.
and Messnarz, Richard",
title="Counteracting Agile Retrospective Problems with Retrospective Activities",
booktitle="Systems, Software and Services Process Improvement",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="532--545",
abstract="Retrospective meetings are a fundamental part of Agile software development methods. Effective retrospectives can positively impact teamwork, productivity, and work satisfaction. In this paper, we focus on problems that commonly occur during these meetings. To address them, we suggest retrospective activities that are already used in practice. These activities provide structure and guide the team through the meeting. We created a mapping between a selection of these activities and the problems they attempt to solve. We evaluated the created mapping through multiple case studies with software development teams in educational and professional contexts. Our results verify the existence of a relationship between specific retrospective activities and connected retrospective problems. Furthermore, using observational studies we could verify parts of the created problem-activity mapping.",
isbn="978-3-030-28005-5"
}


@InProceedings{khanna2022,
author="Khanna, Dron
and Wang, Xiaofeng",
editor="Stray, Viktoria
and Stol, Klaas-Jan
and Paasivaara, Maria
and Kruchten, Philippe",
title="Are Your Online Agile Retrospectives Psychologically Safe? the Usage of Online Tools",
booktitle="Agile Processes in Software Engineering and Extreme Programming",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="35--51",
abstract="One essential prerequisite for successful agile retrospective sessions is to accomplish a psychologically safe environment. Creating a psychologically safe environment for the co-located team is challenging. Further, it becomes more demanding with online agile retrospective teams. Literature sheds little light on creating a psychologically safe online environment for conducting agile retrospectives. Our study aims at addressing this knowledge gap and asks the research question: how does the usage of online tools influence psychological safety in online agile retrospectives? A single case study was conducted with a major software company's Research and Development team. We analysed a recorded online retrospective session of the team to identify patterns of the usage of online tools associated with the online meeting platform they used and how that usage influenced the psychological safety level of the team. Our findings show that retrospective participants are psychologically safe if they share opinions, make mistakes, raise a problem, ask questions, and show consent using online tools. Our study contributes online tools that influence psychological safety factors, corresponding levels and behaviours.",
isbn="978-3-031-08169-9"
}


@ARTICLE {madampe2024,
author = {K. Madampe and R. Hoda and J. Grundy},
journal = {IEEE Software},
title = {Addressing Bad Feelings in Agile Software Project Contexts},
year = {2024},
volume = {},
number = {01},
issn = {1937-4194},
pages = {1-6},
abstract = {Like all people, software developers feel several emotions – positive and negative – when working on projects. But what are the underlying reasons for these emotions? Are their emotions linked to their work satisfaction and productivity? Can we boost developer satisfaction and productivity by remedying the causes of negative emotions? Agile is the most common software development approach currently used. Based on our empirical industry studies, we propose several solutions to overcome the causes of negative emotions in agile contexts.},
keywords = {productivity;software;testing;surveys;reviews;estimation;australia},
doi = {10.1109/MS.2024.3377703},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {mar}
}

@article{graziotin2018,
title = {What happens when software developers are (un)happy},
journal = {Journal of Systems and Software},
volume = {140},
pages = {32-47},
year = {2018},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2018.02.041},
url = {https://www.sciencedirect.com/science/article/pii/S0164121218300323},
author = {Daniel Graziotin and Fabian Fagerholm and Xiaofeng Wang and Pekka Abrahamsson},
keywords = {Behavioral software engineering, Developer experience, Human aspects, Happiness, Affect, Emotion},
abstract = {The growing literature on affect among software developers mostly reports on the linkage between happiness, software quality, and developer productivity. Understanding happiness and unhappiness in all its components – positive and negative emotions and moods – is an attractive and important endeavor. Scholars in industrial and organizational psychology have suggested that understanding happiness and unhappiness could lead to cost-effective ways of enhancing working conditions, job performance, and to limiting the occurrence of psychological disorders. Our comprehension of the consequences of (un)happiness among developers is still too shallow, being mainly expressed in terms of development productivity and software quality. In this paper, we study what happens when developers are happy and unhappy while developing software. Qualitative data analysis of responses given by 317 questionnaire participants identified 42 consequences of unhappiness and 32 of happiness. We found consequences of happiness and unhappiness that are beneficial and detrimental for developers’ mental well-being, the software development process, and the produced artifacts. Our classification scheme, available as open data enables new happiness research opportunities of cause-effect type, and it can act as a guideline for practitioners for identifying damaging effects of unhappiness and for fostering happiness on the job.}
}

@InProceedings{carneiro2020,
author="de Figueiredo Carneiro, Glauco
and J{\'u}nior, Rui Carig{\'e}",
editor="Latifi, Shahram",
title="Investigating the Impact of Developers Sentiments on Software Projects",
booktitle="17th International Conference on Information Technology--New Generations (ITNG 2020)",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="257--263",
abstract="Several areas of knowledge are subject to the interference of social aspects in their processes. Sentiment Analysis uses Data Science techniques to support automated or semi-automated identification of human behavior and has been widely used to characterize the perception of issues from different areas from Politics to E-commerce. The objective of this paper is to analyze the impact of developers' sentiments on open source software projects based on evidence from the literature. To achieve this goal, we selected papers from Google Scholar reporting the impact of sentiments on software practices and artifacts. We have found studies that analyzed this impact based on extracted data from different sources. Productivity, collaboration, and the software product quality can be impacted by developers' sentiments.",
isbn="978-3-030-43020-7"
}


@InProceedings{fontana2022,
author="Fontana, Rafaela Mantovani
and Wojciechowski, Jaime
and Monta{\~{n}}o, Razer Rojas
and Marczak, Sabrina
and Reinehr, Sheila
and Malucelli, Andreia",
editor="Stray, Viktoria
and Stol, Klaas-Jan
and Paasivaara, Maria
and Kruchten, Philippe",
title="A Countrywide Descriptive Survey of Agile Software Development in Brazil",
booktitle="Agile Processes in Software Engineering and Extreme Programming",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="185--202",
abstract="For years, industry institutions and academic researchers have been surveying software practitioners on agile software development methods adoption. These surveys have been useful in describing the characteristics, challenges, and impacts of agile adoption, mainly in Europe and North America. Latin American practitioners miss information on the state of agile adoption. This study aims to fill this gap by describing agile software development adoption in Brazil. We collected data from 897 countrywide-distributed practitioners. We used descriptive statistics and machine learning algorithms to understand our dataset. Results show the profile of companies and teams, characteristics of agile usage, perception of success, applied principles and practices, and reasons, challenges and impacts of agile adoption. We also explore the relevance of principles in software process improvements. We contribute by mapping the state-of-the-practice of agile adoption in Brazil and by contrasting our results to previous literature, which points out how we further current knowledge in academia.",
isbn="978-3-031-08169-9"
}

@article{bell2018,
  author = {Bell, Suzanne T. and Brown, Shanique G. and Colaneri, Anthony and Outland, Neal},
  month = {05},
  pages = {349-362},
  title = {Team composition and the ABCs of teamwork.},
  doi = {10.1037/amp0000305},
  volume = {73},
  year = {2018},
  journal = {American Psychologist}
}

@article{salas2015,
  author = {Salas, Eduardo and Shuffler, Marissa L. and Thayer, Amanda L. and Bedwell, Wendy L. and Lazzara, Elizabeth H.},
  month = {10},
  pages = {599-622},
  title = {Understanding and Improving Teamwork in Organizations: A Scientifically Based Practical Guide},
  doi = {https://doi.org/10.1002/hrm.21628},
  volume = {54},
  year = {2015},
  journal = {Human Resource Management}
}


@article {kvale1983,
      author = "Steinar Kvale",
      title = "The Qualitative Research Interview",
      journal = "Journal of Phenomenological Psychology",
      year = "1983",
      publisher = "Brill",
      address = "Leiden, The Netherlands",
      volume = "14",
      number = "1-2",
      doi = "10.1163/156916283X00090",
      pages=      "171 - 196",
      url = "https://brill.com/view/journals/jpp/14/1-2/article-p171_9.xml"
}

@article{chang2021,
  author = {Chang, Chi-Cheng and Wang, Yao-Hua},
  month = {04},
  pages = {1-15},
  title = {Using Phenomenological Methodology with Thematic Analysis to Examine and Reflect on Commonalities of Instructors’ Experiences in MOOCs},
  doi = {10.3390/educsci11050203},
  volume = {11},
  year = {2021},
  journal = {Education Sciences}
}

@book{charmaz2009,
  title={A constru{\c{c}}{\~a}o da teoria fundamentada: Guia Pr{\'a}tico para An{\'a}lise Qualitativa},
  author={Charmaz, K.},
  isbn={9788536320984},
  series={M{\'e}todos de Pesquisa},
  url={https://books.google.com.br/books?id=offC0wDYzC4C},
  year={2009},
  publisher={Penso}
}

@article{guest2006,
author = {Greg Guest and Arwen Bunce and Laura Johnson},
title ={How Many Interviews Are Enough?: An Experiment with Data Saturation and Variability},

journal = {Field Methods},
volume = {18},
number = {1},
pages = {59-82},
year = {2006},
doi = {10.1177/1525822X05279903},

URL = { 
    
        https://doi.org/10.1177/1525822X05279903
    
    

},
eprint = { 
    
        https://doi.org/10.1177/1525822X05279903
    
    

}
,
    abstract = { Guidelines for determining nonprobabilistic sample sizes are virtually nonexistent. Purposive samples are the most commonly used form of nonprobabilistic sampling, and their size typically relies on the concept of “saturation,” or the point at which no new information or themes are observed in the data. Although the idea of saturation is helpful at the conceptual level, it provides little practical guidance for estimating sample sizes, prior to data collection, necessary for conducting quality research. Using data from a study involving sixty in-depth interviews with women in two West African countries, the authors systematically document the degree of data saturation and variability over the course of thematic analysis. They operationalize saturation and make evidence-based recommendations regarding nonprobabilistic sample sizes for interviews. Based on the data set, they found that saturation occurred within the first twelve interviews, although basic elements for metathemes were present as early as six interviews. Variability within the data followed similar patterns. }
}

@article{thirycherques2009,
  author = {Thirycherques, Hermano Roberto},
  pages = {20-27},
  title = {SATURAÇÃO EM PESQUISA QUALITATIVA: ESTIMATIVA EMPÍRICA DE DIMENSIONAMENTO},
  volume = {2},
  year = {2009},
  organization = {Revista Brasileira de Pesquisas de Marketing, Opinião e Mídia},
  journal = {Revista Brasileira de Pesquisas de Marketing, Opinião e Mídia}
}

@book{neuendorf2002,
  title={The Content Analysis Guidebook},
  author={Neuendorf, K.A.},
  isbn={9780761919780},
  lccn={20104115},
  url={https://books.google.com.br/books?id=huPVtmu4sigC},
  year={2002},
  publisher={SAGE Publications}
}

@book{creswell2014,
  title={Investiga{\c{c}}{\~a}o Qualitativa e Projeto de Pesquisa - 3.ed.: Escolhendo entre Cinco Abordagens},
  author={Creswell, J.W.},
  isbn={9788565848893},
  series={M{\'e}todos de Pesquisa},
  url={https://books.google.com.br/books?id=Ymi5AwAAQBAJ},
  year={2014},
  publisher={Penso Editora}
}

@book{sampieri2013,
  title={Metodologia de Pesquisa},
  author= {Roberto Hernández Sampieri and Carlos Fernández Collado and María Del Pilar Baptista Lucio},
  isbn={9788565848367},
  series={M{\'e}todos de Pesquisa},
  url={https://books.google.com.br/books?id=AKU5AgAAQBAJ},
  year={2013},
  publisher={AMGH Editora}
}

@misc{interviewscript2024,
  author = {Dantas, Carlos},
  title = {Interview Script},
  url = {https://doi.org/10.6084/m9.figshare.26371006},
  year = {2024},
  organization = {figshare}
}