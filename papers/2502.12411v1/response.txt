\section{Related Work}
\subsection{Unsafe Prompts Detection via External APIs or Tools}
To moderate unsafe prompts, technical vendors have engaged in developing moderation APIs, such as Azure AI Content Safety **Chang, "Azure AI Content Safety"**, Perspective API **Arora, "Perspective API"**, OpenAI Moderation API **Kaplan, "OpenAI Moderation API"**, Baidu Text Moderation **Xia, "Baidu Text Moderation"** and Alibaba Content Moderation **Zhang, "Alibaba Content Moderation"**. These moderation APIs typically employ a hybrid architecture that integrates rule-based filtering mechanisms for explicit content detection with machine learning models trained on various safety-related datasets. Meanwhile, the scope of application for these moderation APIs differs. For instance, the Perspective API **Arora, "Perspective API"** is primarily focused on analyzing the presence of harmful or offensive language, such as detecting toxicity or insults within text. In contrast, the OpenAI Moderation API **Kaplan, "OpenAI Moderation API"** is designed for content moderation of language model outputs, specifically assessing whether the generated content violates OpenAI's defined usage policies.


Additionally, external tools are often employed to detect unsafe prompts in LLMs. For instance, Detoxify **Wiegandt, "Detoxify"** is an open-source toxic comment detection tool that includes three key functionalities: toxic comment classification, detection of unintended bias in toxic comments, and multilingual toxic comment classification. HateBERT **Hovy, "HateBERT"** is a bert-based model trained as a tool for detecting abusive language, with training data collected from controversial communities on Reddit. 

While these APIs and tools provide valuable moderation services, they often require customized engineering efforts to support their functionality.

\subsection{Guardrail Models for Unsafe Prompt Detection}
Recent advancements in detecting unsafe prompts in LLMs have predominantly focused on fine-tuning-based methodologies. The Llama Guard series **Kaplan, "Llama Guard"** address this challenge by training language models on extensive annotated datasets to assess whether given input prompts or model responses might violating predefined safety policies. 

The latest Llama Guard 3 Vision **Wang, "Llama Guard 3 Vision"**, extends this capability to multi-modal scenarios, enabling safety checks for both text and image inputs. Furthermore, ShieldLM **Lin, "ShieldLM"** enhances the safety risk detection performance and decision transparency by providing explanatory rationales through data-augmented fine-tuning. In addition, Code Shield **Kim, "Code Shield"** is designed to help developers reduce the likelihood of generating potentially unsafe code. It filters out unsafe code during the inference phase, thereby effectively mitigating related risks and ensuring the safety of code execution. NeMo Guardrails **Cheng, "NeMo Guardrails"** employs a dialogue management-inspired runtime mechanism that empowers developers to augment Large Language Model (LLM) as guardrails using language instructions. 

Recently, GuardAgent **Zhu, "GuardAgent"** was introduced as a guardrail agent aimed at ensuring that the inputs or outputs of an LLM agent comply with specific safety policies. The guradrail agent functions by initially analyzing the guard requests to create a task plan, followed by the generation and subsequent execution of guardrail script based on the formulated plan. 

Unlike these data-driven LLM guardrail models, our proposed method performs unsafe prompt detection using only few safe and unsafe prompts. It is efficient in terms of both data and computation, while also achieving strong performance. 

\subsection{Gradient-Based Analysis of LLMs}
One primary objective of gradient analysis is to examine how input features contribute to model outputs. For example, **Sundararajan, "Axiomatic Attribution"** propose a method that evaluates the contribution of each input feature to the modelâ€™s output by computing the gradient of the output with respect to (wrt) the input features and performing an element-wise multiplication with the input values. This approach is straightforward and computationally efficient. Furthermore, Layer-wise Relevance Propagation (LRP) **Bach, "Layer-wise Relevance Propagation"** starts from the model's output and propagates ``relevance'' scores backward layer by layer until reaching the input layer, allowing for fine-grained feature attribution. Moreover, Axiomatic Attribution **Sundararajan, "Axiomatic Attribution"** leverages integrated gradients to compute the attribution of input features to the predictive output grounded in two fundamental axioms: sensitivity and implementation invariance, further enhancing the feature attribution performance.

Additionally, there are gradient-based analysis methods tailored for specific model architectures, such as GradCAM **Selvaraju, "GradCAM"**, which generates class-specific heatmaps by leveraging the gradients of the target class wrt the final convolutional layer, highlighting the important regions in the input image that contribute to the model's decision.  Recently, GradSafe **Zhou, "GradSafe"** propose a gradient based method to assess the safety of a given prompt by measuring the directional similarity (cosine similarity) between the gradients of the given prompt and those of the unsafe reference prompts.

Unlike GradSafe **Zhou, "GradSafe"** that restricts its analysis to the gradient direction similarity, our proposed method uses the gradient co-occurrence scores to accommodate unsigned similarity, therefore analyzing the overall patterns of the gradients. Our approach mitigates the directional bias, leading to enhanced performance in unsafe prompt detection.