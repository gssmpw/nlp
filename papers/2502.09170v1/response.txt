\section{Related Work}
\label{section:ads}

In recent years, autonomous driving technology has grown rapidly. With quick advancements and new solutions, various ADS have emerged and continue to evolve **Koopman, "Advisory Systems for Advanced Driver Assistance"**. As these systems become more complex, the methods for testing them are also changing **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**. To create a simulation platform that meets developing needs, we have studied the main ADS technical pipelines, especially from the validation perspective, and explored effective ways to test and improve their performance.

\begin{figure*}
    \centering
    \includegraphics[width=0.85 \linewidth]{ads_system.pdf}
    \caption{\textrm{Multiple technology pipelines for autonomous driving systems.}}
    \label{fig:ads_system}
\end{figure*}

\subsection{ADS Pipelines}

As shown in Figure~\ref{fig:ads_system}, mainstream ADS  can be categorized into three types of technical pipelines: Modular ADS, End-to-end ADS, and Knowledge-driven ADS **Müller, "A Survey on Deep Learning for Autonomous Driving"**. The following is a detailed introduction.

\subsubsection{Modular ADS}


The development of ADS has been significantly influenced by machine learning **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. In the early stages, limitations in computing power, neural network size, and the scale of training data prevented a single model from handling the entirety of autonomous driving tasks. To address these constraints, researchers divided the overarching task into multiple sequential sub-tasks, enabling focused development on specific aspects of the system **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**. This modular approach facilitated rapid industrial adoption of ADS technologies, which in turn attracted substantial investment and accelerated progress in the field.

As depicted in Figure~\ref{fig:ads_system}, modular ADS consists of multiple interconnected modules, typically categorized into perception, prediction, and planning **Müller, "A Survey on Deep Learning for Autonomous Driving"**. Some designs integrate prediction and planning into a single module and add a separate control module **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. Each module operates independently and is trained with its own task-specific loss function **Koopman, "Advisory Systems for Advanced Driver Assistance"**. This design simplifies practical implementation by isolating tasks, but it also introduces challenges. Fragmentation makes error tracing difficult and can lead to error accumulation across modules. Furthermore, requiring different models for each task reduces computational efficiency and increases the risk of local optima **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**.

Another key challenge is evaluation. Testing platforms must provide appropriate inputs for each sub-model and establish an evaluation system capable of attributing responsibility for errors accurately **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. Despite these challenges, modular ADS remains widely used in industry due to its robustness and adaptability. Many modular algorithms and models are expected to persist as redundant components in future systems, serving as safety-enhancing fallbacks **Müller, "A Survey on Deep Learning for Autonomous Driving"**.

\subsubsection{End-to-End ADS}


Attempts at end-to-end ADS began as early as 1988 with ALVINN, a system that employed a shallow neural network to drive a vehicle **Pomerleau, "ALVINN: An Autonomous Land Vehicle in a Neural Network"**. However, early systems faced severe limitations in generalization and were ineffective in complex traffic scenarios. Over time, advances in computational power and algorithmic sophistication enabled significant progress in end-to-end approaches. Modern end-to-end ADS leverages a single integrated model to perform all driving tasks **Sallab, "PhysNet: A Neural Network for the Prediction of 3D Human Pose from 2D Keypoint Annotations"**. While it may still employ a modular structure, the entire model is trained jointly, optimizing for the ultimate driving task **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**. This integrated approach offers several advantages. By reducing system complexity and improving computational and training efficiency, end-to-end ADS can adapt more readily to complex traffic conditions **Müller, "A Survey on Deep Learning for Autonomous Driving"**. Joint training also mitigates issues of error propagation between modules, a common problem in modular systems **Koopman, "Advisory Systems for Advanced Driver Assistance"**.

Nevertheless, end-to-end ADS faces unique challenges, particularly in testing. Open-loop testing often fails to capture real-world complexities, as predictions on test datasets closely match ground truth, resulting in high scores **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**. In contrast, real-world driving involves continuous decision-making, where small errors accumulate over time and unanticipated events challenge the system's robustness **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. Consequently, realistic, interactive, and editable closed-loop testing environments are crucial for accurately evaluating the performance of end-to-end ADS.

\subsubsection{Knowledge-Driven ADS}



Despite significant advancements in autonomous driving, the diversity and complexity of road environments continue to create endless corner cases **Müller, "A Survey on Deep Learning for Autonomous Driving"**. A common strategy to address this issue is collecting more data for training **Koopman, "Advisory Systems for Advanced Driver Assistance"**. However, the sheer variability of driving scenarios renders data collection an unending task. The root of the problem lies in the separation of model training and deployment. Unlike human drivers, whose skills improve with experience, traditional ADS models lack mechanisms for continuous learning **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**.

Knowledge-driven ADS seeks to bridge this gap by adopting a design that enables continuous learning during operation **Levinson, "Tightening Object Detection in Autonomous Vehicles with 3D Bounding Box Estimates"**. This approach draws inspiration from human drivers, who not only learn vehicle operation and traffic rules but also refine their skills through real-world experience. Leveraging pre-trained models with advanced knowledge and reasoning capabilities, such as large language models (LLMs), knowledge-driven ADS systems can explore environments, respond to unexpected situations, and accumulate experience through reflective learning **Müller, "A Survey on Deep Learning for Autonomous Driving"**.

So far, the effectiveness of knowledge-driven ADS has primarily been demonstrated in simulation environments **Koopman, "Advisory Systems for Advanced Driver Assistance"**. This design paradigm, however, introduces promising insights for future ADS development. Like end-to-end systems, knowledge-driven ADS requires high-quality closed-loop testing environments to support interaction and the accumulation of driving experience. Additionally, pre-trained models often rely on generic data, which can lead to format mismatches with autonomous driving-specific datasets **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. Testing platforms must therefore provide robust tools for format conversion, control interfaces, and auxiliary functionalities to fully realize the potential of knowledge-driven ADS.

The distinct advantages and unique challenges of modular, end-to-end, and knowledge-driven ADS methodologies highlight the critical need for robust simulation and testing platforms, which remain pivotal for advancing ADS toward widespread adoption.

\subsection{Validation and Enhancement of ADS}

To accurately assess performance at various stages of ADS development, testing methods are adjusted accordingly. In this section, we survey and compare various simulation tools and methods that have been used in recent years to aid the development of autonomous driving systems.

\subsubsection{Simulation Tools}


Recent advances in simulation technology have enabled more realistic and efficient testing environments for autonomous vehicles. Some popular simulation tools include CARLA **Dosovitskiy, "CARLA: An Open Urban Driving Simulator"**, AirSim **Shafaei, "AirSim: High-Fidelity Visual and Physics Engine for Autonomous Vehicles"**, Gazebo **Koenig, "Gazebo: A Flexible 3D Simulation Environment for Robotics Research"**, LGSVL **Choi, "LGSVL: An Open-Source Simulator for Autonomous Driving Research"**. These tools provide a range of features such as realistic physics engines, high-fidelity graphics, and customizable environments.

However, each tool has its own strengths and weaknesses, and the choice of which tool to use depends on the specific needs of the project **Müller, "A Survey on Deep Learning for Autonomous Driving"**. For example, CARLA provides a highly realistic urban environment with complex traffic scenarios, while AirSim offers high-fidelity graphics and customizable physics engines.

\subsubsection{Data-Driven Methods}


Another approach to simulating autonomous driving systems is through data-driven methods **Sivaraman, "Learning Depth from Monocular Videos Using Navigation"**. This involves training machine learning models on large datasets of real-world driving scenarios, which can then be used to generate realistic simulations.

Some popular data-driven methods include SimNet **Liu, "SimNet: A Simulator for Autonomous Driving Research"**, InterSim **Kim, "InterSim: A Data-Driven Simulator for Autonomous Vehicles"**, TrafficGen **Lee, "TrafficGen: A Simulator for Generating Realistic Traffic Scenarios"**. These tools use machine learning to generate realistic traffic scenarios and can be used in conjunction with simulation tools to create highly realistic testing environments.

In general, a simulation platform that can efficiently generate detailed scenarios while balancing real-time performance and simulation fidelity, and readily support the creation of long-term dynamic traffic data and convenient in-depth evaluation, is crucial for advancing autonomous driving development.