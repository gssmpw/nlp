\section{Related Work}
\label{sec:related}
\RR{In this section, we discuss the relevant research, including Papachristou et al., "Collaborative Learning in Computer Science Education"__ Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"__ and Kim et al., "Visualizing Collaborative Behaviors in Meeting"}

\subsection{Programming Education and Evaluation}
As technology advances rapidly, programming skills are a significant driving force behind social and economic development. 
Whether in artificial intelligence~[Hassabis et al., "Deep Learning for Artificial Intelligence"]__, big data~[Domingos, "A Few Useful Things to Know about Machine Learning"]__ or the Internet of Things~[Atzori et al., "The Internet of Things: A Survey"]__, programming plays a crucial role in these cutting-edge technologies.
The importance of programming education increases globally, with programming being integrated into the foundational curricula of many countries~[CSCS, "Computer Science Curriculum Framework"]. 
Instructors supplement programming education by incorporating lab courses that encourage coding practice~[Wing et al., "Computational Thinking for Everyone"]_. \RR{Among the various teaching strategies employed in these lab courses, collaborative programming emerges as a commonly used and effective method for teaching novices, fostering teamwork and practical coding skills~[Kolling et al., "Javadoc - A Tool for Documenting Object-Oriented Programs"].}

Though programming education is widespread, evaluating programming skills in a large classroom remains challenging, particularly in assessing students' code~[Lohr, "The Programming Language"]. 
Researchers develop tools that leverage LLMs to help instructors analyze code more effectively~[Papachristou et al., "Collaborative Learning in Computer Science Education"]. 
These tools provide insights into students' code~[Kolling et al., "Javadoc - A Tool for Documenting Object-Oriented Programs"]_ and facilitate code to identify patterns~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"]. 
For example, VizProg uses CodeBERT to cluster solutions and visualize coding progress in real-time~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"], while CFlow combines LLMs for semantic annotation and interactive views to identify patterns in courses~[Wang et al., "Code Analysis with Deep Learning"]. 
\RR{However, existing tools largely assessed code fragments from collaborative programming in isolation, failing to consider the collaborative behaviors and dynamics among students~[Hochschild et al., "Collaborative Coding for Computer Science Education"].}
In contrast, \textit{CPVis} analyzes final code submissions and students' collaborative behaviors, enabling instructors to provide detailed, evidence-based feedback that enhances students' metacognitive awareness and addresses deficiencies in their learning approaches.

\subsection{Multimodal Learning Analysis in Collaborative Programming}
In collaborative programming, students work in groups to complete programming tasks, share code modifications, and review each other's work~[Hochschild et al., "Collaborative Coding for Computer Science Education"]. 
This method aims to improve students' programming efficiency, code quality, and teamwork skills through collaboration~[Kolling et al., "Javadoc - A Tool for Documenting Object-Oriented Programs"]. 
To understand students' interactions and engagement, multimodal data such as conversations and screen recordings from the collaborative programming process are typically collected~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"].
Multimodal Learning Analytics (MMLA) provides new insights into students' learning by analyzing various data streams generated during the learning process, such as speech, facial expressions, and gestures~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"]. 
For instance, multimodal analysis in collaborative learning is pioneered by quantifying learners' nonverbal behaviors through video segmentation to predict academic performance~[Wang et al., "Code Analysis with Deep Learning"].
Various types of multimodal data are increasingly used to analyze collaborative problem-solving processes in learning environments~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"]. 
\RR{For example, Mangaroska et al.~[Mangaroska et al., "Multimodal Affective Dynamics and Cognitive Load"] combine multimodal data (camera, electroencephalogram, eye-tracking) with cognitive load theory and affective dynamics models to analyze problem-solving in collaborative learning.}
Although these studies explored the analysis of problem-solving processes, they are limited to extracting relevant metrics from multimodal data, \RR{lacking the capability to dynamically analyze students' problem-solving processes over time in a narrative form. }

Collaborative programming is a complex form of collaborative learning, involving various factors such as role transitions during programming~[Hochschild et al., "Collaborative Coding for Computer Science Education"] and interaction patterns~[Kolling et al., "Javadoc - A Tool for Documenting Object-Oriented Programs"]. 
\RR{For instance, Lewis et al.~[Lewis et al., "Role Transitions in Collaborative Programming"] accelerate the speed at which students complete exercises by intervening in the roles students play in collaborative programming__.
However, existing research fails to address the interdependent development of other key dimensions such as teacher scaffolding~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"] and learning engagement analysis________, focusing instead on the impact of a single dimension on the collaborative programming process~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"].}
These limitations highlight the need for designing an innovative visualization framework to address the unique challenges of tracking multiple metrics over time, clearly representing interaction patterns in collaborative programming to help instructors better understand and evaluate the collaborative problem-solving process.

\subsection{Visual Analysis of Collaborative Behaviors in Meeting}
Collaborative programming discussion is a form of multi-person collaboration, and we focus on analyzing collaborative behavior during meetings.
In the visualization community, collaborative behavior analysis is explored across various applications, including face-to-face~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"] and online discussions~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"], as well as real-time~[Hochschild et al., "Collaborative Coding for Computer Science Education"] and post-meeting analysis~[Mangaroska et al., "Multimodal Affective Dynamics and Cognitive Load"]. 
\RR{These two dimensions can be combined to form a larger design space.} For instance, integrating face-to-face discussions with real-time analysis reduces environmental distractions and fosters more natural, seamless interactions~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"]. 


Some real-time analysis systems~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"], such as ClassBeacons, effectively visualize instructors' time and attention allocation through light objects on students' desks, streamlining issue resolution during student discussions~[Mangaroska et al., "Multimodal Affective Dynamics and Cognitive Load"]. 
Real-time analysis systems focus on summarizing ongoing discussions without disrupting their flow~[Hochschild et al., "Collaborative Coding for Computer Science Education"]. Similarly, Groupnamics provides an overview of parallel groups in online classrooms, helping identify those needing intervention~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"].
However, post-analysis offers a distinct advantage for task evaluation, as it provides a broader perspective to understand better and assess the outcomes of collaboration.
Some post-analysis visualization systems, such as ConToVi, NEREx, and Meeting Mediator~[Kim et al., "Visualizing Collaborative Behaviors in Meeting"], focus on speaker behavior patterns over time but do not fully capture the evolution of speakers' problem-solving abilities across different discussion topics. \RR{Moreover, these systems primarily summarize single-session dialogues, lacking the ability to analyze multiple groups or discussions simultaneously.}

Studies analyzing group dialogues in classrooms typically focus on engagement and comprehension but often lack detailed visual insights into the underlying problem-solving logic, strategies, or intentions~[Liu et al., "Multimodal Learning Analysis for Collaborative Problem-Solving"]. 
\RR{In this work, we focus on the post-analysis of face-to-face discussions, emphasizing the collaborative problem-solving process across multiple groups. 
\textit{CPVis} incorporates narrative-based visualizations to depict and compare the evolution of dialogue, behavior, and engagement, providing instructors with richer evidence to assess group dynamics and individual engagement more effectively.}