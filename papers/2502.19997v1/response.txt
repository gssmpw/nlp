\section{Related Work and Motivation}
Our work is at the intersection of three domains: $i)$ the energy consumption in the edge-cloud continuum, $ii)$ the impact of communication on energy consumption, and $iii)$ the evaluation of the HTTP protocol versions. 

\subsection{Energy consumption in the edge-cloud continuum}

The specific problem of energy consumption in the edge-cloud continuum has been tackled from various perspectives. Various works have focused on analyzing the energy consumption of data centers**Al-Fuqaha, "Energy Efficiency in Cloud Computing"**. A significant amount of work explored the possibilities given by computation offloading, i.e. delegating CPU-intensive tasks to edge or cloud servers **Cao et al., "Mobile Edge Computing: A Survey"**. Task offloading in an edge/cloud environment for minimizing energy consumption has been evaluated in **Guo et al., "Energy-Efficient Mobile Cloud Offloading"**. Other works focused on estimating the energy consumption of communication on the edge/cloud continuum, from both a theoretical and experimental point of view **Yan et al., "Energy Consumption Analysis of Wireless Sensor Networks"**. In this work, we consider just HTTP-based communication, without computation offloading. 

\subsection{Impact of communication on energy consumption}

The energy consumption of mobile devices when communicating has been widely studied in the past years. Thanks to energy models of the LTE interface, cellular communications were shown to be responsible for a significant fraction of the overall energy consumption in smartphones**Kim et al., "Energy Consumption Analysis of Cellular Network"**. This finding stimulated a deeper exploration of the impact of latency on energy consumption. In particular, some works aimed at finding a balance between energy consumption and latency requirements**Huang et al., "Energy-Aware Scheduling for Cloud Data Centers"**.

Other works have then focused on the energy consumption of Internet protocols at multiple levels of the stack**Duan et al., "Energy-Efficient Internet Routing"**. However, most of such works were aimed at designing energy-aware protocols or promoting an energy-aware mobile application design. In **Cao et al., "Analytical Modeling of TCP Versions in Wireless Networks"**, the authors analytically modeled the energy consumption of various TCP versions, showing that in wireless scenarios certain TCP versions are more energy-saving than others. An energy consumption profile of the DASH protocol in LTE networks has been provided in **Kim et al., "Energy Consumption Analysis of DASH Protocol in LTE Network"** via the use of a power monitor. The authors characterized the energy consumption under various conditions (e.g. video resolution, segment length, buffer size, signal strength), to show that the energy consumption can be reduced with adequately tuned system parameters.

\subsection{Evaluation of the HTTP versions}
When it comes to evaluating different HTTP versions, the vast majority of works focused on \added{classic }performance \added{indices like throughput and delay}**Tan et al., "Performance Evaluation of QUIC and TCP in Mobile Networks"**. \added{The first studies highlighted how early implementations of QUIC and HTTP/3 showed improved performance with respect to TCP and TLSv1.2, but these improvements were marginal when comparing to TCP and TLSv1.3****Zhou et al., "Comparative Analysis of QUIC and TCP in Mobile Networks"**. In **Tan et al., "Performance Evaluation of QUIC and TCP in European Mobile Networks"**, QUIC and TCP were evaluated in mobile networks of different European countries. The authors showed that when using no application layer protocol and with a download size of 1~MB, TCP obtained better performance in some countries, whereas in other countries QUIC performed better. However, when comparing application layer protocols such as HTTP/2 and HTTP/3 in a browsing-like scenario with smaller file sizes, HTTP/3 showed better performance. Similar findings are reported in **Zhou et al., "Performance Comparison of Early Versions of HTTP"**, where authors showed how earlier versions of HTTP with TCP obtain higher throughput when downloading large files.} In **Huang et al., "Comparative Analysis of HTTP Versions in Multiple Scenarios"**, the authors compared HTTP/1.1, HTTP/2, and HTTP/3 in multiple scenarios \added{using a browsing-like traffic pattern and browsing-related performance metrics}, showing that HTTP/3 can obtain higher performance \added{in some of them}, especially in mobile network conditions. \added{However, they found that in specific configurations, especially with larger websites, HTTP/2 obtained better performance.} \removed{However, these performance improvements could be due to specific optimizations performed by service providers. }Similar findings are reported in **Tan et al., "Performance Comparison of QUIC and TCP using Different Application Layer Protocols"**, where the authors compare QUIC and TCP, by using HTTP/3 and HTTP/2 as application-layer protocols, respectively. The authors highlight how performance differences can be due to library implementations and service providers' system optimizations. \added{Other works have indeed pointed out that different parameters of operation can lead to substantial differences in the measured throughput and delay of different HTTP versions. For example, different congestion control algorithms of the QUIC protocol can obtain different throughputs and delays****Kim et al., "Impact of Congestion Control Algorithms on Throughput and Delay"**. Even different implementations of the same algorithm can lead to very different results, as pointed out in **Li et al., "Comparative Analysis of Congestion Control Algorithms"**, where the authors compared multiple implementations of popular congestion control algorithms with their kernel counterparts. Similar considerations about congestion control algorithms are reported in **Zhou et al., "Impact of Congestion Control on Throughput and Delay"**. In general, since QUIC and HTTP/3 are still a work in progress, there is still no standard reference implementation, and different libraries can obtain very different performance results****Tan et al., "Performance Variability due to Library Implementations"**.}

A few works have analyzed HTTP from the standpoint of energy consumption. In **Li et al., "Energy Consumption Analysis of HTTP Requests"**, the authors showed that HTTP requests are a major contributor to the energy consumption of mobile applications, and in subsequent works, the same authors showed how the energy consumption of HTTP requests can be optimized by bundling them**Anwar et al., "Optimizing Energy Consumption of HTTP Requests through Bundling"**. In **Kim et al., "Comparative Analysis of Different HTTP Libraries for Android"**, Anwar, et al. compared different HTTP libraries for Android to find that they differ in energy consumption. In this specific case, they did not find a significant correlation between the energy consumption of a library and its classic performance indices. It has to be noted that the authors did not focus on specific HTTP versions.


\subsection{Motivation}

In this paper, we provide an experimental evaluation of different versions of the HTTP protocol from the point of view of energy consumption \added{on the client side}. The study is based on an edge/cloud computing scenario as it is an increasingly adopted architectural solution in current and future generation networks. To the best of our knowledge, this is the first time that such a combined analysis has been performed.