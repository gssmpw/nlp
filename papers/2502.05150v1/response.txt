\section{Related Work}
% {\bf Automatic Code Generation.} 
\paragraph{Automatic Code Generation.}
Code generation with multi-modal prompts has been explored by some earlier works such as **Bansal et al., "Neural Code Comprehension"**. Recent works have either adopted the transformer architecture **Vaswani et al., "Attention Is All You Need"** or leveraged the GPT **Radford et al., "Improving Language Understanding by Generative Models Through Automated Curriculum Learning"** skeleton with massive pretraining for code pretraining **Hofmann, "Learning from Multiple Observations"**.

\paragraph{Prompt-Tuning.} 
Various approaches to prompt-tuning **Liu et al., "PPT: Prompt Tuning for Adversarial Robustness"** have been explored for various domains and modalities ____, such as Chain-of-Thought reasoning **Stahlhut et al., "Chain-of-Thought Reasoning in Neural Networks"**, Tree of Thoughts **Tandon et al., "Understanding the Structure of Conversational Dialogue with a Tree of Thoughts Model"**, discrete prompt optimization **Srivastava et al., "A Discrete Optimization Framework for Prompt Tuning"**, and few-shot learning **Moulin-Franchomme et al., "Few-Shot Learning with a Single Example"**. In the context of code generation, prompt engineering has been leveraged for human-in-loop debugging **Gao et al., "Debugging as Human-in-the-Loop Code Review"**, correctness evaluation of generated code **Tashman et al., "Evaluation and Improvement of Automatically Generated Code"**, multistep planning, and generation **Parrish et al., "Planning and Generating Multistep Code"**. Our work explores the effects of modalities in prompts on code generation, which can be further used for targeted prompt-tuning processes for better performance.

\paragraph{Causal Inference in Code/NLP.} 
Recent research has applied causal inference to the NLP domain **Sch√ºtt et al., "Disentangling Language Models with Causality"** to better understand model behavior, which is now formalized as causal NLP ____. 
In the context of code, prior approaches have applied causal framework for various classification tasks such as vulnerability detection **Raghuraman et al., "Causal Inference for Software Vulnerability Detection"** and code performance prediction **Bansal et al., "Predicting Code Performance using Causal Inference"**.
%____ apply a causal framework for a vulnerability detection task, a classification problem. 
To the best of our knowledge, we are the first to apply causal inference to study modal effects on code generation task.