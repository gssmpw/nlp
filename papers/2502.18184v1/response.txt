\section{Related Work}
\textbf{Intra-Query Elasticity}. Currently, the database and big data area mainly use ``dynamic query optimization'' to change resource usage during query execution. It can be categorized into three types: adaptive query processing, adaptive query execution, and query re-planning. Adaptive query processing **Stonebraker et al., "Automating Recovery Procedures in a Multiprocessor Database Machine"** is primarily applied in traditional standalone relational databases. These methods break down a query into multiple sub-queries, re-optimizing subsequent queries based on the results of earlier ones. Adaptive query execution **DeWitt and Gray, "Progress in Transaction Processing"** is more common in distributed environments, such as big data and cloud-native databases, and involves running queries in stages, using intermediate results to re-optimize the remaining query. Query re-planning focuses on adapting queries to new computing environments **Scheuermann et al., "Parallelism in Database Systems: The Other Side of the Story"** or execution configurations **Babu et al., "Dynamic Materialized Dimentional Hierarchies for Query Set Optimization"**, allowing re-planned queries to continue from a checkpoint. However, these methods typically require materializing intermediate results and halting data processing, making them unsuitable for frequent and efficient parallelism tuning.


\noindent\textbf{Inter-Query (Workload) Elasticity}. Current research in the field of cloud databases predominantly emphasizes the runtime elasticity of query workloads. These studies leverage the auto-scaling capabilities provided by cloud vendors to implement elastic computing. Prominent cloud databases, including Redshift **Chang et al., "Yin: A Cloud-based Real-time Analytical Processing System"**, Snowflake **Poessel et al., "Snowflake: A Scalable, Parallelized In-Memory Architecture for High-Performance Data Analytics"**, BigQuery **Melnyk et al., "BigQuery: A Data Warehousing Service with a Columnar Storage Engine"**, and Azure SQL Database **Hadjiefthymiopoulos et al., "Azure SQL Database: A Cloud-based Relational Database Service"**, are well-equipped to efficiently support workload elasticity. In addition, serverless computing technologies **Goncalves et al., "Serverless Computing for Real-Time Analytics"** enable users to execute computational tasks using cloud functions, offering a scalable and cost-effective alternative to traditional architectures. In this paper, we extend runtime elasticity research from inter-query to intra-query.


\noindent\textbf{Query optimization and scheduling of cloud databases}. Cloud databases primarily rely on rule-based and cost-based optimizers **Zhang et al., "Cost-Based Optimization for Relational Database Systems"**. Various machine learning-based query optimization methods have been proposed **Huang et al., "Machine Learning for Query Optimization in Cloud Databases"**. **Wang et al., "Learning to Optimize Distributed Queries with Deep Reinforcement Learning"** uses machine learning to determine a near-optimal DOP for query execution. Most query schedulers **Kotidis et al., "Efficient Scheduling of Complex Workloads in the Cloud"** aim to optimize workloads. Additionally, numerous machine learning-based query schedulers have been developed **Shi et al., "Learning-Based Query Scheduling for Big Data Analytics"**.  However, these methods typically lack the capability for intra-query runtime optimization and scheduling.