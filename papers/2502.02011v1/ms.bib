
@article{Cook1984,
author = {Cook, Robert L.},
title = {Shade Trees},
year = {1984},
issue_date = {July 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/964965.808602},
doi = {10.1145/964965.808602},
abstract = {Shading is an important part of computer imagery, but shaders have been based on fixed models to which all surfaces must conform. As computer imagery becomes more sophisticated, surfaces have more complex shading characteristics and thus require a less rigid shading model. This paper presents a flexible tree-structured shading model that can represent a wide range of shading characteristics. The model provides an easy means for specifying complex shading characteristics. It is also efficient because it can tailor the shading calculations to each type of surface.},
journal = {SIGGRAPH Comput. Graph.},
month = {jan},
pages = {223–231},
numpages = {9},
keywords = {Reflection, Computer Graphics, Lighting, Illumination, Color, Shading, Texture, Shadows}
}

@inproceedings{10.1145/800031.808602,
author = {Cook, Robert L.},
title = {Shade Trees},
year = {1984},
isbn = {0897911385},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800031.808602},
doi = {10.1145/800031.808602},
abstract = {Shading is an important part of computer imagery, but shaders have been based on fixed models to which all surfaces must conform. As computer imagery becomes more sophisticated, surfaces have more complex shading characteristics and thus require a less rigid shading model. This paper presents a flexible tree-structured shading model that can represent a wide range of shading characteristics. The model provides an easy means for specifying complex shading characteristics. It is also efficient because it can tailor the shading calculations to each type of surface.},
booktitle = {Proceedings of the 11th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {223–231},
numpages = {9},
keywords = {Shading, Illumination, Shadows, Texture, Lighting, Reflection, Color, Computer Graphics},
series = {SIGGRAPH '84}
}



@article{Snyder1987, 
author = {Snyder, John M. and Barr, Alan H.}, title = {Ray Tracing Complex Models Containing Surface Tessellations}, year = {1987}, issue_date = {July 1987}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {21}, number = {4}, issn = {0097-8930}, url = {https://doi.org/10.1145/37402.37417}, doi = {10.1145/37402.37417}, abstract = {An approach to ray tracing complex models containing mathematically defined surfaces is presented. Parametric and implicit surfaces, and boolean combinations of these, are first tessellated into triangles. The resulting triangles from many such surfaces are organized in a hierachy of lists and 3D grids, allowing efficient calculation of ray/model intersections.The technique has been used to ray trace models containing billions of traiangles and surfaces never before ray traced. The organizing scheme developed is also independently useful for efficiently ray tracing any complex model, whether or not it contains surface tessellations.}, journal = {SIGGRAPH Comput. Graph.}, month = {aug}, pages = {119–128}, numpages = {10} }

@InProceedings{Pharr1996, 
author="Pharr, Matt and Hanrahan, Pat", 
editor="Pueyo, Xavier and Schr{\"o}der, Peter",
title="Geometry Caching for Ray-Tracing Displacement Maps", booktitle="Rendering Techniques '96",
year="1996",
publisher="Springer Vienna",
address="Vienna",
pages="31--40",
abstract="We present a technique for rendering displacement mapped geometry in a raytracing Tenderer. Displacement mapping is an important technique for adding detail to surface geometry in rendering systems. It allows complex geometric variation to be added to simpler geometry, without the cost in geometric complexity of completely describing the nuances of the geometry at modeling time and with the advantage that the detail can be added adaptively at rendering time.",
isbn="978-3-7091-7484-5"
}

@inproceedings{Smits2000,
author = {Smits, Brian and Shirley, Peter and Stark, Michael},
year = {2000},
month = {07},
pages = {307-318},
title = {Direct Ray Tracing of Displacement Mapped Triangles},
isbn = {978-3-211-83535-7},
booktitle = {Rendering Techniques, Proc. 11th Eurographics Workshop on Rendering},
publisher = {Springer},
address = {Brno, Czech Republic},
doi = {10.1007/978-3-7091-6303-0_28}
}

@inproceedings{Lee2000,
author = {Lee, Aaron and Moreton, Henry and Hoppe, Hugues},
title = {Displaced Subdivision Surfaces},
year = {2000},
isbn = {1581132085},
publisher = {ACM Press/Addison-Wesley Publishing Co.},
address = {USA},
url = {https://doi.org/10.1145/344779.344829},
doi = {10.1145/344779.344829},
abstract = {In this paper we introduce a new surface representing, the displaced subdivision surface. It represents a detailed surface model as a scalar-valued displacement over a smooth domain surface. Our representation defines both the domain surface and the displacement function using a unified subdivision framework, allowing for simple and efficient evaluation of analytic surface properties. We present a simple, automatic scheme for converting detailed geometric models into such a representation. The challenge in this conversion process is to find a simple subdivision surface that still faithfully expresses the detailed model as its offset. We demonstrate that displaced subdivision surfaces offer a number of benefits, including geometry compression, editing, animation, scalability, and adaptive rendering. In particular, the encoding of fine detail as a scalar function makes the representation extremely compact.},
booktitle = {Proceedings of the 27th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {85–94},
numpages = {10},
keywords = {geometry compression, animation, displacement maps, multiresolution geometry, multiresolution editing, bump maps},
series = {SIGGRAPH '00}
}

@inproceedings{Moule2002,
 title = {Efficient Bounded Adaptive Tessellation of Displacement Maps},
 author = {Kevin Moule and Michael D. McCool},
 booktitle = {Proceedings of the Graphics Interface 2002 Conference},
 url = {http://graphicsinterface.org/wp-content/uploads/gi2002-20.pdf},
 publisher = {Canadian Human-Computer Communications Society},
 address = {Alberta, Canada},
 year = {2002},
 month = {May},
 location = {Calgary, Alberta},
 pages = {171--180}
}

@article{Niessner2013,
author = {Nie\ss{}ner, Matthias and Loop, Charles},
title = {Analytic Displacement Mapping Using Hardware Tessellation},
year = {2013},
issue_date = {June 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/2487228.2487234},
doi = {10.1145/2487228.2487234},
abstract = {Displacement mapping is ideal for modern GPUs since it enables high-frequency geometric surface detail on models with low memory I/O. However, problems such as texture seams, normal recomputation, and undersampling artifacts have limited its adoption. We provide a comprehensive solution to these problems by introducing a smooth analytic displacement function. Coefficients are stored in a GPU-friendly tile-based texture format, and a multiresolution mip hierarchy of this function is formed. We propose a novel level-of-detail scheme by computing per-vertex adaptive tessellation factors and select the appropriate prefiltered mip levels of the displacement function. Our method obviates the need for a precomputed normal map since normals are directly derived from the displacements. Thus, we are able to perform authoring and rendering simultaneously without typical displacement map extraction from a dense triangle mesh. This not only is more flexible than the traditional combination of discrete displacements and normal maps, but also provides faster runtime due to reduced memory I/O.},
journal = {ACM Trans. Graph.},
month = {jul},
articleno = {26},
numpages = {9},
keywords = {Catmull-Clark subdivision surfaces, GPU}
}


@article{Niessner2016,
author = {Nießner, M. and Keinert, B. and Fisher, M. and Stamminger, M. and Loop, C. and Schäfer, H.},
title = {Real-Time Rendering Techniques with Hardware Tessellation},
journal = {Computer Graphics Forum},
volume = {35},
number = {1},
pages = {113-137},
keywords = {Curves and surfaces, modelling, subdivision surfaces, modelling, real-time rendering, rendering},
doi = {https://doi.org/10.1111/cgf.12714},
abstract = {Abstract Graphics hardware has progressively been optimized to render more triangles with increasingly flexible shading. For highly detailed geometry, interactive applications restricted themselves to performing transforms on fixed geometry, since they could not incur the cost required to generate and transfer smooth or displaced geometry to the GPU at render time. As a result of recent advances in graphics hardware, in particular the GPU tessellation unit, complex geometry can now be generated on the fly within the GPU's rendering pipeline. This has enabled the generation and displacement of smooth parametric surfaces in real-time applications. However, many well-established approaches in offline rendering are not directly transferable due to the limited tessellation patterns or the parallel execution model of the tessellation stage. In this survey, we provide an overview of recent work and challenges in this topic by summarizing, discussing, and comparing methods for the rendering of smooth and highly detailed surfaces in real time.},
year = {2016}
}



@inproceedings{Gautron2023,
author = {Gautron, Pascal and Kubisch, Christoph},
title = {Interactive GPU-Based Decimation of Large Meshes},
year = {2023},
isbn = {9798400701436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587421.3595422},
doi = {10.1145/3587421.3595422},
abstract = {Remeshing and decimation algorithms are crucial for rendering levels of details on large geometry, as well as preparing meshes for the micro-mesh feature introduced with NVIDIA Ada generation. While remeshing is usually a time-consuming process running on a single or few CPU threads, we present a novel approach to the edge-collapse algorithm designed towards parallel, lock-free GPU decimation, allowing for interactive remeshing of large meshes.},
booktitle = {ACM SIGGRAPH 2023 Talks},
articleno = {55},
numpages = {2},
location = {<conf-loc>, <city>Los Angeles</city>, <state>CA</state>, <country>USA</country>, </conf-loc>},
series = {SIGGRAPH '23}
}

@article{Toth1985,
author = {Toth, Daniel L.},
title = {On Ray Tracing Parametric Surfaces},
year = {1985},
issue_date = {Jul. 1985},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/325165.325233},
doi = {10.1145/325165.325233},
abstract = {A new method for ray tracing parametric surfaces is presented. The new algorithm solves the ray surface intersection directly using multivariate Newton iteration. This provides enough generality to render surfaces which could not be ray traced using existing methods. To overcome the problem of finding a starting point for the Newton algorithm, techniques from Interval Analysis are employed. The results are presented in terms of solving a general nonlinear system of equations f(x)= 0, and thus can be extended to a large class of problems which arise in computer graphics.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {171–179},
numpages = {9},
keywords = {Newton's method, parametric surfaces, ray tracing}
}

@article{Joy1986,
author = {Joy, Kenneth I. and Bhetanabhotla, Murthy N.},
title = {Ray Tracing Parametric Surface Patches Utilizing Numerical Techniques and Ray Coherence},
year = {1986},
issue_date = {Aug. 1986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {4},
issn = {0097-8930},
url = {https://doi.org/10.1145/15886.15917},
doi = {10.1145/15886.15917},
abstract = {A new algorithm for ray tracing parametric surface patches is presented. The method uses quasi-Newton iteration to solve for the ray/surface intersection and utilizes ray-to-ray coherence by using numerical information from adjoining rays as initial approximations to the quasi-Newton algorithm. Techniques based upon object space subdivision are used to insure convergence to the correct interesection point. Examples are given of the use of the algorithm in scenes containing Bézier surface patches. Results show that a significant number of ray/surface intersections on these parametric surface patches can be found using very few iterations, giving a significant computational savings.},
journal = {SIGGRAPH Comput. Graph.},
month = {aug},
pages = {279–285},
numpages = {7}
}

@article{Lischinski1990,
author = {Lischinski, Daniel and Gonczarowski, Jakob},
title = {Improved techniques for ray tracing parametric surfaces},
year = {1990},
issue_date = {May 1990},
journal = {The Visual Computer},
pages = {134-152},
volume = {6},
number = {3},
url = {https://doi.org/10.1007/BF01911005},
doi = {10.1007/BF01911005}
}

@InProceedings{Lamotte1991,
author="Lamotte, Wim
and Elens, Koen
and Flerackers, Eddy",
editor="Patrikalakis, Nicholas M.",
title="Surface Tree Caching for Rendering Patches in a Parallel Ray Tracing System",
booktitle="Scientific Visualization of Physical Phenomena",
year="1991",
publisher="Springer Japan",
address="Tokyo",
pages="189--207",
abstract="Many ray tracing systems lack the availability of curved surfaces, since the calculation of the intersection between a ray and such a surface is a computation-intensive algorithm. Several speedup techniques have been presented already. But most of these methods don't use coherence between neighbouring rays. In order to exploit this coherence in ray tracing patches, we present a technique of caching subdivision trees, which we tuned for our particular implementation of a parallel ray tracer on a network of transputers.",
isbn="978-4-431-68159-5"
}

@article{Wang2002,
author = {Wang, Shyue-Wu and Shih, Zen-Chung and Chang, Ruei-Chuan},
year = {2002},
month = {07},
pages = {541-561},
title = {An Efficient and Stable Ray Tracing Algorithm for Parametric Surfaces.},
volume = {18},
journal = {J. Inf. Sci. Eng.}
}

@article{Knoll2009,
author = {Knoll, A. and Hijazi, Y. and Kensler, A. and Schott, M. and Hansen, C. and Hagen, H.},
title = {Fast Ray Tracing of Arbitrary Implicit Surfaces with Interval and Affine Arithmetic},
journal = {Computer Graphics Forum},
volume = {28},
number = {1},
pages = {26-40},
keywords = {ray tracing, reduced affine arithmetic, shader metaprogramming, I.3.1, I.3.5, I.3.7 Computer Graphics: Graphics processors; curve, surface, solid and object representations; ray tracing},
doi = {https://doi.org/10.1111/j.1467-8659.2008.01189.x},
abstract = {Abstract Existing techniques for rendering arbitrary-form implicit surfaces are limited, either in performance, correctness or flexibility. Ray tracing algorithms employing interval arithmetic (IA) or affine arithmetic (AA) for root-funding are robust and general in the class of surfaces they support, but traditionally slow. Nonetheless, implemented efficiently using a stack-driven iterative algorithm and SIMD vector instructions, these methods can achieve interactive performance for common algebraic surfaces on the CPU. A similar algorithm can also be implemented stacklessly, allowing for efficient ray tracing on the GPU. This paper presents these algorithms, as well as an inclusion-preserving reduced affine arithmetic (RAA) for faster ray-surface intersection. Shader metaprogramming allows for immediate and automatic generation of symbolic expressions and their interval or affine extensions. Moreover, we are able to render even complex forms robustly, in real-time at high resolution.},
year = {2009}
}

@article{Thonat2021,
author = {Thonat, Theo and Beaune, Francois and Sun, Xin and Carr, Nathan and Boubekeur, Tamy},
title = {Tessellation-Free Displacement Mapping for Ray Tracing},
year = {2021},
issue_date = {December 2021},
publisher = {Association for Computing Machinery},
journal = {ACM Transactions on Graphics},
address = {New York, NY, USA},
volume = {40},
number = {6},
issn = {0730-0301},
url = {https://doi.org/10.1145/3478513.3480535},
doi = {10.1145/3478513.3480535},
month = {dec},
articleno = {282},
numpages = {16},
keywords = {affine arithmetic, displacement mapping, ray tracing}
}

@article{Porumbescu2005,
author = {Porumbescu, Serban D. and Budge, Brian and Feng, Louis and Joy, Kenneth I.},
title = {Shell Maps},
year = {2005},
issue_date = {July 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1073204.1073239},
doi = {10.1145/1073204.1073239},
abstract = {A shell map is a bijective mapping between shell space and texture space that can be used to generate small-scale features on surfaces using a variety of modeling techniques. The method is based upon the generation of an offset surface and the construction of a tetrahedral mesh that fills the space between the base surface and its offset. By identifying a corresponding tetrahedral mesh in texture space, the shell map can be implemented through a straightforward barycentric-coordinate map between corresponding tetrahedra. The generality of shell maps allows texture space to contain geometric objects, procedural volume textures, scalar fields, or other shell-mapped objects.},
journal = {ACM Trans. Graph.},
month = {jul},
pages = {626–633},
numpages = {8},
keywords = {volumetric textures, displacement mapping, near surface parameterization, texture mapping, ray tracing}
}

@inproceedings {Jeschke2007,
booktitle = {Rendering Techniques},
editor = {Jan Kautz and Sumanta Pattanaik},
title = {{Interactive Smooth and Curved Shell Mapping}},
author = {Jeschke, Stefan and Mantler, Stephan and Wimmer, Michael},
year = {2007},
publisher = {The Eurographics Association},
address = {Prague},
pages = {351-360},
ISSN = {1727-3463},
ISBN = {978-3-905673-52-4},
DOI = {10.2312/EGWR/EGSR07/351-360}
}

@article{Chen2008,
author = {Chen, Ying-Chieh and Chang, Chun-Fa},
title = {A Prism-Free Method for Silhouette Rendering in Inverse Displacement Mapping},
journal = {Computer Graphics Forum},
volume = {27},
number = {7},
pages = {1929-1936},
keywords = {I.3.3 Picutre/image Generation: Display algorithms, I.3.7 Three-Dimensional Graphics an Realism: Color, shading, shadowing, and texture},
doi = {https://doi.org/10.1111/j.1467-8659.2008.01341.x},
abstract = {Abstract Silhouette is a key feature that distinguishes displacement mapping from normal mapping. However the silhouette rendering in the GPU implementation of displacement mapping (which is often called inversed displacement mapping) is tricky. Previous approaches rely mostly on construction of additional extruding prism-like geometry, which slows down the rendering significantly. In this paper, we proposed a method for solving the silhouette rendering problem in inverse displace mapping without using any extruding prism-like geometry. At each step of intersection finding, we continuously bends the viewing ray according to the current local tangent space associated with the surface. Thus, it allows mapping a displacement map onto an arbitrary curved surface with more accurate silhouette. While our method is simple, it offers surprisingly good results over Curved Relief Map (CRM) [OP05] in many difficult or degenerated cases.},
year = {2008}
}

@article{10.1145/965139.507101,
author = {Blinn, James F.},
title = {Simulation of Wrinkled Surfaces},
year = {1978},
issue_date = {August 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/965139.507101},
doi = {10.1145/965139.507101},
abstract = {Computer generated shaded images have reached an impressive degree of realism with the current state of the art. They are not so realistic, however, that they would fool many people into believing they are real. One problem is that the surfaces tend to look artificial due to their extreme smoothness. What is needed is a means of simulating the surface irregularities that are on real surfaces. In 1973 Ed Catmull introduced the idea of using the parameter values of parametrically defined surfaces to index into a texture definition function which scales the intensity of the reflected light. By tying the texture pattern to the parameter values, the texture is guaranteed to rotate and move with the object. This is good for showing patterns painted on the surface, but attempts to simulate rough surfaces in this way are unconvincing. This paper presents a method of using a texturing function to perform a small perturbation on the direction of the surface normal before using it in the intensity calculations. This process yields images with realistic looking surface wrinkles without the need to model each wrinkle as a separate surface element. Several samples of images made with this technique are included.},
journal = {SIGGRAPH Comput. Graph.},
month = {aug},
pages = {286–292},
numpages = {7}
}

@inproceedings{Blinn1978,
author = {Blinn, James F.},
title = {Simulation of Wrinkled Surfaces},
year = {1978},
isbn = {9781450379083},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800248.507101},
doi = {10.1145/800248.507101},
abstract = {Computer generated shaded images have reached an impressive degree of realism with the current state of the art. They are not so realistic, however, that they would fool many people into believing they are real. One problem is that the surfaces tend to look artificial due to their extreme smoothness. What is needed is a means of simulating the surface irregularities that are on real surfaces. In 1973 Ed Catmull introduced the idea of using the parameter values of parametrically defined surfaces to index into a texture definition function which scales the intensity of the reflected light. By tying the texture pattern to the parameter values, the texture is guaranteed to rotate and move with the object. This is good for showing patterns painted on the surface, but attempts to simulate rough surfaces in this way are unconvincing. This paper presents a method of using a texturing function to perform a small perturbation on the direction of the surface normal before using it in the intensity calculations. This process yields images with realistic looking surface wrinkles without the need to model each wrinkle as a separate surface element. Several samples of images made with this technique are included.},
booktitle = {Proceedings of the 5th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {286–292},
numpages = {7},
series = {SIGGRAPH '78}
}

@article{10.1145/964967.801137,
author = {Kajiya, James T.},
title = {New Techniques for Ray Tracing Procedurally Defined Objects},
year = {1983},
issue_date = {July 1983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/964967.801137},
doi = {10.1145/964967.801137},
abstract = {We present new algorithms for efficient ray tracing of three procedurally defined objects: fractal surfaces, prisms, and surfaces of revolution. The fractal surface algorithm performs recursive subdivision adaptively. Subsurfaces which cannot intersect a given ray are culled from further consideration. The prism algorithm transforms the three dimensional ray-surface intersection problem into a two dimensional ray-curve intersection problem, which is solved by the method of strip trees. The surface of revolution algorithm transforms the three dimensional ray-surface intersection problem into a two dimensional curve-curve intersection problem, which again is solved by strip trees.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {91–102},
numpages = {12},
keywords = {Computer graphics, Surfaces of revolution, Ray tracing, Fractal surfaces, Stochastic models, Procedural modelling, Strip trees, Raster graphics}
}

@inproceedings{Kajiya1983,
author = {Kajiya, James T.},
title = {New Techniques for Ray Tracing Procedurally Defined Objects},
year = {1983},
isbn = {0897911091},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800059.801137},
doi = {10.1145/800059.801137},
abstract = {We present new algorithms for efficient ray tracing of three procedurally defined objects: fractal surfaces, prisms, and surfaces of revolution. The fractal surface algorithm performs recursive subdivision adaptively. Subsurfaces which cannot intersect a given ray are culled from further consideration. The prism algorithm transforms the three dimensional ray-surface intersection problem into a two dimensional ray-curve intersection problem, which is solved by the method of strip trees. The surface of revolution algorithm transforms the three dimensional ray-surface intersection problem into a two dimensional curve-curve intersection problem, which again is solved by strip trees.},
booktitle = {Proceedings of the 10th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {91–102},
numpages = {12},
keywords = {Computer graphics, Procedural modelling, Surfaces of revolution, Strip trees, Ray tracing, Fractal surfaces, Stochastic models, Raster graphics},
location = {Detroit, Michigan, USA},
series = {SIGGRAPH '83}
}


@article{Kaneko2001,
author = {Kaneko, Tomomichi and Takahei, Toshiyuki and Inami, Masahiko and Kawakami, Naoki and Yanagida, Yasuyuki and Maeda, Taro and Tachi, Susumu},
year = {2001},
month = {01},
pages = {},
title = {Detailed shape representation with parallax mapping},
volume = {2001},
journal = {In Proceedings of the ICAT}
}

@article{Oliveira2005,
author = {Oliveira, Manuel and Policarpo, Fabio},
year = {2005},
month = {01},
pages = {},
title = {An Efficient Representation for Surface Details},
journal = {UFRGS Technical Report RP-351}
}


@inproceedings{Tatarchuck2005,
author = {Tatarchuk, Natalya},
title = {Practical Dynamic Parallax Occlusion Mapping},
year = {2005},
isbn = {9781450378277},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1187112.1187240},
doi = {10.1145/1187112.1187240},
booktitle = {ACM SIGGRAPH 2005 Sketches},
pages = {106–es},
location = {Los Angeles, California},
series = {SIGGRAPH '05}
}


@inproceedings{Hirche2004,
author = {Hirche, Johannes and Ehlert, Alexander and Guthe, Stefan and Doggett, Michael},
title = {Hardware Accelerated Per-Pixel Displacement Mapping},
year = {2004},
isbn = {1568812272},
publisher = {Canadian Human-Computer Communications Society},
address = {Waterloo, CAN},
abstract = {In this paper we present an algorithm capable of rendering a displacement mapped triangle mesh interactively on latest GPUs. The algorithm uses only pixel shaders and does not rely on adaptively adding geometry. All sampling of the displacement map takes place in the pixel shader and bi- or trilinear ltering can be applied to it, and at the same time as the calculations are done per pixel in the shader, the algorithm has automatic level of detail control. The triangles of the base mesh are extruded along the respective normal directions and then the resulting prisms are rendered by casting rays inside and intersecting them with the displaced surface. Two different implementations are discussed in detail.},
booktitle = {Proceedings of Graphics Interface 2004},
pages = {153–158},
numpages = {6},
location = {London, Ontario, Canada},
series = {GI '04}
}

@misc{Dachsbacher2007,
  TITLE = {{Prism Parallax Occlusion Mapping with Accurate Silhouette Generation}},
  AUTHOR = {Dachsbacher, Carsten and Tatarchuk, Natalya},
  URL = {https://inria.hal.science/inria-00606806},
  YEAR = {2007},
  PDF = {https://inria.hal.science/inria-00606806/file/Dachsbacher-Tatarchuk-Prism_Parallax_Occlusion_Mapping_with_Accurate_Silhouette_Generation_SI3D07_.pdf},
  HAL_ID = {inria-00606806},
  HAL_VERSION = {v1},
}


@inproceedings{Tevs2008,
author = {Tevs, Art and Ihrke, Ivo and Seidel, Hans-Peter},
title = {Maximum Mipmaps for Fast, Accurate, and Scalable Dynamic Height Field Rendering},
year = {2008},
isbn = {9781595939838},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1342250.1342279},
doi = {10.1145/1342250.1342279},
abstract = {This paper presents a GPU-based, fast, and accurate dynamic height field rendering technique that scales well to large scale height fields. Current real-time rendering algorithms for dynamic height fields employ approximate ray-height field intersection methods, whereas accurate algorithms require pre-computation in the order of seconds to minutes and are thus not suitable for dynamic height field rendering. We alleviate this problem by using maximum mipmaps, a hierarchical data structure supporting accurate and efficient rendering while simultaneously lowering the pre-computation costs to negligible levels. Furthermore, maximum mipmaps allow for view-dependent level-of-detail rendering. In combination with hierarchical ray-stepping this results in an efficient intersection algorithm for large scale height fields.},
booktitle = {Proceedings of the 2008 Symposium on Interactive 3D Graphics and Games},
pages = {183–190},
numpages = {8},
keywords = {GPU, real-time rendering, texturing techniques, graphics hardware, simplification/level of detail, spatial data structures, height field intersection, surface details, displacement mapping},
location = {Redwood City, California},
series = {I3D '08}
}

@article{Ramsey2004,
  title={Ray Bilinear Patch Intersections},
  author={Shawn D. Ramsey and Kristin C. Potter and Charles D. Hansen},
  journal={Journal of Graphics Tools},
  year={2004},
  volume={9},
  pages={41 - 47},
  url={https://api.semanticscholar.org/CorpusID:10347303}
}

@Inbook{Reshetov2019,
author="Reshetov, Alexander",
title="Cool Patches: A Geometric Approach to Ray/Bilinear Patch Intersections",
bookTitle="Ray Tracing Gems: High-Quality and Real-Time Rendering with DXR and Other APIs",
year="2019",
publisher="Apress",
address="Berkeley, CA",
pages="95--109",
abstract="We find intersections between a ray and a nonplanar bilinear patch using simple geometrical constructs. The new algorithm improves the state of the art performance by over 6{\texttimes} and is faster than approximating a patch with two triangles.",
isbn="978-1-4842-4427-2",
doi="10.1007/978-1-4842-4427-2_8",
url="https://doi.org/10.1007/978-1-4842-4427-2_8"
}

@inproceedings{Karras2013,
author = {Karras, Tero and Aila, Timo},
title = {Fast Parallel Construction of High-Quality Bounding Volume Hierarchies},
year = {2013},
isbn = {9781450321358},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2492045.2492055},
doi = {10.1145/2492045.2492055},
abstract = {We propose a new massively parallel algorithm for constructing high-quality bounding volume hierarchies (BVHs) for ray tracing. The algorithm is based on modifying an existing BVH to improve its quality, and executes in linear time at a rate of almost 40M triangles/sec on NVIDIA GTX Titan. We also propose an improved approach for parallel splitting of triangles prior to tree construction. Averaged over 20 test scenes, the resulting trees offer over 90\% of the ray tracing performance of the best offline construction method (SBVH), while previous fast GPU algorithms offer only about 50\%. Compared to state-of-the-art, our method offers a significant improvement in the majority of practical workloads that need to construct the BVH for each frame. On the average, it gives the best overall performance when tracing between 7 million and 60 billion rays per frame. This covers most interactive applications, product and architectural design, and even movie rendering.},
booktitle = {Proceedings of the 5th High-Performance Graphics Conference},
pages = {89–99},
numpages = {11},
keywords = {ray tracing, bounding volume hierarchies},
location = {Anaheim, California},
series = {HPG '13}
}

@article{Risser2007,
author = {Risser, Eric and Shah, Musawir and Pattanaik, Sumanta},
year = {2007},
month = {01},
pages = {17-24},
title = {Faster Relief Mapping Using the Secant Method},
volume = {12},
journal = {J. Graphics Tools},
doi = {10.1080/2151237X.2007.10129244}
}

@inbook{Donnelly2005,
author={William Donnelly and Matthias M. Wloka},
title={Per-Pixel Displacement Mapping with Distance Functions},
booktitle={GPU Gem 3},
publisher={Addison-Wesley Professional},
address={Glenview, IL},
year={2005},
pages={123-136},
url={https://api.semanticscholar.org/CorpusID:17857062}
}

@misc{Dummer2006,
author = {Dummer, Jonathan},
year = {2006},
title = {Cone Step Mapping: An Iterative Ray-Heightfield Intersection Algorithm},
url = {https://www.scribd.com/document/57896129/Cone-Step-Mapping}
}

@article{Parker2010,
author = {Parker, Steven G. and Bigler, James and Dietrich, Andreas and Friedrich, Heiko and Hoberock, Jared and Luebke, David and McAllister, David and McGuire, Morgan and Morley, Keith and Robison, Austin and Stich, Martin},
title = {OptiX: A General Purpose Ray Tracing Engine},
year = {2010},
issue_date = {July 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {4},
issn = {0730-0301},
url = {https://doi.org/10.1145/1778765.1778803},
doi = {10.1145/1778765.1778803},
abstract = {The NVIDIA® OptiX™ ray tracing engine is a programmable system designed for NVIDIA GPUs and other highly parallel architectures. The OptiX engine builds on the key observation that most ray tracing algorithms can be implemented using a small set of programmable operations. Consequently, the core of OptiX is a domain-specific just-in-time compiler that generates custom ray tracing kernels by combining user-supplied programs for ray generation, material shading, object intersection, and scene traversal. This enables the implementation of a highly diverse set of ray tracing-based algorithms and applications, including interactive rendering, offline rendering, collision detection systems, artificial intelligence queries, and scientific simulations such as sound propagation. OptiX achieves high performance through a compact object model and application of several ray tracing-specific compiler optimizations. For ease of use it exposes a single-ray programming model with full support for recursion and a dynamic dispatch mechanism similar to virtual function calls.},
journal = {ACM Trans. Graph.},
month = {jul},
articleno = {66},
numpages = {13},
keywords = {ray tracing, graphics hardware, graphics systems}
}

@book{Ericson2004,
title={Real-time Collision Detection},
year={2004},
author={Ericson, Christer},
publisher={CRC Press},
address={Boca Raton, FL},
pages={47-48}
}
      
@inproceedings{Podell2023,
title={{SDXL}: Improving Latent Diffusion Models for High-Resolution Image Synthesis},
author={Dustin Podell and Zion English and Kyle Lacey and Andreas Blattmann and Tim Dockhorn and Jonas Müller and Joe Penna and Robin Rombach},
booktitle={The Twelfth International Conference on Learning Representations},
publisher={ICLR},
year={2023},
url={https://openreview.net/forum?id=di52zR8xgf},
note={under review}
}

@inproceedings{Wang2018,
author = {Wang, Xintao and Yu, Ke and Wu, Shixiang and Gu, Jinjin and Liu, Yihao and Dong, Chao and Qiao, Yu and Loy, Chen Change},
title = {ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks},
year = {2019},
isbn = {978-3-030-11020-8},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-11021-5_5},
doi = {10.1007/978-3-030-11021-5_5},
abstract = {The Super-Resolution Generative Adversarial Network (SRGAN) is a seminal work that is capable of generating realistic textures during single image super-resolution. However, the hallucinated details are often accompanied with unpleasant artifacts. To further enhance the visual quality, we thoroughly study three key components of SRGAN – network architecture, adversarial loss and perceptual loss, and improve each of them to derive an Enhanced SRGAN (ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block (RRDB) without batch normalization as the basic network building unit. Moreover, we borrow the idea from relativistic GAN to let the discriminator predict relative realness instead of the absolute value. Finally, we improve the perceptual loss by using the features before activation, which could provide stronger supervision for brightness consistency and texture recovery. Benefiting from these improvements, the proposed ESRGAN achieves consistently better visual quality with more realistic and natural textures than SRGAN and won the first place in the PIRM2018-SR Challenge (region 3) with the best perceptual index. The code is available at .},
booktitle = {Computer Vision – ECCV 2018 Workshops: Munich, Germany, September 8-14, 2018, Proceedings, Part V},
pages = {63–79},
numpages = {17},
location = {Munich, Germany}
}

@article{Ranftl2022,
  author={Ranftl, René and Lasinger, Katrin and Hafner, David and Schindler, Konrad and Koltun, Vladlen},
  journal={IEEE Transactions on Pattern Analysis and Machine Intelligence}, 
  title={Towards Robust Monocular Depth Estimation: Mixing Datasets for Zero-Shot Cross-Dataset Transfer}, 
  year={2022},
  volume={44},
  number={3},
  pages={1623-1637},
  doi={10.1109/TPAMI.2020.3019967}}


@inproceedings{Lee2009,
  author={L. Lee and Shih-Wei Tseng and W. Tai},
  year={2009},
  title={Improved Relief Texture Mapping Using Minmax Texture},
  publisher={Fifth International Conference on Image and Graphics},
  pages={547–552}
}

@article{Williams1990,
author = {Williams, Lance},
title = {3D paint},
year = {1990},
issue_date = {Mar. 1990},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {2},
issn = {0097-8930},
url = {https://doi.org/10.1145/91394.91450},
doi = {10.1145/91394.91450},
abstract = {This paper advances a means by which the conventions and methods of digital "painting" and image manipulation programs can be extended into the third dimension, providing sculpting tools that are natural and appropriate for a restricted but very useful class of models. Attempts to approximate "drawing" in 3D do not necessarily involve computer graphics [Gregory71]. Efforts in this area are a subject of continuing graphics research [Schmandt82], [Sachs89]. The key to the approach undertaken in the work described here is the use of an unusual hardware technique for displaying video rasters as surfaces. With such a display, existing software for 2D graphics and image processing can be used, without modification, for creating and modifying three-dimensional surfaces. The resulting raster data can then be converted into conventional 3D databases for further processing and display. The aim of this research is to create consistent, unified methods for computer-assisted drawing, painting, modeling, and animation.},
journal = {SIGGRAPH Comput. Graph.},
month = feb,
pages = {225–233},
numpages = {9}
}

@article{Peng2004,
author = {Peng, Jianbo and Kristjansson, Daniel and Zorin, Denis},
title = {Interactive modeling of topologically complex geometric detail},
year = {2004},
issue_date = {August 200\dfrac{•}{•}4},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {23},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/1015706.1015773},
doi = {10.1145/1015706.1015773},
abstract = {Volume textures aligned with a surface can be used to add topologically complex geometric detail to objects in an efficient way, while retaining an underlying simple surface structure.Adding a volume texture to a surface requires more than a conventional two-dimensional parameterization: a part of the space surrounding the surface has to be parameterized. Another problem with using volume textures for adding geometric detail is the difficulty in rendering implicitly represented surfaces, especially when they are changed interactively.In this paper we present algorithms for constructing and rendering volume-textured surfaces. We demonstrate a number of interactive operations that these algorithms enable.},
journal = {ACM Trans. Graph.},
month = aug,
pages = {635–643},
numpages = {9},
keywords = {modeling, volumetric rendering, volumetric texture}
}

@article{Reiner2011,
title = {Interactive modeling of implicit surfaces using a direct visualization approach with signed distance functions},
journal = {Computers and Graphics},
volume = {35},
number = {3},
pages = {596-603},
year = {2011},
note = {Shape Modeling International (SMI) Conference 2011},
issn = {0097-8493},
doi = {https://doi.org/10.1016/j.cag.2011.03.010},
url = {https://www.sciencedirect.com/science/article/pii/S0097849311000495},
author = {Tim Reiner and Gregor Mückl and Carsten Dachsbacher},
keywords = {Distance functions, Implicit surfaces, Implicit surface rendering, Interactive modeling},
abstract = {Modeling appealing virtual scenes is an elaborate and time-consuming task, requiring not only training and experience, but also powerful modeling tools providing the desired functionality to the user. In this paper, we describe a modeling approach using signed distance functions as an underlying representation for objects, handling both conventional and complex surface manipulations. Scenes defined by signed distance functions can be stored compactly and rendered directly in real-time using sphere tracing. Hence, we are capable of providing an interactive application with immediate visual feedback for the artist, which is a crucial factor for the modeling process. Moreover, dealing with underlying mathematical operations is not necessary on the user level. We show that fundamental aspects of traditional modeling can be directly transferred to this novel kind of environment, resulting in an intuitive application behavior, and describe modeling operations which naturally benefit from implicit representations. We show modeling examples where signed distance functions are superior to explicit representations, but discuss the limitations of this approach as well.}
}


@inbook{Yusov2012,
author="Yusov, Egor",
title="Real-Time Deformable Terrain Rendering with DirectX 11",
bookTitle="GPU Pro 3",
year="2012",
publisher="A.K. Peters / CRC Press",
pages="28",
isbn="9780429111174"
}

@ARTICLE{Nykl2014,
  author={Nykl, Scott and Mourning, Chad and M. Chelberg, David},
  journal={IEEE Transactions on Visualization and Computer Graphics}, 
  title={Interactive Mesostructures with Volumetric Collisions}, 
  year={2014},
  volume={20},
  number={7},
  pages={970-982},
  keywords={Kernel;Graphics processing units;Rendering (computer graphics);Geometry;Vectors;Physics;Surface texture;Interactive mesostructures;inverse displacement mapping;mesostructures;quadric based mesostructures;curvedmesostructures;interactive deformation;real-time deformable mesostructures;GPU;GPGPU;CUDA;per-texel collision detection;image-based rendering;surface details;compute shaders},
  doi={10.1109/TVCG.2014.2317700}
}

@inproceedings{Zorin1997,
author = {Zorin, Denis and Schr\"{o}der, Peter and Sweldens, Wim},
title = {Interactive multiresolution mesh editing},
year = {1997},
isbn = {0897918967},
publisher = {ACM Press/Addison-Wesley Publishing Co.},
address = {USA},
url = {https://doi.org/10.1145/258734.258863},
doi = {10.1145/258734.258863},
booktitle = {Proceedings of the 24th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {259–268},
numpages = {10},
series = {SIGGRAPH '97}
}

@inproceedings{Kobbelt1998,
author = {Kobbelt, Leif and Campagna, Swen and Vorsatz, Jens and Seidel, Hans-Peter},
title = {Interactive multi-resolution modeling on arbitrary meshes},
year = {1998},
isbn = {0897919998},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/280814.280831},
doi = {10.1145/280814.280831},
booktitle = {Proceedings of the 25th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {105–114},
numpages = {10},
series = {SIGGRAPH '98}
}
  

@inproceedings{Jagnow2002,
 title = {Virtual Sculpting with Haptic Displacement Maps},
 author = {Robert Jagnow and Julie Dorsey},
 booktitle = (Proceedings of the Graphics Interface 2002 Conference, May 27-29, 2002, Calgary, Alberta, Canada},
 url = {http://graphicsinterface.org/wp-content/uploads/gi2002-15.pdf},
 year = {2002},
 month = {May},
 location = {Calgary, Alberta},
 pages = {125--132}
}

@inproceedings{Biermann2002,
author = {Biermann, Henning and Martin, Ioana and Bernardini, Fausto and Zorin, Denis},
title = {Cut-and-paste editing of multiresolution surfaces},
year = {2002},
isbn = {1581135211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/566570.566583},
doi = {10.1145/566570.566583},
abstract = {Cutting and pasting to combine different elements into a common structure are widely used operations that have been successfully adapted to many media types. Surface design could also benefit from the availability of a general, robust, and efficient cut-and-paste tool, especially during the initial stages of design when a large space of alternatives needs to be explored. Techniques to support cut-and-paste operations for surfaces have been proposed in the past, but have been of limited usefulness due to constraints on the type of shapes supported and the lack of real-time interaction. In this paper, we describe a set of algorithms based on multiresolution subdivision surfaces that perform at interactive rates and enable intuitive cut-and-paste operations.},
booktitle = {Proceedings of the 29th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {312–321},
numpages = {10},
location = {San Antonio, Texas},
series = {SIGGRAPH '02}
}

@inproceedings{Schaefer2015,
author = {Sch\"{a}fer, H. and Raab, J. and Keinert, B. and Meyer, M. and Stamminger, M. and Nie\ss{}ner, M.},
title = {Dynamic feature-adaptive subdivision},
year = {2015},
isbn = {9781450333924},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2699276.2699282},
doi = {10.1145/2699276.2699282},
abstract = {Feature-adaptive subdivision (FAS) is one of the state-of-the art real-time rendering methods for subdivision surfaces on modern GPUs. It enables efficient and accurate rendering of subdivision surfaces in many interactive applications, such as video games or authoring tools. In this paper, we present dynamic feature-adaptive subdivision (DFAS), which improves upon FAS by enabling an independent subdivision depth for every irregularity. Our subdivision kernels fill a dynamic patch buffer on-the-fly with the appropriate number of patches corresponding to the chosen level-of-detail scheme. By reducing the number of generated and processed patches, DFAS significantly improves upon the performance of static FAS.},
booktitle = {Proceedings of the 19th Symposium on Interactive 3D Graphics and Games},
pages = {31–38},
numpages = {8},
keywords = {subdivision surfaces, rendering},
location = {San Francisco, California},
series = {i3D '15}
}


@article{Brainerd2016,
author = {Brainerd, Wade and Foley, Tim and Kraemer, Manuel and Moreton, Henry and Nie\ss{}ner, Matthias},
title = {Efficient GPU rendering of subdivision surfaces using adaptive quadtrees},
year = {2016},
issue_date = {July 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {35},
number = {4},
issn = {0730-0301},
url = {https://doi.org/10.1145/2897824.2925874},
doi = {10.1145/2897824.2925874},
abstract = {We present a novel method for real-time rendering of subdivision surfaces whose goal is to make subdivision faces as easy to render as triangles, points, or lines. Our approach uses standard GPU tessellation hardware and processes each face of a base mesh independently, thus allowing an entire model to be rendered in a single pass. The key idea of our method is to subdivide the u, v domain of each face ahead of time, generating a quadtree structure, and then submit one tessellated primitive per input face. By traversing the quadtree for each post-tessellation vertex, we are able to accurately and efficiently evaluate the limit surface. Our method yields a more uniform tessellation of the surface, and faster rendering, as fewer primitives are submitted. We evaluate our method on a variety of assets, and realize performance that can be three times faster than state-of-the-art approaches. In addition, our streaming formulation makes it easier to integrate subdivision surfaces into applications and shader code written for polygonal models. We illustrate integration of our technique into a full-featured video game engine.},
journal = {ACM Trans. Graph.},
month = jul,
articleno = {113},
numpages = {12},
keywords = {real-time rendering, subdivision surfaces}
}

@INPROCEEDINGS {Day2003,
author = { Day, A. M., Arnold, D. B. and Fellner, D. and Havemann, S.},
booktitle = { 2013 International Conference on Cyberworlds },
title = {{ Combining Polygonal and Subdivision Surface approaches to Modelling of Urban Environments }},
year = {2003},
volume = {},
ISSN = {},
pages = {189},
abstract = { The economic production and the interactive rendering of complete reconstructions of populated urban environments are technically dif?cult tasks. Specialized modelling tools, which exploit knowledge of the types of object being modelled by working in the application domain, can be used to create appealing virtual reconstructions quickly. At the same time, the structural information from the modeller gives valuable hints to the renderer to determine ef?cient interactive display strategies through the use of level-of-detail and culling techniques. Thus a modeller that knows the operator is creating houses can use this information to simplify the user interaction, guide the operator, and to create models that build in optimisations when attempting real-time rendering. In this paper we discuss the way in which polygonal and multi-resolution surface techniques can complement one another in the modelling of urban environments. We also draw more general conclusions which apply to other software systems that share the same objective. },
keywords = {null},
doi = {10.1109/CYBER.2003.1253453},
url = {https://doi.ieeecomputersociety.org/10.1109/CYBER.2003.1253453},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month =Dec}

@inproceedings{Oliveira2000,
author = {Oliveira, Manuel M. and Bishop, Gary and McAllister, David},
title = {Relief texture mapping},
year = {2000},
isbn = {1581132085},
publisher = {ACM Press/Addison-Wesley Publishing Co.},
address = {USA},
url = {https://doi.org/10.1145/344779.344947},
doi = {10.1145/344779.344947},
abstract = {We present an extension to texture mapping that supports the representation of 3-D surface details and view motion parallax. The results are correct for viewpoints that are static or moving, far away or nearby. Our approach is very simple: a relief texture (texture extended with an orthogonal displacement per texel) is mapped onto a polygon using a two-step process: First, it is converted into an ordinary texture using a surprisingly simple 1-D forward transform. The resulting texture is then mapped onto the polygon using standard texture mapping. The 1-D warping functions work in texture coordinates to handle the parallax and visibility changes that result from the 3-D shape of the displacement surface. The subsequent texture-mapping operation handles the transformation from texture to screen coordinates.},
booktitle = {Proceedings of the 27th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {359–368},
numpages = {10},
keywords = {image-based rendering, range images, rendering, texture mapping},
series = {SIGGRAPH '00}
}

@article{JangHan2012,
author = {Jang, Hanyoung and Han, JungHyun},
title = {Feature-Preserving Displacement Mapping With Graphics Processing Unit (GPU) Tessellation},
journal = {Computer Graphics Forum},
volume = {31},
number = {6},
pages = {1880-1894},
keywords = {displacement mapping, GPU, tessellation, real-time rendering, I.3.7 Computer Graphics: Three-Dimensional Graphics and Realism–Virtual reality},
doi = {https://doi.org/10.1111/j.1467-8659.2012.03068.x},
abstract = {Abstract Displacement mapping reconstructs a high-frequency surface by adding geometric details encoded in the displacement map to the coarse base surface. In the context of hardware tessellation supported by GPUs, this paper aims at feature-preserving surface reconstruction, and proposes the generation of a displacement map that displaces more vertices towards the higher-frequency feature parts of the target mesh. In order to generate the feature-preserving displacement map, surface features of the target mesh are estimated, and then the target mesh is parametrized and sampled using the features. At run time, the base surface is semi-uniformly tessellated by hardware, and then the vertices of the tessellated mesh are displaced non-uniformly along the 3-D vectors stored in the displacement map. The experimental results show that the surfaces reconstructed by the proposed method are of a higher quality than those reconstructed by other methods.},
year = {2012}
}

@article{JangHan2013,
title = "GPU-optimized indirect scalar displacement mapping",
abstract = "Displacement mapping refers to a technique for rendering a high-frequency surface by adding geometric details encoded in a displacement map to a low-frequency base surface. This paper proposes a method for indirectly accessing the base surface using a special displacement map and then carrying out scalar displacement. Given a high-frequency triangle mesh, a coarse PN (point-normal) quad mesh is computed as the base surface. The parameters used to evaluate the base surface are precomputed such that scalar displacement from the evaluated points reaches the features of the original surface. The parameters are stored in the displacement map together with the displacement scalars. The run-time algorithm uses the hardware tessellation capability of GPU and reconstructs the high-frequency surface. Using the proposed method, surface features are accurately preserved, surface deformation is well supported, LOD control becomes quite flexible, and the base surface can be extremely simplified.",
keywords = "Displacement mapping, GPU, Tessellation",
author = "Hanyoung Jang and Junghyun Han",
note = "Funding Information: This research was supported by a National Research Foundation of Korea (NRF) grant funded by the Korea government (MEST) (No. 2009-0086684 ). ",
year = "2013",
month = feb,
doi = "10.1016/j.cad.2012.10.034",
language = "English",
volume = "45",
pages = "517--522",
journal = "CAD Computer Aided Design",
issn = "0010-4485",
publisher = "Elsevier Ltd",
number = "2",
}

@inproceedings{Karis2021,
author = {Karis, B. and Stubbe, R. and Wihlidal G.},
title = {A deep dive into Nanite virtualized geometry},
year = {2021},
publisher = {ACM SIGGRAPH, Course Slides}
}

@article{Benthin2023,
author = {Benthin, Carsten and Peters, Christoph},
title = {Real-Time Ray Tracing of Micro-Poly Geometry with Hierarchical Level of Detail},
journal = {Computer Graphics Forum},
volume = {42},
number = {8},
pages = {e14868},
doi = {https://doi.org/10.1111/cgf.14868},
abstract = {Abstract In recent work, Nanite has demonstrated how to rasterize virtualized micro-poly geometry in real time, thus enabling immense geometric complexity. We present a system that employs similar methods for real-time ray tracing of micro-poly geometry. The geometry is preprocessed in almost the same fashion: Nearby triangles are clustered together and clusters get merged and simplified to obtain hierarchical level of detail (LOD). Then these clusters are compressed and stored in a GPU-friendly data structure. At run time, Nanite selects relevant clusters, decompresses them and immediately rasterizes them. Instead of rasterization, we decompress each selected cluster into a small bounding volume hierarchy (BVH) in the format expected by the ray tracing hardware. Then we build a complete BVH on top of the bounding volumes of these clusters and use it for ray tracing. Our BVH build reaches more than 74\% of the attainable peak memory bandwidth and thus it can be done per frame. Since LOD selection happens per frame at the granularity of clusters, all triangles cover a small area in screen space.},
year = {2023}
}

@article{Haydel2023,
author = {Haydel, Jacob and Yuksel, Cem and Seiler, Larry},
title = {Locally-Adaptive Level-of-Detail for Hardware-Accelerated Ray Tracing},
year = {2023},
issue_date = {December 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {6},
issn = {0730-0301},
url = {https://doi.org/10.1145/3618359},
doi = {10.1145/3618359},
abstract = {We introduce an adaptive level-of-detail technique for ray tracing triangle meshes that aims to reduce the memory bandwidth used during ray traversal, which can be the bottleneck for rendering time with large scenes and the primary consumer of energy. We propose a specific data structure for hierarchically representing triangle meshes, allowing localized decisions for the desired mesh resolution per ray. Starting with the lowest-resolution triangle mesh level, higher-resolution levels are generated by tessellating each triangle into four via splitting its edges with arbitrarily-placed vertices. We fit the resulting mesh hierarchy into a specialized acceleration structure to perform on-the-fly tessellation level selection during ray traversal. Our structure reduces both storage cost and data movement during rendering, which are the main consumers of energy. It also allows continuous transitions between detail levels, while locally adjusting the mesh resolution per ray and preserving watertightness. We present how this structure can be used with both primary and secondary rays for reflections and shadows, which can intersect with different tessellation levels, providing consistent results. We also propose specific hardware units to cover the cost of additional compute needed for level-of-detail operations. We evaluate our method using a cycle-accurate simulation of a custom ray tracing hardware architecture. Our results show that, as compared to traditional bounding volume hierarchies, our method can provide more than an order of magnitude reduction in energy use and render time, given sufficient computational resources.},
journal = {ACM Trans. Graph.},
month = dec,
articleno = {196},
numpages = {15}
}

@misc{Nvidia2023,
  author = {Nvidia},
  year = {2023},
  title = {Micro-mesh API},
  howpublished = {\url{https://developer.nvidia.com/rtx/ray-tracing/micro-mesh}},
  note = {Accessed: 2025-01-10}
}

@inbook{Policarpo2007,
author="Policarop, Fabio and Oliveira, Manuel",
title="Relaxed Cone Stepping for Relief Mapping",
bookTitle="GPU Gems 3",
year="2007",
publisher="Addison-Wesley Professional",
isbn="978-0321515261"
}

@inproceedings{Ogaki2023,
author = {Ogaki, Shinji},
title = {Nonlinear Ray Tracing for Displacement and Shell Mapping},
year = {2023},
isbn = {9798400703157},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3610548.3618199},
doi = {10.1145/3610548.3618199},
abstract = {Displacement mapping and shell mapping add fine-scale geometric features to meshes and can significantly enhance the realism of an object’s surface representation. Both methods generate geometry within a layer between the base mesh and its offset mesh called a shell. It is not easy to simultaneously achieve high ray tracing performance, low memory consumption, interactive feedback, and ease of implementation, partly because the mapping between shell and texture space is nonlinear. This paper introduces a new efficient approach to perform acceleration structure traversal and intersection tests against microtriangles entirely in texture space by formulating nonlinear rays as degree-2 rational functions. Our method simplifies the implementation of tessellation-free displacement mapping and smooth shell mapping and works even if base mesh triangles are degenerated in uv space.},
booktitle = {SIGGRAPH Asia 2023 Conference Papers},
articleno = {93},
numpages = {10},
keywords = {displacement mapping, ray tracing, shell mapping},
location = {Sydney, NSW, Australia},
series = {SA '23}
}

@inproceedings{Thonat2023,
author = {Thonat, Theo and Georgiev, Iliyan and Beaune, Fran\c{c}ois and Boubekeur, Tamy},
title = {RMIP: Displacement ray tracing via inversion and oblong bounding},
year = {2023},
isbn = {9798400703157},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3610548.3618182},
doi = {10.1145/3610548.3618182},
abstract = {High-performance ray tracing of triangle meshes equipped with displacement maps is a challenging task. Existing methods either rely on pre-tessellation, taking full advantage of the hardware but with a poor memory/quality tradeoff, or use custom displacement-centric acceleration structures, preserving all the geometric details but being orders of magnitude slower. We introduce a method that efficiently probes the displacement-map space to find ray-surface intersections without relying on pre-tessellation. Our method combines inverse displacement mapping and on-the-fly surface-bound computation. It employs a novel data structure that provides tight displacement bounds over rectangular regions in the displacement-map space. We demonstrate the effectiveness of our approach in a production GPU path tracer. It can achieve over an order of magnitude speed-up in render time compared to state of the art in the most challenging real-time path-tracing scenarios, while maintaining a low memory footprint.},
booktitle = {SIGGRAPH Asia 2023 Conference Papers},
articleno = {12},
numpages = {11},
keywords = {Displacement Mapping, GPU Ray Tracing},
location = {Sydney, NSW, Australia},
series = {SA '23}
}

@inproceedings{Ritsche2006,
author = {Ritsche, Nico},
title = {Real-time shell space rendering of volumetric geometry},
year = {2006},
isbn = {1595935649},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1174429.1174477},
doi = {10.1145/1174429.1174477},
abstract = {This work introduces a new technique for real-time rendering of arbitrary volumetric geometry into a polygonal mesh's shell space. The shell space is a layer of variable thickness on top or below the polygonal mesh. The technique computes view ray shell geometry intersections in a pixel shader. In addition to arbitrary volumetric shell geometry, represented as volume textures, it can handle also the less general case of height-field shell geometry. To minimize the number of ray tracing steps, a 3D distance map is used for skipping empty space in the shell volume. The shell volume is defined by a pre-computed tetrahedra mesh. The tetrahedra subdivide prisms extruded from the polygonal base mesh. A vertex shader computes tetrahedron face plane distances for generating the per-pixel tetrahedron thickness using non-linear interpolation. The technique includes local lighting and overcomes shortcomings of previous shell space rendering approaches such as high storage requirements and involved per-vertex computations [Wang et al. 2004] or low shell geometry depth complexity and mapping distortions [Policarpo and Oliveira 2006]. Additionally, rendering artifacts for shallow view angles common to many related techniques are reduced. Furthermore, methods for generating a geometry volume texture and the corresponding distance map from a polygonal mesh are presented.},
booktitle = {Proceedings of the 4th International Conference on Computer Graphics and Interactive Techniques in Australasia and Southeast Asia},
pages = {265–274},
numpages = {10},
keywords = {3D distance map, displacement mapping, graphics hardware, real-time rendering, shading and lighting, shell space, surface geometry, volume texture},
location = {Kuala Lumpur, Malaysia},
series = {GRAPHITE '06}
}

@article{Wang2003,
author = {Wang, Lifeng and Wang, Xi and Tong, Xin and Lin, Stephen and Hu, Shimin and Guo, Baining and Shum, Heung-Yeung},
title = {View-dependent displacement mapping},
year = {2003},
issue_date = {July 2003},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {3},
issn = {0730-0301},
url = {https://doi.org/10.1145/882262.882272},
doi = {10.1145/882262.882272},
abstract = {Significant visual effects arise from surface mesostructure, such as fine-scale shadowing, occlusion and silhouettes. To efficiently render its detailed appearance, we introduce a technique called view-dependent displacement mapping (VDM) that models surface displacements along the viewing direction. Unlike traditional displacement mapping, VDM allows for efficient rendering of self-shadows, occlusions and silhouettes without increasing the complexity of the underlying surface mesh. VDM is based on per-pixel processing, and with hardware acceleration it can render mesostructure with rich visual appearance in real time.},
journal = {ACM Trans. Graph.},
month = jul,
pages = {334–339},
numpages = {6},
keywords = {refiectance and shading models, mesostructure, hardware rendering, displacement maps}
}

@article{Kuznetsov2021,
author = {Kuznetsov, Alexandr and Mullia, Krishna and Xu, Zexiang and Ha\v{s}an, Milo\v{s} and Ramamoorthi, Ravi},
title = {NeuMIP: multi-resolution neural materials},
year = {2021},
issue_date = {August 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {4},
issn = {0730-0301},
url = {https://doi.org/10.1145/3450626.3459795},
doi = {10.1145/3450626.3459795},
abstract = {We propose NeuMIP, a neural method for representing and rendering a variety of material appearances at different scales. Classical prefiltering (mipmapping) methods work well on simple material properties such as diffuse color, but fail to generalize to normals, self-shadowing, fibers or more complex microstructures and reflectances. In this work, we generalize traditional mipmap pyramids to pyramids of neural textures, combined with a fully connected network. We also introduce neural offsets, a novel method which enables rendering materials with intricate parallax effects without any tessellation. This generalizes classical parallax mapping, but is trained without supervision by any explicit heightfield. Neural materials within our system support a 7-dimensional query, including position, incoming and outgoing direction, and the desired filter kernel size. The materials have small storage (on the order of standard mipmapping except with more texture channels), and can be integrated within common Monte-Carlo path tracing systems. We demonstrate our method on a variety of materials, resulting in complex appearance across levels of detail, with accurate parallax, self-shadowing, and other effects.},
journal = {ACM Trans. Graph.},
month = jul,
articleno = {175},
numpages = {13},
keywords = {BTF, materials, mipmap, multi-resolution, neural}
}

@article{10.1145/964965.808602,
author = {Cook, Robert L.},
title = {Shade trees},
year = {1984},
issue_date = {July 1984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/964965.808602},
doi = {10.1145/964965.808602},
abstract = {Shading is an important part of computer imagery, but shaders have been based on fixed models to which all surfaces must conform. As computer imagery becomes more sophisticated, surfaces have more complex shading characteristics and thus require a less rigid shading model. This paper presents a flexible tree-structured shading model that can represent a wide range of shading characteristics. The model provides an easy means for specifying complex shading characteristics. It is also efficient because it can tailor the shading calculations to each type of surface.},
journal = {SIGGRAPH Comput. Graph.},
month = jan,
pages = {223–231},
numpages = {9},
keywords = {Texture, Shadows, Shading, Reflection, Lighting, Illumination, Computer Graphics, Color}
}

@inproceedings{Cook1984,
author = {Cook, Robert L.},
title = {Shade trees},
year = {1984},
isbn = {0897911385},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800031.808602},
doi = {10.1145/800031.808602},
abstract = {Shading is an important part of computer imagery, but shaders have been based on fixed models to which all surfaces must conform. As computer imagery becomes more sophisticated, surfaces have more complex shading characteristics and thus require a less rigid shading model. This paper presents a flexible tree-structured shading model that can represent a wide range of shading characteristics. The model provides an easy means for specifying complex shading characteristics. It is also efficient because it can tailor the shading calculations to each type of surface.},
booktitle = {Proceedings of the 11th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {223–231},
numpages = {9},
keywords = {Texture, Shadows, Shading, Reflection, Lighting, Illumination, Computer Graphics, Color},
series = {SIGGRAPH '84}
}

@misc{Mic2009,
  author = {Microsoft},
  title = {DirectX 11 API},
  howpublished = {\url{https://learn.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-features}},
  year = {2009},
  note = {Accessed: 2025-01-10}
}

@inproceedings{Munkberg2010,
author = {Munkberg, Jacob and Hasselgren, Jon and Toth, Robert and Akenine-M\"{o}ller, Tomas},
title = {Efficient bounding of displaced B\'{e}zier patches},
year = {2010},
publisher = {Eurographics Association},
address = {Goslar, DEU},
abstract = {In this paper, we present a new approach to conservative bounding of displaced B\'{e}zier patches. These surfaces are expected to be a common use case for tessellation in interactive and real-time rendering. Our algorithm combines efficient normal bounding techniques, min-max mipmap hierarchies and oriented bounding boxes. This results in substantially faster convergence for the bounding volumes of displaced surfaces, prior to tessellation and displacement shading. Our work can be used for different types of culling, ray tracing, and to sort higher order primitives in tiling architectures. For our hull shader implementation, we report performance benefits even for moderate tessellation rates.},
booktitle = {Proceedings of the Conference on High Performance Graphics},
pages = {153–162},
numpages = {10},
location = {Saarbrucken, Germany},
series = {HPG '10}
}

@inproceedings{Concheiro2011,
  title={Dynamic and Adaptive Tessellation of B{\'e}zier Surfaces},
  author={Raquel Concheiro and Margarita Amor and Montserrat B{\'o}o and Michael C. Doggett},
  booktitle={International Conference on Computer Graphics Theory and Applications},
  year={2011},
  url={https://api.semanticscholar.org/CorpusID:5140727}
}

@article{Tejima2015,
   author  = {Takahito Tejima and Masahiro Fujita and Toru Matsuoka},
   title   = {Direct Ray Tracing of Full-Featured Subdivision Surfaces with Bezier Clipping},
   year    = {2015},
   month   = {March},
   day     = {31},
   journal = {Journal of Computer Graphics Techniques (JCGT)},
   volume  = {4},
   number  = {1},
   pages   = {69--83},
   url     = {http://jcgt.org/published/0004/01/04/},
   issn    = {2331-7418}
}          

@article{Loop2009,
author = {Loop, Charles and Schaefer, Scott and Ni, Tianyun and Casta\~{n}o, Ignacio},
title = {Approximating subdivision surfaces with Gregory patches for hardware tessellation},
year = {2009},
issue_date = {December 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {5},
issn = {0730-0301},
url = {https://doi.org/10.1145/1618452.1618497},
doi = {10.1145/1618452.1618497},
abstract = {We present a new method for approximating subdivision surfaces with hardware accelerated parametric patches. Our method improves the memory bandwidth requirements for patch control points, translating into superior performance compared to existing methods. Our input is general, allowing for meshes that contain both quadrilateral and triangular faces in the input control mesh, as well as control meshes with boundary. We present two implementations of our scheme designed to run on Direct3D 11 class hardware equipped with a tessellator unit.},
journal = {ACM Trans. Graph.},
month = dec,
pages = {1–9},
numpages = {9}
}

@inproceedings{Amresh2012,
  title={Methods for Approximating Loop Subdivision Using Tessellation Enabled GPUs},
  author={Ashish Amresh and John C. Femiani and Christoph F{\"u}nfzig},
  booktitle={International Symposium on Visual Computing},
  year={2012},
  url={https://api.semanticscholar.org/CorpusID:19625087}
}

@article{StamLoop2003,
author = {Stam, Jos and Loop, Charles},
title = {Quad/Triangle Subdivision},
journal = {Computer Graphics Forum},
volume = {22},
number = {1},
pages = {79-85},
doi = {https://doi.org/10.1111/1467-8659.t01-2-00647},
abstract = {Abstract In this paper we introduce a new subdivision operator that unifies triangular and quadrilateral subdivision schemes. Designers often want the added flexibility of having both quads and triangles in their models. It is also well known that triangle meshes generate poor limit surfaces when using a quad scheme, while quad-only meshes behave poorly with triangular schemes. Our new scheme is a generalization of the well known Catmull-Clark and Loop subdivision algorithms. We show that our surfaces are C 1 everywhere and provide a proof that it is impossible to construct such a C 2 scheme at the quad/triangle boundary. However, we provide rules that produce surfaces with bounded curvature at the regular quad/triangle boundary and provide optimal masks that minimize the curvature divergence elsewhere. We demonstrate the visual quality of our surfaces with several examples. ACM CSS: I.3.5 Computer Graphics—Curve, surface, solid, and object representations},
year = {2003}
}

@inproceedings{Wyman2018,
author = {Wyman, Chris and Hargreaves, Shawn and Shirley, Peter and Barr\'{e}-Brisebois, Colin},
title = {Introduction to DirectX raytracing},
year = {2018},
isbn = {9781450358095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3214834.3231814},
doi = {10.1145/3214834.3231814},
booktitle = {ACM SIGGRAPH 2018 Courses},
articleno = {9},
numpages = {1},
location = {Vancouver, British Columbia, Canada},
series = {SIGGRAPH '18}
}

@article{Sanzharov2019,
  title={Examination of the Nvidia RTX},
  author={Vadim Vladimirovich Sanzharov and Alexey Gorbonosov and Vladimir Alexandrovich Frolov and Alexey Gennadievich Voloboy},
  journal={GraphiCon'2019 Proceedings. Volume 2},
  year={2019},
  url={https://api.semanticscholar.org/CorpusID:208031286}
}
  
@inproceedings{Kacerik2023,
author = {Kacerik, M. and Bittner, Jiri},
title = {On the Importance of Scene Structure for Hardware-Accelerated Ray Tracing},
year = {2023},
journal = {Proc. Intl. Conference on Comp. Graphics, Vsualization and Computer Vision (WSCG)},
publisher = {Václav Skala},
url = {http://hdl.handle.net/11025/54444},
isbn = {978-80-86943-32-9},
pages={361-367},
location = {Pilsen, Czech Republic}
}

@phdthesis{Phong1973,
  author = {Phong, B.T.}, 
  title  = {lllumination for ComputerGenerated Images},
  type   = {Ph.D. Dissertation},
  school = {University of Utah, Salt Lake
City, Department of Computer Science},
  year   = {1973},
  month  = {July}
}  


