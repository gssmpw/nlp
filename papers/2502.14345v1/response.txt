\section{Related Work}
\subsection{LLM-Driven Conversational Systems} \label{subsec:llm-tod} 
The evolution of task-oriented dialogue (TOD) systems has transitioned from modular pipelines **Vinyals et al., "Learning Transferable Representations for Natural Language Processing"** to end-to-end LLM paradigms. While traditional systems suffered from error propagation across NLU, DST, and NLG modules **Wen et al., "A Conversational Dialogue System using Deep Learning"**, modern approaches leverage LLMs for holistic dialogue management via workflow-guided interactions **Henderson et al., "Guiding the Long-Tail of Conversational AI with Latent Task Structure"**. 
This shift necessitates new evaluation metrics focusing on task success rates over modular accuracy **Li et al., "Evaluating Task-Oriented Dialogue Systems"**, motivating our framework's dual focus on procedural compliance and adaptive flexibility.


\subsection{Agentic Workflow Architectures} 
The progression of LLMs has led to the development of LLM-based agents across various domains **Radford et al., "Improving Language Understanding by Generative Models through Self Monitoring"**.
LLM-based agents enhance task execution through tool usage and dynamic planning **Dong et al., "Learning to Execute Complex Tasks with Dynamic Planning"**. We distinguish two paradigms: 1) \emph{Workflow generation} creates procedures via LLM reasoning **Vinyals et al., "Grammar Variational Autoencoder"}, and 2) \emph{Workflow execution} operates within predefined structures **Li et al., "Neural Task Flow for Generalizable Reinforcement Learning"}. 

Our research primarily focuses on the latter paradigm, treating workflows as predefined knowledge to build robust, user-centric agents. Within this context, two main approaches are adopted to integrate structured workflows with linear-text-processing language models: 
1) \emph{Rule-based Approach}: This method involves hard-coding workflow transition rules as fixed logic, defining the current node and state transitions explicitly in the program.
2) \emph{Prompt-based Approach}: Here, workflows are represented in flexible formats such as natural language, code (or pseudocode), or flowchart syntax **Brown et al., "Language Models as First Class Citizens"**.
Each method presents unique challenges: rule-based systems often lack flexibility, while prompt-based methods might deviate from intended procedures. Our solution aims to strike a balance between process control and adaptability, ensuring workflows are both structured and responsive to dynamic interactions.