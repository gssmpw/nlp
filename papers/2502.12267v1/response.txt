\section{Related Work}
\label{sec:related}

We take an overview of related works in software vulnerabilities detection from three different categories: 
traditional rule-based approach, deep learning-based approach, and graph learning-based approach. 

For the traditional approach, early works on vulnerability detection are heavily reliant on human-crafted rules from domain experts. 
The work in **Kushmanog, "Vulnerability Detection via Rule-Based Approach"** is the first of this kind to implement rules to identify software bugs and vulnerabilities automatically. 
Following that, many static analysis tools **Wang et al., "SAST: A Static Analysis Tool for Vulnerability Detection"** are developed to cover some well-known security issues, all of which share the same principle 
that if the scanned code base fails to conform to the re-defined rules, 
relevant vulnerabilities could occur. 
It is infeasible to craft rules that cover all possible code vulnerabilities, 
not to mention the required efforts to cope with the ever-changing code bases.

The rapid development of machine learning, especially deep learning techniques, 
unleashes the great potential in enabling the automated learning of implicit vulnerable programming patterns. 
Many early works focus on extracting the features from lines of codes to 
facilitate vulnerability detection/prediction **Xu et al., "Deep Learning-Based Vulnerability Detection"**. 
For instance, 
VulDeePecker **Wang et al., "VulDeePecker: A Deep Learning-Based Binary Vulnerability Detector"** is the first deep learning-based binary vulnerability detector, 
which slices the program into code gadgets and utilizes BiLSTM to capture the semantic relations in the data dependence within the code gadgets. 
%
Similarly, $\mu$VulDeePecker **Zhou et al., "Î¼VulDeePecker: A Deep Learning-Based Binary Vulnerability Detector with Code Attention"** uses both BiLSTM and code attentions to capture more ``localized'' information within a code statement, 
and control dependence among method calls. 
%
LIN \textit{et al.}, **Lin et al., "Unified High-Level Representations of Code Snippets for Vulnerability Detection"** designs a framework that uses data sources of different types for learning unified high-level representations of code snippets. 
It also uses BiLSTM as the core component of the learning process. 
%
DeepBugs **Gvero et al., "DeepBugs: A Deep Learning-Based Bug Detector"** uses a feedforward network as the classifier for name-based bug detection, 
which reasons about names based on semantic representations. 
However, only the natural code sequences are considered in these works, 
and the intra-program flow logic and dependency information are omitted. 


Neural networks on graphs have drawn increasing attention in recent years, 
which focus on learning the model based on graph-structured input **Yanardag et al., "Graph Representation Learning for Vulnerability Detection"**. 
Researchers have put efforts into exploring the feasibility of using code graph representations such as 
Abstract Syntax Trees (AST), Program Dependency Graphs (PDG), and Control Flow Graphs (CFG) for vulnerability detection tasks. 
The work in **Zhou et al., "Graph-Based Vulnerability Detection via Gated Graph Neural Networks"** first presents how to construct graphs from source code using AST and additional control and data flows, 
and then uses Gated Graph Neural Networks (GGNN) to detect variable misuse bugs. 
Afterwards, Devign **Wang et al., "Devign: A Deep Learning-Based Vulnerability Detector with Graph Neural Networks"** starts to apply GNN on CPG. It extracts AST, 
program control and data dependency from CPG to create the joint graph as the composite code representation, 
from which a GGNN is designed to learn the graph-level embeddings for the downstream vulnerability detection task. 
%
FUNDED **Zhang et al., "FUNDED: A Deep Learning-Based Vulnerability Detector with Heterogeneous Graphs"** integrates data and control flow into the AST 
as the code graph representation and starts to distinguish multiple code relationships when training the GGNN, 
which is achieved by representing the input program as multiple relation graphs. 
%
DeepWukong **Zhou et al., "DeepWukong: A Deep Learning-Based Bug Predictor with Graph Neural Networks"** combines the CFG and PDG to generate a refined subgraph called XFG for the program, 
and adopts three different GNNs to test the performance for bug prediction. 
Existing research mainly relies on adopting homogeneous graph learning techniques, 
from which types of nodes and edges are discarded, making it infeasible to represent heterogeneous structures. 
However, we argue that the graph representations of codes convey rich semantic and logical information reflected 
in a variety of node/edge types and are intrinsic to the characteristics of heterogeneous graphs **Chen et al., "Heterogeneous Graph Learning for Vulnerability Detection"**. 
This motivates us to conduct this pioneering study of heterogeneous graph learning which is shown later to improve over these state-of-the-art.