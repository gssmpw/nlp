\section{Related Work.}
The matching problem is a well studied problem in computer science.
 In this section we give a brief overview of matchings in graphs and hypergraphs.
\subparagraph{Matching in Graphs and Streaming.}
The polynomial-time complexity of matchings in graphs is one of the classical results in theoretical computer science**Edmonds, "Maximum Matching"**.
While Preis~"A Shortest Augmenting Path Algorithm for Maximum Matchings in Graphs"** presented the first linear time~$\frac{1}{2}$-approximation, Drake and Hougardy~"A Simple Linear-Time Approximation Algorithm for Edge-Weighted Max-Min Bounded-Cut Problems"** show a simpler algorithm with the same approximation ratio by path growing (PGA) in linear time. 
 Pettie and Sanders~"An Optimal Parallel Algorithm for Finding Maximum Matching"** developed a~$\frac{2}{3}-\varepsilon$ approximation with expected running time of~$\mathcal{O}(m\log \frac{1}{\varepsilon})$.
 The GPA algorithm by Maue and Sanders~"A Simple Linear-Time Approximation Algorithm for Edge-Weighted Max-Min Bounded-Cut Problems"** bridges the the gap between greedy and path searching algorithms, showing that a combination of both works best in practice.
 Birn~et~al.~"Improved Algorithms for Maximum Matching in General Graphs via Dual Framework"** developed a parallel algorithm in the CREW PRAM model with $\frac{1}{2}$-approximation guarantee and $O(\log^2n)$ work.
Feigenbaum~et~al.~"Approximating Weighted Matching in Semi-streaming Model"** present a $\frac{1}{6}$-approximation for the weighted matching in  the semi-streaming setting using a blaming based analysis.
Paz and Schwartzman~"Streaming Algorithms for Maximum Weight Matching"** give a~$\frac{1}{2+\varepsilon}$-approximation algorithm based on  keeping track of the dual solution in a semi-streaming setting.
Their algorithm keeps track of a dual solution, admitting only edges into the primal solution that are heavier on to the stack and updating the dual solution.
 The edges are taken from the stack in reverse order and those that do not violate the matching property are added to the solution.
 The resulting matching is not necessarily maximal.
 Ghaffari and Wajc~"Semi-streaming Algorithm for Max-weight Matching in General Graphs"** provide a simpler proof of the bound.
 Ferdous~et~al.~"Streaming Algorithms for Max-Weight Matching on Weighted Graphs"** show empirically that the algorithm by Paz and Schwartzman can compete quality-wise with offline $\frac{1}{2}$-approximation algorithms like GPA, while requiring less memory and time.
Recently, Ferdous~et~al.~"Semi-streaming Algorithms for k-disjoint Matching in Weighted Graphs"** presented two semi-streaming algorithms for the related weighted~$k$-disjoint matching problem, building upon previous results of  Paz and Schwartzman and Huang and Sellier~"Streaming Approximation for b-Matching with Small Vertex Degrees"** on streaming~$b$-matching.

\subparagraph{Hypergraph Matching.}
Hazan et~al.~"The Hardness of Maximum k-Set Packing and Related Problems"** prove that the maximum~$k$-set packing problem and, therefore, the matching problem on ~$d$-uniform hypergraphs can be poorly approximated, and there is no approximation within a factor of~$\mathcal{O}(d/\log d)$.
Dufosse~et~al.~"Engineering Reduction Rules for k-Matching in Hypergraphs"** engineered reduction rules for special~$d$-partite,~$d$-uniform hypergraphs.
 They use Karp-Sipser rules and a scaling argument to select more hyperedges. 
There are several approximation results and local search approaches, most notably by Hurkens and Schrijver~"On the Maximization of Spanning Trees"** and Cygan~"A New Algorithm for Maximum k-Set Packing"** with an approximation guarantee of~$\mathcal{O}(1/\left(\frac{d+1+\varepsilon}{3}\right))$.
Hanguir and Stein~"Distributed Algorithms for Hypergraph Matching"** developed three distributed algorithms to compute  matchings in hypergraphs, trading off between quality guarantee and number of rounds needed to compute a solution.


For the weighted~$k$-set packing problem Berman~"Local Search for k-set Packing"** introduces a local search technique.
Improving on these results, Neuwohner~"Approximation Algorithm for k-set Packing via Local Search"** presents a way to guarantee an approximation threshold of~$\frac{2}{k}$. We are not aware of any practical implementations of these techniques.
For the more general weighted hypergraph~$b$-matching problem, 
Gro√ümann~et~al.~"Data Reduction for k-Matching in Hypergraphs"** presented effective data-reduction rules and local search methods.
In the online setting, when hyperedges arrive in adversarial order, and one must  immediately decide to include the incoming hyperedge or not in the matching, Trobst and Udwani~"Lower Bounds on Competitive Ratio for Online k-Matching Problem"** show that no (randomized) algorithm can have a competitive ratio better than~$\frac{2+o(1)}{d}$.

We are unaware of any studies or implementations for streaming hypergraph matching.