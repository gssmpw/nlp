@InProceedings{10.1007/978-3-642-15277-1_21,
author="Quintin, Jean-No{\"e}l
and Wagner, Fr{\'e}d{\'e}ric",
editor="D'Ambra, Pasqua
and Guarracino, Mario
and Talia, Domenico",
title="Hierarchical Work-Stealing",
booktitle="Euro-Par 2010 - Parallel Processing",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="217--229",
isbn="978-3-642-15277-1"
}

@inproceedings{10.1145/1654059.1654113,
author = {Dinan, James and Larkins, D. Brian and Sadayappan, P. and Krishnamoorthy, Sriram and Nieplocha, Jarek},
title = {Scalable work stealing},
year = {2009},
isbn = {9781605587448},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/1654059.1654113},
booktitle = {Conference on High Performance Computing Networking, Storage and Analysis},
location = {Portland, Oregon},
series = {SC '09}
}

@inproceedings{10.1145/1838574.1838586,
author = {Mei, Chao and Zheng, Gengbin and Gioachin, Filippo and Kal\'{e}, Laxmikant V.},
title = {Optimizing a parallel runtime system for multicore clusters: A case study},
year = {2010},
isbn = {9781605588186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1838574.1838586},
doi = {10.1145/1838574.1838586},
booktitle = {TeraGrid Conference},
articleno = {12},
numpages = {8},
location = {Pittsburgh, Pennsylvania},
series = {TG '10}
}

@article{10.1145/3155284.3018768,
author = {Chabbi, Milind and Amer, Abdelhalim and Wen, Shasha and Liu, Xu},
title = {An Efficient Abortable-locking Protocol for Multi-level {NUMA} Systems},
year = {2017},
issue_date = {August 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {8},
issn = {0362-1340},
url = {https://doi.org/10.1145/3155284.3018768},
doi = {10.1145/3155284.3018768},
journal = {SIGPLAN Notices},
month = jan,
pages = {61–74},
numpages = {14},
keywords = {abortable lock, hierarchical lock, mcs lock, numa, queuing lock, spin lock, synchronization, timeout lock}
}

@article{10.1145/3275443,
author = {Amer, Abdelhalim and Lu, Huiwei and Balaji, Pavan and Chabbi, Milind and Wei, Yanjie and Hammond, Jeff and Matsuoka, Satoshi},
title = {Lock Contention Management in Multithreaded {MPI}},
year = {2019},
issue_date = {September 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {3},
issn = {2329-4949},
url = {https://doi.org/10.1145/3275443},
doi = {10.1145/3275443},
journal = {ACM Transactions on Parallelel Computing},
month = jan,
articleno = {12},
numpages = {21},
keywords = {threads, runtime contention, critical section, MPI}
}

@inproceedings{10.1145/3295500.3356161,
author = {Shiina, Shumpei and Taura, Kenjiro},
title = {Almost deterministic work stealing},
year = {2019},
isbn = {9781450362290},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3295500.3356161},
booktitle = {International Conference for High Performance Computing, Networking, Storage and Analysis},
location = {Denver, Colorado},
series = {SC '19}
}

@article{NOOKALA2024444,
title = {{X-OpenMP — eXtreme} fine-grained tasking using lock-less work stealing},
journal = {Future Generation Computer Systems},
volume = {159},
pages = {444-458},
year = {2024},
issn = {0167-739X},
doi = {https://doi.org/10.1016/j.future.2024.05.019},
url = {https://www.sciencedirect.com/science/article/pii/S0167739X24002541},
author = {Poornima Nookala and Kyle Chard and Ioan Raicu},
keywords = {Runtime, Parallel, Tasking, Task, Openmp, Lock-less, Lockfree, Locks, Atomics, Parallel computing, Workstealing, Open cilk, Onetbb}
}

@INPROCEEDINGS{gonthier-ipdps,
  author={Gonthier, Maxime and Marchal, Loris and Thibault, Samuel},
  booktitle={IEEE International Parallel and Distributed Processing Symposium},
  title={Memory-Aware Scheduling of Tasks Sharing Data on Multiple {GPUs} with Dynamic Runtime Systems},
  year={2022},
  doi={10.1109/IPDPS53621.2022.00073}}

@inproceedings{gonthier:hal-03290998,
  TITLE = {{Locality-Aware Scheduling of Independent Tasks for Runtime Systems}},
  AUTHOR = {Gonthier, Maxime and Marchal, Loris and Thibault, Samuel},
  URL = {https://hal.science/hal-03290998},
  BOOKTITLE = {{5th Workshop on Data Locality - 27th International European Conference on Parallel and Distributed Computing}},
  ADDRESS = {Lisbon, Portugal},
  PUBLISHER = {{Springer}},
  PAGES = {1-12},
  YEAR = {2021},
  MONTH = Aug,
  DOI = {10.1007/978-3-031-06156-1\_1},
  KEYWORDS = {Memory-aware scheduling ; Eviction policy ; Tasks sharing data ; Runtime systems ; Ordonnancement sous contrainte m{\'e}moire ; Politique d'{\'e}viction ; T{\^a}ches partageant des donn{\'e}es ; Support d'ex{\'e}cution},
  PDF = {https://hal.science/hal-03290998v1/file/coloc-cameraready-submitted.pdf},
  HAL_ID = {hal-03290998},
  HAL_VERSION = {v1},
}

@inproceedings{guo2009work,
  title={Work-first and help-first scheduling policies for terminally strict parallel programs},
  author={Guo, Yi and Barik, Rajkishore and Raman, Raghavan and Sarkar, Vivek},
  booktitle={23rd IEEE International Parallel and Distributed Processing Symposium},
  volume={10},
  year={2009}
}

@inproceedings{kale1993charm,
  title={Charm++: A portable concurrent object oriented system based on {C}++},
  author={Kale, Laxmikant V and Krishnan, Sanjeev},
  booktitle={8th Annual Conference on Object-oriented Programming Systems, Languages, and Applications},
  pages={91--108},
  year={1993}
}

@inproceedings{legion_overview_dup, address={Washington, DC, USA}, series={SC ’12}, title={Legion: Expressing locality and independence with logical regions}, ISBN={978-1-4673-0804-5}, abstractNote={Modern parallel architectures have both heterogeneous processors and deep, complex memory hierarchies. We present Legion, a programming model and runtime system for achieving high performance on these machines. Legion is organized around logical regions, which express both locality and independence of program data, and tasks, functions that perform computations on regions. We describe a runtime system that dynamically extracts parallelism from Legion programs, using a distributed, parallel scheduling algorithm that identifies both independent tasks and nested parallelism. Legion also enables explicit, programmer controlled movement of data through the memory hierarchy and placement of tasks based on locality information via a novel mapping interface. We evaluate our Legion implementation on three applications: fluid-flow on a regular grid, a three-level AMR code solving a heat diffusion equation, and a circuit simulation.}, booktitle={International Conference on High Performance Computing, Networking, Storage and Analysis}, publisher={IEEE Computer Society Press}, author={Bauer, Michael and Treichler, Sean and Slaughter, Elliott and Aiken, Alex}, year={2012}, month=nov, pages={1–11}, collection={SC ’12} }

@misc{miscname4, title = {Welcome to the documentation of {OpenMP in LLVM! — LLVM/OpenMP} 20.0.0git documentation}, url={https://openmp.llvm.org/} }

@inproceedings{nookala_enabling_2021, address={Houston, TX, USA}, title={Enabling Extremely Fine-grained Parallelism via Scalable Concurrent Queues on Modern Many-core Architectures}, rights={https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html}, ISBN={978-1-66545-838-2}, url={https://ieeexplore.ieee.org/document/9614292/}, DOI={10.1109/MASCOTS53633.2021.9614292}, abstractNote={Enabling efﬁcient ﬁne-grained task parallelism is a signiﬁcant challenge for hardware platforms with increasingly many cores. Existing techniques do not scale to hundreds of threads due to the high cost of synchronization in concurrent data structures. To overcome these limitations we present XQueue, a novel lock-less concurrent queuing system with relaxed ordering semantics that is geared towards realizing scalability up to hundreds of concurrent threads. We demonstrate the scalability of XQueue using microbenchmarks and show that XQueue can deliver concurrent operations with latencies as low as 110 cycles at scales of up to 192 cores (up to 6900× improvement compared to traditional synchronization mechanisms) across our diverse hardware, including x86, ARM, and Power9. The reduced latency allows XQueue to provide orders of magnitude (3300×) better throughput that existing techniques. To evaluate the real-world beneﬁts of XQueue, we integrated XQueue with LLVM OpenMP and evaluated ﬁve unmodiﬁed benchmarks from the Barcelona OpenMP Task Suite (BOTS) as well as a graph traversal benchmark from the GAP benchmark suite. We compared the XQueue-enabled LLVM OpenMP implementation with the native LLVM and GNU OpenMP versions. Using ﬁne-grained task workloads, XQueue can deliver 4× to 6× speedup compared to native GNU OpenMP and LLVM OpenMP in many cases, with speedups as high as 116× in some cases.}, booktitle={29th International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems}, publisher={IEEE}, author={Nookala, Poornima and Dinda, Peter and Hale, Kyle C. and Chard, Kyle and Raicu, Ioan}, year={2021}, month=nov, pages={1–8}, language={en} }

@inproceedings{ompss12,
  title={Productive programming of {GPU} clusters with {OmpSs}},
  author={Bueno, Javier and Planas, Judit and Duran, Alejandro and Badia, Rosa M and Martorell, Xavier and Ayguade, Eduard and Labarta, Jes{\'u}s},
  booktitle={International Parallel and Distributed Processing Symposium},
  year={2012},
}

@article{parsec,
  TITLE = {{PaRSEC: A programming paradigm exploiting heterogeneity for enhancing scalability}},
  AUTHOR = {Bosilca, George and Bouteiller, Aur{\'e}lien and Danalis, Anthony and Faverge, Mathieu and H{\'e}rault, Thomas and Dongarra, Jack},
  JOURNAL = {{Computing in Science and Engineering}},
  PUBLISHER = {{Institute of Electrical and Electronics Engineers (IEEE)}},
  VOLUME = {15},
  NUMBER = {6},
  YEAR = {2013},
  HAL_ID = {hal-00930217},
  HAL_VERSION = {v1},
}

@Article{starpu,
  author 	= {C{\'e}dric Augonnet and Samuel Thibault and Raymond Namyst and Pierre-Andr{\'e} Wacrenier},
  title		= {{StarPU}: A Unified Platform for Task Scheduling on Heterogeneous Multicore Architectures},
  journal	= {Concurrency and Computation: Practice and Experience, Special Issue: Euro-Par 2009},
  volume	= 23,
  issue		= 2,
  year		= 2011,
  publisher	= {John Wiley & Sons, Ltd.},
  doi		= {10.1002/cpe.1631},
  keywords      = {StarPU}
}

@article{workstealing_locality02,
  author    = {Umut A. Acar and
               Guy E. Blelloch and
               Robert D. Blumofe},
  title     = {The Data Locality of Work Stealing},
  journal   = {Theory of Computing Systems},
  volume    = 35,
  number    = 3,
  pages     = {321--347},
  year      = 2002,
}

@inproceedings{wozniak2013swift,
  title={Swift/{T}: Large-scale application composition via distributed-memory dataflow processing},
  author={Wozniak, Justin M and Armstrong, Timothy G and Wilde, Michael and Katz, Daniel S and Lusk, Ewing and Foster, Ian T},
  booktitle={13th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing},
  pages={95--102},
  year={2013},
  organization={IEEE}
}

@article{xkaapi15,
  TITLE = {{Design and analysis of scheduling strategies for multi-{CPU} and multi-{GPU} architectures}},
  AUTHOR = {Ferreira Lima, Joao Vicente and Gautier, Thierry and Danjean, Vincent and Raffin, Bruno and Maillard, Nicolas},
  JOURNAL = {{Parallel Computing}},
  PUBLISHER = {{Elsevier}},
  VOLUME = {44},
  PAGES = {37-52},
  YEAR = {2015},
  KEYWORDS = {Work stealing ; Data-flow dependencies ; Task parallelism ; Accelerators ; Parallel programming},
  PDF = {https://hal.inria.fr/hal-01132037/file/parco2014.pdf},
  HAL_ID = {hal-01132037},
  HAL_VERSION = {v1},
}

