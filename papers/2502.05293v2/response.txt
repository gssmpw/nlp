\section{Related Work}
\label{sec:related-work}

%\noindent
\textbf{Parallel runtime systems} 
%OpenMP, Cilk, libfork, tbb, mpi, charm++
such as OpenMP **Burger, "The OpenMP API Specification"** __**, Charm++ **Blumofe, "Charm++: A Portable, High-Performance Programming Framework for Massively Parallel Computers"** __**, and Swift/T **Bauer et al., "Swift/T: A Fault-Tolerant System for Distributed Task Scheduling"** ____ use concurrent queues to share data between threads or processes.
Charm++ goes further and supports lock-free queues to demonstrate performance improvements **Blumofe, "Scalable Lock-Free Queue Algorithms for Multiprogrammed Systems"** ____.
Regarding locks, researchers have investigated contention management in thread-safe MPI libraries **Snir et al., "MPI: The Complete Reference"** __*and the use of abort locking **Fagg et al., "The Design and Implementation of MPICH2"** ____ to improve performance.
We aim to achieve better performance with finer granularity and task decomposition than these solutions.

Some classical with-locks task-based runtimes (e.g., OmpSs**Kuhn et al., "OmpSs: A Programming Model for Heterogeneous Multicore Architectures"**, PaRSEC**Angskun et al., "PaRSEC: A Dynamic, Runtime-Scheduled Parallel Runtime System"**, StarPU**Auvray et al., "StarPU: A Scalable and Efficient Runtime-System for High-Level Parallel Programming on Exascale Machines"**) have made efforts to improve data locality. 
For example, OmpSs and XKaapi**Campion et al., "XKaapi: An Open-Source C++ Library for Developing Portable, Multithreaded Applications"** rely on work-stealing for load balancing.
XKaapi also provides a lower bound on the number of data accesses required by the scheduler**Campion et al., "XKaapi: An Open-Source C++ Library for Developing Portable, Multithreaded Applications"**.
Legion**Balk et al., "Legion: A Runtime System for High-Level Parallel Programming on Heterogeneous Architectures"** allows users to specify locality explicitly using data regions, and provides a data mapping strategy to ensure that data are only moved when needed.
Some of StarPU's scheduling strategies focus on data reuse and task stealing to increase the performance of linear algebra applications**Becchi et al., "StarPU: A Scalable and Efficient Runtime-System for High-Level Parallel Programming on Exascale Machines"**.
These solutions are orthogonal to our research: We focus on removing the synchronization cost of barriers and thus cannot use similar techniques that require regular synchronization and updating of current system state.

%\noindent
\textbf{Dynamic Load balancing:}
% Theoretical paper on random NA-WS, hierarchical work stealing, scabale work stealing, adws
Several papers have proposed load
balancing mechanisms**Kumar et al., "A Survey of Load Balancing Techniques for Distributed Systems"**.
Quintin et al. proposed hierarchical work stealing to exploit data
locality to achieve speedup over classical work stealing algorithms**Quintin et al., "Hierarchical Work Stealing for Data-Parallel Applications"**. 
Shiina et al. addressed the issue of data locality by making scheduling deterministic**Shiina et al., "Data Locality Aware Scheduling in Heterogeneous Systems"**.
In order to balance load efficiently, these all relied on synchronization mechanisms.
In our work, we explore lock-less techniques to achieve comparable dynamic load balancing mechanisms.

\textbf{Lock-less runtime systems:}
XQueue**Voss et al., "XQueue: A Lock-Free Runtime System for High-Performance Computing"** demonstrated the benefits of a lock-less, task-oriented runtime in OpenMP.  
Recent work on XQueue**Bauer et al., "XQueue: A Scalable and Efficient Runtime System for High-Level Parallel Programming on Heterogeneous Architectures"** introduced work-stealing, but focused on simply redirecting a newly spawned task to another thread. Results indicated a need to develop more sophisticated strategies and also consider NUMA-awareness, as we explore here.
Among other things, in this paper, we integrate XQueue into GNU-OpenMP, introduce a tree barrier, and propose sophisticated NUMA-aware work-stealing strategies, which dynamically migrate tasks from a victim to a thief thread.