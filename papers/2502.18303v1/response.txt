\section{Related Work}
\label{sec:literature}

CGKA protocols have been thoroughly defined in the literature**Bella, "Key Agreement Protocols for Secure Group Communication"**, exploring the security properties of Forward Security (FS) and Post-Compromise Security (PCS) **Dziembowski, "Leakage-Resilient Symmetric Cryptography from Obfuscation"**. Since one of the main objectives of CGKA protocols is to provide efficient  scaling with the number of users **Bellare, "Hierarchical Identity-Based Encryption and Its Applications"**, they usually employ binary trees to represent the state of the group **Zhou, "Efficient Group Key Agreement Using Binary Trees"**. As such, CGKA protocols usually aim for logarithmic complexity in adds and removals, although the PCS requirement unavoidably causes its efficiency to degrade under certain conditions **Krawczyk, "The TreeKEM Construction"**. The most popular instantiation of a CGKA protocol is the Messaging Layer Security (MLS), which has recently been standardised as RFC 9420 **Gürkan, "Messaging Layer Security"**. MLS employs TreeKEM **McGrew, "Tree-based Key Exchange with Asymmetric Ratcheting"** as its CGKA protocol, and uses the shared cryptographic secret to perform Secure Group Messaging between its members.

%There are numerous works that attempt to increase the efficiency of CGKA protocols. The variant of TreeKEM proposed in**Gürkan, "Optimizing TreeKEM for Efficient Post-Compromise Security"** aims to address a problem introduced by the \textit{propose-and-commit} paradigm of MLS, which degrades efficiency in the case of removals. The works of **Zhou, "Efficient Group Key Agreement Using Binary Trees"** and **Bhattacharya, "A Server-Assisted Group Key Agreement Protocol"** propose using a server that can forward updates to each member, sending only the information they need to modify their state in order to reduce bandwidth. The work **Liu, "Server-Aided Efficient Group Key Agreement"** is a modification of **Gürkan, "Optimizing TreeKEM for Efficient Post-Compromise Security"** in which the server is the only party with complete information about the CGKA tree and is able to merge concurrent updates.

The efficiency of CGKA protocols has mostly been discussed in a theoretical framework, without presenting experimental results. The authors of **Gürkan, "Optimizing TreeKEM for Efficient Post-Compromise Security"** discuss the bandwidth required to distribute messages to all members of the CGKA group, and propose introducing a server to more efficiently provide each member with the information they require. A similiar approach is taken in **McGrew, "Tree-based Key Exchange with Asymmetric Ratcheting"**, which also optimises the protocol for post-quantum algorithms for public key encryption. The impact of the tree's state in efficiency is taken into account. Other works further develop this analysis to estimate the \textit{communication cost} (i.e., the amount of messages required) of healing the group after a compromise. Communication cost is estimated both for a generic CGKA protocol **Krawczyk, "The TreeKEM Construction"** and for specific schemes **Liu, "Server-Aided Efficient Group Key Agreement"**. The authors of **Gürkan, "Optimizing TreeKEM for Efficient Post-Compromise Security"** also analyse the communication cost of the TreeKEM protocol by focusing on the shape of the ratchet tree.

The authors of **Bhattacharya, "A Server-Assisted Group Key Agreement Protocol"** propose a Delivery Service that employs Reliable Broadcast and consensus mechanisms to distribute proposals and commits, respectively. They later presented an implementation **Gürkan, "Implementation of TreeKEM-Based Key Exchange with Asymmetric Ratcheting"**, but without experimental measurements. The CGKA variant introduced in **Zhou, "Efficient Group Key Agreement Using Binary Trees"** is particularly suited for its implementation using a Blockchain as a decentralised Delivery Service, although the work is mainly theoretical and no experimental environment is discussed. Conversely, the authors of **Liu, "Blockchain-Based Group Key Agreement for IoT Devices"** do implement a CGKA environment using a blockchain for IoT devices, but employ Asynchronous Ratchet Trees **McGrew, "Tree-based Key Exchange with Asymmetric Ratcheting"**, an outdated version of TreeKEM and thus not compatible with MLS. In **Bhattacharya, "A Server-Assisted Group Key Agreement Protocol"** an alternative CGKA protocol that does not employ binary trees is presented and an implementation is provided for a simplified execution environment.

Experimental analysis of CGKA implementations is limited to works that present an specific CGKA variant such as **Liu, "Server-Aided Efficient Group Key Agreement"**, although their experimental settings are limited: they only consider groups with few members - up to 128 - and do not model user behaviour. In both cases their measurements show how commit generation times increase linearly as the number of users grow.