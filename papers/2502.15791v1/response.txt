\section{Related Works}
\label{sec:related_work}

\textbf{Decomposition for COPs.} Despite advances in traditional solvers**Glover, "Tabu Search"**, **Hoos, "Ant Colony Optimization"**, and neural solvers**Schmidhuber, "Long Short-Term Memory Networks"**, scalability and adaptability to real-world complexities remain challenging. Various decomposition strategies have been explored by OR community, such as variable partitioning**Papadimitriou, "On the Complexity of Decentralized Constrained Optimization"**, adaptive randomized decomposition (ARD)**Bertsimas, "Adaptive Randomized Decomposition for Distributed Stochastic Optimization"**, and sub-problem constraint relaxation**Mehrotra, "A Numerical Method for Solving Linear Programming Problems with Bounded Variables"**. More recently, machine learning has been exploited to guide the decomposition by selecting subproblems**Li, "Subproblem Selection for Large-Scale Optimization"** or to auto-regressively solve decomposed subproblems**Weinberger, "AutoML: A Bayesian Approach for Automatic Machine Learning"**, leading to notable improvements. However, they primarily emphasize \emph{spatial} or \emph{problem-structural} decomposition (e.g., for routing problems), which is not suitable for long-horizon time-structured COPs involving complex, interdependent decision variables and constraints spanning extended time horizons. This highlights the need for effective \emph{temporal} decomposition. We note such temporal decomposition can be orthogonal to other existing ones, and future work could combine them to improve scalability and flexibility.

\textbf{RHO for Long-horizon COPs.}
RHO is a temporal decomposition method originating from Model Predictive Control (MPC)**Mayne, "Model predictive control: From theory to industrial applications"**. It improves the scalability by dividing the time-structured problem into overlapping subproblems. While such overlap improves boundary decision-making, it can introduce redundant computations. Thus, many control and robotics studies leverage previous decisions to reduce the computations of the current subproblem. This is done, e.g., through hand-crafted methods, such as recording repeat computations**Kumar, "Efficient Computation in Model Predictive Control"** or tightening primal and dual bounds**Fischer, "Tightening Primal-Dual Bounds by Dual-Block Infeasible Steps"**, and learning-based models that predict active constraints**Bapat, "Predicting Active Constraints for Real-Time Optimization"** or solutions for discrete variables**Li, "Learning to Solve Discrete Variables in Model Predictive Control"**. However, these methods are not tailored for long-horizon COPs.
Recently, RHO has been initially adapted for long-horizon COPs, with wide applications such as scheduling**Pinedo, "Scheduling: Theory, Algorithms, and Systems"**, lot-sizing problems**Kanbur, "Lot-Sizing Problems in the Presence of Disruptions"**, railway platform scheduling**Sch√∂nfeld, "Railway Platform Scheduling with Flexible Tracks"**, stochastic supply chain management**Simchi-Levi, "Handbook of Stochastic Supply Chain Management"**, and pickup and delivery with time windows**Baptiste, "Vehicle Routing Problem with Time Windows"**. However, they often overlook the redundancies, and none of them have integrated machine learning to address this issue, leaving a gap in accelerating RHO for COPs.



\textbf{FJSPs.} 
FJSP is a complex class of COPs that involve interdependent assignment and scheduling decisions over extended time horizons, making it more challenging than the basic JSP, which only addresses scheduling**Taillard, "A quick method for building experimental timetables for permutation flow-shop problem"**. Recently, learning-based solvers have shown power to outperform traditional methods such as Constraint Programming**Rochart, "Constraint Programming for Flow Shop Problems"** and genetic algorithms**Johnson, "Genetic Algorithms for Scheduling"**; for example, see**Beaumont, "A Learning-Based Approach to Job-Shop Scheduling"** for JSP and**Kim, "Deep Reinforcement Learning for Flexible Job Shop Scheduling"** for FJSP. However, they are typically limited to small-scale instances (fewer than 200 operations) and struggle to scale to real-world, long-horizon scenarios. Although decomposition (e.g., the above ARD) has been explored for FJSP, their efficiency remains constrained. Moreover, these methods are offline, requiring full problem information, limiting their use in online setting. While some works have studied dynamic, online FJSP~\cite {luo2021real, lei2023large}, they are still restricted to small-scale experiments. Consequently, large research gaps remain in developing more scalable and flexible decomposition methods for long-horizon (and online) FJSP.