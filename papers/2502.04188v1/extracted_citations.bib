@incollection{ampatzoglou_mapping_2024,
	address = {Cham},
	title = {Mapping {Source} {Code} to {Software} {Architecture} by {Leveraging} {Large} {Language} {Models}},
	volume = {14937},
	isbn = {978-3-031-70945-6 978-3-031-71246-3},
	url = {https://link.springer.com/10.1007/978-3-031-71246-3_13},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Software {Architecture}. {ECSA} 2024 {Tracks} and {Workshops}},
	publisher = {Springer Nature Switzerland},
	author = {Johansson, Nils and Caporuscio, Mauro and Olsson, Tobias},
	editor = {Ampatzoglou, Apostolos and Pérez, Jennifer and Buhnova, Barbora and Lenarduzzi, Valentina and Venters, Colin C. and Zdun, Uwe and Drira, Khalil and Rebelo, Luciana and Di Pompeo, Daniele and Tucci, Michele and Nakagawa, Elisa Yumi and Navarro, Elena},
	year = {2024},
	doi = {10.1007/978-3-031-71246-3_13},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {133--149},
	file = {PDF:/home/carlos/Research/Zotero/storage/BYITQEWL/Johansson et al. - 2024 - Mapping Source Code to Software Architecture by Leveraging Large Language Models.pdf:application/pdf},
}

@article{antoniol_object-oriented_2001,
	title = {Object-oriented design patterns recovery},
	volume = {59},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121201000619},
	doi = {10.1016/S0164-1212(01)00061-9},
	abstract = {Object-Oriented +OO) design patterns are an emergent technology: they are reusable micro-architectures, high-level building blocks. A system which has been designed using well-known, documented and accepted design patterns is also likely to exhibit good properties such as modularity, separation of concerns and maintainability. While for forward engineering the bene®ts of using design patterns are clear, using reverse engineering technologies to discover instances of patterns in a software artifact +e.g., design or code) may help in several key areas, among which are program understanding, design-to-code traceability and quality assessment. This paper describes a conservative approach and experimental results, based on a multi-stage reduction strategy using OO software metrics and structural properties to extract structural design patterns from OO design or C++ code. To assess the e ectiveness of the pattern recovery approach, a process and a portable tool suite written in Java, remotely accessible by means of any WEB browser, has been developed. The developed system and experimental results on 8 industrial software +design and code) and 200,000 lines of public domain C++ code are presented. Ó 2001 Elsevier Science Inc. All rights reserved.},
	language = {en},
	number = {2},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Antoniol, G. and Casazza, G. and Di Penta, M. and Fiutem, R.},
	month = nov,
	year = {2001},
	pages = {181--196},
	file = {PDF:/home/carlos/Research/Zotero/storage/TNPLFJ23/Antoniol et al. - 2001 - Object-oriented design patterns recovery.pdf:application/pdf},
}

@inproceedings{bakhtin_survey_2022,
	title = {Survey on {Tools} and {Techniques} {Detecting} {Microservice} {API} {Patterns}},
	url = {https://ieeexplore.ieee.org/document/9860229/?arnumber=9860229},
	doi = {10.1109/SCC55611.2022.00018},
	abstract = {It is well recognized that design patterns improve system development and maintenance in many aspects. While we commonly recognize these patterns in monolithic systems, many patterns emerged for cloud computing, specifically microservices. Unfortunately, while various patterns have been proposed, available quality assessment tools often do not recognize many. This article performs a grey literature review to find and catalog available tools to detect microservice API patterns (MAP). It reasons about mechanisms that can be used to detect these patterns. Furthermore, the results indicate gaps and opportunities for improvements for quality assessment tools. Finally, the reader is provided with a route map to detection techniques that can be used to mine MAPs.},
	urldate = {2024-12-12},
	booktitle = {2022 {IEEE} {International} {Conference} on {Services} {Computing} ({SCC})},
	author = {Bakhtin, Alexander and Al Maruf, Abdullah and Cerny, Tomas and Taibi, Davide},
	month = jul,
	year = {2022},
	note = {ISSN: 2474-2473},
	keywords = {Important},
	pages = {31--38},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/Z92IWYH5/Bakhtin et al. - 2022 - Survey on Tools and Techniques Detecting Microservice API Patterns.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/F5QLD2G8/9860229.html:text/html},
}

@article{capilla_10_2016,
	title = {10 years of software architecture knowledge management: {Practice} and future},
	volume = {116},
	issn = {01641212},
	shorttitle = {10 years of software architecture knowledge management},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121215002034},
	doi = {10.1016/j.jss.2015.08.054},
	abstract = {The importance of architectural knowledge (AK) management for software development has been highlighted over the past ten years, where a signiﬁcant amount of research has been done. Since the ﬁrst systems using design rationale in the seventies and eighties to the more modern approaches using AK for designing software architectures, a variety of models, approaches, and research tools have leveraged the interests of researchers and practitioners in AK management (AKM). Capturing, sharing, and using AK has many beneﬁts for software designers and maintainers, but the cost to capture this relevant knowledge hampers a widespread use by software companies. However, as the improvements made over the last decade didn’t boost a wider adoption of AKM approaches, there is a need to identify the successes and shortcomings of current AK approaches and know what industry needs from AK. Therefore, as researchers and promoters of many of the AK research tools in the early stages where AK became relevant for the software architecture community, and based on our experience and observations, we provide in this research an informal retrospective analysis of what has been done and the challenges and trends for a future research agenda to promote AK use in modern software development practices.},
	language = {en},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Capilla, Rafael and Jansen, Anton and Tang, Antony and Avgeriou, Paris and Babar, Muhammad Ali},
	month = jun,
	year = {2016},
	pages = {191--205},
	file = {PDF:/home/carlos/Research/Zotero/storage/4EPRI6TE/Capilla et al. - 2016 - 10 years of software architecture knowledge management Practice and future.pdf:application/pdf},
}

@inproceedings{cuadrado_case_2008,
	address = {Okinawa},
	title = {A {Case} {Study} on {Software} {Evolution} towards {Service}-{Oriented} {Architecture}},
	isbn = {978-0-7695-3096-3},
	url = {https://ieeexplore.ieee.org/document/4483115/},
	doi = {10.1109/WAINA.2008.296},
	abstract = {The evolution of any software product over its lifetime is unavoidable, caused both by bugs to be fixed and by new requirements appearing in the later stages of the product’s lifecycle. Traditional development and architecture paradigms have proven to be not suited for these continual changes, resulting in large maintenance costs. This has caused the rise of approaches such as Service Oriented Architectures (SOA), based on loosely coupled, interoperable services, aiming to address these issues. This paper describes a case study of the evolution of an existing legacy system towards a more maintainable SOA. The proposed process includes the recovery of the legacy system architecture, as a first step to define the specific evolution plan to be executed and validated. The case study has been applied to a medical imaging system, evolving it into a service model.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {22nd {International} {Conference} on {Advanced} {Information} {Networking} and {Applications} - {Workshops} (aina workshops 2008)},
	publisher = {IEEE},
	author = {Cuadrado, Felix and Garcia, Boni and Duenas, Juan C. and Parada, Hugo A.},
	month = mar,
	year = {2008},
	pages = {1399--1404},
	file = {Accepted Version:/home/carlos/Research/Zotero/storage/BX3YHSVX/Cuadrado et al. - 2008 - A Case Study on Software Evolution towards Service-Oriented Architecture.pdf:application/pdf},
}

@inproceedings{daniel_towards_2023,
	address = {Durres, Albania},
	title = {Towards the {Detection} of {Microservice} {Patterns} {Based} on {Metrics}},
	copyright = {https://doi.org/10.15223/policy-029},
	isbn = {979-8-3503-4235-2},
	url = {https://ieeexplore.ieee.org/document/10371525/},
	doi = {10.1109/SEAA60479.2023.00029},
	urldate = {2024-12-17},
	booktitle = {2023 49th {Euromicro} {Conference} on {Software} {Engineering} and {Advanced} {Applications} ({SEAA})},
	publisher = {IEEE},
	author = {Daniel, João and Guerra, Eduardo and Rosa, Thatiane and Goldman, Alfredo},
	month = sep,
	year = {2023},
	pages = {132--139},
	file = {PDF:/home/carlos/Research/Zotero/storage/U5I57F94/Daniel et al. - 2023 - Towards the Detection of Microservice Patterns Based on Metrics.pdf:application/pdf},
}

@incollection{de_paoli_microservices_2017,
	address = {Cham},
	title = {Microservices {Identification} {Through} {Interface} {Analysis}},
	volume = {10465},
	isbn = {978-3-319-67261-8 978-3-319-67262-5},
	url = {https://link.springer.com/10.1007/978-3-319-67262-5_2},
	abstract = {The microservices architectural style is gaining more and more momentum for the development of applications as suites of small, autonomous, and conversational services, which are then easy to understand, deploy and scale. One of today’s problems is ﬁnding the adequate granularity and cohesiveness of microservices, both when starting a new project and when thinking of transforming, evolving and scaling existing applications. To cope with these problems, the paper proposes a solution based on the semantic similarity of foreseen/available functionality described through OpenAPI speciﬁcations. By leveraging a reference vocabulary, our approach identiﬁes potential candidate microservices, as ﬁne-grained groups of cohesive operations (and associated resources). We compared our approach against a state-of-the-art tool, sampled microservices-based applications and decomposed a large dataset of Web APIs. Results show that our approach is able to ﬁnd suitable decompositions in some 80\% of the cases, while providing early insights about the right granularity and cohesiveness of obtained microservices.},
	language = {en},
	urldate = {2024-12-12},
	booktitle = {Service-{Oriented} and {Cloud} {Computing}},
	publisher = {Springer International Publishing},
	author = {Baresi, Luciano and Garriga, Martin and De Renzis, Alan},
	editor = {De Paoli, Flavio and Schulte, Stefan and Broch Johnsen, Einar},
	year = {2017},
	doi = {10.1007/978-3-319-67262-5_2},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {19--33},
	file = {PDF:/home/carlos/Research/Zotero/storage/I4FCNPFL/Baresi et al. - 2017 - Microservices Identification Through Interface Analysis.pdf:application/pdf},
}

@inproceedings{diamantopoulos_dp-core_2016,
	address = {Rhodes, Greece},
	title = {{DP}-{CORE}: {A} {Design} {Pattern} {Detection} {Tool} for {Code} {Reuse}:},
	isbn = {978-989-758-190-8},
	shorttitle = {{DP}-{CORE}},
	url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0006223301600167},
	doi = {10.5220/0006223301600167},
	abstract = {Design Pattern Detection, Static Code Analysis, Reverse Engineering, Code Reuse.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings of the {Sixth} {International} {Symposium} on {Business} {Modeling} and {Software} {Design}},
	publisher = {SCITEPRESS - Science and and Technology Publications},
	author = {Diamantopoulos, Themistoklis and Noutsos, Antonis and Symeonidis, Andreas},
	year = {2016},
	pages = {160--167},
}

@incollection{dustdar_qualitative_2020,
	address = {Cham},
	title = {A {Qualitative} {Literature} {Review} on {Microservices} {Identification} {Approaches}},
	volume = {1310},
	isbn = {978-3-030-64845-9 978-3-030-64846-6},
	url = {https://link.springer.com/10.1007/978-3-030-64846-6_9},
	abstract = {Microservices has become a widely used and discussed architectural style for designing modern applications due to advantages like granular scalability and maintainability. However, it is still a complex task decomposing an application into microservices. Software architects often design architectures manually. In this paper we give a state-of-theart overview of current approaches to identifying microservices. Therefore we use a literature review and classify the content based on the software development process.},
	language = {en},
	urldate = {2024-12-12},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer International Publishing},
	author = {Schröer, Christoph and Kruse, Felix and Marx Gómez, Jorge},
	editor = {Dustdar, Schahram},
	year = {2020},
	doi = {10.1007/978-3-030-64846-6_9},
	note = {Series Title: Communications in Computer and Information Science},
	pages = {151--168},
	file = {PDF:/home/carlos/Research/Zotero/storage/6G925UU6/Schröer et al. - 2020 - A Qualitative Literature Review on Microservices Identification Approaches.pdf:application/pdf},
}

@article{fonseca_x-trace_2007,
	title = {X-{Trace}: {A} {Pervasive} {Network} {Tracing} {Framework}},
	abstract = {Modern Internet systems often combine different applications (e.g., DNS, web, and database), span different administrative domains, and function in the context of network mechanisms like tunnels, VPNs, NATs, and overlays. Diagnosing these complex systems is a daunting challenge. Although many diagnostic tools exist, they are typically designed for a speciﬁc layer (e.g., traceroute) or application, and there is currently no tool for reconstructing a comprehensive view of service behavior. In this paper we propose X-Trace, a tracing framework that provides such a comprehensive view for systems that adopt it. We have implemented X-Trace in several protocols and software systems, and we discuss how it works in three deployed scenarios: DNS resolution, a three-tiered photo-hosting website, and a service accessed through an overlay network.},
	language = {en},
	journal = {NSDI'07: Proceedings of the 4th USENIX conference on Networked systems design \& implementation},
	author = {Fonseca, Rodrigo and Porter, George and Katz, Randy H and Shenker, Scott and Stoica, Ion},
	month = apr,
	year = {2007},
	pages = {20},
}

@inproceedings{granchelli_microart_2017,
	address = {Gothenburg},
	title = {{MicroART}: {A} {Software} {Architecture} {Recovery} {Tool} for {Maintaining} {Microservice}-{Based} {Systems}},
	isbn = {978-1-5090-4793-2},
	shorttitle = {{MicroART}},
	url = {https://ieeexplore.ieee.org/document/7958510/},
	doi = {10.1109/ICSAW.2017.9},
	abstract = {Microservice-based systems are characterised by a multitude of small services, each running in its own process and communicating with lightweight mechanisms. The microservice architectural style strongly encourages high decoupling among microservices in order to ease their independent deployment, operation, and maintenance. However, there are situations in which having a global overview of the system is fundamental. In this paper we present the ﬁrst prototype of our Architecture Recovery Tool for microservice-based systems called MicroART. MicroART following Model-Driven Engineering principles, is able to generate models of the software architecture of a microservice-based system, that can be managed by software architects for multiple purposes.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {2017 {IEEE} {International} {Conference} on {Software} {Architecture} {Workshops} ({ICSAW})},
	publisher = {IEEE},
	author = {Granchelli, Giona and Cardarelli, Mario and Di Francesco, Paolo and Malavolta, Ivano and Iovino, Ludovico and Di Salle, Amleto},
	month = apr,
	year = {2017},
	pages = {298--302},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/AKZYH65H/Granchelli et al. - 2017 - MicroART A Software Architecture Recovery Tool for Maintaining Microservice-Based Systems.pdf:application/pdf},
}

@article{gueheneuc_demima_2008,
	title = {{DeMIMA}: {A} {Multilayered} {Approach} for {Design} {Pattern} {Identification}},
	volume = {34},
	issn = {1939-3520},
	shorttitle = {{DeMIMA}},
	url = {https://ieeexplore.ieee.org/document/4564471/?arnumber=4564471},
	doi = {10.1109/TSE.2008.48},
	abstract = {Design patterns are important in object-oriented programming because they offer design motifs, elegant solutions to recurrent design problems, which improve the quality of software systems. Design motifs facilitate system maintenance by helping to understand design and implementation. However, after implementation, design motifs are spread throughout the source code and are thus not directly available to maintainers. We present DeMIMA, an approach to identify semi-automatically micro-architectures that are similar to design motifs in source code and to ensure the traceability of these micro-architectures between implementation and design. DeMIMA consists of three layers: two layers to recover an abstract model of the source code, including binary class relationships, and a third layer to identify design patterns in the abstract model. We apply DeMIMA to five open-source systems and, on average, we observe 34\% precision for the considered 12 design motifs. Through the use of explanation-based constraint programming, DeMIMA ensures 100\% recall on the five systems. We also apply DeMIMA on 33 industrial components.},
	number = {5},
	urldate = {2024-12-11},
	journal = {IEEE Transactions on Software Engineering},
	author = {Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
	month = sep,
	year = {2008},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	pages = {667--684},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/6VPXHG3F/Guéhéneuc and Antoniol - 2008 - DeMIMA A Multilayered Approach for Design Pattern Identification.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/NNAM5ILA/4564471.html:text/html},
}

@inproceedings{jahic_state_2024,
	title = {State of {Practice}: {LLMs} in {Software} {Engineering} and {Software} {Architecture}},
	shorttitle = {State of {Practice}},
	url = {https://ieeexplore.ieee.org/document/10628428/?arnumber=10628428},
	doi = {10.1109/ICSA-C63560.2024.00059},
	abstract = {Large Language Models (LLMs) are finding their way into Software Engineering by assisting with tasks such as code generation. Furthermore, LLMs might have a potential to perform even more complex tasks, such as suggesting architectural design. However, there is a lack of empirical surveys on how software engineering companies use (and plan to use) LLMs and if LLMs truly can provide benefits to software architects. To understand the state of practice considering adoption of LLMs in software engineering, existing challenges, and future trends, we have surveyed 15 different software engineering companies. To understand the ability of LLMs to perform more complex tasks, we report on our experiments with LLM-assisted architectural design. We applied ChatGPT on 5 software projects and in total performed 50 different experiments. Our results capture the state of the practice of LLMs in software engineering and demonstrate how LLMs perform when assisting with (more complex task such as) architectural design. Engineers, architects, and project managers should profit from these results to guide their decision towards targeted adoption of LLMs in their business and engineering domains.},
	urldate = {2024-12-11},
	booktitle = {2024 {IEEE} 21st {International} {Conference} on {Software} {Architecture} {Companion} ({ICSA}-{C})},
	author = {Jahić, Jasmin and Sami, Ashkan},
	month = jun,
	year = {2024},
	note = {ISSN: 2768-4288},
	pages = {311--318},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/5HTVLVMQ/Jahić and Sami - 2024 - State of Practice LLMs in Software Engineering and Software Architecture.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/ZWA2LA8Z/10628428.html:text/html},
}

@inproceedings{jansen_software_2005,
	address = {Pittsburgh, PA, USA},
	title = {Software {Architecture} as a {Set} of {Architectural} {Design} {Decisions}},
	isbn = {978-0-7695-2548-8},
	url = {http://ieeexplore.ieee.org/document/1620096/},
	doi = {10.1109/WICSA.2005.61},
	abstract = {Software architectures have high costs for change, are complex, and erode during evolution. We believe these problems are partially due to knowledge vaporization. Currently, almost all the knowledge and information about the design decisions the architecture is based on are implicitly embedded in the architecture, but lack a ﬁrst-class representation. Consequently, knowledge about these design decisions disappears into the architecture, which leads to the aforementioned problems. In this paper, a new perspective on software architecture is presented, which views software architecture as a composition of a set of explicit design decisions. This perspective makes architectural design decisions an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture.},
	language = {en},
	urldate = {2024-03-16},
	booktitle = {5th {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture} ({WICSA}'05)},
	publisher = {IEEE},
	author = {Jansen, A. and Bosch, J.},
	year = {2005},
	pages = {109--120},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/96FCCA7X/Jansen and Bosch - 2005 - Software Architecture as a Set of Architectural Design Decisions.pdf:application/pdf},
}

@inproceedings{keller_pattern-based_1999,
	address = {Los Angeles California USA},
	title = {Pattern-based reverse-engineering of design components},
	isbn = {978-1-58113-074-4},
	url = {https://dl.acm.org/doi/10.1145/302405.302622},
	doi = {10.1145/302405.302622},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings of the 21st international conference on {Software} engineering},
	publisher = {ACM},
	author = {Keller, Rudolf K. and Schauer, Reinhard and Robitaille, Sébastien and Pagé, Patrick},
	month = may,
	year = {1999},
	pages = {226--235},
}

@inproceedings{pan_machine_2023,
	address = {Seoul, Korea, Republic of},
	title = {A {Machine} {Learning} {Based} {Approach} to {Detect} {Machine} {Learning} {Design} {Patterns}},
	copyright = {https://doi.org/10.15223/policy-029},
	isbn = {979-8-3503-4417-2},
	url = {https://ieeexplore.ieee.org/document/10479389/},
	doi = {10.1109/APSEC60848.2023.00073},
	abstract = {As machine learning expands to various domains, the demand for reusable solutions to similar problems increases. Machine learning design patterns are reusable solutions to design problems of machine learning applications. They can significantly enhance programmers’ productivity in programming that requires machine learning algorithms. Given the critical role of machine learning design patterns, the automated detection of them becomes equally vital. However, identifying design patterns can be time-consuming and error-prone. We propose an approach to detect their occurrences in Python files. Our approach uses an Abstract Syntax Tree (AST) of Python files to build a corpus of data and train a refined Text-CNN model to automatically identify machine learning design patterns. We empirically validate our approach by conducting an exploratory study to detect four common machine learning design patterns: Embedding, Multilabel, Feature Cross, and Hashed Feature. We manually label 450 Python code files containing these design patterns from repositories of projects in GitHub. Our approach achieves accuracy values ranging from 80\% to 92\% for each of the four patterns.},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {2023 30th {Asia}-{Pacific} {Software} {Engineering} {Conference} ({APSEC})},
	publisher = {IEEE},
	author = {Pan, Weitao and Washizaki, Hironori and Yoshioka, Nobukazu and Fukazawa, Yoshiaki and Khomh, Foutse and Guéhéneuc, Yann–Gaël},
	month = dec,
	year = {2023},
	pages = {574--578},
	file = {PDF:/home/carlos/Research/Zotero/storage/DSNZF333/Pan et al. - 2023 - A Machine Learning Based Approach to Detect Machine Learning Design Patterns.pdf:application/pdf},
}

@incollection{steffen_large_2024,
	address = {Cham},
	title = {Large {Language} {Model} {Assisted} {Software} {Engineering}: {Prospects}, {Challenges}, and a {Case} {Study}},
	volume = {14380},
	isbn = {978-3-031-46001-2 978-3-031-46002-9},
	shorttitle = {Large {Language} {Model} {Assisted} {Software} {Engineering}},
	url = {https://link.springer.com/10.1007/978-3-031-46002-9_23},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Bridging the {Gap} {Between} {AI} and {Reality}},
	publisher = {Springer Nature Switzerland},
	author = {Belzner, Lenz and Gabor, Thomas and Wirsing, Martin},
	editor = {Steffen, Bernhard},
	year = {2024},
	doi = {10.1007/978-3-031-46002-9_23},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {355--374},
	file = {PDF:/home/carlos/Research/Zotero/storage/DPTEPM6A/Belzner et al. - 2024 - Large Language Model Assisted Software Engineering Prospects, Challenges, and a Case Study.pdf:application/pdf},
}

@article{tang_comparative_2010,
	title = {A comparative study of architecture knowledge management tools},
	volume = {83},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121209002295},
	doi = {10.1016/j.jss.2009.08.032},
	abstract = {Recent research suggests that architectural knowledge, such as design decisions, is important and should be recorded alongside the architecture description. Different approaches have emerged to support such architectural knowledge (AK) management activities. However, there are different notions of and emphasis on what and how architectural activities should be supported. This is reﬂected in the design and implementation of existing AK tools. To understand the current status of software architecture knowledge engineering and future research trends, this paper compares ﬁve architectural knowledge management tools and the support they provide in the architecture life-cycle. The comparison is based on an evaluation framework deﬁned by a set of 10 criteria. The results of the comparison provide insights into the current focus of architectural knowledge management support, their advantages, deﬁciencies, and conformance to the current architectural description standard. Based on the outcome of this comparison a research agenda is proposed for future work on AK tools.},
	language = {en},
	number = {3},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Tang, Antony and Avgeriou, Paris and Jansen, Anton and Capilla, Rafael and Ali Babar, Muhammad},
	month = mar,
	year = {2010},
	pages = {352--370},
	file = {PDF:/home/carlos/Research/Zotero/storage/7KAVQ3VX/Tang et al. - 2010 - A comparative study of architecture knowledge management tools.pdf:application/pdf},
}

@inproceedings{zhang_software_2023,
	address = {San Francisco CA USA},
	title = {Software {Architecture} {Recovery} with {Information} {Fusion}},
	isbn = {979-8-4007-0327-0},
	url = {https://dl.acm.org/doi/10.1145/3611643.3616285},
	doi = {10.1145/3611643.3616285},
	abstract = {Understanding the architecture is vital for effectively maintaining and managing large software systems. However, as software systems evolve over time, their architectures inevitably change. To keep up with the change, architects need to track the implementationlevel changes and update the architectural documentation accordingly, which is time-consuming and error-prone. Therefore, many automatic architecture recovery techniques have been proposed to ease this process. Despite efforts have been made to improve the accuracy of architecture recovery, existing solutions still suffer from two limitations. First, most of them only use one or two type of information for the recovery, ignoring the potential usefulness of other sources. Second, they tend to use the information in a coarse-grained manner, overlooking important details within it.},
	language = {en},
	urldate = {2024-03-19},
	booktitle = {Proceedings of the 31st {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Zhang, Yiran and Xu, Zhengzi and Liu, Chengwei and Chen, Hongxu and Sun, Jianwen and Qiu, Dong and Liu, Yang},
	month = nov,
	year = {2023},
	pages = {1535--1547},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/QDUUQU2S/Zhang et al. - 2023 - Software Architecture Recovery with Information Fusion.pdf:application/pdf},
}

