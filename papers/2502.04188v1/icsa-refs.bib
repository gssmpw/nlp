
@inproceedings{aghajani_software_2019,
	address = {Montreal, QC, Canada},
	title = {Software {Documentation} {Issues} {Unveiled}},
	isbn = {978-1-7281-0869-8},
	url = {https://ieeexplore.ieee.org/document/8811931/},
	doi = {10.1109/ICSE.2019.00122},
	abstract = {Good) Software documentation provides developers and users with a description of what a software system does, how it operates, and how it should be used. For example, technical documentation (e.g., an API reference guide) aids developers during evolution/maintenance activities, while a user manual explains how users are to interact with a system. Despite its intrinsic value, the creation and the maintenance of documentation is often neglected, negatively impacting its quality and usefulness, ultimately leading to a generally unfavorable take on documentation.},
	language = {en},
	urldate = {2024-03-14},
	booktitle = {2019 {IEEE}/{ACM} 41st {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Aghajani, Emad and Nagy, Csaba and Vega-Marquez, Olga Lucero and Linares-Vasquez, Mario and Moreno, Laura and Bavota, Gabriele and Lanza, Michele},
	month = may,
	year = {2019},
	pages = {1199--1210},
	annote = {86 citations (Crossref) [2024-03-16]},
}

@inproceedings{forward_relevance_2002,
	address = {McLean Virginia USA},
	title = {The relevance of software documentation, tools and technologies: a survey},
	isbn = {978-1-58113-594-7},
	shorttitle = {The relevance of software documentation, tools and technologies},
	url = {https://dl.acm.org/doi/10.1145/585058.585065},
	doi = {10.1145/585058.585065},
	language = {en},
	urldate = {2024-03-15},
	booktitle = {Proceedings of the 2002 {ACM} symposium on {Document} engineering},
	publisher = {ACM},
	author = {Forward, Andrew and Lethbridge, Timothy C.},
	month = nov,
	year = {2002},
	pages = {26--33},
	annote = {147 citations (Crossref) [2024-03-16]},
}

@article{lethbridge_how_2003,
	title = {How software engineers use documentation: the state of the practice},
	volume = {20},
	issn = {0740-7459},
	shorttitle = {How software engineers use documentation},
	url = {http://ieeexplore.ieee.org/document/1241364/},
	doi = {10.1109/MS.2003.1241364},
	language = {en},
	number = {6},
	urldate = {2024-03-15},
	journal = {IEEE Software},
	author = {Lethbridge, T.C. and Singer, J. and Forward, A.},
	month = nov,
	year = {2003},
	pages = {35--39},
}

@book{sommerville_software_2016,
	address = {Boston Columbus Indianapolis New York San Francisco Hoboken Amsterdam Cape Town Dubai London Madrid Milan Munich Paris Montreal Toronto Delhi Mexico City São Paulo Sydney Hong Kong Seoul Singapore Taipei Tokyo},
	edition = {Tenth edition, global edition},
	series = {Always learning},
	title = {Software {Engineering}},
	isbn = {978-1-292-09613-1},
	abstract = {The Fundamental Practice of Software Engineering. Software Engineering introduces readers to the overwhelmingly important subject of software programming and development. In the past few years, computer systems have come to dominate not just our technological growth, but the foundations of our world’s major industries. This text seeks to lay out the fundamental concepts of this huge and continually growing subject area in a clear and comprehensive manner. The Tenth Edition contains new information that highlights various technological updates of recent years, providing readers with highly relevant and current information. Sommerville’s experience in system dependability and systems engineering guides the text through a traditional plan-based approach that incorporates some novel agile methods. The text strives to teach the innovators of tomorrow how to create software that will make our world a better, safer, and more advanced place to live},
	language = {en},
	publisher = {Pearson},
	author = {Sommerville, Ian},
	year = {2016},
}

@book{bass_software_2012,
	edition = {3},
	title = {Software {Architecture} in {Practice}},
	isbn = {978-0-13-294278-2},
	abstract = {The award-winning and highly influential Software Architecture in Practice, Third Edition, has been substantially revised to reflect the latest developments in the field. In a real-world setting, the book once again introduces the concepts and best practices of software architecture—how a software system is structured and how that system’s elements are meant to interact. Distinct from the details of implementation, algorithm, and data representation, an architecture holds the key to achieving system quality, is a reusable asset that can be applied to subsequent systems, and is crucial to a software organization’s business strategy. The authors have structured this edition around the concept of architecture influence cycles. Each cycle shows how architecture influences, and is influenced by, a particular context in which architecture plays a critical role. Contexts include technical environment, the life cycle of a project, an organization’s business profile, and the architect’s professional practices. The authors also have greatly expanded their treatment of quality attributes, which remain central to their architecture philosophy—with an entire chapter devoted to each attribute—and broadened their treatment of architectural patterns. If you design, develop, or manage large software systems (or plan to do so), you will find this book to be a valuable resource for getting up to speed on the state of the art. Totally new material covers Contexts of software architecture: technical, project, business, and professional Architecture competence: what this means both for individuals and organizations The origins of business goals and how this affects architecture Architecturally significant requirements, and how to determine them Architecture in the life cycle, including generate-and-test as a design philosophy; architecture conformance during implementation; architecture and testing; and architecture and agile development Architecture and current technologies, such as the cloud, social networks, and end-user devices},
	language = {en},
	publisher = {Addison-Wesley},
	author = {Bass, Len and Clements, Paul and Kazman, Rick},
	month = sep,
	year = {2012},
}

@inproceedings{jansen_software_2005,
	address = {Pittsburgh, PA, USA},
	title = {Software {Architecture} as a {Set} of {Architectural} {Design} {Decisions}},
	isbn = {978-0-7695-2548-8},
	url = {http://ieeexplore.ieee.org/document/1620096/},
	doi = {10.1109/WICSA.2005.61},
	abstract = {Software architectures have high costs for change, are complex, and erode during evolution. We believe these problems are partially due to knowledge vaporization. Currently, almost all the knowledge and information about the design decisions the architecture is based on are implicitly embedded in the architecture, but lack a ﬁrst-class representation. Consequently, knowledge about these design decisions disappears into the architecture, which leads to the aforementioned problems. In this paper, a new perspective on software architecture is presented, which views software architecture as a composition of a set of explicit design decisions. This perspective makes architectural design decisions an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture.},
	language = {en},
	urldate = {2024-03-16},
	booktitle = {5th {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture} ({WICSA}'05)},
	publisher = {IEEE},
	author = {Jansen, A. and Bosch, J.},
	year = {2005},
	pages = {109--120},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/96FCCA7X/Jansen and Bosch - 2005 - Software Architecture as a Set of Architectural Design Decisions.pdf:application/pdf},
}

@book{gamma_design_1995,
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	isbn = {978-3-8273-2824-3},
	shorttitle = {Design {Patterns}},
	abstract = {Capturing a wealth of experience about the design of object-oriented software, four top-notch designers present a catalog of simple and succinct solutions to commonly occurring design problems. Previously undocumented, these 23 patterns allow designers to create more flexible, elegant, and ultimately reusable designs without having to rediscover the design solutions themselves. The authors begin by describing what patterns are and how they can help you design object-oriented software. They then go on to systematically name, explain, evaluate, and catalog recurring designs in object-oriented systems. With Design Patterns as your guide, you will learn how these important patterns fit into the software development process, and how you can leverage them to solve your own design problems most efficiently. Each pattern describes the circumstances in which it is applicable, when it can be applied in view of other design constraints, and the consequences and trade-offs of using the pattern within a larger design. All patterns are compiled from real systems and are based on real-world examples. Each pattern also includes code that demonstrates how it may be implemented in object-oriented programming languages like C++ or Smalltalk. 0201633612B07092001},
	language = {de},
	publisher = {Pearson Deutschland GmbH},
	author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
	year = {1995},
	annote = {Google-Books-ID: jUvf7wMUGcUC},
}

@inproceedings{aghajani_software_2020,
	address = {Seoul South Korea},
	title = {Software documentation: the practitioners' perspective},
	isbn = {978-1-4503-7121-6},
	shorttitle = {Software documentation},
	url = {https://dl.acm.org/doi/10.1145/3377811.3380405},
	doi = {10.1145/3377811.3380405},
	language = {en},
	urldate = {2024-03-18},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}},
	publisher = {ACM},
	author = {Aghajani, Emad and Nagy, Csaba and Linares-Vásquez, Mario and Moreno, Laura and Bavota, Gabriele and Lanza, Michele and Shepherd, David C.},
	month = jun,
	year = {2020},
	pages = {590--601},
}

@article{chen_empirical_2009,
	title = {An empirical analysis of the impact of software development problem factors on software maintainability},
	volume = {82},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121208002793},
	doi = {10.1016/j.jss.2008.12.036},
	abstract = {Many problem factors in the software development phase affect the maintainability of the delivered software systems. Therefore, understanding software development problem factors can help in not only reducing the incidence of project failure but can also ensure software maintainability. This study focuses on those software development problem factors which may possibly affect software maintainability. Twenty-ﬁve problem factors were classiﬁed into ﬁve dimensions; a questionnaire was designed and 137 software projects were surveyed. A K-means cluster analysis was performed to classify the projects into three groups of low, medium and high maintainability projects. For projects which had a higher level of severity of problem factors, the inﬂuence on software maintainability becomes more obvious. The inﬂuence of software process improvement (SPI) on project problems and the associated software maintainability was also examined in this study. Results suggest that SPI can help reduce the level of severity of the documentation quality and process management problems, and is only likely to enhance software maintainability to a medium level. Finally, the top 10 list of higher-severity software development problem factors was identiﬁed, and implications were discussed.},
	language = {en},
	number = {6},
	urldate = {2024-03-18},
	journal = {Journal of Systems and Software},
	author = {Chen, Jie-Cherng and Huang, Sun-Jen},
	month = jun,
	year = {2009},
	pages = {981--992},
}

@inproceedings{robillard_-demand_2017,
	address = {Shanghai},
	title = {On-demand {Developer} {Documentation}},
	isbn = {978-1-5386-0992-7},
	url = {http://ieeexplore.ieee.org/document/8094446/},
	doi = {10.1109/ICSME.2017.17},
	abstract = {We advocate for a paradigm shift in supporting the information needs of developers, centered around the concept of automated on-demand developer documentation. Currently, developer information needs are fulﬁlled by asking experts or consulting documentation. Unfortunately, traditional documentation practices are inefﬁcient because of, among others, the manual nature of its creation and the gap between the creators and consumers. We discuss the major challenges we face in realizing such a paradigm shift, highlight existing research that can be leveraged to this end, and promote opportunities for increased convergence in research on software documentation.},
	language = {en},
	urldate = {2024-03-18},
	booktitle = {2017 {IEEE} {International} {Conference} on {Software} {Maintenance} and {Evolution} ({ICSME})},
	publisher = {IEEE},
	author = {Robillard, Martin P. and Marcus, Andrian and Treude, Christoph and Bavota, Gabriele and Chaparro, Oscar and Ernst, Neil and Gerosa, Marco Aurelio and Godfrey, Michael and Lanza, Michele and Linares-Vasquez, Mario and Murphy, Gail C. and Moreno, Laura and Shepherd, David and Wong, Edmund},
	month = sep,
	year = {2017},
	pages = {479--483},
	file = {Accepted Version:/home/carlos/Research/Zotero/storage/S3K8JX4M/Robillard et al. - 2017 - On-demand Developer Documentation.pdf:application/pdf},
}

@article{geiger_types_2018,
	title = {The {Types}, {Roles}, and {Practices} of {Documentation} in {Data} {Analytics} {Open} {Source} {Software} {Libraries}: {A} {Collaborative} {Ethnography} of {Documentation} {Work}},
	volume = {27},
	issn = {0925-9724, 1573-7551},
	shorttitle = {The {Types}, {Roles}, and {Practices} of {Documentation} in {Data} {Analytics} {Open} {Source} {Software} {Libraries}},
	url = {http://link.springer.com/10.1007/s10606-018-9333-1},
	doi = {10.1007/s10606-018-9333-1},
	abstract = {Computational research and data analytics increasingly relies on complex ecosystems of open source software (OSS) “libraries” – curated collections of reusable code that programmers import to perform a specific task. Software documentation for these libraries is crucial in helping programmers/analysts know what libraries are available and how to use them. Yet documentation for open source software libraries is widely considered low-quality. This article is a collaboration between CSCW researchers and contributors to data analytics OSS libraries, based on ethnographic fieldwork and qualitative interviews. We examine several issues around the formats, practices, and challenges around documentation in these largely volunteer-based projects. There are many different kinds and formats of documentation that exist around such libraries, which play a variety of educational, promotional, and organizational roles. The work behind documentation is similarly multifaceted, including writing, reviewing, maintaining, and organizing documentation. Different aspects of documentation work require contributors to have different sets of skills and overcome various social and technical barriers. Finally, most of our interviewees do not report high levels of intrinsic enjoyment for doing documentation work (compared to writing code). Their motivation is affected by personal and project-specific factors, such as the perceived level of credit for doing documentation work versus more ‘technical’ tasks like adding new features or fixing bugs. In studying documentation work for data analytics OSS libraries, we gain a new window into the changing practices of data-intensive research, as well as help practitioners better understand how to support this often invisible and infrastructural work in their projects.},
	language = {en},
	number = {3-6},
	urldate = {2024-03-19},
	journal = {Computer Supported Cooperative Work (CSCW)},
	author = {Geiger, R. Stuart and Varoquaux, Nelle and Mazel-Cabasse, Charlotte and Holdgraf, Chris},
	month = dec,
	year = {2018},
	pages = {767--802},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/6X784SWS/Geiger et al. - 2018 - The Types, Roles, and Practices of Documentation in Data Analytics Open Source Software Libraries A.pdf:application/pdf},
}

@inproceedings{zhang_software_2023,
	address = {San Francisco CA USA},
	title = {Software {Architecture} {Recovery} with {Information} {Fusion}},
	isbn = {979-8-4007-0327-0},
	url = {https://dl.acm.org/doi/10.1145/3611643.3616285},
	doi = {10.1145/3611643.3616285},
	abstract = {Understanding the architecture is vital for effectively maintaining and managing large software systems. However, as software systems evolve over time, their architectures inevitably change. To keep up with the change, architects need to track the implementationlevel changes and update the architectural documentation accordingly, which is time-consuming and error-prone. Therefore, many automatic architecture recovery techniques have been proposed to ease this process. Despite efforts have been made to improve the accuracy of architecture recovery, existing solutions still suffer from two limitations. First, most of them only use one or two type of information for the recovery, ignoring the potential usefulness of other sources. Second, they tend to use the information in a coarse-grained manner, overlooking important details within it.},
	language = {en},
	urldate = {2024-03-19},
	booktitle = {Proceedings of the 31st {ACM} {Joint} {European} {Software} {Engineering} {Conference} and {Symposium} on the {Foundations} of {Software} {Engineering}},
	publisher = {ACM},
	author = {Zhang, Yiran and Xu, Zhengzi and Liu, Chengwei and Chen, Hongxu and Sun, Jianwen and Qiu, Dong and Liu, Yang},
	month = nov,
	year = {2023},
	pages = {1535--1547},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/QDUUQU2S/Zhang et al. - 2023 - Software Architecture Recovery with Information Fusion.pdf:application/pdf},
}

@inproceedings{granchelli_microart_2017,
	address = {Gothenburg},
	title = {{MicroART}: {A} {Software} {Architecture} {Recovery} {Tool} for {Maintaining} {Microservice}-{Based} {Systems}},
	isbn = {978-1-5090-4793-2},
	shorttitle = {{MicroART}},
	url = {https://ieeexplore.ieee.org/document/7958510/},
	doi = {10.1109/ICSAW.2017.9},
	abstract = {Microservice-based systems are characterised by a multitude of small services, each running in its own process and communicating with lightweight mechanisms. The microservice architectural style strongly encourages high decoupling among microservices in order to ease their independent deployment, operation, and maintenance. However, there are situations in which having a global overview of the system is fundamental. In this paper we present the ﬁrst prototype of our Architecture Recovery Tool for microservice-based systems called MicroART. MicroART following Model-Driven Engineering principles, is able to generate models of the software architecture of a microservice-based system, that can be managed by software architects for multiple purposes.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {2017 {IEEE} {International} {Conference} on {Software} {Architecture} {Workshops} ({ICSAW})},
	publisher = {IEEE},
	author = {Granchelli, Giona and Cardarelli, Mario and Di Francesco, Paolo and Malavolta, Ivano and Iovino, Ludovico and Di Salle, Amleto},
	month = apr,
	year = {2017},
	pages = {298--302},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/AKZYH65H/Granchelli et al. - 2017 - MicroART A Software Architecture Recovery Tool for Maintaining Microservice-Based Systems.pdf:application/pdf},
}

@article{fonseca_x-trace_2007,
	title = {X-{Trace}: {A} {Pervasive} {Network} {Tracing} {Framework}},
	abstract = {Modern Internet systems often combine different applications (e.g., DNS, web, and database), span different administrative domains, and function in the context of network mechanisms like tunnels, VPNs, NATs, and overlays. Diagnosing these complex systems is a daunting challenge. Although many diagnostic tools exist, they are typically designed for a speciﬁc layer (e.g., traceroute) or application, and there is currently no tool for reconstructing a comprehensive view of service behavior. In this paper we propose X-Trace, a tracing framework that provides such a comprehensive view for systems that adopt it. We have implemented X-Trace in several protocols and software systems, and we discuss how it works in three deployed scenarios: DNS resolution, a three-tiered photo-hosting website, and a service accessed through an overlay network.},
	language = {en},
	journal = {NSDI'07: Proceedings of the 4th USENIX conference on Networked systems design \& implementation},
	author = {Fonseca, Rodrigo and Porter, George and Katz, Randy H and Shenker, Scott and Stoica, Ion},
	month = apr,
	year = {2007},
	pages = {20},
}

@article{ducasse_moose_2000,
	title = {{MOOSE}: an {Extensible} {Language}-{Independent} {Environment} for {Reengineering} {Object}-{Oriented} {Systems}},
	abstract = {Surprising as it may seem, many of the early adopters of the object-oriented paradigm already face a number of problems typically encountered in large-scale legacy systems. The reengineering of those systems often poses problems because of the considerable size and complexity of such systems. In the context of the FAMOOS project we have developed a language independent environment called Moose which can deal with that complexity. This paper describes the architecture of Moose, the tools which have been developed around it and the industrial experiences we have obtained.},
	language = {en},
	journal = {International Symposium on Constructing Software Engineering Tools},
	author = {Ducasse, Stephane and Lanza, Michele and Tichelaar, Sander},
	month = apr,
	year = {2000},
}

@inproceedings{cuadrado_case_2008,
	address = {Okinawa},
	title = {A {Case} {Study} on {Software} {Evolution} towards {Service}-{Oriented} {Architecture}},
	isbn = {978-0-7695-3096-3},
	url = {https://ieeexplore.ieee.org/document/4483115/},
	doi = {10.1109/WAINA.2008.296},
	abstract = {The evolution of any software product over its lifetime is unavoidable, caused both by bugs to be fixed and by new requirements appearing in the later stages of the product’s lifecycle. Traditional development and architecture paradigms have proven to be not suited for these continual changes, resulting in large maintenance costs. This has caused the rise of approaches such as Service Oriented Architectures (SOA), based on loosely coupled, interoperable services, aiming to address these issues. This paper describes a case study of the evolution of an existing legacy system towards a more maintainable SOA. The proposed process includes the recovery of the legacy system architecture, as a first step to define the specific evolution plan to be executed and validated. The case study has been applied to a medical imaging system, evolving it into a service model.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {22nd {International} {Conference} on {Advanced} {Information} {Networking} and {Applications} - {Workshops} (aina workshops 2008)},
	publisher = {IEEE},
	author = {Cuadrado, Felix and Garcia, Boni and Duenas, Juan C. and Parada, Hugo A.},
	month = mar,
	year = {2008},
	pages = {1399--1404},
	file = {Accepted Version:/home/carlos/Research/Zotero/storage/BX3YHSVX/Cuadrado et al. - 2008 - A Case Study on Software Evolution towards Service-Oriented Architecture.pdf:application/pdf},
}

@inproceedings{lei_ding_focus_2001,
	address = {Amsterdam, Netherlands},
	title = {Focus: a light-weight, incremental approach to software architecture recovery and evolution},
	isbn = {978-0-7695-1360-7},
	shorttitle = {Focus},
	url = {http://ieeexplore.ieee.org/document/948429/},
	doi = {10.1109/WICSA.2001.948429},
	abstract = {During the past decade, object-orientation (00) has become the dominant software development methodology, accompanied by a number of modeling notations, programming languages, and development environments. 00 applications of today are increasingly complex and userdriven. They are also developed more rapidly and evolved more frequently than was the case with software systems of the past. All of these factors contribute to a plethora of potential problems when maintaining and evolving an 00 application. These problems are caused by architectural erosion, where the initial architecture of an application is (arbitrarily) modified to the point where its key properties no longer hold. We propose an approach, called Focus, whose goal is to enable effective evolution of such an application with minimal effort, by recovering its architecture and using it as the basis of evolution. Focus allows engineers to direct their primary attention to the part of the system that is directly impacted by the desired change; subsequent changes will incrementally uncover additional parts of the system’s architecture. We have applied Focus to four off-the-shelf applications to date. We discuss its key strengths and point out several open issues that will frame our future work.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture}},
	publisher = {IEEE Comput. Soc},
	author = {{Lei Ding} and Medvidovic, N.},
	year = {2001},
	pages = {191--200},
}

@inproceedings{keller_pattern-based_1999,
	address = {Los Angeles California USA},
	title = {Pattern-based reverse-engineering of design components},
	isbn = {978-1-58113-074-4},
	url = {https://dl.acm.org/doi/10.1145/302405.302622},
	doi = {10.1145/302405.302622},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings of the 21st international conference on {Software} engineering},
	publisher = {ACM},
	author = {Keller, Rudolf K. and Schauer, Reinhard and Robitaille, Sébastien and Pagé, Patrick},
	month = may,
	year = {1999},
	pages = {226--235},
}

@inproceedings{smith_spqr_2003,
	address = {Montreal, Que., Canada},
	title = {{SPQR}: {Flexible} {Automated} {Design} {Pattern} {Extraction} from {Source} {Code}},
	isbn = {978-0-7695-2035-3},
	shorttitle = {{SPQR}},
	url = {http://ieeexplore.ieee.org/document/1240309/},
	doi = {10.1109/ASE.2003.1240309},
	abstract = {Previous automated approaches to discovering design patterns in source code have suffered from a need to enumerate static descriptions of structural and behavioural relationships, resulting in a ﬁnite library of variations on pattern implementation. Our approach, System for Pattern Query and Recognition, or SPQR, differs in that we do not seek statically to encode each pattern and each variant that we wish to ﬁnd. Our system ﬁnds patterns that were not explicitly deﬁned, but instead are inferred dynamically during code analysis by a theorem prover, providing practical tool support for software construction, comprehension, maintenance, and refactoring. We use a logical inference system to reveal large numbers of patterns and their variations from a small number of deﬁnitions by encoding in a formal denotational semantics a small number of fundamental OO concepts (elemental design patterns), encode the rules by which these concepts are combined to form patterns (reliance operators), and encode the structural/behavioral relationships among components of objects and classes (rho-calculus). A chain of fully automated tools provides a path from source code to revealed patterns. We describe our approach in this paper with a concrete example to drive the discussion, accompanied by formal treatment of the foundational topics.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {18th {IEEE} {International} {Conference} on {Automated} {Software} {Engineering}, 2003. {Proceedings}.},
	publisher = {IEEE Comput. Soc},
	author = {Smith, J.M. and Stotts, D.},
	year = {2003},
	pages = {215--224},
}

@inproceedings{ferenc_design_2005,
	address = {Budapest, Hungary},
	title = {Design pattern mining enhanced by machine learning},
	isbn = {978-0-7695-2368-2},
	url = {http://ieeexplore.ieee.org/document/1510125/},
	doi = {10.1109/ICSM.2005.40},
	abstract = {Design patterns present good solutions to frequently occurring problems in object-oriented software design. Thus their correct application in a system’s design may signiﬁcantly improve its internal quality attributes such as reusability and maintainability. In software maintenance the existence of up-to-date documentation is crucial, so the discovery of as yet unknown design pattern instances can help improve the documentation. Hence a reliable design pattern recognition system is very desirable. However, simpler methods (based on pattern matching) may give imprecise results due to the vague nature of the patterns’ structural description. In previous work we presented a pattern matching-based system using the Columbus framework with which we were able to ﬁnd pattern instances from the source code by considering the patterns’ structural descriptions only, and therefore we could not identify false hits and distinguish similar design patterns such as State and Strategy. In the present work we use machine learning to enhance pattern mining by ﬁltering out as many false hits as possible. To do so we distinguish true and false pattern instances with the help of a learning database created by manually tagging a large C++ system.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {21st {IEEE} {International} {Conference} on {Software} {Maintenance} ({ICSM}'05)},
	publisher = {IEEE},
	author = {Ferenc, R. and Beszedes, A. and Fulop, L. and Lele, J.},
	year = {2005},
	pages = {295--304},
	file = {Submitted Version:/home/carlos/Research/Zotero/storage/3XBMY8TU/Ferenc et al. - 2005 - Design pattern mining enhanced by machine learning.pdf:application/pdf},
}

@article{prechelt_functionality_1998,
	title = {Functionality versus {Practicality}: {Employing} {Existing} {Tools} for {Recovering} {Structural} {Design} {Patterns}},
	volume = {4},
	abstract = {The object-oriented design community has recently begun to collect socalled software design patterns: descriptions of proven solutions common software design problems, packaged in a description that includes a problem, a context, a solution, and its properties. Design pattern information can improve the maintainability of software, but is often absent in program documentation.},
	language = {en},
	number = {12},
	journal = {Journal of Universal Computer Science},
	author = {Prechelt, Lutz and Kramer, Christian},
	year = {1998},
}

@inproceedings{blewitt_automatic_2001,
	address = {San Diego, CA, USA},
	title = {Automatic verification of {Java} design patterns},
	isbn = {978-0-7695-1426-0},
	url = {http://ieeexplore.ieee.org/document/989821/},
	doi = {10.1109/ASE.2001.989821},
	abstract = {Design patterns are widely used by object oriented designers and developers for building complex systems in object oriented programming languages such as Java. However, systems evolve over time, increasing the chance that the pattern in its original form will be broken.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings 16th {Annual} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE} 2001)},
	publisher = {IEEE Comput. Soc},
	author = {Blewitt, A. and Bundy, A. and Stark, I.},
	year = {2001},
	pages = {324--327},
}

@inproceedings{diamantopoulos_dp-core_2016,
	address = {Rhodes, Greece},
	title = {{DP}-{CORE}: {A} {Design} {Pattern} {Detection} {Tool} for {Code} {Reuse}:},
	isbn = {978-989-758-190-8},
	shorttitle = {{DP}-{CORE}},
	url = {http://www.scitepress.org/DigitalLibrary/Link.aspx?doi=10.5220/0006223301600167},
	doi = {10.5220/0006223301600167},
	abstract = {Design Pattern Detection, Static Code Analysis, Reverse Engineering, Code Reuse.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {Proceedings of the {Sixth} {International} {Symposium} on {Business} {Modeling} and {Software} {Design}},
	publisher = {SCITEPRESS - Science and and Technology Publications},
	author = {Diamantopoulos, Themistoklis and Noutsos, Antonis and Symeonidis, Andreas},
	year = {2016},
	pages = {160--167},
}

@inproceedings{shi_reverse_2006,
	address = {Tokyo},
	title = {Reverse {Engineering} of {Design} {Patterns} from {Java} {Source} {Code}},
	isbn = {978-0-7695-2579-2},
	url = {http://ieeexplore.ieee.org/document/4019568/},
	doi = {10.1109/ASE.2006.57},
	abstract = {Recovering design patterns can enhance existing source code analysis tools by bringing program understanding to the design level. This paper presents a new, fully automated pattern detection approach. The new approach is based on our reclassiﬁcation of the GoF patterns by their pattern intent. We argue that the GoF pattern catalog classiﬁes design patterns in the forward-engineering sense; our reclassiﬁcation is better suited for reverse engineering. Our approach uses lightweight static program analysis techniques to capture program intent. This paper also describes our tool, PINOT, that implements this new approach. PINOT detects all the GoF patterns that have concrete deﬁnitions driven by code structure or system behavior. Our tool is faster, more accurate, and targets more patterns than existing pattern detection tools. PINOT has been used successfully in detecting patterns in Java AWT, JHotDraw, Swing, Apache Ant, and many other programs and packages.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {21st {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE}'06)},
	publisher = {IEEE},
	author = {Shi, Nija and Olsson, Ronald},
	year = {2006},
	pages = {123--134},
}

@inproceedings{rasool_flexible_2011,
	address = {Lawrence, KS, USA},
	title = {Flexible design pattern detection based on feature types},
	isbn = {978-1-4577-1639-3 978-1-4577-1638-6},
	url = {http://ieeexplore.ieee.org/document/6100060/},
	doi = {10.1109/ASE.2011.6100060},
	abstract = {Accurately recovered design patterns support development related tasks like program comprehension and reengineering. Researchers proposed a variety of recognition approaches already. Though, much progress was made, there is still a lack of accuracy and ﬂexibility in recognition. A major problem is the large variety of variants for implementing the same pattern. Furthermore, the integration of multiple search techniques is required to provide more accurate and effective pattern detection. In this paper, we propose variable pattern deﬁnitions composed of reusable feature types. Each feature type is assigned to one of multiple search techniques that is best ﬁtting for its detection. A prototype implementation was applied to three open source applications. For each system a baseline was determined and used for comparison with the results of previous techniques. We reached very good results with an improved pattern catalog, but also demonstrated the necessity for customizations on new inspected systems. These results demonstrate the importance of customizable pattern deﬁnitions and multiple search techniques in order to overcome accuracy and ﬂexibility issues of previous approaches.},
	language = {en},
	urldate = {2024-03-20},
	booktitle = {2011 26th {IEEE}/{ACM} {International} {Conference} on {Automated} {Software} {Engineering} ({ASE} 2011)},
	publisher = {IEEE},
	author = {Rasool, Ghulam and Mader, Patrick},
	month = nov,
	year = {2011},
	pages = {243--252},
}

@article{beyer_crocopat_2003,
	title = {{CrocoPat}: {A} {Tool} for {Efﬁcient} {Pattern} {Recognition} in {Large} {Object}-{Oriented} {Programs}},
	abstract = {Nowadays, software systems are too large to be understandable by reading the source code. For reengineering activities, methods and tools for automated design recovery are needed. CrocoPat is a tool for efﬁcient pattern-based design analysis of object-oriented programs. Patterns can be ﬂexibly speciﬁed by expressions based on standard mathematics. The software meta model is interpreted in terms of relations, and the patterns are described by relational expressions over these relations. The tool represents the abstract model of the program using a data structure based on binary decision diagrams for performance improvement. The representation is proved to allow for an efﬁcient recognition also for large systems up to 10’000 classes comprising several MLOC source code.},
	language = {en},
	journal = {11th IEEE International Workshop on Program Comprehension},
	author = {Beyer, Dirk and Lewerentz, Claus},
	year = {2003},
	pages = {10},
}

@article{chihada_source_2015,
	title = {Source code and design conformance, design pattern detection from source code by classification approach},
	volume = {26},
	issn = {15684946},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S1568494614005389},
	doi = {10.1016/j.asoc.2014.10.027},
	language = {en},
	urldate = {2024-03-20},
	journal = {Applied Soft Computing},
	author = {Chihada, Abdullah and Jalili, Saeed and Hasheminejad, Seyed Mohammad Hossein and Zangooei, Mohammad Hossein},
	month = jan,
	year = {2015},
	pages = {357--367},
}

@book{miles_learning_2006,
	title = {Learning {UML} 2.0: {A} {Pragmatic} {Introduction} to {UML}},
	isbn = {978-0-596-55522-1},
	shorttitle = {Learning {UML} 2.0},
	abstract = {"Since its original introduction in 1997, the Unified Modeling Language has revolutionized software development. Every integrated software development environment in the world–open-source, standards-based, and proprietary–now supports UML and, more importantly, the model-driven approach to software development. This makes learning the newest UML standard, UML 2.0, critical for all software developers–and there isn't a better choice than this clear, step-by-step guide to learning the language."–Richard Mark Soley, Chairman and CEO, OMG If you're like most software developers, you're building systems that are increasingly complex. Whether you're creating a desktop application or an enterprise system, complexity is the big hairy monster you must manage.The Unified Modeling Language (UML) helps you manage this complexity. Whether you're looking to use UML as a blueprint language, a sketch tool, or as a programming language, this book will give you the need-to-know information on how to apply UML to your project. While there are plenty of books available that describe UML, Learning UML 2.0 will show you how to use it. Topics covered include:Capturing your system's requirements in your model to help you ensure that your designs meet your users' needsModeling the parts of your system and their relationshipsModeling how the parts of your system work together to meet your system's requirementsModeling how your system moves into the real world, capturing how your system will be deployedEngaging and accessible, this book shows you how to use UML to craft and communicate your project's design. Russ Miles and Kim Hamilton have written a pragmatic introduction to UML based on hard-earned practice, not theory. Regardless of the software process or methodology you use, this book is the one source you need to get up and running with UML 2.0.Russ Miles is a software engineer for General Dynamics UK, where he works with Java and Distributed Systems, although his passion at the moment is Aspect Orientation and, in particular, AspectJ. Kim Hamilton is a senior software engineer at Northrop Grumman, where she's designed and implemented a variety of systems including web applications and distributed systems, with frequent detours into algorithms development.},
	language = {en},
	publisher = {"O'Reilly Media, Inc."},
	author = {Miles, Russ and Hamilton, Kim},
	month = apr,
	year = {2006},
	annote = {Google-Books-ID: QhiA6vT56E4C},
}

@inproceedings{su_hotgpt_2023,
	address = {Providence RI USA},
	title = {{HotGPT}: {How} to {Make} {Software} {Documentation} {More} {Useful} with a {Large} {Language} {Model}?},
	isbn = {979-8-4007-0195-5},
	shorttitle = {{HotGPT}},
	url = {https://dl.acm.org/doi/10.1145/3593856.3595910},
	doi = {10.1145/3593856.3595910},
	language = {en},
	urldate = {2024-04-09},
	booktitle = {Proceedings of the 19th {Workshop} on {Hot} {Topics} in {Operating} {Systems}},
	publisher = {ACM},
	author = {Su, Yiming and Wan, Chengcheng and Sethi, Utsav and Lu, Shan and Musuvathi, Madan and Nath, Suman},
	month = jun,
	year = {2023},
	pages = {87--93},
}

@book{hargis_developing_2004,
	address = {USA},
	title = {Developing {Quality} {Technical} {Information}: {A} {Handbook} for {Writers} and {Editors} (2nd {Edition})},
	isbn = {978-0-13-147749-0},
	shorttitle = {Developing {Quality} {Technical} {Information}},
	abstract = {The \#1 guide to excellence in documentation–now completely updated!Direct from IBM's own documentation experts, this is the definitive guide to developing outstanding technical documentation–for the Web and for print. Using extensive before-and-after examples, illustrations, and checklists, the authors show exactly how to create documentation that's easy to find, understand, and use. This edition includes extensive new coverage of topic-based information, simplifying search and retrievability, internationalization, visual effectiveness, and much more.Coverage includes: Focusing on the tasks and topics users care about most Saying more with fewer words Using organization and other means to deliver faster access to information Presenting information in more visually inviting ways Improving the effectiveness of your review process Learning from example: sample text, screen captures, illustrations, tables, and much moreWhether you're a writer, editor, designer, or reviewer, if you want to create great documentation, this book shows you how!},
	publisher = {Prentice Hall PTR},
	author = {Hargis, Gretchen and Carey, Michelle and Hernandez, Ann Kilty and Hughes, Polly and Longo, Deirdre and Rouiller, Shannon and Wilde, Elizabeth},
	month = mar,
	year = {2004},
}

@misc{noauthor_acm_nodate,
	title = {{ACM} {Empirical} {Standards}},
	url = {https://www2.sigsoft.org/EmpiricalStandards/docs/standards},
	abstract = {Empirical standards for conducting and evaluating research in software engineering},
	language = {en},
	urldate = {2024-04-25},
	note = {Publication Title: Empirical Standards},
}

@incollection{rost_software_2013,
	address = {Berlin, Heidelberg},
	title = {Software {Architecture} {Documentation} for {Developers}: {A} {Survey}},
	volume = {7957},
	isbn = {978-3-642-39030-2 978-3-642-39031-9},
	shorttitle = {Software {Architecture} {Documentation} for {Developers}},
	url = {http://link.springer.com/10.1007/978-3-642-39031-9_7},
	abstract = {Software architecture has become an established discipline in industry. Nevertheless, the available documentation of architecture is often not perceived as adequate by developers. As a foundation for the improvement of methods and tools around architecture documentation, we conducted a survey with 147 industrial participants, investigating their current problems and wishes for the future. Participants from different countries in Europe, Asia, North and South America shared their experiences. This paper presents the results of the survey. The results confirmed the common belief that architecture documentation is most frequently outdated and inconsistent and backed it up with data. Further, developers perceive difficulties with a “one-size-fits-all” architecture documentation, which does not adequately provide information for their specific task and context. Developers seek for more interactive ways of working with architecture documentation that allow finding needed information more easily with extended navigation and search possibilities.},
	language = {en},
	urldate = {2024-04-28},
	booktitle = {Software {Architecture}},
	publisher = {Springer Berlin Heidelberg},
	author = {Rost, Dominik and Naab, Matthias and Lima, Crescencio and Von Flach Garcia Chavez, Christina},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Drira, Khalil},
	year = {2013},
	doi = {10.1007/978-3-642-39031-9_7},
	keywords = {Reviewed},
	pages = {72--88},
	annote = {Series Title: Lecture Notes in Computer Science},
}

@book{martraire_living_2019,
	title = {Living {Documentation}: {Continuous} {Knowledge} {Sharing} by {Design}},
	isbn = {978-0-13-468936-4},
	shorttitle = {Living {Documentation}},
	abstract = {Use an Approach Inspired by Domain-Driven Design to Build Documentation That Evolves to Maximize Value Throughout Your Development Lifecycle Software documentation can come to life, stay dynamic, and actually help you build better software. Writing for developers, coding architects, and other software professionals, Living Documentation shows how to create documentation that evolves throughout your entire design and development lifecycle. Through patterns, clarifying illustrations, and concrete examples, Cyrille Martraire demonstrates how to use well-crafted artifacts and automation to dramatically improve the value of documentation at minimal extra cost. Whatever your domain, language, or technologies, you don’t have to choose between working software and comprehensive, high-quality documentation: you can have both. · Extract and augment available knowledge, and make it useful through living curation · Automate the creation of documentation and diagrams that evolve as knowledge changes · Use development tools to refactor documentation · Leverage documentation to improve software designs · Introduce living documentation to new and legacy environments},
	language = {en},
	publisher = {Addison-Wesley Professional},
	author = {Martraire, Cyrille},
	month = may,
	year = {2019},
	annote = {Google-Books-ID: 8\_6ZDwAAQBAJ},
}

@misc{nygard_documenting_500,
	title = {Documenting {Architecture} {Decisions}},
	url = {https://www.cognitect.com/blog/2011/11/15/documenting-architecture-decisions},
	language = {en-US},
	urldate = {2024-05-01},
	author = {Nygard, Michael},
	year = {500},
	note = {Publication Title: Cognitect.com},
}

@article{kassab_software_2018,
	title = {Software architectural patterns in practice: an empirical study},
	volume = {14},
	issn = {1614-5054},
	shorttitle = {Software architectural patterns in practice},
	url = {https://doi.org/10.1007/s11334-018-0319-4},
	doi = {10.1007/s11334-018-0319-4},
	abstract = {Software architecture involves a series of decisions based on many factors in a wide range of software development. Architects face recurring issues in different software architecture design, and to reduce huge cost and risks, software architecture decisions can rely on a set of idiomatic patterns commonly named architectural styles or patterns. Architectural pattern determines the vocabulary of components and connectors that are used in instances of the pattern together with a set of constraints to combine the two. Little contemporary data exists to document actual practices used by software professionals when selecting and incorporating architectural patterns for their projects in industry. Therefore, a comprehensive survey of software professionals was conducted to attempt to discover these practices. This exploratory survey and its quantitative results offer opportunities for further interpretation and comparison. Data from this survey are presented in this paper and include characteristics of projects, practices, organizations, and practitioners related to the usage of architectural patterns. Some of the notable findings include that architectural patterns are widely used in software projects with the Model–View–Controller being the most common. Despite reported difficulties in incorporating architectural patterns, the majority of the software professionals revealed that patterns were the most essential for completing the projects. The most difficult pattern to implement and the most expensive to adopt was the peer-to-peer, while the easiest was the client–server.},
	language = {en},
	number = {4},
	urldate = {2024-05-02},
	journal = {Innovations in Systems and Software Engineering},
	author = {Kassab, Mohamad and Mazzara, Manuel and Lee, JooYoung and Succi, Giancarlo},
	month = dec,
	year = {2018},
	keywords = {Software architecture},
	pages = {263--271},
	file = {PDF:/home/carlos/Research/Zotero/storage/IJEVM9ZP/Kassab et al. - 2018 - Software architectural patterns in practice an empirical study.pdf:application/pdf},
}

@misc{noauthor_open-source_nodate,
	title = {Open-source tool that uses simple textual descriptions to draw beautiful {UML} diagrams.},
	url = {https://plantuml.com/},
	abstract = {Easily create beautiful UML Diagrams from simple textual description. There are also numerous kind of available diagrams. It's also possible to export images in PNG, LaTeX, EPS, SVG.},
	language = {en},
	urldate = {2024-05-02},
	note = {Publication Title: PlantUML.com},
}

@misc{noauthor_microservices_nodate,
	title = {Microservices {Pattern}: {A} pattern language for microservices},
	shorttitle = {Microservices {Pattern}},
	url = {http://microservices.io/patterns/},
	urldate = {2024-12-02},
	journal = {microservices.io},
	file = {Snapshot:/home/carlos/Research/Zotero/storage/KES8NIJ3/index.html:text/html},
}

@article{stojanovic_application_2023,
	title = {The {Application} of {ChatGPT} for {Identification} of {Microservices}},
	volume = {3},
	copyright = {Copyright (c) 2023 Tatjana Stojanovic, Saša D. Lazarević},
	url = {https://ebt.rs/journals/index.php/conf-proc/article/view/181},
	abstract = {Identification and definition of microservices is one of the most important aspects of systems based on the microservices architecture. If the services are designed poorly, the overall performance and efficiency of the system might be even worse than with traditional systems. There are many approaches for proper identification of microservices and their boundaries. However, these approaches are usually carried out by software architects, meaning that the overall success of the system design depends on their skills, abilities and understanding of the entire system. This comprehensive task can be quite demanding, which leaves room for oversights and errors. Luckily, new technologies emerge daily, as well as new uses for those technologies, which make such difficult tasks a little bit easier. In this paper, utilization of the popular ChatGPT large language model for analyzing software requirements and identifying microservices is explored. Three different examples are presented along with recommended solutions, showing that usage of GPT for analyzing software requirement can be useful, but used with caution because of its drawbacks.},
	language = {en},
	number = {1},
	urldate = {2024-12-10},
	journal = {E-business technologies conference proceedings},
	author = {Stojanovic, Tatjana and Lazarević, Saša D.},
	month = jun,
	year = {2023},
	note = {Number: 1},
	pages = {99--105},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/MZIY8AP9/Stojanovic and Lazarević - 2023 - The Application of ChatGPT for Identification of Microservices.pdf:application/pdf},
}

@article{gueheneuc_demima_2008,
	title = {{DeMIMA}: {A} {Multilayered} {Approach} for {Design} {Pattern} {Identification}},
	volume = {34},
	issn = {1939-3520},
	shorttitle = {{DeMIMA}},
	url = {https://ieeexplore.ieee.org/document/4564471/?arnumber=4564471},
	doi = {10.1109/TSE.2008.48},
	abstract = {Design patterns are important in object-oriented programming because they offer design motifs, elegant solutions to recurrent design problems, which improve the quality of software systems. Design motifs facilitate system maintenance by helping to understand design and implementation. However, after implementation, design motifs are spread throughout the source code and are thus not directly available to maintainers. We present DeMIMA, an approach to identify semi-automatically micro-architectures that are similar to design motifs in source code and to ensure the traceability of these micro-architectures between implementation and design. DeMIMA consists of three layers: two layers to recover an abstract model of the source code, including binary class relationships, and a third layer to identify design patterns in the abstract model. We apply DeMIMA to five open-source systems and, on average, we observe 34\% precision for the considered 12 design motifs. Through the use of explanation-based constraint programming, DeMIMA ensures 100\% recall on the five systems. We also apply DeMIMA on 33 industrial components.},
	number = {5},
	urldate = {2024-12-11},
	journal = {IEEE Transactions on Software Engineering},
	author = {Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
	month = sep,
	year = {2008},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	pages = {667--684},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/6VPXHG3F/Guéhéneuc and Antoniol - 2008 - DeMIMA A Multilayered Approach for Design Pattern Identification.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/NNAM5ILA/4564471.html:text/html},
}

@article{tang_comparative_2010,
	title = {A comparative study of architecture knowledge management tools},
	volume = {83},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121209002295},
	doi = {10.1016/j.jss.2009.08.032},
	abstract = {Recent research suggests that architectural knowledge, such as design decisions, is important and should be recorded alongside the architecture description. Different approaches have emerged to support such architectural knowledge (AK) management activities. However, there are different notions of and emphasis on what and how architectural activities should be supported. This is reﬂected in the design and implementation of existing AK tools. To understand the current status of software architecture knowledge engineering and future research trends, this paper compares ﬁve architectural knowledge management tools and the support they provide in the architecture life-cycle. The comparison is based on an evaluation framework deﬁned by a set of 10 criteria. The results of the comparison provide insights into the current focus of architectural knowledge management support, their advantages, deﬁciencies, and conformance to the current architectural description standard. Based on the outcome of this comparison a research agenda is proposed for future work on AK tools.},
	language = {en},
	number = {3},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Tang, Antony and Avgeriou, Paris and Jansen, Anton and Capilla, Rafael and Ali Babar, Muhammad},
	month = mar,
	year = {2010},
	pages = {352--370},
	file = {PDF:/home/carlos/Research/Zotero/storage/7KAVQ3VX/Tang et al. - 2010 - A comparative study of architecture knowledge management tools.pdf:application/pdf},
}

@article{capilla_10_2016,
	title = {10 years of software architecture knowledge management: {Practice} and future},
	volume = {116},
	issn = {01641212},
	shorttitle = {10 years of software architecture knowledge management},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121215002034},
	doi = {10.1016/j.jss.2015.08.054},
	abstract = {The importance of architectural knowledge (AK) management for software development has been highlighted over the past ten years, where a signiﬁcant amount of research has been done. Since the ﬁrst systems using design rationale in the seventies and eighties to the more modern approaches using AK for designing software architectures, a variety of models, approaches, and research tools have leveraged the interests of researchers and practitioners in AK management (AKM). Capturing, sharing, and using AK has many beneﬁts for software designers and maintainers, but the cost to capture this relevant knowledge hampers a widespread use by software companies. However, as the improvements made over the last decade didn’t boost a wider adoption of AKM approaches, there is a need to identify the successes and shortcomings of current AK approaches and know what industry needs from AK. Therefore, as researchers and promoters of many of the AK research tools in the early stages where AK became relevant for the software architecture community, and based on our experience and observations, we provide in this research an informal retrospective analysis of what has been done and the challenges and trends for a future research agenda to promote AK use in modern software development practices.},
	language = {en},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Capilla, Rafael and Jansen, Anton and Tang, Antony and Avgeriou, Paris and Babar, Muhammad Ali},
	month = jun,
	year = {2016},
	pages = {191--205},
	file = {PDF:/home/carlos/Research/Zotero/storage/4EPRI6TE/Capilla et al. - 2016 - 10 years of software architecture knowledge management Practice and future.pdf:application/pdf},
}

@inproceedings{jahic_state_2024,
	title = {State of {Practice}: {LLMs} in {Software} {Engineering} and {Software} {Architecture}},
	shorttitle = {State of {Practice}},
	url = {https://ieeexplore.ieee.org/document/10628428/?arnumber=10628428},
	doi = {10.1109/ICSA-C63560.2024.00059},
	abstract = {Large Language Models (LLMs) are finding their way into Software Engineering by assisting with tasks such as code generation. Furthermore, LLMs might have a potential to perform even more complex tasks, such as suggesting architectural design. However, there is a lack of empirical surveys on how software engineering companies use (and plan to use) LLMs and if LLMs truly can provide benefits to software architects. To understand the state of practice considering adoption of LLMs in software engineering, existing challenges, and future trends, we have surveyed 15 different software engineering companies. To understand the ability of LLMs to perform more complex tasks, we report on our experiments with LLM-assisted architectural design. We applied ChatGPT on 5 software projects and in total performed 50 different experiments. Our results capture the state of the practice of LLMs in software engineering and demonstrate how LLMs perform when assisting with (more complex task such as) architectural design. Engineers, architects, and project managers should profit from these results to guide their decision towards targeted adoption of LLMs in their business and engineering domains.},
	urldate = {2024-12-11},
	booktitle = {2024 {IEEE} 21st {International} {Conference} on {Software} {Architecture} {Companion} ({ICSA}-{C})},
	author = {Jahić, Jasmin and Sami, Ashkan},
	month = jun,
	year = {2024},
	note = {ISSN: 2768-4288},
	pages = {311--318},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/5HTVLVMQ/Jahić and Sami - 2024 - State of Practice LLMs in Software Engineering and Software Architecture.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/ZWA2LA8Z/10628428.html:text/html},
}

@incollection{steffen_large_2024,
	address = {Cham},
	title = {Large {Language} {Model} {Assisted} {Software} {Engineering}: {Prospects}, {Challenges}, and a {Case} {Study}},
	volume = {14380},
	isbn = {978-3-031-46001-2 978-3-031-46002-9},
	shorttitle = {Large {Language} {Model} {Assisted} {Software} {Engineering}},
	url = {https://link.springer.com/10.1007/978-3-031-46002-9_23},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Bridging the {Gap} {Between} {AI} and {Reality}},
	publisher = {Springer Nature Switzerland},
	author = {Belzner, Lenz and Gabor, Thomas and Wirsing, Martin},
	editor = {Steffen, Bernhard},
	year = {2024},
	doi = {10.1007/978-3-031-46002-9_23},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {355--374},
	file = {PDF:/home/carlos/Research/Zotero/storage/DPTEPM6A/Belzner et al. - 2024 - Large Language Model Assisted Software Engineering Prospects, Challenges, and a Case Study.pdf:application/pdf},
}

@incollection{ampatzoglou_mapping_2024,
	address = {Cham},
	title = {Mapping {Source} {Code} to {Software} {Architecture} by {Leveraging} {Large} {Language} {Models}},
	volume = {14937},
	isbn = {978-3-031-70945-6 978-3-031-71246-3},
	url = {https://link.springer.com/10.1007/978-3-031-71246-3_13},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Software {Architecture}. {ECSA} 2024 {Tracks} and {Workshops}},
	publisher = {Springer Nature Switzerland},
	author = {Johansson, Nils and Caporuscio, Mauro and Olsson, Tobias},
	editor = {Ampatzoglou, Apostolos and Pérez, Jennifer and Buhnova, Barbora and Lenarduzzi, Valentina and Venters, Colin C. and Zdun, Uwe and Drira, Khalil and Rebelo, Luciana and Di Pompeo, Daniele and Tucci, Michele and Nakagawa, Elisa Yumi and Navarro, Elena},
	year = {2024},
	doi = {10.1007/978-3-031-71246-3_13},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {133--149},
	file = {PDF:/home/carlos/Research/Zotero/storage/BYITQEWL/Johansson et al. - 2024 - Mapping Source Code to Software Architecture by Leveraging Large Language Models.pdf:application/pdf},
}

@inproceedings{pan_machine_2023,
	address = {Seoul, Korea, Republic of},
	title = {A {Machine} {Learning} {Based} {Approach} to {Detect} {Machine} {Learning} {Design} {Patterns}},
	copyright = {https://doi.org/10.15223/policy-029},
	isbn = {979-8-3503-4417-2},
	url = {https://ieeexplore.ieee.org/document/10479389/},
	doi = {10.1109/APSEC60848.2023.00073},
	abstract = {As machine learning expands to various domains, the demand for reusable solutions to similar problems increases. Machine learning design patterns are reusable solutions to design problems of machine learning applications. They can significantly enhance programmers’ productivity in programming that requires machine learning algorithms. Given the critical role of machine learning design patterns, the automated detection of them becomes equally vital. However, identifying design patterns can be time-consuming and error-prone. We propose an approach to detect their occurrences in Python files. Our approach uses an Abstract Syntax Tree (AST) of Python files to build a corpus of data and train a refined Text-CNN model to automatically identify machine learning design patterns. We empirically validate our approach by conducting an exploratory study to detect four common machine learning design patterns: Embedding, Multilabel, Feature Cross, and Hashed Feature. We manually label 450 Python code files containing these design patterns from repositories of projects in GitHub. Our approach achieves accuracy values ranging from 80\% to 92\% for each of the four patterns.},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {2023 30th {Asia}-{Pacific} {Software} {Engineering} {Conference} ({APSEC})},
	publisher = {IEEE},
	author = {Pan, Weitao and Washizaki, Hironori and Yoshioka, Nobukazu and Fukazawa, Yoshiaki and Khomh, Foutse and Guéhéneuc, Yann–Gaël},
	month = dec,
	year = {2023},
	pages = {574--578},
	file = {PDF:/home/carlos/Research/Zotero/storage/DSNZF333/Pan et al. - 2023 - A Machine Learning Based Approach to Detect Machine Learning Design Patterns.pdf:application/pdf},
}

@incollection{franch_detection_2014,
	address = {Berlin, Heidelberg},
	title = {Detection of {REST} {Patterns} and {Antipatterns}: {A} {Heuristics}-{Based} {Approach}},
	volume = {8831},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-3-662-45390-2 978-3-662-45391-9},
	shorttitle = {Detection of {REST} {Patterns} and {Antipatterns}},
	url = {http://link.springer.com/10.1007/978-3-662-45391-9_16},
	abstract = {REST (REpresentational State Transfer), relying on resources as its architectural unit, is currently a popular architectural choice for building Web-based applications. It is shown that design patterns—good solutions to recurring design problems—improve the design quality and facilitate maintenance and evolution of software systems. Antipatterns, on the other hand, are poor and counter-productive solutions. Therefore, the detection of REST patterns and antipatterns is essential for improving the maintenance and evolution of RESTful systems. Until now, however, no approach has been proposed. In this paper, we propose SODA-R (Service Oriented Detection for Antipatterns in REST), a heuristics-based approach to detect patterns and antipatterns in RESTful systems. We deﬁne detection heuristics for eight REST antipatterns and ﬁve patterns, and perform their detection on a set of 12 widely-used REST APIs including BestBuy, Facebook, and DropBox. The results show that SODA-R can perform the detection of REST patterns and antipatterns with high accuracy. We also found that Twitter, DropBox, and Alchemy are not welldesigned, i.e., contain more antipatterns. In contrast, Facebook, BestBuy, and YouTube are well-designed, i.e., contain more patterns and less antipatterns.},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer Berlin Heidelberg},
	author = {Palma, Francis and Dubois, Johann and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	editor = {Franch, Xavier and Ghose, Aditya K. and Lewis, Grace A. and Bhiri, Sami},
	year = {2014},
	doi = {10.1007/978-3-662-45391-9_16},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {230--244},
	file = {PDF:/home/carlos/Research/Zotero/storage/V2RNN3XJ/Palma et al. - 2014 - Detection of REST Patterns and Antipatterns A Heuristics-Based Approach.pdf:application/pdf},
}

@article{tighilt_collection_nodate,
	title = {Collection and {Identiﬁcation} {Of} {Microservices} {Patterns} {And} {Antipatterns}},
	abstract = {Microservices architectural style is becoming more and more popularin academia and industry. However, a lack of understanding of its core conceptsand the absence of ground-truth leads to a lot of misconceptions and develop-ment mistakes. In our research work, we aim to clarify the academic knowledge on microservices through the collection and the automatic identiﬁcation of microservices patterns and anti-patterns. To this end, we aim to (1) introduce an exhaustive collection of microservices (anti-)patterns, and (2) propose anautomatic approach for the identiﬁcation of (anti-)patterns in microservice based systems. The continuous integration and continuous delivery for microservices can introduce anti-patterns that may affect the maintainability of the system and decrease its quality. Thus, we searched for re-engineering tools used to identify (anti-)patterns in microservice based systems. The results of our analysis showed that there is no fully-automated identiﬁcation approach in the literature. This motivates us to propose (anti-)patterns for the identiﬁcation process as a ﬁrst step and then investigate how we can automatically identify them from the artifacts of microservice based systems.},
	language = {en},
	author = {Tighilt, Raﬁk and Abdellatif, Manel and Saad, Nader Abu and Moha, Naouel and Guéhéneuc, Yann-Gaël},
	file = {PDF:/home/carlos/Research/Zotero/storage/GCQPVYQT/Tighilt et al. - Collection and Identiﬁcation Of Microservices Patterns And Antipatterns.pdf:application/pdf},
}

@inproceedings{antoniol_design_1998,
	address = {Ischia, Italy},
	title = {Design pattern recovery in object-oriented software},
	isbn = {978-0-8186-8560-6},
	url = {http://ieeexplore.ieee.org/document/693342/},
	doi = {10.1109/WPC.1998.693342},
	abstract = {An approach to recover object oriented design patterns from design and code is presented. The pattern recovery process is based on a multi-stage ﬁltering strategy to avoid combinatorial explosion on large software systems.},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Proceedings. 6th {International} {Workshop} on {Program} {Comprehension}. {IWPC}'98 ({Cat}. {No}.{98TB100242})},
	publisher = {IEEE Comput. Soc},
	author = {Antoniol, G. and Fiutem, R. and Cristoforetti, L.},
	year = {1998},
	pages = {153--160},
	file = {PDF:/home/carlos/Research/Zotero/storage/EUZQWSFN/Antoniol et al. - 1998 - Design pattern recovery in object-oriented software.pdf:application/pdf},
}

@article{antoniol_object-oriented_2001,
	title = {Object-oriented design patterns recovery},
	volume = {59},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121201000619},
	doi = {10.1016/S0164-1212(01)00061-9},
	abstract = {Object-Oriented +OO) design patterns are an emergent technology: they are reusable micro-architectures, high-level building blocks. A system which has been designed using well-known, documented and accepted design patterns is also likely to exhibit good properties such as modularity, separation of concerns and maintainability. While for forward engineering the bene®ts of using design patterns are clear, using reverse engineering technologies to discover instances of patterns in a software artifact +e.g., design or code) may help in several key areas, among which are program understanding, design-to-code traceability and quality assessment. This paper describes a conservative approach and experimental results, based on a multi-stage reduction strategy using OO software metrics and structural properties to extract structural design patterns from OO design or C++ code. To assess the e ectiveness of the pattern recovery approach, a process and a portable tool suite written in Java, remotely accessible by means of any WEB browser, has been developed. The developed system and experimental results on 8 industrial software +design and code) and 200,000 lines of public domain C++ code are presented. Ó 2001 Elsevier Science Inc. All rights reserved.},
	language = {en},
	number = {2},
	urldate = {2024-12-11},
	journal = {Journal of Systems and Software},
	author = {Antoniol, G. and Casazza, G. and Di Penta, M. and Fiutem, R.},
	month = nov,
	year = {2001},
	pages = {181--196},
	file = {PDF:/home/carlos/Research/Zotero/storage/TNPLFJ23/Antoniol et al. - 2001 - Object-oriented design patterns recovery.pdf:application/pdf},
}

@article{tonella_inference_2001,
	title = {Inference of object‐oriented design patterns},
	volume = {13},
	copyright = {http://onlinelibrary.wiley.com/termsAndConditions\#vor},
	issn = {1532-060X, 1532-0618},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/smr.235},
	doi = {10.1002/smr.235},
	abstract = {When designing a new application, experienced software engineers usually adopt solutions that have proven successful in previous projects. Such reuse of code organizations is seldom made explicit. Nevertheless, it represents important information, which can be extremely valuable in the maintenance phase by documenting the design choices underlying the implementation. In addition it can be reused whenever a similar problem is encountered. In this paper an approach for the inference of recurrent design patterns directly from the code is proposed. No assumption is made on the availability of any pattern library, and the concept analysis algorithm—adapted for this purpose—is able to infer the presence of class groups which instantiate a common, repeated pattern. In fact, concept analysis provides sets of objects sharing attributes, which—in the case of object-oriented design patterns—become class members or inter-class relations. The approach was applied to three C++ applications for which the structural relations among classes led to the extraction of a set of design patterns, which could be enriched with non-structural information about class members and method invocations. The resulting patterns could be interpreted as meaningful organizations aimed at solving general problems which have several instances in the applications analyzed. Copyright  2001 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {5},
	urldate = {2024-12-11},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	author = {Tonella, Paolo and Antoniol, Giulio},
	month = sep,
	year = {2001},
	pages = {309--330},
	file = {PDF:/home/carlos/Research/Zotero/storage/8GITEPU7/Tonella and Antoniol - 2001 - Inference of object‐oriented design patterns.pdf:application/pdf},
}

@incollection{hutchison_building_2006,
	address = {Berlin, Heidelberg},
	title = {Building {Up} and {Reasoning} {About} {Architectural} {Knowledge}},
	volume = {4214},
	isbn = {978-3-540-48819-4 978-3-540-48820-0},
	url = {http://link.springer.com/10.1007/11921998_8},
	urldate = {2024-12-12},
	booktitle = {Quality of {Software} {Architectures}},
	publisher = {Springer Berlin Heidelberg},
	author = {Kruchten, Philippe and Lago, Patricia and Van Vliet, Hans},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard and Hofmeister, Christine and Crnkovic, Ivica and Reussner, Ralf},
	year = {2006},
	doi = {10.1007/11921998_8},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {43--58},
	file = {PDF:/home/carlos/Research/Zotero/storage/RJSNLYT7/Kruchten et al. - 2006 - Building Up and Reasoning About Architectural Knowledge.pdf:application/pdf},
}

@article{fowler_patterns_2003,
	title = {Patterns [software patterns]},
	volume = {20},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {0740-7459, 1937-4194},
	url = {https://ieeexplore.ieee.org/document/1184168/},
	doi = {10.1109/MS.2003.1184168},
	language = {en},
	number = {2},
	urldate = {2024-12-12},
	journal = {IEEE Software},
	author = {Fowler, M.},
	month = mar,
	year = {2003},
	pages = {56--57},
	file = {PDF:/home/carlos/Research/Zotero/storage/IH399BY7/Fowler - 2003 - Patterns [software patterns].pdf:application/pdf},
}

@inproceedings{ding_focus_2001,
	title = {Focus: a light-weight, incremental approach to software architecture recovery and evolution},
	shorttitle = {Focus},
	url = {https://ieeexplore.ieee.org/document/948429/?arnumber=948429},
	doi = {10.1109/WICSA.2001.948429},
	abstract = {During the past decade (1991-2001), object-orientation (OO) has become the dominant software development methodology, accompanied by a number of modeling notations, programming languages, and development environments. OO applications of today are increasingly complex and user driven. They are also developed more rapidly and evolved more frequently than was the case with software systems of the past. All of these factors contribute to a plethora of potential problems when maintaining and evolving an OO application. These problems are caused by architectural erosion, where the initial architecture of an application is (arbitrarily) modified to the point where its key properties no longer hold. We propose an approach, called Focus, whose goal is to enable effective evolution of such an application with minimal effort, by recovering its architecture and using it as the basis of evolution. Focus allows engineers to direct their primary attention to the part of the system that is directly impacted by the desired change; subsequent changes will incrementally uncover additional parts of the system's architecture. We have applied Focus to four off-the-shelf applications to date. We discuss its key strengths and point out several open issues that will frame our future work.},
	urldate = {2024-12-12},
	booktitle = {Proceedings {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture}},
	author = {Ding, Lei and Medvidovic, N.},
	month = aug,
	year = {2001},
	pages = {191--200},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/WAW9SB5U/Ding and Medvidovic - 2001 - Focus a light-weight, incremental approach to software architecture recovery and evolution.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/ZU2C56V7/948429.html:text/html},
}

@incollection{de_paoli_microservices_2017,
	address = {Cham},
	title = {Microservices {Identification} {Through} {Interface} {Analysis}},
	volume = {10465},
	isbn = {978-3-319-67261-8 978-3-319-67262-5},
	url = {https://link.springer.com/10.1007/978-3-319-67262-5_2},
	abstract = {The microservices architectural style is gaining more and more momentum for the development of applications as suites of small, autonomous, and conversational services, which are then easy to understand, deploy and scale. One of today’s problems is ﬁnding the adequate granularity and cohesiveness of microservices, both when starting a new project and when thinking of transforming, evolving and scaling existing applications. To cope with these problems, the paper proposes a solution based on the semantic similarity of foreseen/available functionality described through OpenAPI speciﬁcations. By leveraging a reference vocabulary, our approach identiﬁes potential candidate microservices, as ﬁne-grained groups of cohesive operations (and associated resources). We compared our approach against a state-of-the-art tool, sampled microservices-based applications and decomposed a large dataset of Web APIs. Results show that our approach is able to ﬁnd suitable decompositions in some 80\% of the cases, while providing early insights about the right granularity and cohesiveness of obtained microservices.},
	language = {en},
	urldate = {2024-12-12},
	booktitle = {Service-{Oriented} and {Cloud} {Computing}},
	publisher = {Springer International Publishing},
	author = {Baresi, Luciano and Garriga, Martin and De Renzis, Alan},
	editor = {De Paoli, Flavio and Schulte, Stefan and Broch Johnsen, Einar},
	year = {2017},
	doi = {10.1007/978-3-319-67262-5_2},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {19--33},
	file = {PDF:/home/carlos/Research/Zotero/storage/I4FCNPFL/Baresi et al. - 2017 - Microservices Identification Through Interface Analysis.pdf:application/pdf},
}

@inproceedings{bakhtin_survey_2022,
	title = {Survey on {Tools} and {Techniques} {Detecting} {Microservice} {API} {Patterns}},
	url = {https://ieeexplore.ieee.org/document/9860229/?arnumber=9860229},
	doi = {10.1109/SCC55611.2022.00018},
	abstract = {It is well recognized that design patterns improve system development and maintenance in many aspects. While we commonly recognize these patterns in monolithic systems, many patterns emerged for cloud computing, specifically microservices. Unfortunately, while various patterns have been proposed, available quality assessment tools often do not recognize many. This article performs a grey literature review to find and catalog available tools to detect microservice API patterns (MAP). It reasons about mechanisms that can be used to detect these patterns. Furthermore, the results indicate gaps and opportunities for improvements for quality assessment tools. Finally, the reader is provided with a route map to detection techniques that can be used to mine MAPs.},
	urldate = {2024-12-12},
	booktitle = {2022 {IEEE} {International} {Conference} on {Services} {Computing} ({SCC})},
	author = {Bakhtin, Alexander and Al Maruf, Abdullah and Cerny, Tomas and Taibi, Davide},
	month = jul,
	year = {2022},
	note = {ISSN: 2474-2473},
	keywords = {Important},
	pages = {31--38},
	file = {Full Text PDF:/home/carlos/Research/Zotero/storage/Z92IWYH5/Bakhtin et al. - 2022 - Survey on Tools and Techniques Detecting Microservice API Patterns.pdf:application/pdf;IEEE Xplore Abstract Record:/home/carlos/Research/Zotero/storage/F5QLD2G8/9860229.html:text/html},
}

@incollection{dustdar_qualitative_2020,
	address = {Cham},
	title = {A {Qualitative} {Literature} {Review} on {Microservices} {Identification} {Approaches}},
	volume = {1310},
	isbn = {978-3-030-64845-9 978-3-030-64846-6},
	url = {https://link.springer.com/10.1007/978-3-030-64846-6_9},
	abstract = {Microservices has become a widely used and discussed architectural style for designing modern applications due to advantages like granular scalability and maintainability. However, it is still a complex task decomposing an application into microservices. Software architects often design architectures manually. In this paper we give a state-of-theart overview of current approaches to identifying microservices. Therefore we use a literature review and classify the content based on the software development process.},
	language = {en},
	urldate = {2024-12-12},
	booktitle = {Service-{Oriented} {Computing}},
	publisher = {Springer International Publishing},
	author = {Schröer, Christoph and Kruse, Felix and Marx Gómez, Jorge},
	editor = {Dustdar, Schahram},
	year = {2020},
	doi = {10.1007/978-3-030-64846-6_9},
	note = {Series Title: Communications in Computer and Information Science},
	pages = {151--168},
	file = {PDF:/home/carlos/Research/Zotero/storage/6G925UU6/Schröer et al. - 2020 - A Qualitative Literature Review on Microservices Identification Approaches.pdf:application/pdf},
}

@misc{richardson_what_nodate,
	title = {What are microservices?},
	url = {http://microservices.io/index.html},
	abstract = {Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of loosely coupled services, which implement business capabilities. The microservice architecture enables the continuous delivery/deployment of large, complex applications. It also enables an organization to evolve its technology stack.},
	urldate = {2024-12-12},
	journal = {microservices.io},
	author = {Richardson, Chris},
	file = {Snapshot:/home/carlos/Research/Zotero/storage/PGGZFUVW/microservices.io.html:text/html},
}

@misc{noauthor_kongkong_2024,
	title = {Kong/kong},
	copyright = {Apache-2.0},
	url = {https://github.com/Kong/kong},
	abstract = {🦍 The Cloud-Native API Gateway and AI Gateway.},
	urldate = {2024-12-12},
	publisher = {Kong},
	month = dec,
	year = {2024},
	note = {original-date: 2014-11-17T23:56:08Z},
	keywords = {ai, ai-gateway, api-gateway, api-management, apis, artificial-intelligence, cloud-native, consul, devops, docker, kong, kubernetes, kubernetes-ingress, kubernetes-ingress-controller, luajit, microservice, microservices, nginx, reverse-proxy, serverless},
}

@inproceedings{daniel_towards_2023,
	address = {Durres, Albania},
	title = {Towards the {Detection} of {Microservice} {Patterns} {Based} on {Metrics}},
	copyright = {https://doi.org/10.15223/policy-029},
	isbn = {979-8-3503-4235-2},
	url = {https://ieeexplore.ieee.org/document/10371525/},
	doi = {10.1109/SEAA60479.2023.00029},
	urldate = {2024-12-17},
	booktitle = {2023 49th {Euromicro} {Conference} on {Software} {Engineering} and {Advanced} {Applications} ({SEAA})},
	publisher = {IEEE},
	author = {Daniel, João and Guerra, Eduardo and Rosa, Thatiane and Goldman, Alfredo},
	month = sep,
	year = {2023},
	pages = {132--139},
	file = {PDF:/home/carlos/Research/Zotero/storage/U5I57F94/Daniel et al. - 2023 - Towards the Detection of Microservice Patterns Based on Metrics.pdf:application/pdf},
}
