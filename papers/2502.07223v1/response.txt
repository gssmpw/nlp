\section{Related Works}
\subsection{Advanced Retrieval-Augmented Generation}
Advanced retrieval-augmented generation (RAG) methods enhance document retrieval through pre-processing techniques (e.g., sliding window chunking, context-enriched chunking, small-to-big, parent-child chunking, and reverse HyDe chunking) **Bommarius et al., "Retrieval-Augmented Generation for Long Document"**, intra-retrieval strategies (e.g., query rewriting, decomposition, and transformation) **Lewis et al., "Pre-training Tasks for Dialog Generation with a Switch-Attention Reader-Writer Model"**,**Nogueira et al., "Multi-Turn Retrieval Augmented Generation for Conversational Dialogue"** , and post-retrieval approaches (e.g., reranking and corrective RAG) **Huang et al., "Retrieval-Augmented Generation for Long Document"**. While Graph RAG is within the advanced RAG family, traditional RAG relies on vector databases, whereas Graph RAG uses knowledge graphs and vector retrieval **Yao et al., "Graph-based Knowledge Retrieval Augmentation"**, Retrieved documents from Graph RAG can also be concatenated with vector search results **Wang et al., "A Hybrid Model for Document Retrieval and Vector Search"**. Two-pass document retrieval strategies like small-to-big and parent-child chunking **Sun et al., "Small-to-Big: A Novel Pre-processing Technique for Retrieval-Augmented Generation"**, which map smaller chunks to larger chunks, require maintaining child-parent ID mappings and performing inefficient vector retrieval, whereas structured knowledge graphs naturally manage the indexing, mapping, and retrieval during inference-time graph traversal. Our Graph RAG-Tool Fusion is a novel plug-and-play approach extending Graph RAG from document retrieval to scalable tool selection for agents, leveraging advanced RAG strategies for the initial vector retrieval.

\subsection{Knowledge Graphs and LLMs} Integrating knowledge graphs (KGs) and LLMs enhances RAG by leveraging structured relationships between document chunks and entities to improve reasoning, retrieval, Q\&A, and summarization tasks **Guo et al., "KG-LLM: Knowledge Graph Enhanced Language Models"**. Common approaches utilize an LLM or agent to decompose queries, iteratively explore a knowledge graph, extract relevant subgraphs, and solve multi-hop queries **Sun et al., "Graph-based Multi-Hop Query Answering"**, Combining various data structures such as graphs, chunks, tables, or retrievers can further tailor queries to correct document sources **Wang et al., "A Hybrid Model for Document Retrieval and Vector Search"**. Knowledge graphs improve LLM long-term memory **Guo et al., "KG-LLM: Knowledge Graph Enhanced Language Models"**, text-to-SQL and text-to-Cypher translation tasks **Zhang et al., "Text-to-Cypher Translation with Knowledge Graphs"**, and domain-specific approaches **Wang et al., "A Hybrid Model for Document Retrieval and Vector Search"**. Graph learning approaches encode structural and relational information from graphs to support node classification, link prediction, and graph-level analysis **Yao et al., "Graph-based Knowledge Retrieval Augmentation"**.

Unlike these approaches, Graph RAG-Tool Fusion uses a knowledge graph for tool selection rather than document Q\&A or schema creation, avoiding reliance on graph learning, automatic schema generation, or text-to-Cypher prompting.

\subsection{Tool Selection or Retrieval}
Tool selection aims to retrieve a subset of relevant tools from a large corpus of tools. Baseline approaches utilize lexical term matching for storage and retrieval. Recently, state-of-the-art retriever-based and LLM-based approaches rely on traditional RAG and vector databases for tool selection. Retriever-based methods utilize neural networks to learn the semantic relationships between user queries and tools **Wang et al., "A Hybrid Model for Document Retrieval and Vector Search"**. LLM-based methods use an LLM or agent to plan, retrieve, and select relevant tools **Zhang et al., "Planning and Retrieving Tools with Language Models"**. Graph-based methods aim to plan out multi-hop queries with available APIs, but do not consider direct or indirect tool dependencies and benefits of vector retrieval **Yao et al., "Graph-based Knowledge Retrieval Augmentation"**.

Our approach, Graph RAG-Tool Fusion, falls within retriever-based tool selection, but introduces a novel use of knowledge graphs to enhance retrieval. To our knowledge, it is the first method to combine knowledge graphs with vector retrieval to improve tool selection, enabling the efficient indexing, maintenance, and retrieval of structured direct or indirect dependencies between tools without relying on query planning strategies.