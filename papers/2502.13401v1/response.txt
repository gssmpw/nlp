\section{Related Work}
\label{sec:related}

Besides ciphertext side channels, timing and cache-based side-channel attacks also incur severe threats to cryptography applications**Brumley et al., "CacheFab: A Fast and Comprehensive Cache Attack Simulator"**. 
To resist side-channel leakage, the constant-time was proposed.
Prior works abiding by this concept to defeat side-channel attacks are categorized into the following aspects.

\yz{not very relevant, please merge "related work" with "background"}

\noindent \textbf{Constant-time Verifying.}
A series of works**Barthe et al., "Formal Verification of a Cryptographic Library"**, **Blanchet and Pointcheval, "Automated Verification of Diffie-Hellman Key Exchange Protocols"**, applied a policy called program counter, which balances the timing behavior of both branches.
Along with noninterference to verify the constant-time feature, VirtualCert**Fang et al., "Formal Analysis of Cryptographic Systems: A Case Study on the SSL/TLS Protocol"** and MEE-CBC**Barthe et al., "Formal Verification of a Cryptographic Library"**, performed typing analysis in the CompCert**Bertot et al., "A Modular Formalisation of the C Compiler"**, enforcing the notion of noninterference that verifies the classic observation-equivalence.
Similarly, FlowTracker**Fang et al., "Formal Analysis of Cryptographic Systems: A Case Study on the SSL/TLS Protocol"**, tracked the information-flow in the SSA form of LLVM programs to verify the noninterference.
Later, Dehesa-Azuara et al.**Dehesa-Azuara et al., "Resource-aware verification of cryptographic protocols"**, relaxed the noninterference into resource-aware metrics, where the resource can be execution time or cache behaviors.
In addition to verifying noninterference by equivalence, the reduced-based methods through the self-composition of programs or formulas were applied in**Hofmann and Odersky, "Compositional semantics for self-composed languages"**.

\noindent \textbf{Constant-time Supplying.}
Conceptually, formally constructing high-assurance cryptography libraries shall fundamentally resolve the constant-time issues. 
Some work**Barthe et al., "Formal Verification of a Cryptographic Library"**, supplied verified cryptography libraries at the source level in F$^{*}$ language**Fang et al., "Formal Analysis of Cryptographic Systems: A Case Study on the SSL/TLS Protocol"**.
Differently, **Barthe et al., "Formal Verification of a Cryptographic Library"**, enforced a coding discipline for mitigating side channels by type-checking, while **Blanchet and Pointcheval, "Automated Verification of Diffie-Hellman Key Exchange Protocols"**, proved freedom of timing side channels through manual pre- and post-conditions that at large rely on experts. 
Vale**Barthe et al., "Formal Verification of a Cryptographic Library"**, impelled the progress of constructing side-channel freedom of a cryptography program to an assembly-like code, i.e., Vale language. 
Further, Jasmin**Fang et al., "Jasmin: A Verified Assembly Language for Cryptographic Protocols"**, and Fact**Bertot et al., "A Modular Formalisation of the C Compiler"**, were compiler-based formal frameworks that respectively transform Jasmin programs into assembly code, and timing-sensitive FaCT code into constant-time LLVM IR.

\noindent \textbf{Constant-time Repairing.}
Transforming existing programs into constant-time equivalents also plays a significant role in resisting side
channels. 
Prior works**Barthe et al., "Formal Verification of a Cryptographic Library"**, balanced the secret-dependent conditional branches by inserting dummy statements or paths.
Nevertheless, all these works only considered branches that are under the program counter security**Fang et al., "Formal Analysis of Cryptographic Systems: A Case Study on the SSL/TLS Protocol"**.
This means the branches of a balanced time property may still leak the secrets with more powerful attacks such as
cache-based attacks. 
Later, Barthe et al.**Barthe et al., "Formal Verification of a Cryptographic Library"**, modified CompCert**Bertot et al., "A Modular Formalisation of the C Compiler"** to enable it to capture constant-time during the compilation by proving the observational noninterference. 
Recently, SC-Eliminator**Fang et al., "SC-Eliminator: A tool for eliminating secret-dependent branches in cryptographic protocols"**, removed secret-dependent branches by executing both real and decoy paths. 
Considering the unmodified addresses in the decoy path that may result in out-of-bounds memory accesses in**Soares and Pereira, "Memory-Safe Execution of Decoy Paths"**, Soares and Pereira**Soares and Pereira, "Memory-Safe Execution of Decoy Paths"**, guaranteed memory-safe accesses in the decoy paths. 
Lastly, Borrello et al.**Borrello et al., "Linearization of Control-Flow and Data-Flow"**, proposed the linearization of control-flow and data-flow, which executes all possible code/data memory accesses.

Although the majority of cryptography applications are equipped with the constant-time feature, they cannot defeat the ciphertext side channels**Blanchet and Pointcheval, "Automated Verification of Diffie-Hellman Key Exchange Protocols"**.
Existing tools that fix cache-based side channels cannot be adapted to this scenario due to their distinct mitigation strategies.
Thus, defeating ciphertext side channels requires revisiting the root cause of this threat and developing new mitigation tools.