\section{Related Work}
\label{related_work}

%We discuss prior works, including temporary property analysis, termination analysis, encoding temporal properties using different kinds of Datalog semantics, and techniques for model repair. 


%-based program analysis for temporal, 

\vspace{-2mm}
\noindent\paragraph{\textbf{Program analyses for Temporal properties}} 

Most existing approaches for proving
program properties expressed in CTL have limitations upon the type of the infinite-state programs, such as pushdown systems **Emerson, "Extensions to Linear-Time and Branching-Time Temporal Logic"**__**, parameterized
systems **Boker and Trivedi, "Specifications of Transient Properties"**__**, timed systems **Alur, Henzinger, and Veith, "Parametric Timing Analysis for Programs"**__. 
Other approaches for proving CTL properties do not reliably support CTL formulas with arbitrary nesting of universal and existential path quantifiers **Clarke et al., "Model Checking for Temporal Verification"**__**, 
or support existential path quantifiers only indirectly by building upon the prior works 
for proving non-termination **Kahlon, Rinetzky, and Sagiv, "The Benefits of Well Structured Programs and Their Applications"**__**, or by considering their universal dual (\terminator) ____. In particular, the latter approach is problematic: since the universal dual of an existential ``until'' formula is non-trivial to define, **Bultan et al., "Checking Suggestions for Counterexamples"** demonstrated that the current implementation of \terminator does not support such formulas. 

\function____ presents a CTL properties analyser via abstract interpretation. It deploys a backward analysis to propagate the weakest preconditions, which make the program satisfy the property. While being the first work to deal with a full class of CTL properties, it has several sources of the loss of precision, such as the \emph{dual widening} **Beyer et al., "SMT-Based Regular Expression Inference"** technique for proving the termination of loops. On top of that, to achieve a sound analysis, it alternatively applies the over/under approximation operators for dealing with existential/universal quantifiers, which also cause imprecision when mixed abstract domains occur. 
Notably, the experimental result of \function shows that none of the temporal analysis tools (among T2, \ultimate, and \function) subsumes the others. 
This observation highlights the collaborative power of their combination, which proves to be more potent than any of the tools used in isolation. 



Apart from the temporal property analysis with CTL, an earlier approach  **Gastin and Oddoux, "A Fresh View on Linear Temporal Logic"** reduces the LTL model checking problem to fair termination checking. For the same purpose, \ultimate ____ presents a new approach exploiting the fact that constructing a proof of unsatisfiability is less costly than synthesizing ranking functions. 
Specifically, it selects finite prefixes of a path and checks their infeasibility before considering the full infinite path, verifying the liveness property with finite prefixes without the construction ranking functions. 
Compared to **Gastin and Oddoux, "A Fresh View on Linear Temporal Logic"** , \ultimateshort can be seen as an improvement as it only uses fair termination checking when necessary, which avoids many (more costly) termination checks. 
Following the spirit, \toolName~ decouples the termination analysis from the CTL analysis and leverages the continuously advancing techniques upon ranking function synthesis  **Kahlon, Rinetzky, and Sagiv, "The Benefits of Well Structured Programs and Their Applications"** , thus contributing to a more efficient and precise CTL analysis. 


\vspace{-1mm}
\noindent\paragraph{\textbf{Loop Summarization and Termination Analysis}}
A loop summary captures the relationship between the inputs and outputs of a loop as a set of symbolic constraints.
Loop summarization has been used widely in static analysis **Beyer et al., "SMT-Based Regular Expression Inference"** , which primarily computes the terminating program fragments, as well as dynamic test generation **RÃ¼mmer et al., "Automated Termination Analysis"** , which discovers the loop structure of the program on the fly via detecting induction variables. However, little attention has been put on summarizing non-terminating program executions. 

On the other hand, termination is an important correctness property in itself and is a sub-problem of proving total correctness and liveness properties. Deciding on the termination of programs is probably the most famous problem in computer science. Synthesizing ranking functions for programs is a standard way to prove the termination of programs. 
Similar representations to our $\omegaRE$ have been deployed in prior works **Kahlon, Rinetzky, and Sagiv, "The Benefits of Well Structured Programs and Their Applications"** to serve intermediate steps, such as computing the ranking function, in proving termination. 



Unlike the prior approach, instead of synthesizing a ranking function, we assume the ranking function is given and propagate summaries for both terminating and non-terminating behaviors, represented in $\omegaRE$.  
The direct benefit of our approach is that the CTL analysis stands alone away from the termination analysis and takes advantage of existing complete algorithms for various classes of ranking functions, such as linear, linear-lexicographic, nested, multi-phase, etc. 
In addition, it can further deploy the tools for more complicated ranking functions, such as for polynomial loops; thus, it handles more real-world programs extensively. 


%Furthermore, to ease the pain of providing the ranking functions, we also formalize a simple (but sound) procedure for inferring them when possible. 
%Note that the soundness of our approach does not reply to the precision of the provided/inferred ranking function, yet it does affect the completeness, i.e.,  there exists a patch, but we cannot find it. 
%Our approach also draws similarities to prior works **Bultan et al., "Checking Suggestions for Counterexamples"** , we use $\omega$-regular expressions as the intermediate representation of the infinite behaviors. However, one of the differences is we summarise the behaviours for finite time trace repetitions instead of the Kleene star $\star$ commonly deployed previously. 









\vspace{-1mm}
\noindent\paragraph{\textbf{Datalog Temporal Analysis}}

To enable the expressivity for CTL properties using Datalog, prior works ____ 
present Datalog LITE, a new deductive query language. Datalog LITE is a variant of Datalog that uses stratified negation, restricted variable occurrences, and a limited form of universal quantification in rule bodies. 
We borrow their encoding of the AF operator, 
%(cf. \figref{fig:AF_encoding}), 
which requires the finiteness of the input Kripke structure. 
This encoding also follows from the facts that, over finite structures, CTL can be embedded into transitive closure logic **Bultan et al., "Checking Suggestions for Counterexamples"** and that transitive closure logic has the same expressive power as stratified linear Datalog programs ____ . 
In parallel with the above mentioned works, ____ 
provides a direct and modular translation from CTL and the Modal $\mu$-calculus to Monadic inf-Datalog, with built-in predicates. Inf-Datalog has slightly different semantics from the conventional Datalog least fixed point semantics in that it allows for inductive definitions ____ . 


\vspace{-1mm}
\noindent\paragraph{\textbf{Model Repair}}

In ____ , the repair problem for CTL is considered and solved using adductive reasoning. The method generates repair suggestions that must then be
verified by model checking, one at a time. In contrast, we fix all faults at
once. 
Program Repair as a Game____, 
considers only one repair at a time, and their method is complete only for invariants. 
In 
____ , the approach of ____ is extended so that multiple faults are considered at once, and 
it assumes that the specification is given in linear-time
temporal logic and state the localization and correction problem as a game that
is won if there is a correction that is valid for all possible inputs. 
To cope with more realistic systems, 
our approach differs from the above-mentioned model repair in a way that model repair targets models -- either Kripke structure or Petri nets. In contrast, our approach targets 
%(possibly infinite state) 
real-world programs, which may involve different language features, especially loops. 
To the best of the authors' knowledge, this is the first work to provide the CTL repair solution at the source code level. We prove its usefulness using real-world benchmarks, which no prior work has achieved.