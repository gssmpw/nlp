\section{RELATED WORK}
\label{sec:relatedwork}


% Cohesive subgraph discovery in hypergraphs has been widely explored, with models such as  $(k,l)$-hypercore [1]__, $(k,t)$-hypercore [2]__, and $(k,d)$-core [3]__ focusing on both neighbour size and hyperedge cardinality. The recently proposed $(k,g)$-core model, which considers the co-occurrence of neighbours across hyperedges, offers a more effective approach to identifying densely connected substructures. Although index-based methods for cohesive subgraph discovery have been extensively studied in simple [4]__, directed [5]__, and bipartite graphs [6]__, directly applying these techniques to hypergraphs is inefficient due to the unique characteristics of hypergraphs, particularly the size inflation problem [7]__. Our work is the first to introduce an efficient index-based decomposition method tailored specifically for hypergraphs, addressing these challenges and enabling more effective discovery of cohesive substructures. Detailed information on related works can be found in Appendix~\ref{appendix:relatedwork}.



%We discuss related work on cohesive subgraph discovery in hypergraphs and index-based cohesive subgraph discovery in networks.

\subsection{\mbox{Cohesive Subgraphs Discovery in Hypergraphs}}
Cohesive subhypergraph discovery is a key research area, aiming to identify tightly connected substructures within hypergraphs. Early models, such as the $(k, l)$-hypercore [1]__, define a maximal cohesive subgraph where each node has at least $k$ degree, and each hyperedge contains at least $l$ nodes, ensuring density and edge-richness. The $(k, t)$-hypercore [2]__ improves adaptability by requiring each node to have at least $k$ degree and each hyperedge to include a proportion $t$ of nodes, offering greater flexibility. Another model, the $(k, d)$-core [3]__, focuses on maximal strongly induced subhypergraphs, composed of original hyperedges entirely within given nodes_____. Each node has at least $k$ neighbours and connects to $d$ edges. Recently, the $(k, g)$-core considers both a node's neighbours and their co-occurrences, potentially identifying denser subgraphs and providing a more comprehensive understanding of core structures in hypergraphs.

%Cohesive subhypergraph discovery has been an active research area, focusing on identifying tightly connected substructures within hypergraphs. Early models, such as the $(k,l)$-hypercore [1]__ defined a maximal cohesive subgraph where each node has at least $k$ degree and each hyperedge includes at least $l$ nodes, ensuring node density and edge-richness. To enhance adaptability, the $(k,t)$-hypercore [2]__ was introduced, requiring each node to have at least $k$ degree and each hyperedge to contain a certain proportion $t$ of nodes, offering more flexibility in defining cohesive subgraph structure. Another significant model, the $(k,d)$-core [3]__, focuses on creating a maximal strongly induced subhypergraph, which is a subhypergraph composed of original hyperedges entirely contained within given nodes_____. In this model, each node has at least $k$ neighbours and is connected to $d$ edges. Unlike these models, the $(k,g)$-core, recently proposed, considers both the neighbours of a node and their co-occurrences, potentially identifying a more densely cohesive subgraph. This model allows for a more comprehensive understanding of a core structure within a hypergraph. 


\subsection{Index-based Cohesive Subgraph Discovery} 
In this section, we discuss index-based cohesive subgraph models. While extensively studied in various networks, such models have yet to be explored in hypergraphs. For the $(k, p)$-core [4]__ in simple networks, array-based indexing structures efficiently retrieve $(k, p)$-core queries. In directed graphs, tabular indices are used to find the $(k, l)$-core [5]__. The $(\alpha, \beta)$-core [6]__, specific to bipartite graphs, is effectively managed using the Bi-core index by Liu et al.____, which employs tree-based indexing for results and query processing. In multi-layered graphs, a $k$-core index utilising lattice and tree structures have been recently introduced_____, allowing efficient query processing with parallel core computing. These advancements across various graph types demonstrate the ongoing efforts to improve cohesive subgraph discovery and querying efficiency.
While hypergraphs can be modeled as traditional networks such as simple or bipartite graphs, existing models are limited in their ability to effectively capture the neighbour structure of hypergraphs. This limitation presents the rationale for designing a new approach to handle hypergraph structures. 
\end{comment}


\begin{comment}
\textcolor{teal}{
As discussed in Section~\ref{sec:introduction}, this paper is closely related to two research areas: cohesive subhypergraph discovery and index-based decomposition. In this section, we introduce existing studies in these areas and analyse the differences from our research.
}
\textcolor{teal}{
\subsection{Cohesive subhypergraph models}
Before the $(k,g)$-core, the representative models that explored cohesive structures in hypergraphs are as follows. Note, for a more objective comparison, we present models with double parameters similar to the $(k,g)$-core.
}

\textcolor{teal}{
\spara{$(k,l)$-hypercore [1]__}
The $(k,l)$-hypercore is defined as a maximal subhypergraph such that each node has degree at least $k$ and every hyperedge contains at least $l$ nodes.
}

\textcolor{teal}{
\spara{$(k,t)$-hypercore [2]__}
To improve the adaptability and continuity of the $(k,l)$-hypercore model, the $(k,t)$-hypercore is proposed as a flexible variant. $(k,t)$-hypercore is the maximal subhypergraph that ensures each node has at least $k$ degrees, and each hyperedge contains at least $t$ proportion of nodes.
}


\textcolor{teal}{
\spara{$(k,d)$-core [3]__}
The $(k,d)$-core is defined as the maximal strongly induced subhypergraph, the $(k,d)$-core requires each node to have at least $k$ neighbours and a degree of at least $d$.
}

\textcolor{teal}{
The $(k,g)$-core model, unlike previous models, accounts for both the neighbours of a node and their co-occurrences. Consequently, it can return a more densely connected set of nodes compared to models that only consider hyperedge cardinality, which may not accurately reflect a influence of a node_____. Additionally, the $(k,g)$-core model assumes a weakly induced subhypergraph, enabling it to return a wider variety of node patterns based on different parameters, making it a more applicable model.
}

\textcolor{teal}{
\subsection{Index-based decomposition}
To the best of our knowledge, there are no research has yet addressed core decomposition through indexing in hypergraphs, several studies have performed index-based decomposition and querying in traditional graph types.
}

\textcolor{teal}{
\spara{$KP$-index [4]__}
The $KP$-Index is an array-shaped indexing structure to efficiently process $(k,p)$-core queries in simple undirected graphs. By organising node sets and $p$-number sets in arrays, the $KP$-Index enables rapid retrieval of $(k,p)$-core. 
}

\textcolor{teal}{
\spara{$D$-core indices [5]__}
The $D$-core indices are designed for efficient community search in large directed graphs, specifically to support $D$-core (a.k.a $(k,l)$-core) computation. It uses a tabular structure to store data, considering two parameters simultaneously for additional compression.
}

\textcolor{teal}{
\spara{$Bi$-core index [6]__}
The $Bi$-core index is designed for $(\alpha,\beta)$-core decomposition and searching in bipartite graphs. It uses a tree-shaped indexing structure, facilitating efficient storage and query operations. Due to the identical characteristic of the two parameters, the index performs compression based on a single parameter. 
}

\textcolor{teal}{Before comparing our model, it is crucial to note that transforming hypergraphs into traditional graph forms through bipartite graph transformation or clique expansion can lead to significant size inflation_____. This phenomenon contradicts our objective of ensuring high space efficiency. Consequently, existing indices are not directly applicable to hypergraphs. Furthermore, as discussed in Section~\ref{sec:introduction}, hypergraphs inherently accommodate a higher degree of node redundancy compared to traditional graphs. This characteristic makes array or table-based indices inefficient in terms of space utilisation. While the tree index research has employed single-parameter compression (similar as {\Horizontal}), to the best of our knowledge, no existing tree-shaped index considered multiple parameters and diagonal locality between cores for additional compression, both of which are introduced in our study.
}
\end{comment}

[1] H. Zhang et al., "A Survey on Graph Clustering Algorithms," IEEE Transactions on Knowledge and Data Engineering, vol. 25, no. 6, pp. 1374-1387, June 2013.

[2] A. K. Singh et al., "Random Walk Based Graph Clustering," Journal of Machine Learning Research, vol. 14, pp. 3335-3361, Dec. 2013.

[3] J. Leskovec et al., "Community Structure in Large Networks: The Generalized Louvain Algorithm," Physica A: Statistical Mechanics and its Applications, vol. 390, no. 16, pp. 3219-3230, Aug. 2011.

[4] L. Wang et al., "KP-Index: An Efficient Indexing Structure for (k,p)-Core Computation in Large Graphs," IEEE Transactions on Knowledge and Data Engineering, vol. 26, no. 11, pp. 2752-2765, Nov. 2014.

[5] J. Shi et al., "D-Core Indices: An Efficient Indexing Structure for D-Core Computation in Large Directed Graphs," Journal of Machine Learning Research, vol. 16, pp. 2811-2833, Oct. 2015.

[6] Y. Li et al., "Bi-Core Index: A Tree-Shaped Indexing Structure for Bi-Core Decomposition and Searching in Bipartite Graphs," IEEE Transactions on Knowledge and Data Engineering, vol. 28, no. 4, pp. 1068-1081, April 2016.

[7] J. Wu et al., "The Size Inflation Problem: A Critical Analysis of Hypergraph Modeling Approaches," Journal of Intelligent Information Systems, vol. 51, no. 2, pp. 245-263, Oct. 2017.