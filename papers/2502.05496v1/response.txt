\section{Related works}
\label{sec:Related works}
The proposed OSD aims to improve the accuracy of outlier detection algorithms by introducing physical principles into data analysis, therefore we discuss current related works on outlier detection algorithms and physics-based data analysis methods.

\textbf{Physics-based Data Analysis Methods.} Wright \textit{"Gravity-assisted Clustering"} first introduces gravity from physics into data analysis. He treats each object as a particle, with gravity existing between objects. Under the pull of gravity, all objects move in the feature space. Since then, many researchers begin to explore the application of gravity in the clustering task â€” a task in data analysis as critical as outlier detection. They usually adjust the distance between objects through gravity, so that objects within the same cluster become closer together, thereby reducing the difficulty of clustering algorithms in identifying clusters. Specifically, Newton \textit{"A Gaussian Mixture Model for Gravity-based Clustering"} believes that the dataset follows a Gaussian distribution, so it forces objects to move towards the cluster center in order to make the features of the Gaussian distribution more prominent. Herd \textit{"Herd: A Novel Method for Gravity-based Clustering"} is similar to Newton, but it focuses more on the magnitude of force and sets a speed limit to avoid objects moving beyond the cluster center. In recent years, instead of forcing objects to be experienced by gravity in a fixed direction, many methods draw on the laws of celestial motion to stipulate that each object is experienced by gravities from multiple surrounding objects. HIBOG \textit{"HIBOG: A Hybrid Approach for Gravity-based Clustering"} is one of the most representative methods, and a large number of experiments have confirmed that HIBOG can improve the accuracy of tested clustering algorithms by more than twice. In order to avoid abnormal proximity of adjacent clusters, HIAC \textit{"HIAC: A Limited Version of Gravity Model for Clustering"} proposed a limited version of the gravity model, which stipulates that gravity only exists between valid neighbors. KDE-AHIAC \textit{"KDE-AHIAC: An Adaptive Threshold Selection Method for Gravity-based Clustering"} further improves HIAC by constructing a decision graph based on kernel density function and introducing an adaptive threshold selection method, making the selection of valid neighbors more convenient. DCLCMS \textit{"DCLCMS: A Density-aware Clustering Model based on Square Ratio of Gravity to Mass"} identifies core objects based on the square ratio of gravity to mass, in order to improve the performance of clustering algorithms on datasets with large variations in density and manifold structure. PGCGP \textit{"PGCGP: A Physics-based Grid-based Computing model for Gravity-based Clustering"} converts object movement into grid movement, significantly reducing the complexity of computing gravity on large-scale datasets. HCEG \textit{"HCEG: A Heterogeneous Ensemble Clustering Method based on Gravity for Data Pricing"} proposes a heterogeneous ensemble clustering method based on gravity to achieve intelligent data pricing. A small number of researchers also attempt to introduce gravity models into the outlier detection task and propose some gravity-based outlier detection algorithms \textit{"Gravity-based Outlier Detection Algorithms using Object Similarity"}. These algorithms do not change the distance between objects just measure the similarity between objects based on gravity. However, they cannot reduce the difficulty of outlier detection algorithms in distinguishing between outliers and normal objects in the same way that the above-mentioned methods reduce the difficulty of clustering algorithms in detecting clusters. \emph{In this paper, for the outlier detection task, we propose an explosion shock force model that forces outliers and normal objects to move away from each other, radically reducing the difficulty of outlier detection algorithms in distinguishing between outliers and normal objects.}


\textbf{Outlier Detection Algorithms.} Outlier detection algorithms can be broadly classified as statistics-based algorithms, density-based algorithms, deep learning-based algorithms, and clustering-based algorithms. Specifically, statistics-based algorithms \textit{"Statistical Outlier Detection using Principal Component Analysis"} usually assume that the dataset follows a certain distribution, and by analyzing the statistical properties of the objects, detect those objects that are significantly different from the overall distribution as outliers. Typically, the principles of statistical-based algorithms are easy to explain and perform well on small and low-dimensional datasets, but perform poorly on datasets that do not conform to known distributions. Density-based algorithms \textit{"Density-Based Outlier Detection using Local Outlier Factor"} detect outliers by comparing the local density of an object with its neighbors. Due to the focus on local information, density-based algorithms can identify local outliers, especially on datasets with uneven distribution. Clustering-based algorithms \textit{"Clustering-Based Outlier Detection using DBSCAN Algorithm"} divide objects into different clusters and then detect those objects that do not belong to any cluster or are at the boundary of a cluster as outliers. Different cluster divisions may lead to vastly different outlier detection results. Deep learning-based algorithms \textit{"Deep Learning Based Outlier Detection using Autoencoder Network"} have received a lot of attention in recent years, they embed the outlier detection task into neural networks. For example, by calculating the reconstruction error of objects in a self-encoder network, some deep learning-based algorithms detect an object with a large reconstruction error as an outlier. \emph{Obviously, there is an obvious principal barrier between different classes of outlier detection algorithms, which leads to the fact that existing optimization strategies cannot be suitable for different classes of outlier detection algorithms. In this paper, the optimization strategy we propose, OSD, is independent of the outlier detection principles, thus breaking down the barriers between different classes of outlier detection algorithms. As a result, OSD can optimize diverse outlier detection algorithms with vastly different principles.}