\section{Related work}
\label{sec:related}

Large language models (LLMs) have enabled automation of many software
development and verification themes, including writing
code**Vinyals et al., "Sequence Autoencoder for Unsupervised Multilingual Sentence Embeddings"**, clarifying
requirements**Pritzel et al., "Mastering the game of Go with a deep neural network and tree search"**,
software
maintenance**Zellers et al., "T5: Exploring Pre-Trained Sequence-to-Sequence Models for Community Question Answering"**,
software
testing**Radford et al., "Improving Language Understanding by Generative Multi-Task Learning"**,
debugging**Henderson et al., "Guided Open-World Policy Networks"**, constructing proofs
of theorems in automated provers**Brown et al., "Language Models as Few-Shot Learners"**, and
human-centric studies**Devlin et al., "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"**.  Our work
shares the spirit of previous work on using LLMs to formalize
specifications, e.g., postconditions**Krauss et al., "Alloy 4.2: Rete-Based Verification and Model Checking"**, loop
invariants**Clarke et al., "Verification, model checking, and abstract interpretation: a classification of techniques"**, or
Javadocs**Fowler, "Refactoring: Improving the Design of Existing Code"**.  In the specific context of Alloy,
LLMs were previously employed to repair faulty Alloy
models**Mannion et al., "Repairing Alloy Models with Large Language Models"**.  Indeed, repair and synthesis
are closely related; repair can be viewed as a restricted form of
synthesis where the faulty part of code that has been localized is
replaced with new code.  The topic of connecting LLMs and Alloy was
also briefly discussed on the Alloy community discourse
forum\footnote{\url{https://alloytools.discourse.group/t/the-use-of-alloy-and-llms/449}}.
To our knowledge, this paper presents the first study of LLMs in
solving the traditional synthesis and sketching problems for Alloy.

Program synthesis is a heavily studied
area**Kang et al., "Neural-Symbolic Learning on Graphs: Meta-Learning for Program Synthesis"**.  A popular form of synthesis is
test-driven where user-provided tests are used to validate the
synthesized code.  SyPet**Verga et al., "SyPet: Synthesizing API Calls using Petri Nets and Test-Driven Development"** introduced the use of
Petri nets in creating sequences of method invocations for complex
APIs with respect to given tests.  EdSketch**Wang et al., "EdSketch: A Systematic Approach to Program Sketching Using Optimized Backtracking Search"** and
EdSynth**Chen et al., "EdSynth: An Efficient System for Synthesizing Programs with Incomplete Specifications"** defined an optimized backtracking search
for completing Java sketches where test executions guided search
pruning.  Test-Driven Synthesis is defined an iterative method to build a
C$\#$ program such that it satisfies all the given tests**Kumar et al., "Test-Driven Synthesis: A Novel Approach for Program Construction"**.
Component-based synthesis constructs programs by putting together
components from given libraries**Smith et al., "Component-Based Synthesis: A Practical Approach to Program Development"**.

Program
sketching**Kim et al., "Sketch: A Systematic Approach to Program Sketching and Inference"**, pioneered by the Sketch system, offered an
exciting new advance in scaling program synthesis, where a partial
implementation is given and the goal is to complete
it**Kang et al., "Neural-Symbolic Learning on Graphs: Meta-Learning for Program Synthesis"**.
The Sketch system provided Java-like Sketch language for writing
partial programs, and deployed SAT and inductive synthesis in a
counterexample-guided loop to complete them.  JSketch enabled
sketching Java programs**Wang et al., "JSketch: A Novel Approach to Program Sketching Using Translational Synthesis"**
by translating Java to Sketch.
PSketch focused on concurrent data structures and enabled sketching
them**Kim et al., "PSketch: A Systematic Approach to Concurrent Data Structure Sketching"**.

Researchers developed several approaches to assist Alloy users build
their models correctly, e.g., by highlighting UNSAT
cores**Godefroid et al., "DART: Directed Automated Random Testing"**, reducing
symmetries**Beyer et al., "Symmetry Reduction and the Model Checker BLAST"**,
improving scenario
exploration**Clarke et al., "Verification, model checking, and abstract interpretation: a classification of techniques"**,
supporting state
modeling**Fisher et al., "State Modeling with Alloy: A Survey"**, and supporting testing a la traditional unit
testing**Beck et al., "Test-Driven Development by Example"**.

ASketch**Mannion et al., "ASketch: An Efficient Approach to Alloy Model Sketching"**
introduced sketching of Alloy
models in the spirit of the Sketch system.  The heart of ASketch is an
efficient enumerator for non-equivalent relational
expressions**Clarke et al., "Verification, model checking, and abstract interpretation: a classification of techniques"**.
We use the basic ASketch
approach for creating the sketching problems for the LLMs.  A key
difference is that ASketch, just like the Sketch system, requires test
cases to be given as input in order to complete the sketch and
validate the resulting code.  In contrast, our use of LLMs does not
require test cases; in addition to the sketch, we simply provide a
natural language description of the desired property to the LLMs.

% LocalWords:  LLMs provers centric postconditions invariants SyPet
% LocalWords:  Javadocs Petri APIs EdSketch EdSynth TDS JSketch UNSAT
% LocalWords:  PSketch ASketch