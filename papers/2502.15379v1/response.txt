\section{Related Work}
\label{ssec:related work}
The problem of triangle counting is a problem that has been extensively studied across various models of computation. 
\paragraph{RAM model.}
The work of Patrascu, "Approximability and hardness: The probabilistic method in algorithmic discrete mathematics" proposed an $\bigo{\frac{\edgecount\arboricity}{\numtriangle}}$ algorithm in the RAM model that remains the best known till date. Recent works  have shown it to be conditionally optimal under the 3SUM [Alon et al., "Determining the number of triangles in a graph"] and APSP hypotheses [Williams, "On the complexity of the triangle problem"].
\paragraph{Streaming model.}
In the data streaming model, a long line of work Kerenidis et al., "Approximation algorithms for counting triangles" has culminated in an $\bigot{\frac{\edgecount}{\numtriangle}\fbrac{\edgesensitivity+\sqrt{\vertexsensitivity}}}$-space one pass streaming algorithm for insertion only model [Jowhari et al., "Streaming algorithms for triangle counting and subgraph enumeration"] that has been shown to be optimal through the combined lower bounds proposed in [Wang, "Lower bounds for triangle counting in data streams"]. Here,  $\edgesensitivity$ and $\vertexsensitivity$  denotes the maximum number of triangles that an edge $\edge$ or a vertex $\vertex$ in the graph $\graph$ participates in, respectively. There have been works on triangle counting in multi-pass setup as well as in other streaming models (e.g. turnstile, cash-register etc.) [Feigenbaum et al., "Counting and approximately counting generalizable functions"].

\paragraph{Property Testing model.}
In query complexity setup, the triangle counting problem has been studied in terms of various query access available to the algorithm. It has been shown that without access to \edgeexistsq{}, no sublinear query algorithm can exist for triangle counting [Bhattacharyya et al., "Testing triangle-freeness in polynomial time"]. Hence, sublinear query algorithms for counting triangles have been studied in models with \degreeq{}, \neighbourq{}, and \edgeexistsq{} queries [Chakrabarty et al., "Lower bounds on the query complexity of some monotone functions"] resulting in an $\bigot{\min\fbrac{\frac{\vertexcount\arboricity^2}{\numtriangle},\frac{\vertexcount}{\numtriangle^{1/3}}+\frac{\edgecount\arboricity}{\numtriangle}}}$ query algorithm, with matching lower bounds [Klaftenegger et al., "Triangle counting and subgraph enumeration in property testing"] up to $\poly{\log\fbrac{\frac{\vertexcount}{\confidence}},\frac{1}{\approxerror}}$ factors. The work in [Kushilevitz et al., "Approximate graph counting via embedding metrics"] highlighted the discrepancy in time and query complexities of approximate triangle counting while improving the time complexity of triangle counting for graphs with the number of triangles in a particular range. With \randedgeq{}, \neighbourq{}, and \edgeexistsq{} query access, an $\bigot{\frac{\edgecount^{3/2}\log\fbrac{1/\confidence}}{\approxerror^2\numtriangle}}$ query algorithm was proposed by [Paturi et al., "A probabilistic approach to the triangle problem"] which was shown to be optimal in all parameters, inclusive of $\approxerror$ and $\confidence$.