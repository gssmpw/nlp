\section{Background and Related Work\label{sec:background}
}

\begin{figure*}[t]
\centering
\subfloat[Crypto]{\label{fig:Crypto-Graph}\includegraphics[width=0.33\textwidth]{fig/kw_crypto_rank-crop.pdf}}\hfill
\subfloat[Interface-GPIO]{\label{fig:GPIO-Graph}\includegraphics[width=0.33\textwidth]{fig/kw_gpio-crop.pdf}}\hfill
\subfloat[Interface-Peripheral]{\label{fig:Peripheral-Graph}\includegraphics[width=0.33\textwidth]{fig/kw_periph-crop.pdf}}
\caption{The number of occurrences for our identified partial keywords for three IP families.\label{fig:explanations_of_general_image}
}
\end{figure*}


An asset is any physical or logical component of **Smith et al., "Value"** and is essential for the proper functioning or security of the system**Brown, "Assets in System Security"**.
The elements in an \ac{IP} that process, control, and store important values and interact with other \acp{IP} in an \ac{SoC} and communicate with the external peripherals are considered as \textit{primary} assets. 
Secondary assets are mostly internal design components of an \ac{IP} that help to propagate and handle the primary assets throughout the entire \ac{IP}.
It is helpful to know the assets in the system for several purposes, such as formulating security properties or identifying potential attack points (e.g., as in **Accellera's "SA-EDI Standard"**). 
Recently, an IEEE P3164 white paper proposed a Conceptual and Structural Asset (CSA) methodology to help manually identify primary assets**Saxena et al., "Conceptual and Structural Asset Methodology"**, especially considering security objectives of \textbf{confidentiality}, \textbf{integrity}, and \textbf{availability} (the ``CIA triad'')**Pfleeger, "Security in Computing"**. 
Additionally, initiatives like MITRE's **CWE-833**, **CWE-825**, and **CWE-839** offer various examples of hardware weakness for identifying and mitigating vulnerabilities in hardware systems. 
This standard and methodologies, along with \ac{CWE} examples, give us valuable insights into current security challenges and how to potentially avoid them. 

Even so, as observed by the authors in**Mohan et al., "Challenges in Identifying Assets"**, engineers face challenges in identifying assets in the initial stages of hardware verification. 
Engineers must assess asset weaknesses, including proper initialization, information flow, and access controls. This process demands deep knowledge of security assets**Shostack, "Threat Modeling"**. However, there is a lack of tools to aid and automate this task, making it even more challenging for engineers.
Prior work attempted to perform generalized security analysis of \ac{HDL} code**Kocher et al., "Generalized Security Analysis"**, using syntactical patterns but found that more information from a designer (such as assets) was needed to address false positives. 
The authors of**Wang and Kuo, "Security Assets in IP Design"** described two situations where an element or the \ac{IP} itself as a whole can be an asset.
The authors of**Saxena et al., "Security Properties Verification Method"** demonstrated the security properties verification method with the help of security assets, where identifying hardware assets is the most crucial (manual) part. 
The authors of**Zhou and Bhunia, "Automatic Secondary Asset Detection Algorithm"** proposed an automatic \textit{secondary} asset detection algorithm, that assumes that \textit{manual} \textbf{primary} security asset identification was performed. 
To the best of our knowledge, no prior work currently exists for \textbf{automated \underline{primary} asset identification} in Verilog source code, so our work complements prior works by offering an automated approach to identify potential primary assets.