\section{Related Work}
\label{sec:relwork}

\emph{Integral Approximation.}
Our approach relies on under- and over-approximation of Lebesgue integrals via Riemann sums, achieved by discretizing the domain of the continuous uniform distributions in the program.
Recently, **Jha et al., "A Unified Framework for Quantitative Verification of Probabilistic Systems"** proposed an efficient \emph{bit blasting} discretization method for continuous mixed-gamma distributions (which subsume the uniform distributions) for programs with bounded ($\mathtt{for}$) loops.
In **Chen and Dallal, "Guaranteed Bounds on Posterior Distribution via Integral Approximation"**, integral approximation is used to derive guaranteed bounds on a program's posterior distribution.
Following up on this, **Chakraborty et al., "Automating Guaranteed Bounds for Soft Conditioning Programs"** extended the computation of such bounds to a class of programs with soft conditioning (\emph{score-at-end} programs).
Previously, **Kroening and Neumann, "Quantitative Analysis of Probabilistic Systems"** used integral approximations to bound the satisfaction probabilities of properties like safety and fairness.
However, these approaches are not able to deal with unbounded loops in full generality.
AQUA **Desharnais et al., "Approximating Distributions of Continuous-Time Markov Chains"** uses a different discretization method, where the posterior of a given program is approximated by quantizing the state space.
However, this approximation does not necessarily provide an upper or lower bound of the true distribution, and unbounded loops are not supported.
Finally, **Braun et al., "Deriving Upper and Lower Bounds on Central Moments of Cost Accumulators"** propose a method to derive upper and lower bounds on central moments of cost accumulators.

\emph{Loop Invariant Analysis.} 
The main purpose of the current work is to enable automatic verification of inductive invariants for continuous probabilistic programs. Reasoning about probabilistic loops via quantitative invariants was first introduced by McIver and Morgan **McIver and Morgan, "Abstraction, Refinement and Proof for Probabilistic Systems"** for probabilistic programs with discrete probabilistic choice and extended by various authors to different settings **Katoen et al., "A Compositional Approach to Continuous-Time Markov Chains"**.
A generalization of this framework to programs featuring continuous distribution was proposed in **Chakraborty et al., "Continuous Distribution Based Invariant Analysis for Probabilistic Programs"** and uses super-martingale ranking functions as the probabilistic analogue of classic ranking functions.
The super-martingale approach has been specialized to qualitative and quantitative termination problems for various classes of programs such as polynomial programs **Chakraborty et al., "Polynomial Probabilistic Program Verification via Super-Martingales"**, affine programs admitting a linear ranking super-martingale **Chatterjee et al., "Probabilistic Reachability Analysis"**, and non-deterministic probabilistic programs **Fisman et al., "Probabilistic Model Checking of Non-Deterministic Systems"**.
Besides termination, this approach has been successfully applied also to cost analysis **Chakraborty et al., "Cost Analysis of Probabilistic Programs"** and equivalence refutation **Chatterjee et al., "Equivalence Refutation for Probabilistic Programs"**.
While building on the martingale approach, **Mori et al., "Stochastic Invariants for Probabilistic Systems"** overcomes the necessity to compute ranking martingales, by introducing the notion of stochastic invariants indicators, that can be used to prove termination in a sound and relatively complete way.
A different generalization was proposed in **Chakraborty et al., "Expectation Invariants for Probabilistic Programs with Unbounded Loops"**, where expectation invariants are proposed to introduce a generalized fixed-point framework for programs with continuous distributions and unbounded loops.
However, this analysis rules out invariants expressed as Iverson brackets and is restricted to piecewise linear assertion guards and updates. Similarly, **Chatterjee et al., "Affine Programs with Linear Ranking Super-Martingales"** restricts to affine programs and invariants to find exponential bounds on assertion violation probabilities.

\emph{Exact Inference.}
Exact inference on probabilistic programs involving continuous distributions is especially hard because of the challenge of computing densities via integrals.
Exact symbolic inference engines like **Ghorbanzadeh et al., "Exact Symbolic Inference for Probabilistic Programs with Deterministically Bounded Loops"** only support deterministically bounded loops.
Even within this constrained context, the occurrence of non-simplified integrals in the output can significantly impede the potential to perform appropriate analysis or further computations.
A different, yet still exact approach is pursued in **Mori et al., "Exact Inference for Probabilistic Programs with Continuous Distributions"**, where the focus is on the computation of moments as functions of the loop iteration.
In order to compute the moments exactly, the syntax of the programs is restricted quite severely, though parametric models are supported. Under the same syntactic restrictions, it has been shown in **Ghorbanzadeh et al., "Termination Probability Computation for Probabilistic Programs"** that termination probabilities can be computed automatically.