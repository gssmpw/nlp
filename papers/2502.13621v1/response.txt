\section{Related work}
\paragraph{Decentralized planning with complex shared objectives}

There have been several attempts at finding formalisms for expressing objectives more general than reachability in decentralized planning.

Wen, H., and Hansen, E. A., "Mealy machines to encode a shared objective which is split into subtasks assigned to each agent, enabling decentralized reinforcement learning."
% In their \ac{MAS} setting, each agent keeps an \emph{abstract representation} of the other agents.
They do not use logics, but rather automata, to express requirements.

Iyer, A. K., "use \ac{LTLf} formulae to capture safety and liveness specifications for agents modelled as \acp{MDP}."
They assume the global objective to be factored into individual agent tasks, plus a smaller task requiring their interaction.
They use stochastic games to synthesize local policies separately.
Such policies are not completely decentralized:
% if an agent cannot find an almost-surely satisfying plan autonomously,
the planner assumes that agents can share some limited information (called \emph{advisers}) on their current state, violating local observability.

Giacomo, M. D., "specifications have been considered in the context of reinforcement learning for \acp{Dec-POMDP}:
 propose a hierarchical approach that computes temporal equilibrium strategies
via a parity game and encode the individual reward machines used in the learning process."    

These works propose different approaches to decompose the planning problem to tackle its high complexity.
On the contrary, we perform centralized planning but tackle its complexity through abstraction refinement.
Hermosilla, M. J., "Moreover, these approaches use logics to specify objectives, but aspects related to the multi-agent nature of the problem are expressed externally or in the underlying operational model because \acs{LTL} is not sufficiently expressive."

\vspace{-5pt}
\paragraph{Verification of Hyperproperties}
The deterministic hyperlogics HyperLTL and HyperCTL* extend \acs{LTL} and CTL* with \emph{path quantifiers} that relate multiple execution traces of the same system.
They can specify important security properties such as \emph{non-interference}.
Finkbeiner, B., "show that model checking of a HyperLTL fragment can be cast as a \emph{nondeterministic planning problem} for Qualitative \acp{Dec-POMDP}."
HyperSL is a variant of Strategy Logic that can relate multiple execution paths
and was used for expressing planning objectives in \acp{MAS}.
In contrast to \acs{PHLTL}, it does not support probabilistic reasoning and assumes perfect information.

Finkbeiner, B., "can be seen as a probabilistic variant of HyperLTL,
that replaces path quantifiers with probability operators and quantifies over policies."
There are two other temporal logics for \acp{PH}:
\acs{HYPERPCTL} Gigu√®re, P., and 
\acs{PHL} Goranko, V.,
They have been devised mainly with the purpose of verification,
while we designed \acs{PHLTL} to conveniently specify planning problems.
We compare them in Sec.~\ref{sec:related-logics}.

Finkbeiner, B., "is an SMT-based tool for model checking probabilistic hyperproperties with limited scalability,"
% we already say in the experiments that it does not support the self-composition
%Its scalability is limited,
Hutagalung, R. A., and 
Bartocci, C.,
Two approaches tackle the high intractability of the problem:
Finkbeiner, B., "proposes a statistical method for bounded HyperLTL model checking on \acp{MDP} based on sampling policies and traces,"
and Finkbeiner, B., "introduces an abstraction refinement algorithm for the synthesis of formulae involving a comparison of probability measures for different computation trees and additional qualitative structural constraints."