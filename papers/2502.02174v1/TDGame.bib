


@misc{AdditionalMaterial,
abstract = {},
author = {Wiese, Marion and Heinrichs, Angelina and Rusieshvili, Nino and Rebou{\c{c}}as de Almeida, Rodrigo,  Klara Borowa},
title = {Additional Material for Teh TechDebt Game - Enabling Discussions a},
url = {https://doi.org/10.5281/zenodo.14205656},
urldate = {2022-05-13},
year = {2024}
}


@misc{InsighTD2022,
title = {{InsighTD Project – InsighTD Project}},
url = {http://www.td-survey.com/},
urldate = {2022-10-06}
}
@misc{Grammarly,
title = {{Grammarly}},
url = {https://app.grammarly.com/},
urldate = {2024-11-15}
}
@misc{f4x,
title = {{f4x audiotrransciptions}},
url = {https://app.grammarly.com/},
urldate = {2024-11-15}
}
@misc{DeepL,
title = {{DeepL Translate}},
url = {https://www.deepl.com/en/translator},
update = {2024-11-15}
}
@misc{TDGame1,
title = {{Technical Debt Game}},
url = {https://www.tha.de/en/Computer-Science/THA-ias/Technical-Debt-Game.html},
urldate = {2024-11-15}
}
@misc{TDGame2,
title = {{Technical Debt Game -- for non-technical people}},
url = {https://ri-level.de/technical-debt-game/},
urldate = {2024-11-15}
}
@misc{TechDebtGame_Digital,
title = {{Digital TechDebt Game on Tabletopia}},
url = {https://tabletopia.com/workshop/games/techdebts/1-7players/test},
update = {2025-02-03}
}
@misc{TechDebtGame_Tabletop,
title = {{Tabletop TechDebt Game on GitHub}},
url = {https://github.com/TechDebtGame/TechDebtGame},
update = {2025-02-03}
}
@misc{Trello2022,
title = {{Trello | Manage Your Team's Projects From Anywhere}},
url = {https://trello.com/},
urldate = {2022-10-06}
}
@misc{SonarQube2022,
title = {{SonarQube}},
url = {https://www.sonarqube.org/downloads/},
urldate = {2022-10-06}
}


@book{bass_software_2021,
	edition = {4},
	title = {Software {Architecture} in {Practice}: {Software} {Architect} {Practice}},
	isbn = {978-0-13-294278-2},
	shorttitle = {Software {Architecture} in {Practice}},
	abstract = {The award-winning and highly influential   Software Architecture in Practice, Third Edition,   has been substantially revised to reflect the latest developments in the field. In a real-world setting, the book once again introduces the concepts and best practices of software architecture—how a software system is structured and how that system’s elements are meant to interact. Distinct from the details of implementation, algorithm, and data representation, an architecture holds the key to achieving system quality, is a reusable asset that can be applied to subsequent systems, and is crucial to a software organization’s business strategy.   The authors have structured this edition around the concept of architecture influence cycles. Each cycle shows how architecture influences, and is influenced by, a particular context in which architecture plays a critical role. Contexts include technical environment, the life cycle of a project, an organization’s business profile, and the architect’s professional practices. The authors also have greatly expanded their treatment of quality attributes, which remain central to their architecture philosophy—with an entire chapter devoted to each attribute—and broadened their treatment of architectural patterns.   If you design, develop, or manage large software systems (or plan to do so), you will find this book to be a valuable resource for getting up to speed on the state of the art.   Totally new material covers    Contexts of software architecture: technical, project, business, and professional   Architecture competence: what this means both for individuals and organizations   The origins of business goals and how this affects architecture   Architecturally significant requirements, and how to determine them   Architecture in the life cycle, including generate-and-test as a design philosophy; architecture conformance during implementation; architecture and testing; and architecture and agile development   Architecture and current technologies, such as the cloud, social networks, and end-user devices},
	language = {en},
	publisher = {Addison-Wesley},
	author = {Bass, Len and Clements, Paul and Kazman, Rick},
	year = {2021},
	keywords = {Computers / Software Development \& Engineering / General},
}

@inproceedings{cervantes_smart_2016,
	address = {New York, NY, USA},
	series = {{ICSE} '16},
	title = {Smart decisions: an architectural design game},
	isbn = {978-1-4503-4205-6},
	shorttitle = {Smart decisions},
	url = {https://dl.acm.org/doi/10.1145/2889160.2889184},
	doi = {10.1145/2889160.2889184},
	abstract = {Architecture design is notoriously difficult to teach and to learn. Most competent architects in industry have deep knowledge won from long years of experience. But if we want architecture design to be methodical and repeatable, we need better methods for teaching it. Simply waiting for an aspiring architect to accumulate 10 or 20 years of experience is not acceptable if we believe that software engineering is a true engineering discipline. In this paper we describe our experiences with the development of a game that aids in teaching architecture design, specifically design employing the Attribute-Driven Design method. We discuss our approach to creating the game, and the "design concepts catalog" that provides the knowledge base for the game. Finally, we report on our experiences with deploying the game, and the (enthusiastic) assessments and feedback that we have received from industrial and academic participants.},
	urldate = {2025-01-30},
	booktitle = {Proceedings of the 38th {International} {Conference} on {Software} {Engineering} {Companion}},
	publisher = {Association for Computing Machinery},
	author = {Cervantes, Humberto and Haziyev, Serge and Hrytsay, Olha and Kazman, Rick},
	month = may,
	year = {2016},
	pages = {327--335},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\M8LCTLA4\\Cervantes et al. - 2016 - Smart decisions an architectural design game.pdf:application/pdf},
}


@inproceedings{DeAlmeida2021,
abstract = {Incorporating the business perspective into prioritizing technical debt is essential to contribute to decision making in industry. In this paper, we evolve and evaluate a business-driven approach for technical debt prioritization. The approach was evaluated during a five-months industrial case study with business and technical stakeholders' active participation. The results show that the approach contributed to aligning business criteria between the business and technical stakeholders. We also observed a downward trend in the amount of technical debt that affects high-value business assets. Moreover, we identified eight business factors that affect the decision making related to the prioritization of technical debt. The study results suggest that the proposed business-driven technical debt prioritization approach can help teams to focus their efforts on paying off the business' most relevant debt.},
annote = {Weiterentwicklung um Priorisierungsverfahren, dann hier nachschauen und die Buisnessperspektive ber{\"{u}}cksichtigen},
archivePrefix = {arXiv},
arxivId = {2010.09711},
author = {{Rebou{\c{c}}as de Almeida}, Rodrigo and {do Nascimento Ribeiro}, Rafael and Treude, Christoph and Kulesza, Uir{\'{a}}},
booktitle = {2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
eprint = {2010.09711},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Rebou{\c{c}}as de Almeida et al/Rebou{\c{c}}as de Almeida et al. - 2021 - Business-Driven Technical Debt Prioritization - An Industrial Case Study.pdf:pdf},
isbn = {9781665414050},
keywords = {Case StudyTopic,Companies,Decision making,FrameworkTopic,FutureWork,IST-ready,Industries,Interviews,ManagerPerspective,Market,Market research,Notes,Stakeholders,TD Prioritization,Tools,business driven technical debt,case study,name,technical debt,technical debt management,technical debt prioritization,topic},
mendeley-tags = {Case StudyTopic,FrameworkTopic,FutureWork,IST-ready,ManagerPerspective,Notes,TD Prioritization,name,topic},
pages = {74--83},
title = {{Business-Driven Technical Debt Prioritization - An Industrial Case Study}},
year = {2021}
}
@article{ReboucasDeAlmeida2018c,
abstract = {Technical debt (TD) is a metaphor to describe the trade-off between short-Term workarounds and long-Term goals in software development. Despite being widely used to explain technical issues in business terms, industry and academia still lack a proper way to manage technical debt while explicitly considering business priorities. In this paper, we report on a multiple-case study of how two big software development companies handle technical debt items, and we show how taking the business perspective into account can improve the decision making for the prioritization of technical debt. We also propose a first step toward an approach that uses business process management (BPM) to manage technical debt. We interviewed a set of IT business stakeholders, and we collected and analyzed different sets of technical debt items, comparing how these items would be prioritized using a purely technical versus a business-oriented approach. We found that the use of business process management to support technical debt management makes the technical debt prioritization decision process more aligned with business expectations. We also found evidence that the business process management approach can help technical debt management achieve business objectives.},
archivePrefix = {arXiv},
arxivId = {1807.05582},
author = {{Reboucas De Almeida}, Rodrigo and Kulesza, Uir{\'{a}} and Treude, Christoph and {Cavalcanti Feitosa}, D'Angellys and Lima, Aliandro Higino Guedes},
eprint = {1807.05582},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2018/Reboucas De Almeida et al/Reboucas De Almeida et al. - 2018 - Aligning technical debt prioritization with business objectives A multiple-case study(3).pdf:pdf},
isbn = {9781538678701},
issn = {2576-3148},
journal = {Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
keywords = {Business Process Management,Business process management,Case StudyTopic,Companies,Decision making,ExploratoryCaseStudy,FrameworkTopic,IST-ready,ManagementIvolvement,ManagerPerspective,OverviewRelation,Software,Stakeholders,TD Prioritization,Technical Debt,Technical Debt Management,Technical Debt Prioritization,Tools,topic},
mendeley-tags = {Case StudyTopic,ExploratoryCaseStudy,FrameworkTopic,IST-ready,ManagementIvolvement,ManagerPerspective,OverviewRelation,TD Prioritization,topic},
pages = {655--664},
title = {{Aligning technical debt prioritization with business objectives: A multiple-case study}},
year = {2018}
}
@article{Perez2021a,
abstract = {Context: Architectural decisions are considered one of the most common sources of technical debt (TD). Thus, it is necessary to understand how TD is perceived by software architects, particularly, the practices supporting the elimination of debt items from projects, and the practices used to reduce the chances of TD occurrence. Objective: This paper investigates the most commonly used practices to pay off TD and to prevent debt occurrence in software projects from the architect's point of view. Method: We used the available data from InsighTD, which is a globally distributed family of industrial surveys on the causes, effects, and management of TD. We analyze responses from a corpus of 72 software architects from Brazil, Chile, Colombia, and the United States. Results: Results showed that refactoring (30.2{\%}) was the main practice related to TD payment, followed by design improvements (14.0{\%}). Refactoring, design improvements, and test improvements are the most cited payment practices among cases of code, design and test debt. Concerning the TD preventive practices, we find that having a well-defined architecture and design is the most cited practice (13.6{\%}), followed by having a well-defined scope and requirements. This last practice is the most cited one for expert software architects. Finally, when comparing preventive practices among the three major roles derived from the survey (software architects, engineer roles, and management roles), we found that none of the roles shared the most cited practice, meaning that each role had its worries and focus on different strategies to reduce TD's presence in the software. Conclusion: The lists of TD payment and prevention practices can guide software teams by having a catalog of practices to keep debt controlled or reduced.},
annote = {We initially coded these two chunks with ‘‘raising awareness of the debt'', and ‘‘implementation of a TD management strategy'', respectively. 
Then, we could identify these two examples as different nomenclature for the same preventive practice. 
which was ‘‘td awareness/management''},
author = {P{\'{e}}rez, Boris and Castellanos, Camilo and Correal, Dar{\'{i}}o and Rios, Nicolli and Freire, S{\'{a}}vio and Sp{\'{i}}nola, Rodrigo and Seaman, Carolyn and Izurieta, Clemente},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/P{\'{e}}rez et al/P{\'{e}}rez et al. - 2021 - Technical debt payment and prevention through the lenses of software architects.pdf:pdf},
issn = {0950-5849},
doi = {10.1016/j.infsof.2021.106692},
journal = {Information and Software Technology},
keywords = {Awareness={\textgreater}Prevention,AwarenessTopic,BalanceRepaymentAndPrevention,IST-ready,InsighTD,ManagerPerspective,Notes,Overview={\textgreater}Prevention,OverviewTopic,Payment practices,PreventionSolution,PreventionTopic!,Preventive actions,Software architects,TD Causes,TD Consequences,Technical debt,Technical debt management,noCase Study,noFramework,topic,topic!},
mendeley-tags = {Awareness={\textgreater}Prevention,AwarenessTopic,BalanceRepaymentAndPrevention,IST-ready,InsighTD,ManagerPerspective,Notes,Overview={\textgreater}Prevention,OverviewTopic,PreventionSolution,PreventionTopic!,TD Causes,TD Consequences,noCase Study,noFramework,topic,topic!},
pages = {106692},
title = {{Technical debt payment and prevention through the lenses of software architects}},
volume = {140},
year = {2021}
}
@article{Tom2013b,
    abstract = {Context: Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device. Objective: To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development. Method: An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon. Result: A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon. Conclusion: The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt. {\textcopyright} 2013 Elsevier Inc. {\textcopyright} 2013 Elsevier Inc. All rights reserved.},
    annote = {A software engineer likened these forms of debt to “unknown unknowns”, and “known unknowns” respectively, whilst strategic and tactical debt that a team is aware of can be considered a third, “known knowns”, category. This},
    author = {Tom, Edith and Aurum, Ayb{\"{u}}ke and Vidgen, Richard},
    file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2013/Tom, Aurum, Vidgen/Tom, Aurum, Vidgen - 2013 - An exploration of technical debt(2).pdf:pdf;:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2013/Tom, Aurum, Vidgen/Tom, Aurum, Vidgen - 2013 - An exploration of technical debt.pdf:pdf},
    issn = {01641212},
    doi = {10.1016/j.jss.2012.12.052},
    journal = {Journal of Systems and Software},
    keywords = {01read,AwarenessProblemStatement,AwarenessTopic!,Benefits and drawbacks,Code debt,IST-ready,ManagerPerspective,Multivocal literature review,Notes,Outcomes,Precedents,PreventionRelation,Technical debt,intro,noCase Study,topic,topic!},
    mendeley-tags = {01read,AwarenessProblemStatement,AwarenessTopic!,IST-ready,ManagerPerspective,Notes,PreventionRelation,intro,noCase Study,topic,topic!},
    number = {6},
    pages = {1498--1516},
    title = {{An exploration of technical debt}},
    volume = {86},
    year = {2013}
}
@book{Kruchten2019,
author = {Kruchten, Philippe and Nord, Robert and Ozkaya, Ipek},
publisher = {Software Engineering Institute, Carnegie Mellon University},
title = {{Managing Technical Debt: Reducing Friction in Software Development}},
year = {2019}
}
@inproceedings{Besker2020d,
abstract = {When developing software, it is vitally important to keep the level of technical debt down since it is well established from several studies that technical debt can, e.g., lower the development productivity, decrease the developers' morale, and compromise the overall quality of the software. However, even if researchers and practitioners working in today's software development industry are quite familiar with the concept of technical debt and its related negative consequences, there has been no empirical research focusing specifically on how software managers actively communicate and manage the need to keep the level of technical debt as low as possible.This paper aims to explore how software companies encourage and reward practitioners for actively keeping the level of technical debt down and also whether the companies use any forcing or penalizing initiatives when managing technical debt.This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The findings show that having a TD management strategy can significantly impact the amount of TD in the software. When surveying how commonly used different TD management strategies are, we found that only the encouraging strategy is, to some extent, adopted in today's' software industry. This study also provides a model describing the four assessed strategies by presenting its strategies and tactics, together with recommendations on how they could be operationalized in today's software companies.},
address = {New York, NY, USA},
author = {Besker, Terese and Martini, Antonio and Bosch, Jan},
booktitle = {Proceedings of the 3rd International Conference on Technical Debt},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2020/Besker, Martini, Bosch/Besker, Martini, Bosch - 2020 - Carrot and Stick Approaches When Managing Technical Debt(2).pdf:pdf},
isbn = {9781450379601},
doi = {10.1145/3387906.3388619},
keywords = {Awareness={\textgreater}Prevention,AwarenessTopic,Education={\textgreater}Prevention,IST-ready,Management={\textgreater}Awareness,Management={\textgreater}DecreaseTD,ManagerPerspectiveProblemStatement,PreventionSolution,empirical study,software development,software incentive programs,technical debt,topic,topic!},
mendeley-tags = {Awareness={\textgreater}Prevention,AwarenessTopic,Education={\textgreater}Prevention,IST-ready,Management={\textgreater}Awareness,Management={\textgreater}DecreaseTD,ManagerPerspectiveProblemStatement,PreventionSolution,topic,topic!},
pages = {21--30},
publisher = {Association for Computing Machinery},
series = {TechDebt '20},
title = {{Carrot and Stick Approaches When Managing Technical Debt}},
year = {2020}
}
@article{Besker2019d,
abstract = {Software companies need to deliver customer value continuously, both from a short- and long-term perspective. However, software development can be impeded by technical debt (TD). Although significant theoretical work has been undertaken to describe the negative effects of TD, little empirical evidence exists on how much wasted time and additional activities TD causes. The study aims to explore the consequences of TD in terms of wastage of development time. This study investigates on which activities this wasted time is spent and whether different TD types impact the wasted time differently. This study reports the results of a longitudinal study surveying 43 developers and including16 interviews followed by validation by an additional study using a different and independent dataset and focused on replicating the findings addressing the findings. The analysis of the reported wasted time revealed that developers waste, on average, 23{\%} of their time due to TD and that developers are frequently forced to introduce new TD. The most common activity on which additional time is spent is performing additional testing. The study provides evidence that TD hinders developers by causing an excessive waste of working time, where the wasted time negatively affects productivity.},
author = {Besker, Terese and Martini, Antonio and Bosch, Jan},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Besker, Martini, Bosch/Besker, Martini, Bosch - 2019 - Software developer productivity loss due to technical debt—A replication and extension study examining d.pdf:pdf},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {AwarenessTopic!,IST-ready,ManagementAwarenessProblemStatement,ManagerPerspective,OverviewRelation,PreventionRelation,ProjectPipline,Software development,Software productivity,Technical debt,Wasted development time,WastedTime,topic,topic!},
mendeley-tags = {AwarenessTopic!,IST-ready,ManagementAwarenessProblemStatement,ManagerPerspective,OverviewRelation,PreventionRelation,ProjectPipline,WastedTime,topic,topic!},
pages = {41--61},
title = {{Software developer productivity loss due to technical debt—A replication and extension study examining developers' development work}},
volume = {156},
year = {2019}
}
@inproceedings{Besker2019c,
abstract = {Remediation of technical debt through regular refactoring initiatives is considered vital for the software system's long and healthy life. However, since today's software companies face increasing pressure to deliver customer value continuously, the balance between spending developer time, effort, and resources on implementing new features or spending it on refactoring of technical debt becomes vital. The goal of this study is to explore how the prioritization of technical debt is carried out by practitioners within today's software industry. This study also investigates what factors influence the prioritization process and its related challenges. This paper reports the results of surveying 17 software practitioners, together with follow-up interviews with them. Our results show that there is no uniform way of prioritizing technical debt and that it is commonly done reactively without applying any explicit strategies. Often, technical debt issues are managed and prioritized in a shadow backlog, separate from the official sprint backlog. This study was also able to identify several different challenges related to prioritizing technical debt, such as the lack of quantitative information about the technical debt items and that the refactoring of technical debt issues competes with the implementation of customer requirements.},
author = {Besker, Terese and Martini, Antonio and Bosch, Jan},
booktitle = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Besker, Martini, Bosch/Besker, Martini, Bosch - 2019 - Technical Debt Triage in Backlog Management(2).pdf:pdf},
isbn = {9781728133713},
pages = {13--22},
publisher = {IEEE Press},
series = {TechDebt '19},
title = {{Technical Debt Triage in Backlog Management}},
year = {2019}
}

@article{Li2015,
abstract = {Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term "debt" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process.},
annote = {so {\"{u}}bernehmen, wie es schon drin ist,},
author = {Li, Zengyang and Avgeriou, Paris and Liang, Peng},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2015/Li, Avgeriou, Liang/Li, Avgeriou, Liang - 2015 - A systematic mapping study on technical debt and its management.pdf:pdf},
issn = {01641212},
doi = {10.1016/j.jss.2014.12.027},
journal = {Journal of Systems and Software},
keywords = {01read,AwarenessTopic,IST-ready,Notes,OverviewTopic,PreventionTopic,SMS,Systematic mapping study,TD Activities,TD Causes,TD Definition,TD Metaphor,TD Notions,TD Type,TD activities,TD causes,Technical debt,Technical debt management,noCase Study,noFramework,topic},
mendeley-tags = {01read,AwarenessTopic,IST-ready,Notes,OverviewTopic,PreventionTopic,SMS,TD Activities,TD Causes,TD Definition,TD Metaphor,TD Notions,TD Type,TD activities,TD causes,noCase Study,noFramework,topic},
pages = {193--220},
publisher = {Elsevier Inc.},
title = {{A systematic mapping study on technical debt and its management}},
volume = {101},
year = {2015}
}
@inproceedings{Cunningham1992,
author = {Cunningham, Ward},
booktitle = {Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/1992/Cunningham/Cunningham - 1992 - The WyCash portfolio management system.pdf:pdf},
isbn = {0897916107},
issn = {10556400},
doi = {10.1145/157710.157715},
keywords = {01read,IST-ready,Intro,TD Definition},
mendeley-tags = {01read,IST-ready,Intro,TD Definition},
number = {2},
pages = {29--30},
title = {{The WyCash portfolio management system}},
volume = {Part F1296},
year = {1992}
}
@article{McConnell2008a,
abstract = {“Technical Debt” refers to delayed technical work that is incurred when technical short cuts are taken, usually in pursuit of calendar- driven software schedules. Just like financial debt, some technical debts can serve valuable business purposes. Other technical debts are simply counterproductive. The ability to take on debt safely, track their debt, manage their debt, and pay down their debt varies among different organizations. Explicit decision making before taking on debt and more explicit tracking of debt are advised. T},
author = {McConnell, Steve},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2008/McConnell/McConnell - 2008 - Managing technical debt.pdf:pdf},
institution = {Construx},
journal = {Construx Inc.},
keywords = {IST-ready},
mendeley-tags = {IST-ready},
publisher = {Construx},
title = {{Managing technical debt}},
year = {2008}
}
@incollection{Importance2021,
author = {Ernst, Neil and Kazman, Rick and Delange, Julien},
booktitle = {Technical Debt in Practice},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Ernst, Kazman, Delange/Ernst, Kazman, Delange - 2021 - 00.5 Table of Contents.pdf:pdf},
pages = {2--5},
title = {{00.5 Table of Contents}},
year = {2021}
}
@article{Avgeriou2016a,
abstract = {This report documents the program and outcomes of Dagstuhl Seminar 16162, " Managing Tech-nical Debt in Software Engineering. " We summarize the goals and format of the seminar, results from the breakout groups, a definition for technical debt, a draft conceptual model, and a research road map that culminated from the discussions during the seminar. The report also includes the abstracts of the talks presented at the seminar and summaries of open discussions.},
author = {Avgeriou, Paris and Kruchten, Philippe and Ozkaya, Ipek and Seaman, Carolyn},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Avgeriou et al/Avgeriou et al. - 2016 - Managing Technical Debt in Software Engineering.pdf:pdf},
issn = {01635948},
journal = {Dagstuhl Reports},
doi = {10.4230/DagRep.6.4.110},
keywords = {01read,110,4,4230,6,Evolution,IST-ready,TD Awareness,TD Concepts,TD Definition,TD Prevention,and phrases software decay,dagrep,digital object identifier 10,edited in cooperation with,management,robert nord,software economics,software evolution,software project,software quality,technical debt},
mendeley-tags = {01read,Evolution,IST-ready,TD Awareness,TD Concepts,TD Definition,TD Prevention},
number = {4},
pages = {110--138},
title = {{Managing Technical Debt in Software Engineering}},
volume = {6},
year = {2016}
}
@article{Ramasubbu2019a,
abstract = {Software Quality Management(SQM) guarantees that the required degree of value is accomplished by submitting enhancements to the item improvement process. Software Quality Management intends to build up a culture inside the group and it is viewed as everybody's concern. SQM ought to be free of undertaking the executives to guarantee autonomy of expense and schedule adherences. It straightforwardly influences the process quality and in a roundabout way influences the product quality.},
author = {Ramasubbu, Narayan and Kemerer, Chris F.},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Ramasubbu, Kemerer/Ramasubbu, Kemerer - 2019 - Integrating Technical Debt Management and Software Quality Management Processes A Normative Framework and Fi.pdf:pdf},
isbn = {9781628251845},
issn = {01934120},
doi = {10.1109/TSE.2017.2774832},
journal = {Test Engineering and Management},
keywords = {Business,Case StudyTopic,Economics,FrameworkTopic,IST-,IST-ToDo,IST-ready,ManagementAwareness={\textgreater}BetterPlaning,ManagementAwarenessProblemStatement,ManagementIvolvement,Notes,Overview={\textgreater}Management,Overview={\textgreater}Visibility,PreventionTopic,Process management etc,Product develo,Product development,Production,ProjectManagementTopic,ProjectManagementTopic!,Risk Management,Software engineering,Software quality,Software systems,Systematics,TD Backlog,TD Identification,TD Measurement,TD Monitoring,TD Prevention,TD Repayment,Technical debt,Tools,case study,cost of quality,name,noAwareness,noOverview,software engineering economics,software extension to PMBOK,software maintenance,software process,software product development,software quality,topic,topic!},
mendeley-tags = {Case StudyTopic,FrameworkTopic,IST-ready,ManagementAwareness={\textgreater}BetterPlaning,ManagementAwarenessProblemStatement,ManagementIvolvement,Notes,Overview={\textgreater}Management,Overview={\textgreater}Visibility,PreventionTopic,ProjectManagementTopic,ProjectManagementTopic!,TD Backlog,TD Identification,TD Measurement,TD Monitoring,TD Prevention,TD Repayment,name,noAwareness,noOverview,topic,topic!},
number = {7-8},
pages = {883},
publisher = {ACM},
title = {{Integrating technical debt management and software quality management processes: A framework and field test}},
volume = {45},
year = {2019}
}
@article{VOGELHEUSER2021110809,
abstract = {Digitalization of products and production systems requires a fusion of mechatronic disciplines, where interfaces between mechanical, electrical, and software engineering are inevitable. The increasingly rapid pace of innovations in mechatronic systems triggers decisions being taken under time and cost pressure. At times, compromises in technical solutions are made, neglecting their long-term damage to the system. Technical debt (TD), a concept from software engineering, refers to short-term benefits that lead to long-term negative consequences, e.g., in the form of more difficult maintainability or evolvability. This also applies to mechatronic systems, yet the knowledge of TD characteristics and correlations in the interdisciplinary life cycle has only received little attention. This first comprehensive survey investigates TD in mechatronics systematically and across sectors. 50 experts, of whom 42{\%} hold positions as department heads, from 21 renowned companies and 10 sectors in the German-speaking region supported this study with real scenarios where TD caused damage to their system. 94 informative TD incidents that were classified into twelve TD types were recorded, of which 2/3 have not yet been eliminated and posed a potential risk to the system. TD emerges most frequently in the first three stages of the life cycle, where the consequences rarely remain isolated at their source but are forwarded to later phases and disciplines in the life cycle. In contrast to the research focus in software engineering, the multi-domain analysis of mechatronic TD issues reveals that software engineers are most burdened by Requirements TD and Infrastructure TD in the interdisciplinary environment.},
author = {Vogel-Heuser, Birgit and Bi, Fandi},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Vogel-Heuser, Bi/Vogel-Heuser, Bi - 2021 - Interdisciplinary effects of technical debt in companies with mechatronic products — a qualitative study.pdf:pdf},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {AutomatedProductionSystem,Awareness={\textgreater}Management,AwarenessProblemStatement,AwarenessTopic,IST-ready,Life cycle,ManagementAwarenessProblemStatement,Mechatronic product,Mechatronics,PreventionProblemStatement,PreventionTopic,SpecialArea,TDinMechatronics,Technical debt,mechatronic disciplines,noOverview,topic},
mendeley-tags = {AutomatedProductionSystem,Awareness={\textgreater}Management,AwarenessProblemStatement,AwarenessTopic,IST-ready,ManagementAwarenessProblemStatement,PreventionProblemStatement,PreventionTopic,SpecialArea,mechatronic disciplines,noOverview,topic},
pages = {110809},
title = {{Interdisciplinary effects of technical debt in companies with mechatronic products — a qualitative study}},
volume = {171},
year = {2021}
}
@inproceedings{Freire2020a,
abstract = {Background: Little is known about the practices used for technical debt (TD) payment. The study of payment practices, as well as the reasons for not applying them, can help practitioners to control and manage TD items. Aims: To investigate, from the point of view of software practitioners, if TD items have been paid off in software projects, the practices that have been used to pay off TD and the reasons that hamper the implementation of these practices. Method: We analyzed - both quantitatively and qualitatively - a corpus of responses from a survey of 432 practitioners, from four countries, about the possibility of TD payment. Results: We found that, for most of the cases, TD items have not been eliminated from software projects. The main reasons for not paying off TD are lack of organizational interest, low priority on the debt, focus on short-term goals, cost, and lack of time. On the other hand, we identified that code refactoring, design refactoring, and update system documentation are the most used practices for TD payment. Practitioners also cited practices related to the prevention, prioritization, and creation of a favorable setting as part of TD payment initiatives. Conclusion: This paper summarizes the identified practices and reasons for not paying off debt items in a map. Our map reveals that the majority of payment practices are of a technical nature while the majority of reasons for not paying off debts are associated with non-technical issues.},
address = {New York, NY, USA},
annote = {Nachweis: TD Prevention ist f{\"{u}}r Praktiker sehr wichtig. (evtl. in Intro bringen?)},
author = {Freire, S{\'{a}}vio and Rios, Nicolli and Gutierrez, Boris and Torres, Dario and Mendon{\c{c}}a, Manoel and Izurieta, Clemente and Seaman, Carolyn and Spinola, Rodrigo O.},
booktitle = {Proceedings of the Evaluation and Assessment in Software Engineering},
file = {:C$\backslash$:/Users/Marion Wiese/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Freire et al. - 2020 - Surveying Software Practitioners on Technical Debt Payment Practices and Reasons for Not Paying off Debt Items.pdf:pdf},
isbn = {9781450377317},
keywords = {IST-ready,InsighTD,Intro,Notes,OverviewRelation,PreventionBeforeRepayment,PreventionBeforeRepaymentPractitioner,PreventionProblemStatement,PreventionSolution,PreventionTopic,TD Repayment,Technical debt,Technical debt management,Technical debt payment,TimelineProblemStatement,noFramework,topic},
mendeley-tags = {IST-ready,InsighTD,Intro,Notes,OverviewRelation,PreventionBeforeRepayment,PreventionBeforeRepaymentPractitioner,PreventionProblemStatement,PreventionSolution,PreventionTopic,TD Repayment,TimelineProblemStatement,noFramework,topic},
pages = {210--219},
publisher = {Association for Computing Machinery},
doi = {10.1145/3383219.3383241},
series = {EASE '20},
title = {{Surveying Software Practitioners on Technical Debt Payment Practices and Reasons for Not Paying off Debt Items}},
year = {2020}
}
@article{Guo2016d,
abstract = {Technical debt (TD) is a metaphor that characterizes the effect of immature software artifacts. The costs and benefits of TD, along with the uncertainty of its interest repayment, provide leverage for software managers, but also could lead to problems such as increased costs and lower quality during maintenance if it is left unattended. Therefore, effective approaches to TD management are needed by software practitioners. As one of our series of studies on TD management, this study was originally designed to reveal the cost side of explicit TD management. The study design required applying a simple proposed TD management approach to the subject project and then collecting cost information. Not surprisingly, we observed some deviation of the actual management process from our proposed one, which provided us with an opportunity to investigate the obstacles to explicitly managing TD. We also identified some costs and cost patterns related to TD management. Based on the insights gained from this study, we further propose strategies to overcome the obstacles and improve the application of TD management in practice.},
annote = {TimelineProblemStatement:
Die ganze Case Study / Umsetzung des Approachs hat aufgrund dieser Problematik nicht richtig stattfinden k{\"{o}}nnen.

Gutes Beispiel, wo Zusammenarbeit mit dem Team, z.B. in der Retro h{\"{a}}tte helfen k{\"{o}}nnen.

Hier der Versuch alles im Sprint Planning zu machen. Bei TAP: alles ist durch Architekt vorbereitet und muss nur noch eingeplant werden.},
author = {Guo, Yuepu and Seaman, Carolyn and da Silva, Fabio Q.B. and {Q.B. da Silva}, Fabio and da Silva, Fabio Q.B. and {Q.B. da Silva}, Fabio},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Guo et al/Guo et al. - 2016 - Costs and obstacles encountered in technical debt management – A case study.pdf:pdf},
issn = {01641212},
doi = {10.1016/j.jss.2016.07.008},
journal = {Journal of Systems and Software},
keywords = {Case StudyTopic,Case study,FrameworkTopic,IST-ready,IndustryCaseStudy,IntegrateTDRepayment,Notes,Overview={\textgreater}DecisionMaking,Project management,ProjectManagementProblemStatement,ProjectManagementTopic,Software maintenance,Software technical debt,TD Backlog,TD Identification,TD Interest,TD Measurement,TD Principal,TD Repayment,Technical debt management,TimelineProblemStatement!,decision-making,name,noAwareness,noPrevention,topic,topic!},
mendeley-tags = {Case StudyTopic,FrameworkTopic,IST-ready,IndustryCaseStudy,IntegrateTDRepayment,Notes,Overview={\textgreater}DecisionMaking,ProjectManagementProblemStatement,ProjectManagementTopic,TD Backlog,TD Identification,TD Interest,TD Measurement,TD Principal,TD Repayment,TimelineProblemStatement!,decision-making,name,noAwareness,noPrevention,topic,topic!},
pages = {156--169},
publisher = {Elsevier Inc.},
title = {{Costs and obstacles encountered in technical debt management – A case study}},
volume = {120},
year = {2016}
}
@article{Verdecchia2021,
abstract = {Architectural technical debt in software-intensive systems is a metaphor used to describe the “big” design decisions (e.g., choices regarding structure, frameworks, technologies, languages, etc.) that, while being suitable or even optimal when made, significantly hinder progress in the future. While other types of debt, such as code-level technical debt, can be readily detected by static analyzers, and often be refactored with minimal or only incremental efforts, architectural debt is hard to be identified, of wide-ranging remediation cost, daunting, and often avoided. In this study, we aim at developing a better understanding of how software development organizations conceptualize architectural debt, and how they deal with it. In order to do so, in this investigation we apply a mixed empirical method, constituted by a grounded theory study followed by focus groups. With the grounded theory method we construct a theory on architectural technical debt by eliciting qualitative data from software architects and senior technical staff from a wide range of heterogeneous software development organizations. We applied the focus group method to evaluate the emerging theory and refine it according to the new data collected. The result of the study, i.e., a theory emerging from the gathered data, constitutes an encompassing conceptual model of architectural technical debt, identifying and relating concepts such as its symptoms, causes, consequences, management strategies, and communication problems. From the conducted focus groups, we assessed that the theory adheres to the four evaluation criteria of classic grounded theory, i.e., the theory fits its underlying data, is able to work, has relevance, and is modifiable as new data appears. By grounding the findings in empirical evidence, the theory provides researchers and practitioners with novel knowledge on the crucial factors of architectural technical debt experienced in industrial contexts.},
author = {Verdecchia, Roberto and Kruchten, Philippe and Lago, Patricia and Malavolta, Ivano},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Verdecchia et al/Verdecchia et al. - 2021 - Building and evaluating a theory of architectural technical debt in software-intensive systems.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {ATD,Awareness={\textgreater}Management,AwarenessTopic!,Case StudyRelation,CommunicationProblemStatement,Focus group,FrameworkATD,Grounded theory,IST-,IST-ToDo,IST-ready,OverviewRelation,Software architecture,Software engineering,Software evolution,TD Causes,TD Consequences,TD ManagementStrategy,TD Symptoms,Technical debt,TimelineProblemStatement,noPrevention,topic,topic!},
mendeley-tags = {ATD,Awareness={\textgreater}Management,AwarenessTopic!,Case StudyRelation,CommunicationProblemStatement,FrameworkATD,IST-ready,OverviewRelation,TD Causes,TD Consequences,TD ManagementStrategy,TD Symptoms,TimelineProblemStatement,noPrevention,topic,topic!},
pages = {110925},
publisher = {Elsevier Inc.},
title = {{Building and evaluating a theory of architectural technical debt in software-intensive systems}},
volume = {176},
year = {2021}
}
@inproceedings{Peters2014a,
abstract = {Software projects run the gamut from simple to complex, difficult to impossible and everything in between. Software project managers and their development teams must cope with and adapt to unforeseeable changes in nearly every aspect of the project as originally envisioned, scheduled and planned. In spite of all this turmoil and chaos systems get built, they work and at a later time are seen as having been created via a variety of imprudent development practices now collectively referred to as technical debt. This paper examines the hidden cost of expediency by probing what taking shortcuts does to productivity, morale and turnover on the project identifying debt that goes much deeper than technical.},
annote = {Paper on TD and project management, aber nur mit Fokus auf die Kosten durch sinkende "developer morale" und "turnover", die dabei entstehen},
author = {Peters, Lawrence},
booktitle = {2014 Sixth International Workshop on Managing Technical Debt},
mendeley-tags = {IST-ready,ManagerPerspectiveProblemStatement,ProjectManagementTopic!,Psychology,TimelineProblemStatement,cognitive dissonance,topic,topic!},
pages = {8--10},
title = {{Technical Debt: The Ultimate Antipattern - The Biggest Costs May Be hidden, Widespread, and Long Term}},
year = {2014}
}
@article{Lim2012,
abstract = {An interview study involving 35 practitioners from a variety of domains aimed to characterize technical debt at the ground level to find out how software practitioners perceive it. The study also aimed to understand the context in which technical debt occurs, including its causes, symptoms, and effects. In addition, the study focused on how practitioners currently deal with technical debt. This analysis paints a picture of a large, complex balancing act of various short- and long-term concerns. The Web Extra gives the interview questions used by Erin Lim, Nitin Taksande, and Carolyn Seaman.},
annote = {Viele gute Hinweise und best{\"{a}}tigende Aussagen, aber keine L{\"{o}}sungsans{\"{a}}tze.

Cite: most of the technical debt our participants described was intentional and didn't include the types of structural decay that are often the object of technical-debt research},
author = {Lim, Erin and Taksande, Nitin and Seaman, Carolyn},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2012/Lim, Taksande, Seaman/Lim, Taksande, Seaman - 2012 - A Balancing Act What Software Practitioners Have to Say about Technical Debt.pdf:pdf},
issn = {1937-4194},
journal = {IEEE Software},
keywords = {Awareness={\textgreater}Management,AwarenessProblemStatement,AwarenessTopic!,CommunicationProblemStatement,IST-ready,Interviews,Investments,Notes,OverviewTopic,Risk management,Software te,TD Causes,TD Consequences,TightTimelineCauses,TimelineProblemStatement,decision debt,decision-making,topic,topic!},
mendeley-tags = {Awareness={\textgreater}Management,AwarenessProblemStatement,AwarenessTopic!,CommunicationProblemStatement,IST-ready,Notes,OverviewTopic,TD Causes,TD Consequences,TightTimelineCauses,TimelineProblemStatement,decision debt,decision-making,topic,topic!},
number = {6},
pages = {22--27},
title = {{A Balancing Act What Software Practitioners Have to Say about Technical Debt}},
volume = {29},
year = {2012}
}
@inproceedings{Lenarduzzi2019g,
abstract = {Background. The need to release our products under tough time constraints has required us to take shortcuts during the implementation of our products and to postpone the correct implementation, thereby accumulating Technical Debt. Objective. In this work, we report the experience of a Finnish SME in managing Technical Debt (TD), investigating the most common types of TD they faced in the past, their causes, and their effects. Method. We set up a focus group in the case-company, involving different roles. Results. The results showed that the most significant TD in the company stems from disagreements with the supplier and lack of test automation. Specification and test TD are the most significant types of TD. Budget and time constraints were identified as the most important root causes of TD. Conclusion. TD occurs when time or budget is limited or the amount of work are not understood properly. However, not all postponed activities generated ”debt”. Sometimes the accumulation of TD helped meet deadlines without a major impact, while in other cases the cost for repaying the TD was much higher than the benefits. From this study, we learned that learning, careful estimations, and continuous improvement could be good strategies to mitigate TD These strategies include iterative validation with customers, efficient communication with stakeholders, meta-cognition in estimations, and value orientation in budgeting and scheduling.},
author = {Lenarduzzi, Valentina and Orava, Teemu and Saarim{\"{a}}ki, Nyyti and Systa, Kari and Taibi, Davide and Syst{\"{a}}, Kari and Taibi, Davide and Systa, Kari and Taibi, Davide},
booktitle = {2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Lenarduzzi et al/Lenarduzzi et al. - 2019 - An Empirical Study on Technical Debt in a Finnish SME.pdf:pdf},
isbn = {9781728129686},
issn = {1949-3789},
keywords = {Companies,ConsultingProblemStatement,Documentation,Estimation,EstimationProblemStatement,IST-ready,OverviewRelation,PreventionSolution,PreventionTopic!,Small and Medium-Sized Enterprise,TD Causes,TD Prevention,Te,Technical Debt,Time factors,TimelineProblemStatement,noAwareness,topic,topic!},
mendeley-tags = {ConsultingProblemStatement,EstimationProblemStatement,IST-ready,OverviewRelation,PreventionSolution,PreventionTopic!,TD Causes,TD Prevention,TimelineProblemStatement,noAwareness,topic,topic!},
pages = {1--6},
title = {{An Empirical Study on Technical Debt in a Finnish SME}},
volume = {2019-Septe},
year = {2019}
}
@article{Moreira2021,
author = {Moreira, Rui S and Carvalho, Paulo and Catarino, Rui and Lopes, Toni and Torres, Jos{\'{e}} Manuel and Sobral, Pedro and Teixeira, Ana and Soares, Christophe and Almeida, Isabel F and Almeida, Vera},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Moreira et al/Moreira et al. - 2021 - Trends and Applications in Information Systems and Technologies.pdf:pdf},
isbn = {978-3-030-72659-1},
keywords = {Awareness={\textgreater}Prevention,AwarenessProblemStatement,AwarenessTopic,IST-ready,InsighTD,PreventionSolution,PreventionTopic,ProjectManagementProblemStatement,ProjectManagementRelation,RegularMeetings,ResponsiblePerson,TimelineProblemStatement,insightd,software practitioners,technical debt monitoring,technical debt prevention,topic},
mendeley-tags = {Awareness={\textgreater}Prevention,AwarenessProblemStatement,AwarenessTopic,IST-ready,InsighTD,PreventionSolution,PreventionTopic,ProjectManagementRelation,RegularMeetings,TimelineProblemStatement,topic},
pages = {483--493},
title = {{Trends and Applications in Information Systems and Technologies}},
volume = {1367},
year = {2021}
}
@inproceedings{Ramac2020b,
abstract = {Background: The concept of technical debt (TD) describes a phenomenon that impacts software projects and makes them difficult to manage. In recent years, various techniques and best practices in terms of TD management were proposed and although important on its own this knowledge must be complemented with a broader comprehension of what causes TD and what are the effects of TD. This paper presents a replication of the InsighTD survey-a globally distributed family of industrial surveys on causes and effects of TD-and thus amplifies the InsighTD reach and expands its knowledge base. Objective: The research presented in this paper gives insight on the state of practice and understanding of the TD concept alongside with data on causes and effects of TD in the Serbian IT industry. Method: A nation-wide survey, as a part of the InsighTD initiative, was conducted in Serbia in order to obtain feedback from software industry practitioners. Results: In total 93 practitioners from the Serbian IT industry filled out the survey. The results indicate that the concept of TD is broadly distributed, but at the same time it is not widely accepted for use (only 35{\%} of participants had some sort of practical experiences with projects that were TD aware). The top cited causes were: deadlines, ineffective project management, lack of experience, test not performed and misconduct. On the other side the most common effects of TD were: low maintainability, increased effort, rework and low external quality. Conclusion: The research presented in this paper confirms the original study findings that deadlines are the top cited cause of TD. It also identifies new causes of TD in the context of InsighTD, with misconduct being one of the most cited ones. Regarding the effects of TD this research differs in most of the top 10 identified effects from the original study but confirms the occurrence of some effects most cited.},
author = {Rama{\v{c}}, Robert and Mandi{\'{c}}, Vladimir and Tau{\v{s}}an, Neboj{\v{s}}a and Rios, Nicolli and {De Mendonca Neto}, Manoel G. and Seaman, Carolyn and Sp{\'{i}}nola, Rodrigo Oliveira},
booktitle = {2020 46th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2020/Rama{\v{c}} et al/Rama{\v{c}} et al. - 2020 - Common Causes and Effects of Technical Debt in Serbian IT InsighTD Survey Replication.pdf:pdf},
isbn = {9781728195322},
keywords = {Encoding,IST-ready,Industries,InsighTD,Instruments,ProjectManagementProblemStatement,ProjectManagementTopic,Protocols,Software,Technical debt,TimelineProblemStatement,causes of technical debt,effects of technical debt,family of surveys,name,noOverview,survey,topic},
mendeley-tags = {IST-ready,InsighTD,ProjectManagementProblemStatement,ProjectManagementTopic,TimelineProblemStatement,name,noOverview,topic},
pages = {354--361},
title = {{Common Causes and Effects of Technical Debt in Serbian IT: InsighTD Survey Replication}},
year = {2020}
}
@article{Bi2021a,
abstract = {Complexity of products, volatility in global markets, and the increasingly rapid pace of innovations may make it difficult to know how to approach challenging situations in mechatronic design and production. Technical Debt (TD) is a metaphor that describes the practical bargain of exchanging short-term benefits for long-term negative consequences. Oftentimes, the scope and impact of TD, as well as the cost of corrective measures, are underestimated. Especially for mechatronic teams in the mechanical, electrical, and software disciplines, the adverse interdisciplinary ripple effects of TD incidents are passed on throughout the life cycle. The analysis of the first comprehensive survey showed that not only do the TD types differ in cross-disciplinary comparisons, but different characteristics can also be observed depending on whether a discipline is studied in isolation or in combination with others. To validate the study results and to report on a general consciousness of TD in the disciplines, this follow-up study involves 15 of the 50 experts of the predecessor study and reflects the frequency and impact of technical debt in industrial experts' daily work using a questionnaire. These experts rate 14 TD types, 47 TD causes, and 33 TD symptoms in terms of their frequency and impact. Detailed analyses reveal consistent results for the most frequent TD types and causes, yet they show divergent characteristics in a profound exploration of discipline-specific phenomena. Thus, this study has the potential to set the foundations for future automated TD identification analyses in mechatronics.},
author = {Bi, Fandi and Vogel-Heuser, Birgit and Xu, Litong},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Bi, Vogel-Heuser, Xu/Bi, Vogel-Heuser, Xu - 2021 - Frequency and Impact of Technical Debt Characteristics in Companies Producing Mechatronic Products.pdf:pdf},
isbn = {9781665414050},
journal = {2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
keywords = {AutomatedProductionSystem,Companies,Complexity theory,Globalizatio,Globalization,IST-,IST-ToDo,IST-ready,Mechatronics,PreventionTopic,Production,Software,SpecialArea,TD Causes,Technical debt,Technological innovation,TimelineProblemStatement,cause,frequency,impact,mechatronic products,noOverview,symptom,technical debt,topic},
mendeley-tags = {AutomatedProductionSystem,IST-ready,PreventionTopic,SpecialArea,TD Causes,TimelineProblemStatement,noOverview,topic},
pages = {26--35},
publisher = {IEEE},
title = {{Frequency and Impact of Technical Debt Characteristics in Companies Producing Mechatronic Products}},
year = {2021}
}
@inproceedings{Freire2021a,
abstract = {Context: The technical debt (TD) metaphor helps to conceptualize the pending issues and trade-offs made during software development. Knowing TD causes can support in defining preventive actions and having information about effects aids in the prioritization of TD payment. Goal: To investigate the impact of the experience level on how practitioners perceive the most likely causes that lead to TD and the effects of TD that have the highest impacts on software projects. Method: We approach this topic by surveying 227 practitioners. Results: While experienced software developers focus on human factors as TD causes and external quality attributes as TD effects, low experienced developers seem to concentrate on technical issues as causes and internal quality issues and increased project effort as effects. Missing any of these types of causes could lead a team to miss the identification of important TD, or miss opportunities to preempt TD. On the other hand, missing important effects could hamper effective planning or erode the effectiveness of decisions about prioritizing TD items. Conclusion: Having software development teams composed of practitioners with a homogeneous experience level can erode the team's ability to effectively manage TD.},
author = {Freire, S{\'{a}}vio Savio and Rios, Nicolli and P{\'{e}}rez, Boris and Castellanos, Camilo and Correal, Dar{\'{i}}o and Rama{\v{c}}, Robert and Mandi{\'{c}}, Vladimir and Tau{\v{s}}an, Neboj{\v{s}}a and L{\'{o}}pez, Gustavo and Pacheco, Alexia and Falessi, Davide and Mendon{\c{c}}a, Manoel and Izurieta, Clemente and Seaman, Carolyn and Sp{\'{i}}nola, Rodrigo},
booktitle = {2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
file = {:C$\backslash$:/Users/Marion Wiese/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Freire et al. - 2021 - How Experience Impacts Practitioners' Perception of Causes and Effects of Technical Debt.pdf:pdf},
isbn = {9781665414098},
issn = {2574-1837},
keywords = {5,6,AwarenessTopic,Causes={\textgreater}Prevention,CommunicationProblemStatement,Conferences,ExperienceLevel,Human factors,IST-ready,InsighTD,MixOfExperienceLevel={\textgreater}Prevention,Planning,PreventionTopic!,ProjectManagementProblemStatement,Softwa,Software,Software engineering,TimelineProblemStatement,communication due to different,debt effects,diversity of experience facilitates,information exchange and,insightd,level of experience,technical,technical debt,technical debt causes,technical debt effects,topic,topic!,viewpoints,we also},
mendeley-tags = {AwarenessTopic,Causes={\textgreater}Prevention,CommunicationProblemStatement,ExperienceLevel,IST-ready,InsighTD,MixOfExperienceLevel={\textgreater}Prevention,PreventionTopic!,ProjectManagementProblemStatement,TimelineProblemStatement,topic,topic!},
pages = {21--30},
title = {{How Experience Impacts Practitioners' Perception of Causes and Effects of Technical Debt}},
year = {2021}
}
@article{Soliman2021a,
abstract = {Context: During software development, some architectural design decisions incur technical debt, either deliberately or inadvertently. These have serious impact on the quality of a software system, and can cost significant time and effort to be changed. While current research efforts have explored general concepts of architectural design decisions and technical debt separately, debt-incurring architectural design decisions have not been specifically explored in practice. Objective: In this case study, we explore debt-incurring architectural design decisions (DADDs) in practice. Specifically, we explore the main types of DADDs, why and how they are incurred in a software system, and how practitioners deal with these types of design decisions. Method: We performed interviews and a focus group with practitioners working in embedded and enterprise software companies, discussing their concrete experience with such architectural design decisions. Results: We provide the following contributions: 1) A categorization for the types of DADDs, which extend a current ontology on architectural design decisions. 2) A process on how deliberate DADDs are made in practice. 3) A conceptual model which shows the relationships between the causes and triggers of inadvertent DADDs. 4) The main factors that influence the way of dealing with DADDs. Conclusion: The results can support the development of new approaches and tools for Architecture Technical Debt management from the perspective of Design Decisions. Moreover, they support future research to capture architecture knowledge related to DADDs.},
author = {Soliman, Mohamed and Avgeriou, Paris and Li, Yikun},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Soliman, Avgeriou, Li/Soliman, Avgeriou, Li - 2021 - Architectural design decisions that incur technical debt — An industrial case study.pdf:pdf;:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2021/Soliman, Avgeriou, Li/Soliman, Avgeriou, Li - 2021 - Architectural design decisions that incur technical debt — An industrial case study.pdf:pdf},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {2Phase,ATD,Architectural design decisions,Architectural knowledge,Architectural technical debt,AwarenessTopic!,Case StudyTopic,CommunicationProblemStatement,DecisionFactors,DecisionMakingModel,ExploratoryCaseStudy,FrameworkRelation,IST-ready,ManagementAwarenessProblemStatement,OverviewRelation,PreventionRelation,TD Causes,TD Consequences,Technical debt,TimelineProblemStatement,decision-making,decison debt,topic,topic!},
mendeley-tags = {2Phase,ATD,AwarenessTopic!,Case StudyTopic,CommunicationProblemStatement,DecisionFactors,DecisionMakingModel,ExploratoryCaseStudy,FrameworkRelation,IST-ready,ManagementAwarenessProblemStatement,OverviewRelation,PreventionRelation,TD Causes,TD Consequences,TimelineProblemStatement,decision-making,decison debt,topic,topic!},
pages = {106669},
title = {{Architectural design decisions that incur technical debt — An industrial case study}},
volume = {139},
year = {2021}
}
@inproceedings{Rocha2017,
abstract = {Keeping the source code clean and organized throughout the software development and evolution is a challenging task. Due to many factors, design choices that cause the overall code structure to decay may be made and implemented, so that benefits, such as reduced development time, can be obtained in the short term. In order to deal with these situations, the metaphor of technical debt emerged to allow such situations to be systematically managed. Although this concept is already known in academia, there are limited evidences that the industry widely adopts it. Therefore, this paper presents the results of a survey involving 74 participants that work in the Brazilian software industry, in order to understand why technical debt is introduced, eliminated and how it is managed in practice, with a focus on the code level. Our survey is not limited to the explicit management of technical debt but also includes the notion that the introduction of poor code without the awareness that it is a poor design choice can also become a debt. Such a code can be acknowledged as a debt to be paid as the software evolves. Our results show that overload of work and lack of time, together with pressure from the management, are the main reasons for the creation of technical debt. However, when participants evaluate other developers, they believe that inexperience also plays a key role. Moreover, the most effective practice to avoid the creation of technical debt is code review, in the opinion of participants.},
address = {New York, NY, USA},
author = {Rocha, Junior Cesar and Zapalowski, Vanius and Nunes, Ingrid},
booktitle = {Proceedings of the 31st Brazilian Symposium on Software Engineering},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2017/Rocha, Zapalowski, Nunes/Rocha, Zapalowski, Nunes - 2017 - Understanding Technical Debt at the Code Level from the Perspective of Software Developers.pdf:pdf},
isbn = {9781450353267},
keywords = {AwarenessRelation,IST-ready,ManagementAwarenessProblemStatement,ManagerPerspectiveProblemStatement,Overview={\textgreater}Prevention,OverviewTopic,PreventionSolution,PreventionTopic,Programming Best Practices,Survey,Technical Debt,TimelineProblemStatement,code debt,topic},
mendeley-tags = {AwarenessRelation,IST-ready,ManagementAwarenessProblemStatement,ManagerPerspectiveProblemStatement,Overview={\textgreater}Prevention,OverviewTopic,PreventionSolution,PreventionTopic,TimelineProblemStatement,code debt,topic},
pages = {64--73},
publisher = {Association for Computing Machinery},
series = {SBES'17},
title = {{Understanding Technical Debt at the Code Level from the Perspective of Software Developers}},
year = {2017}
}
@inproceedings{Martini2016b,
abstract = {Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been recently produced, its practical management lacks empirical studies. In this paper we investigate the state of practice in several companies in order to understand how they start tracking Technical Debt. We combined different methodologies: we conducted a survey, involving 226 respondents from 15 organizations and a more in-depth multiple case-study in three organizations, where Technical Debt was tracked: we involved 13 interviews and 79 Technical Debt issues analysis. We found that the development time dedicated to manage Technical Debt is substantial (around 25{\%} of the overall development) but not systematic: only a few participants methodically track Technical Debt. By studying the approaches in the companies participating in the case-study, we understood how companies start tracking Technical Debt and what are the initial benefits and challenges. Finally, we propose a Strategic Adoption Model based to define and adopt a dedicated process for tracking Technical Debt.},
annote = {Duplicate to 
Technical Debt tracking: Current state of practice: A survey and multiple case study in 15 large organizations},
author = {Martini, Antonio and Besker, Terese and Bosch, Jan},
booktitle = {2016 23rd Asia-Pacific Software Engineering Conference (APSEC)},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Martini, Besker, Bosch/Martini, Besker, Bosch - 2016 - The Introduction of Technical Debt Tracking in Large Companies.pdf:pdf},
issn = {1530-1362},
keywords = {AwarenessProblemStatement,AwarenessTopic,Companies,Comput,Documentation,Duplicate,IST-,IST-ToDo,IST-ready,Interviews,Notes,OverviewTopic,Software,TD Maturity Model,name,topic},
mendeley-tags = {AwarenessProblemStatement,AwarenessTopic,Duplicate,IST-ready,Notes,OverviewTopic,TD Maturity Model,name,topic},
pages = {161--168},
title = {{The Introduction of Technical Debt Tracking in Large Companies}},
year = {2016}
}
@inproceedings{Rios2019,
abstract = {Understanding TD causes can support development teams in defining actions that could be taken to prevent the occurrence of debt items. Understanding the effects of TD could aid in prioritization of TD items to pay off to minimize possible negative consequences for the project. Existing work has revealed 105 causes and 85 effects of TD, and this high number can make it difficult to make practical use of this information. Without a consolidated representation, we would need to rely on a set of tables and isolated pieces of data. In this work, we propose the use of cross-company probabilistic cause-effect diagrams to represent information about TD causes and effects. We hypothesize that such diagrams can be useful to support TD cause/effect analysis sessions and empirically investigate this issue. Results from a case study performed with 72 participants indicate that the diagrams are able to positively support the management of TD, making it easier to identify its causes and the effects of its presence. Most of the participants also agreed that, by using the proposed diagrams, they gain agility, productivity, performance, and effectiveness. Finally, 89{\%} of the participants stated that the use of the diagrams helped them to identify causes and effects of TD that they would not have identified without their support.},
author = {Rios, Nicolli and {Oliveira Sp{\'{i}}nola}, Rodrigo and {de Mendon{\c{c}}a Neto}, Manoel G. and Seaman, Carolyn},
booktitle = {2019 IEEE/ACM International Conference on Technical Debt (TechDebt)},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Rios et al/Rios et al. - 2019 - Supporting Analysis of Technical Debt Causes and Effects with Cross-Company Probabilistic Cause-Effect Diagrams(2).pdf:pdf},
isbn = {9781728133713},
doi = {10.1109/TechDebt.2019.00009},
keywords = {Causes={\textgreater}Prevention,Companies,Computer science,Consequences={\textgreater}Prioritization,IST-ready,InsighTD,Overview={\textgreater}Prevention,OverviewTopic,PreventionProblemStatement,PreventionSolution,PreventionTopic,Probabilistic cause-effect diagrams,Probabilistic logic,Productivity,RegularMeetings,Software,TD Causes,TD Consequences,Technical debt,Technical debt causes,Technical debt effects,Time divisi,Time division multiplexing,probabilistic cause-effect diagrams,technical debt,technical debt causes,technical debt effects,topic},
mendeley-tags = {Causes={\textgreater}Prevention,Consequences={\textgreater}Prioritization,IST-ready,InsighTD,Overview={\textgreater}Prevention,OverviewTopic,PreventionProblemStatement,PreventionSolution,PreventionTopic,RegularMeetings,TD Causes,TD Consequences,topic},
pages = {3--12},
title = {{Supporting Analysis of Technical Debt Causes and Effects with Cross-Company Probabilistic Cause-Effect Diagrams}},
year = {2019}
}
@article{Yli-Huumo2016,
abstract = {Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future.},
annote = {provides a maturity model based on 25 interviews but reduces prevention to code debt (coding standards, reviews, DoD)},
doi = {10.1109/TechDebt.2019.00009},
author = {Yli-Huumo, Jesse and Maglyas, Andrey and Smolander, Kari},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Yli-Huumo, Maglyas, Smolander/Yli-Huumo, Maglyas, Smolander - 2016 - How do software development teams manage technical debt – An empirical study.pdf:pdf},
issn = {0164-1212},
doi = {10.1109/TechDebt.2019.00009},
journal = {Journal of Systems and Software},
keywords = {01read,AwarenessRelation,Case StudyTopic,Exploratory case study,ExploratoryCaseStudy,FrameworkTopic,IST-ready,Notes,OverviewTopic,PreventionProblemStatement,PreventionSolution,PreventionTopic,TD,TD Identification,TD Maturity Model,TD Measurement,TD Monitoring,TD Prevention,TD Prioritization,TD Repayment,TD activities,TD communication,Technical debt,Technical debt management,name,topic},
mendeley-tags = {01read,AwarenessRelation,Case StudyTopic,ExploratoryCaseStudy,FrameworkTopic,IST-ready,Notes,OverviewTopic,PreventionProblemStatement,PreventionSolution,PreventionTopic,TD,TD Identification,TD Maturity Model,TD Measurement,TD Monitoring,TD Prevention,TD Prioritization,TD Repayment,TD activities,TD communication,name,topic},
pages = {195--218},
publisher = {Elsevier Inc.},
title = {{How do software development teams manage technical debt? – An empirical study}},
volume = {120},
year = {2016}
}
@inproceedings{Besker2018b,
abstract = {Software companies need to continuously deliver customer value, both from a short- and long-term perspective. However, software development can be impeded by what has been described as Technical Debt (TD). The aim of this study is to explore the negative consequences of TD in terms of wasted software development time. This study also investigates on which additional activities this wasted time is spent and whether different types of TD impact the wasted time differently. This study also sets out to examine the benefits of tracking and communicating the amount of wasted time, both from a developer's and manager's perspective. This paper reports the results of a longitudinal study, surveying 43 software developers, together with follow-up interviews with 16 industrial software practitioners. The analysis of the reported wasted time revealed that developers waste, on average, 23{\%} of their development time due to TD and that they are frequently forced to introduce new TD due to already existing TD. The most common activity on which additional time is spent is performing additional testing.},
author = {Besker, Terese and Bosch, Jan and Martini, Antonio and Bosch, Jan},
booktitle = {Proceedings - International Conference on Software Engineering},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2018/Besker et al/Besker et al. - 2018 - Technical debt cripples software developer productivity A longitudinal study on developers' daily software develo.pdf:pdf},
isbn = {9781450357135},
issn = {02705257},
keywords = {Awareness={\textgreater}Prevention,AwarenessProblemStatement,AwarenessTopic!,IST-ready,ManagementAwareness={\textgreater}BetterPlaning,ManagementAwarenessProblemStatement,ManagerPerspective,OverviewRelation,empirical study,longitudinal study,name,productivity,software,software development,software productivity,technical debt,topic,topic!,wasted time},
mendeley-tags = {Awareness={\textgreater}Prevention,AwarenessProblemStatement,AwarenessTopic!,IST-ready,ManagementAwareness={\textgreater}BetterPlaning,ManagementAwarenessProblemStatement,ManagerPerspective,OverviewRelation,name,topic,topic!},
pages = {105--114},
publisher = {ACM},
title = {{Technical debt cripples software developer productivity: A longitudinal study on developers' daily software development work}},
year = {2018}
}
@article{Rios2020,
abstract = {Context: Studying the causes of technical debt (TD) could aid in TD prevention, thus easing the job of TD management. On the other hand, better understanding of the effects of TD could also aid in TD management by facilitating more informed decisions about incurring and paying off debt. Objective: Create a deeper understanding, and confirming existing evidence, of the causes and effects of TD by collecting new evidence from real-world TD examples. Method: InsighTD is a globally distributed family of industrial surveys on the causes and effects of TD. It is designed to run as a large-scale study based on continuous and independent replications in different countries. The survey instrument asks practitioners to describe in detail a real example of TD from their experience. We present in this paper the design of InsighTD, which has the primary goal of replication at a large-scale, with the results of the study in Brazil as a small part of the larger puzzle. Results: The first iteration of the InsighTD survey, carried out in Brazil, yielded 107 responses. We identified a total of 78 causes and 66 effects, which confirm and also extend the current knowledge on causes and effects of TD. Then, we organized the identified set of causes and effects in probabilistic cause-effect diagrams. The proposed diagrams highlight the causes that can most contribute to the occurrence of TD as well as the most common effects that occur as a result of debt. Conclusion: We intend to reduce the problem of isolated TD investigations that are not yet representative and build a continuous and generalizable empirical basis for understanding practical problems and challenges of TD.},
annote = {Evtl. eigene Arbeit in die Causes einordnen? Passt das iwo rein?

TD Prevention: Diagramme f{\"{u}}r Causes and Effects mit Team ansehen und Strategien entwickeln, aber es gibt hier ja noch keine Strategien

In Intro bei Causes: "A comprehnsive list can be found from InsighTD Studies (e.g. this one)"},
author = {Rios, Nicolli and Sp{\'{i}}nola, Rodrigo Oliveira and Mendon{\c{c}}a, Manoel and Seaman, Carolyn},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2020/Rios et al/Rios et al. - 2020 - The practitioners' point of view on the concept of technical debt and its causes and consequences a design for a gl.pdf:pdf},
issn = {15737616},
doi = {10.1007/s10664-020-09832-9},
journal = {Empirical Software Engineering},
keywords = {AwarenessRelation,Causes={\textgreater}Prevention,Effects={\textgreater}Prioritization,ExperienceLevel,Family of surveys,FutureWork,IST-ready,InsighTD,NotTechnicalProblem,Notes,PreventionBeforeRepayment,PreventionProblemStatement,PreventionSolution,PreventionTopic!,ProjectManagementProblemStatement,ProjectManagementTopic,RegularMeetings,Survey,TD Causes,TD Consequences,Technical debt,Technical debt causes,Technical debt effects,TimelineProblemStatement!,name,noOverview,topic,topic!},
mendeley-tags = {AwarenessRelation,Causes={\textgreater}Prevention,Effects={\textgreater}Prioritization,ExperienceLevel,FutureWork,IST-ready,InsighTD,NotTechnicalProblem,Notes,PreventionBeforeRepayment,PreventionProblemStatement,PreventionSolution,PreventionTopic!,ProjectManagementProblemStatement,ProjectManagementTopic,RegularMeetings,TD Causes,TD Consequences,TimelineProblemStatement!,name,noOverview,topic,topic!},
number = {5},
pages = {3216--3287},
publisher = {Empirical Software Engineering},
title = {{The practitioners' point of view on the concept of technical debt and its causes and consequences: a design for a global family of industrial surveys and its first results from Brazil}},
volume = {25},
year = {2020}
}
@inproceedings{Martini2015a,
abstract = {A known problem in large software companies is to balance the prioritization of short-term with long-term viability. Specifically, architecture violations (Architecture Technical Debt) taken to deliver fast might hinder future feature development. However, some technical debt requires more interest to be paid than other. We have investigated which Technical Debt items generate more effort and how this effort is manifested during software development. We conducted a multiple-case embedded case study comprehending 7 sites at 5 large international software companies. We found that some Technical Debt items are contagious, causing other parts of the system to be contaminated with the same problem, which may lead to non-linear growth of interest. We also identify another socio-technical phenomenon, for which a combination of weak awareness of debt, time pressure and refactoring creates Vicious Circles of events during the development. Such phenomena need to be identified and stopped before the development is led to a crisis point. Finally, this paper presents a taxonomy of the most dangerous items identified during the qualitative investigation and a model of their effects that can be used for prioritization, for further investigation and as a quality model for extracting more precise and context-specific metrics.},
annote = {Hier vor allem ManagementAwarenessProblem},
author = {Martini, Antonio and Bosch, Jan},
booktitle = {Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2015/Martini, Bosch/Martini, Bosch - 2015 - The Danger of Architectural Technical Debt Contagious Debt and Vicious Circles.pdf:pdf},
isbn = {9781479919222},
keywords = {01read,ATD,AwarenessLackConsequences,AwarenessOfEffects,AwarenessProblemStatement,AwarenessTopic!,CommunicationProblemStatement,Companies,Computer architecture,Contagious Debt,IST-,IST-ToDo,IST-ready,ManagementAwarenessProblemStatement,Notes,Software,Taxonomy,TimelineProblemStatement,agile software development,architectural technical debt,effort,multiple case-study,qualitative model,socio-technical phenomena,topic,topic!},
mendeley-tags = {01read,ATD,AwarenessLackConsequences,AwarenessOfEffects,AwarenessProblemStatement,AwarenessTopic!,CommunicationProblemStatement,Contagious Debt,IST-ready,ManagementAwarenessProblemStatement,Notes,TimelineProblemStatement,topic,topic!},
pages = {1--10},
title = {{The Danger of Architectural Technical Debt: Contagious Debt and Vicious Circles}},
year = {2015}
}
@article{Martini2018d,
abstract = {Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25{\%} of the overall development), but mostly not systematic: only a few participants (26{\%}) use a tool, and only 7.2{\%} methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial benefits and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations.},
author = {Martini, Antonio and Besker, Terese and Bosch, Jan},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2018/Martini, Besker, Bosch/Martini, Besker, Bosch - 2018 - Technical Debt tracking Current state of practice A survey and multiple case study in 15 large organi(2).pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {AwarenessTopic,Case StudyRelation,Change management,IST-ready,ManagementAwarenessProblemStatement,ManagementIvolvement,Multiple case study,Overview={\textgreater}Awareness,Overview={\textgreater}Communication,Overview={\textgreater}Management,Overview={\textgreater}Visibility,OverviewBenefits,OverviewTopic!,Software process improvement,Survey,TD Maturity Model,Technical Debt,VisibilityProblemStatement,topic,topic!},
mendeley-tags = {AwarenessTopic,Case StudyRelation,IST-ready,ManagementAwarenessProblemStatement,ManagementIvolvement,Overview={\textgreater}Awareness,Overview={\textgreater}Communication,Overview={\textgreater}Management,Overview={\textgreater}Visibility,OverviewBenefits,OverviewTopic!,TD Maturity Model,VisibilityProblemStatement,topic,topic!},
pages = {42--61},
publisher = {Elsevier B.V.},
title = {{Technical Debt tracking: Current state of practice: A survey and multiple case study in 15 large organizations}},
volume = {163},
year = {2018}
}
@inproceedings{Peters2014a,
abstract = {Software projects run the gamut from simple to complex, difficult to impossible and everything in between. Software project managers and their development teams must cope with and adapt to unforeseeable changes in nearly every aspect of the project as originally envisioned, scheduled and planned. In spite of all this turmoil and chaos systems get built, they work and at a later time are seen as having been created via a variety of imprudent development practices now collectively referred to as technical debt. This paper examines the hidden cost of expediency by probing what taking shortcuts does to productivity, morale and turnover on the project identifying debt that goes much deeper than technical.},
annote = {Paper on TD and project management, aber nur mit Fokus auf die Kosten durch sinkende "developer morale" und "turnover", die dabei entstehen},
author = {Peters, Lawrence},
booktitle = {2014 Sixth International Workshop on Managing Technical Debt},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2014/Peters/Peters - 2014 - Technical Debt The Ultimate Antipattern - The Biggest Costs May Be hidden, Widespread, and Long Term.pdf:pdf},
keywords = {IST-ready,ManagerPerspectiveProblemStatement,Productivity,Project management,ProjectManagementTopic!,Psychology,Schedules,Software,TimelineProblemStatement,cognitive dissonance,topic,topic!},
mendeley-tags = {IST-ready,ManagerPerspectiveProblemStatement,ProjectManagementTopic!,Psychology,TimelineProblemStatement,cognitive dissonance,topic,topic!},
pages = {8--10},
title = {{Technical Debt: The Ultimate Antipattern - The Biggest Costs May Be hidden, Widespread, and Long Term}},
year = {2014}
}
@article{DeAlmeida2019,
abstract = {Technical debt happens when teams take shortcuts on software development to gain short-term benefits at the cost of making future changes more expensive. Previous results show that there is a misalignment between the prioritization done by technical professionals and the prioritization expected by business ones. This paper presents a business-driven approach to prioritize technical debt items. The research is organized into four phases: Exploratory, to identify the research focus; concept verification, where the proposed approach was evaluated on a multi-case study; solution, where a design science research was conducted to develop Tracy, a framework for technical debt prioritization; and validation. Results so far show that the business-driven prioritization of technical debt items can improve the alignment and communication between the technical and business stakeholders.},
annote = {Neueres Paper:
Business-Driven Technical Debt Prioritization - An Industrial Case Study},
archivePrefix = {arXiv},
arxivId = {1908.01347},
author = {{Reboucas De Almeida}, Rodrigo},
eprint = {1908.01347},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2019/Reboucas De Almeida/Reboucas De Almeida - 2019 - Business-Driven Technical Debt Prioritization(2).pdf:pdf},
isbn = {9781728130941},
issn = {2576-3148},
journal = {Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019},
keywords = {Case StudyTopic,Companies,DSR,Decision making,FrameworkTopic,IST-ready,Interviews,ManagerPerspectiveProblemStatement,Measurement,OverviewTopic,S,Software,Stakeholders,TD Prioritization,business process management,name,technical debt,technical debt management,technical debt prioritization,topic},
mendeley-tags = {Case StudyTopic,DSR,FrameworkTopic,IST-ready,ManagerPerspectiveProblemStatement,OverviewTopic,TD Prioritization,name,topic},
pages = {605--609},
title = {{Business-Driven Technical Debt Prioritization}},
year = {2019}
}
@article{Ernst2015,
abstract = {The technical debt metaphor is widely used to encapsulate numerous software quality problems. The metaphor is attractive to practitioners as it communicates to both technical and nontechnical audiences that if quality problems are not addressed, things may get worse. However, it is unclear whether there are practices that move this metaphor beyond a mere communication mechanism. Existing studies of tech- nical debt have largely focused on code metrics and small surveys of developers. In this paper, we report on our survey of 1,831 participants, primarily software engineers and architects working in long-lived, software-intensive projects from three large organizations, and follow-up interviews of seven software engineers. We analyzed our data using both nonparametric statistics and qualitative text analysis. We found that architectural decisions are the most important source of technical debt. Furthermore, while respondents believe the metaphor is itself important for communication, existing tools are not currently helpful in managing the de- Tails. We use our results to motivate a technical debt time- line to focus management and tooling approaches.},
address = {New York, NY, USA},
annote = {Our results show most debt oc- curs in the “inadvertent/prudent” quadrant.},
author = {Ernst, Neil A. and Bellomo, Stephany and Ozkaya, Ipek and Nord, Robert L. and Gorton, Ian},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2015/Ernst et al/Ernst et al. - 2015 - Measure it Manage it Ignore it Software practitioners and technical debt.pdf:pdf},
isbn = {9781450336758},
journal = {10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings},
keywords = {01read,ATD,Architecture,AwarenessProblemStatement,AwarenessTopic!,IST-ready,ManagementAwarenessProblemStatement,Notes,Survey,TD Causes,TD Symptoms,TD Timeline,Technical debt,TimelineProblemStatement,architecture,survey,topic,topic!},
mendeley-tags = {01read,ATD,AwarenessProblemStatement,AwarenessTopic!,IST-ready,ManagementAwarenessProblemStatement,Notes,TD Causes,TD Symptoms,TD Timeline,TimelineProblemStatement,topic,topic!},
pages = {50--60},
doi = {10.1145/2786805.2786848},
publisher = {Association for Computing Machinery},
series = {ESEC/FSE 2015},
title = {{Measure it? Manage it? Ignore it? Software practitioners and technical debt}},
year = {2015}
}




%Some stuff for methods
@book{Saldana2017,
address = {London, England},
author = {Salda{\~{n}}a, Johnny},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Wicks - 2017 - The Coding Manual for Qualitative Researchers (2nd edition).pdf:pdf},
isbn = {9781446247365},
issn = {1746-5648},
publisher = {SAGE publications},
title = {{The Coding Manual for Qualitative Researchers}},
year = {2013}
}
@article{Garrison2006,
author = {Garrison, D R and Cleveland-Innes, M and Koole, Marguerite and Kappelman, James},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garrison et al. - 2006 - Revisiting methodological issues in transcript analysis Negotiated coding and reliability.pdf:pdf},
issn = {10967516},
journal = {Internet and Higher Education},
keywords = {Coding reliability,Coding scheme,Community of inquiry,Online learning,Transcript analysis},
number = {1},
pages = {1--8},
title = {{Revisiting methodological issues in transcript analysis: Negotiated coding and reliability}},
volume = {9},
year = {2006}
}
@book{Runeson2012,
annote = {St{\c{a}}d metodyka},
author = {Runeson, Per and H{\"{o}}st, Martin and Rainer, Austen and Regnell, Bj{\"{o}}rn},
booktitle = {Case Study Research in Software Engineering: Guidelines and Examples},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Runeson - 2012 - Case study research in software engineering guidelines and examples.pdf:pdf},
isbn = {9781118104354},
keywords = {IT eBooks},
title = {{Case Study Research in Software Engineering: Guidelines and Examples}},
year = {2012}
}
@book{corbin2014basics,
author = {Corbin, Juliet and Strauss, Anselm},
publisher = {Sage publications},
title = {{Basics of qualitative research: Techniques and procedures for developing grounded theory (4th edition)}},
year = {2014}
}

@article{Campbell2013,
file = {:C$\backslash$:/Users/BZWGolem/Downloads/10.1.1.855.5146.pdf:pdf},
isbn = {0049124113500},
issn = {00491241},
journal = {Sociological Methods and Research},
keywords = {coding,intercoder agreement,intercoder reliability,interviews,qualitative methods},
number = {3},
pages = {294--320},
title = {{Coding In-depth Semistructured Interviews: Problems of Unitization and Intercoder Reliability and Agreement}},
volume = {42},
year = {2013}
}






@article{Stol2018,
	title = {The {ABC} of software engineering research},
	volume = {27},
	issn = {15577392},
	doi = {10.1145/3241743},
	abstract = {A variety of research methods and techniques are available to SE researchers, and while several overviews exist, there is consistency neither in the research methods covered nor in the terminology used. Furthermore, research is sometimes critically reviewed for characteristics inherent to the methods. We adopt a taxonomy from the social sciences, termed here the ABC framework for SE research, which offers a holistic view of eight archetypal research strategies. ABC refers to the research goal that strives for generalizability over Actors (A) and precise measurement of their Behavior (B), in a realistic Context (C). The ABC framework uses two dimensions widely considered to be key in research design: the level of obtrusiveness of the research and the generalizability of research findings. We discuss metaphors for each strategy and their inherent limitations and potential strengths. We illustrate these research strategies in two key SE domains, global software engineering and requirements engineering, and apply the framework on a sample of 75 articles. Finally, we discuss six ways in which the framework can advance SE research.},
	number = {3},
	journal = {ACM Transactions on Software Engineering and Methodology},
	author = {Stol, Klaas Jan and Fitzgerald, Brian},
	year = {2018},
	keywords = {Research methodology, Research Methods, next, Research strategy, ABCFramework, SelectResearchMethods, 01 read},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ZNR5MF9S\\Stol, Fitzgerald - 2018 - The ABC of software engineering research.pdf:application/pdf},
}




@article{rios2018tertiary,
  title={A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners},
  author={Rios, Nicolli and de Mendon{\c{c}}a Neto, Manoel Gomes and Sp{\'\i}nola, Rodrigo Oliveira},
  journal={Information and Software Technology},
  volume={102},
  doi = {10.1016/j.infsof.2018.05.010},
  pages={117--145},
  year={2018},
  publisher={Elsevier}
}

@inproceedings{murillo2021common,
  title={Common Causes and Effects of Technical Debt in Costa Rica: InsighTD Survey Replication},
  author={Murillo, Maria Isabel and Pacheco, Alexia and L{\'o}pez, Gustavo and Mar{\'\i}n, Gabriela and Guzm{\'a}n, Julio},
  booktitle={2021 XLVII Latin American Computing Conference (CLEI)},
  pages={1--9},
  year={2021},
  organization={IEEE}
}

@article{Wiese2022,
abstract = {Context: Technical Debt (TD) is a metaphor for technical problems that are not visible to users and customers but hinder developers in their work, making future changes more difficult. TD is often incurred due to tight project deadlines and can make future changes more costly or impossible. Project Management usually focuses on customer benefits and pays less attention to their IT systems' internal quality. TD prevention should be preferred over TD repayment because subsequent refactoring and re-engineering are expensive. Objective: This paper evaluates a framework focusing on both TD prevention and TD repayment in the context of agile-managed projects. The framework was developed and applied in an IT unit of a publishing house. The unique contribution of this framework is the integration of TD management into project management. Method: The evaluation was performed as a comparative case study based on ticket statistics and two structured surveys. The surveys were conducted in the observed IT unit using the framework and a comparison unit not using the framework. The first survey targeted team members, the second one IT managers. Results: The evaluation shows that in this IT unit the TAP framework led to a raised awareness for the incurrence of TD. Decisions to incur TD are intentional, and TD is repaid timelier. Unintentional TD incurred by unconscious decisions is prevented. Furthermore, better communication and better planning of the project pipeline can be observed. Conclusion: We provide an insight into practitioners' ways to identify, monitor, prevent and repay TD. The presented framework includes a feasible method for TD prevention despite tight timelines by making TD repayment part of project management.},
author = {Wiese, Marion and Rachow, Paula and Riebisch, Matthias and Schwarze, Julian},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2022/Wiese et al/Wiese et al. - 2022 - Preventing technical debt with the TAP framework for Technical Debt Aware Management.pdf:pdf},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Project Management,Technical Debt,Technical Debt Awareness,Technical Debt backlog,Technical Debt prevention,Technical Debt repayment},
mendeley-groups = {Analysis of Managment Problems},
pages = {106926},
title = {{Preventing technical debt with the TAP framework for Technical Debt Aware Management}},
year = {2022}
}
@article{Besker2022,
abstract = {Context When developing software, it is vitally important to keep the level of technical debt down since, based on several studies, it has been well established that technical debt can lower the development productivity, decrease the developers' morale and compromise the overall quality of the software, among others. However, even if researchers and practitioners working in today's software development industry are quite familiar with the concept of technical debt and its related negative consequences, there has been no empirical research focusing specifically on how software managers actively communicate and manage the need to keep the level of technical debt as low as possible. Objective This study aims to understand how software companies give incentives to manage technical debt. This is carried out by exploring how companies encourage and reward practitioners for actively keeping the level of technical debt down add whether the companies use any forcing or penalising initiatives when managing technical debt. Method As a first step, this paper reports the results of both an online survey providing quantitative data from 258 participants and interviews with 32 software practitioners. As a second step, this study sets out to specifically provide a detailed assessment of additional and in-depth analysis of technical debt management strategies based on an encouraging mindset and attitude from both managers and technical roles to understand how, when and by whom such strategies are adopted in practice. Results Our findings show that having a technical debt management strategy (specially based on encouragement) can significantly impact the amount of technical debt related to the software. Conclusion The result indicates that there is considerable unfulfilled potential to influence how software practitioners can further limit and reduce technical debt by adopting a strategy based explicitly on an encouraging mindset from managers where they also specifically dedicate time and resources for technical debt remediation activities.},
author = {Besker, Terese and Martini, Antonio and Bosch, Jan},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2022/Besker, Martini, Bosch/Besker, Martini, Bosch - 2022 - The use of incentives to promote technical debt management.pdf:pdf},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {CommunicationTopic!,Empirical study,Software development,Software incentive programs,TD communication,Technical debt},
mendeley-groups = {Communication},
mendeley-tags = {CommunicationTopic!,TD communication},
pages = {106740},
title = {{The use of incentives to promote technical debt management}},
volume = {142},
year = {2022}
}



@article{marshall1996sampling,
  title={Sampling for qualitative research},
  author={Marshall, Martin N},
  journal={Family practice},
  volume={13},
  number={6},
  pages={522--526},
  year={1996},
  publisher={Oxford University Press}
}

@article{saunders2018saturation,
  title={Saturation in qualitative research: exploring its conceptualization and operationalization},
  author={Saunders, Benjamin and Sim, Julius and Kingstone, Tom and Baker, Shula and Waterfield, Jackie and Bartlam, Bernadette and Burroughs, Heather and Jinks, Clare},
  journal={Quality \& quantity},
  volume={52},
  number={4},
  pages={1893--1907},
  year={2018},
  publisher={Springer}
}
@book{Wohlin2012,
abstract = {Like other sciences and engineering disciplines, software engineering requires a cycle of model building, experimentation, and learning. Experiments are valuable tools for all software engineers who are involved in evaluating and choosing between different methods, techniques, languages and tools. The purpose of Experimentation in Software Engineering is to introduce students, teachers, researchers, and practitioners to empirical studies in software engineering, using controlled experiments. The introduction to experimentation is provided through a process perspective, and the focus is on the steps that we have to go through to perform an experiment. The book is divided into three parts. The first part provides a background of theories and methods used in experimentation. Part II then devotes one chapter to each of the five experiment steps: scoping, planning, execution, analysis, and result presentation. Part III completes the presentation with two examples. Assignments and statistical material are provided in appendixes. Overall the book provides indispensable information regarding empirical studies in particular for experiments, but also for case studies, systematic literature reviews, and surveys. It is a revision of the authors' book, which was published in 2000. In addition, substantial new material, e.g. concerning systematic literature reviews and case study research, is introduced. The book is self-contained and it is suitable as a course book in undergraduate or graduate studies where the need for empirical studies in software engineering is stressed. Exercises and assignments are included to combine the more theoretical material with practical aspects. Researchers will also benefit from the book, learning more about how to conduct empirical studies, and likewise practitioners may use it as a "cookbook" when evaluating new methods or techniques before implementing them in their organization.},
author = {Wohlin, Claes and Runeson, Per and H{\"{o}}st, Martin and Ohlsson, Magnus C. and Regnell, Bj{\"{o}}rn and Wessl{\'{e}}n, Anders},
booktitle = {Experimentation in Software Engineering},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2012/Wohlin et al/Wohlin et al. - 2012 - Experimentation in software engineering.pdf:pdf},
isbn = {9783642290442},
mendeley-groups = {85 Basis Wissen/Wissenschaftlich/Forschungsmethoden},
pages = {1--236},
title = {{Experimentation in software engineering}},
volume = {9783642290442},
year = {2012}
}



@article{ramavc2022prevalence,
  title={Prevalence, common causes and effects of technical debt: Results from a family of surveys with the IT industry},
  author={Rama{\v{c}}, Robert and Mandi{\'c}, Vladimir and Tau{\v{s}}an, Neboj{\v{s}}a and Rios, Nicolli and Freire, S{\'a}vio and P{\'e}rez, Boris and Castellanos, Camilo and Correal, Dar{\'\i}o and Pacheco, Alexia and Lopez, Gustavo and others},
  journal={Journal of Systems and Software},
  doi = {10.1016/j.jss.2021.111114},
  volume={184},
  pages={111114},
  year={2022},
  publisher={Elsevier}
}

@article{HOLVITIE2018,
abstract = {Context: Contemporary software development is typically conducted in dynamic, resource-scarce environments that are prone to the accumulation of technical debt. While this general phenomenon is acknowledged, what remains unknown is how technical debt specifically manifests in and affects software processes, and how the software development techniques employed accommodate or mitigate the presence of this debt. Objectives: We sought to draw on practitioner insights and experiences in order to classify the effects of agile method use on technical debt management, given the popularity and perceived success of agile methods. We explore the breadth of practitioners' knowledge about technical debt; how technical debt is manifested across the software process; and the perceived effects of common agile software development practices and processes on technical debt. In doing so, we address a research gap in technical debt knowledge and provide novel and actionable managerial recommendations. Method: We designed, tested and executed a multi-national survey questionnaire to address our objectives, receiving 184 responses from practitioners in Brazil, Finland, and New Zealand. Results: Our findings indicate that: 1) Practitioners are aware of technical debt, although, there was under utilization of the concept, 2) Technical debt commonly resides in legacy systems, however, concrete instances of technical debt are hard to conceptualize which makes it problematic to manage, 3) Queried agile practices and processes help to reduce technical debt; in particular, techniques that verify and maintain the structure and clarity of implemented artifacts (e.g., Coding standards and Refactoring) positively affect technical debt management. Conclusions: The fact that technical debt instances tend to have characteristics in common means that a systematic approach to its management is feasible. However, notwithstanding the positive effects of some agile practices on technical debt management, competing stakeholders' interests remain a concern.},
author = {Holvitie, Johannes and Licorish, Sherlock A and Sp{\'{i}}nola, Rodrigo O and Hyrynsalmi, Sami and MacDonell, Stephen G and Mendes, Thiago S and Buchan, Jim and Lepp{\"{a}}nen, Ville},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2018/Holvitie et al/Holvitie et al. - 2018 - Technical debt and agile software development practices and processes An industry practitioner survey(3).pdf:pdf},
issn = {0950-5849},
doi = {10.1016/j.infsof.2017.11.015},
journal = {Information and Software Technology},
keywords = {Agile software development,InheritedTD=Legacy,LegacyTDResearchmissing,LegacyTopic!,Practitioner survey,TD/LegacyProblemStatement,TD=Legacy,TD=PartOfLegacy,Technical debt,Technical debt management},
mendeley-groups = {Legacy},
mendeley-tags = {LegacyTopic!,InheritedTD=Legacy,TD=PartOfLegacy,TD/LegacyProblemStatement,TD=Legacy,LegacyTDResearchmissing},
pages = {141--160},
title = {{Technical debt and agile software development practices and processes: An industry practitioner survey}},
volume = {96},
year = {2018}
}


@inproceedings{10.1145/2993412.3003392,
abstract = {Setting up a new product line generation in a mature domain, typically does not start from scratch but takes into consideration the architecture and assets of the former product line generation. Being able to accommodate legacy and 3rd party code is one of the major product line qualities to be met. On the other side, product line qualities like reusability, maintainability and alterability, i.e. being able to cope up with a large amount of variability, with configurability and fast integratability are major drivers.While setting up a new product line generation and thus a new corresponding architecture, we this time focused on architectural software (SW) health and tracking of architectural metrics from the very beginning. Taking the definition of "architecture being a set of design decisions" [18] literally, we attempt to implement an architectural check for every design decision taken. Architectural design decisions in our understanding do not only - and even not mainly - deal with the definition of components and their interaction but with patterns and rules or anti-patterns. The rules and anti-patterns, "what not to do" or more often also "what not to do any more", is even more important in setting up a new product line generation because developers are not only used to the old style of developing and the old architecture, but also still have to develop assets for both generations.In this article we describe selected architectural checks that we have implemented, the layered architecture check and the check for usage of obsolete services. Additionally we discuss selected architectural metrics: the coupling coefficient metrics and the instability metrics. In the summary and outlook we describe our experiences and still open topics in setting up architectural SW health checks for a large-scale product line.The real-world examples are taken from the domain of Engine Control Unit development at Robert Bosch GmbH.},
address = {New York, NY, USA},
author = {Boss, Birgit and Tischer, Christian and Krishnan, Sreejith and Nutakki, Arun and Gopinath, Vinod},
booktitle = {Proccedings of the 10th European Conference on Software Architecture Workshops},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Boss et al/Boss et al. - 2016 - Setting up Architectural SW Health Builds in a New Product Line Generation.pdf:pdf},
isbn = {9781450347815},
keywords = {LegacyTDResearchmissing,LegacyTopic,architectural checks,architectural technical debt,embedded software,product line development,software architecture,software erosion,technical debt},
mendeley-groups = {Legacy},
mendeley-tags = {LegacyTopic,LegacyTDResearchmissing},
publisher = {Association for Computing Machinery},
series = {ECSAW '16},
title = {{Setting up Architectural SW Health Builds in a New Product Line Generation}},
year = {2016}
}

@article{Bennett1995,
author = {Bennett, Keith},
journal = {IEEE Software},
mendeley-groups = {Legacy},
number = {1},
pages = {19--23},
title = {{Legacy Systems: Coping with success}},
volume = {12},
year = {1995}
}
@article{Khadka2014,
abstract = {Existing research in legacy system modernization has traditionally focused on technical challenges, and takes the standpoint that legacy systems are obsolete, yet crucial for anorganization's operation. Nonetheless, it remains unclear whether practitioners in the industry also share this perception. This paper describes the outcome of an exploratory study in which 26 industrial practitioners were interviewed on what makes a software system a legacy system, what the main drivers are that lead to the modernization of such systems, and what challenges are faced during the modernization process. The findings of the interviews have been validated by means of a survey with 198 respondents. The results show that practitioners value their legacy systems highly, the challenges they face are not just technical, but also include business andorganizational aspects.},
author = {Khadka, Ravi and Batlajery, Belfrit V. and Saeidi, Amir M. and Jansen, Slinger and Hage, Jurriaan},
isbn = {9781450327565},
issn = {02705257},
journal = {Proceedings - 36. International Conference on Software Engineering},
keywords = {BasicReference,Empirical Studies,Grounded Theory,Legacy Modernization,Legacy Systems,LegacyTopic!},
mendeley-groups = {Legacy},
mendeley-tags = {LegacyTopic!,BasicReference},
number = {1},
pages = {36--47},
title = {{How do professionals perceive legacy systems and software modernization?}},
year = {2014}
}

@misc{EliLopian2018,
abstract = {Let's talk about some of the biggest misconceptions of what ''legacy code'' means, why devs are scared of it, and what it means for our code today.},
author = {{Eli Lopian}},
mendeley-groups = {Legacy},
title = {{Defining Legacy Code - DZone DevOps}},
url = {https://dzone.com/articles/defining-legacy-code},
urldate = {2022-05-07},
year = {2018}
}


@book{Aesop_2002, place={London, England}, title={Aesop’s Fables}, ISBN={9780199540754}, publisher={Oxford University Press}, author={Aesop}, editor={Gibbs, Laura}, year={2002} }









@article{Vidoni2022,
abstract = {Code ridden with Technical Debt (TD) has motivated software engineers to keep the quality of systems under control to ease future maintenance tasks. In the last decade, there have been significant advances regarding TD management (TDM). However, research about incorporating TDM into the software development lifecycle remains scarce, and existing approaches aim to control TD through different processes. This proposal leverages the concept of infinite games from game theory to posit a different perspective. We argue that TD cannot be entirely removed and that its effects or consequences cannot be considered “managed” even when an occurrence (i.e., a smell) is repaid. Rather than using a mathematical approach, we present TDM in terms of the four components of infinite games (players, rules, goals, and time), its tradeoffs and relationships, to discuss its potential impact on TDM activities. As this is an incipient area, our goal is to motivate a change of mindset regarding TDM, stimulating reflective thinking and thus, posing a new line of research. We conclude with a series of potential research questions organised into three key areas.},
author = {Vidoni, Melina and Codabux, Zadia and Fard, Fatemeh H.},
doi = {10.1016/j.jss.2022.111336},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0164121222000772-main.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Game theory,Software lifecycles,Software maintenance and evolution,Technical debt},
pages = {111336},
publisher = {Elsevier Inc.},
title = {{Infinite technical debt}},
volume = {190},
year = {2022}
}
@article{Junior2022,
abstract = {Context: Technical Debt (TD) contextualizes the technical decisions on shortcuts and workarounds during software development, positively and negatively influencing software evolution. However, TD still seems to confound with any issue occurring during software development, impacting its proper understanding and management in software projects. Goal: To synthesize evidence regarding the conceptualization, characteristics, and management of TD in software projects. Method: To undertake a tertiary study to strengthen the knowledge of TD using the principles of Grounded Theory to support qualitative analysis. Results: Nineteen secondary studies provide evidence on TD and its management. They provided information regarding the TD's understanding (definitions and characteristics) and management (actions and technologies). Some causes, such as project constraints, technical decisions, and team members, promote different types of TD in software projects. The secondary studies also supported identifying the impacts of TD regarding project management, team members, the organization's business, and internal software quality. Besides helping identify TD challenges, such studies contributed to integrating a conjectured conceptual model of TD that can support future discussions and investigations regarding TD's understanding and management. Conclusions: The set of evidence regarding TD's understanding, actions, and technologies to manage TD can aid software practitioners in their software projects. However, it is observable an interpretation overload regarding its definition, inducing to classify any issue occurring during the software development as TD. Therefore, further discussions and investigations still represent essential steps towards consolidating a common perspective on TD and its management.},
author = {Junior, Helvio Jeronimo and Travassos, Guilherme Horta},
doi = {10.1016/j.infsof.2022.106964},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0950584922001057-main.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Evidence-based software engineering,Quality assurance,Software project management,Technical debt,Tertiary study},
number = {October 2020},
pages = {106964},
publisher = {Elsevier B.V.},
title = {{Consolidating a common perspective on Technical Debt and its Management through a Tertiary Study}},
volume = {149},
year = {2022}
}
@article{Baltes2022,
abstract = {Representative sampling appears rare in empirical software engineering research. Not all studies need representative samples, but a general lack of representative sampling undermines a scientific field. This article therefore reports a critical review of the state of sampling in recent, high-quality software engineering research. The key findings are: (1) random sampling is rare; (2) sophisticated sampling strategies are very rare; (3) sampling, representativeness and randomness often appear misunderstood. These findings suggest that software engineering research has a generalizability crisis. To address these problems, this paper synthesizes existing knowledge of sampling into a succinct primer and proposes extensive guidelines for improving the conduct, presentation and evaluation of sampling in software engineering research. It is further recommended that while researchers should strive for more representative samples, disparaging non-probability sampling is generally capricious and particularly misguided for predominately qualitative research.},
archivePrefix = {arXiv},
arxivId = {2002.07764},
author = {Baltes, Sebastian and Ralph, Paul},
doi = {10.1007/s10664-021-10072-8},
eprint = {2002.07764},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Baltes-Ralph2022{\_}Article{\_}SamplingInSoftwareEngineeringR.pdf:pdf},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {Probability sampling,Purposive sampling,Random sampling,Representative sampling,Research methodology,Sampling},
number = {4},
publisher = {Empirical Software Engineering},
title = {{Sampling in software engineering research: a critical review and guidelines}},
volume = {27},
year = {2022}
}
@article{Lewis2021,
abstract = {Developing machine learning (ML) systems, just like any other system, requires architecture thinking. However, there are characteristics of ML components that create challenges and unique quality attribute (QA) concerns for software architecture and design activities, such as data-dependent behavior, detecting and responding to drift over time, and timely capture of ground truth to inform retraining. This paper presents four categories of software architecture challenges that need to be addressed to support ML system development, maintenance and evolution: software architecture practices for ML systems, architecture patterns and tactics for ML-important QAs, monitorability as a driving QA, and co-architecting and co-versioning. These challenges were collected from targeted workshops, practitioner interviews, and industry engagements. The goal of our work is to encourage further research in these areas and use the information presented in this paper to guide the development of empirically-validated practices for architecting ML systems.},
author = {Lewis, Grace A. and Ozkaya, Ipek and Xu, Xiwei},
doi = {10.1109/ICSME52107.2021.00071},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bulk-download(19)/Software Architecture Challenges for ML Systems.pdf:pdf},
isbn = {9781665428828},
journal = {Proceedings - 2021 IEEE International Conference on Software Maintenance and Evolution, ICSME 2021},
keywords = {machine learning,software architecture,software maintenance and evolution},
pages = {634--638},
publisher = {IEEE},
title = {{Software Architecture Challenges for ML Systems}},
year = {2021}
}
@inproceedings{Gomes2022,
author = {Gomes, Felipe Gustavo and {Dos Santos}, Eder Pereira and Mendes, Thiago S. and {De Mendon{\c{c}}a Neto}, Manoel G. and {Silva Freire}, Emmanuel S{\'{a}}vio and Sp{\'{i}}nola, Rodrigo Oliveira},
booktitle = {Proceedings - 2022 IEEE/ACM International Conference on Technical Debt, TechDebt 2022},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/bulk-download/Investigating the Point of View of Project Management Practitioners on Technical Debt - A Preliminary Study on Stack Exchange.pdf:pdf},
isbn = {9781450393041},
keywords = {Project management practitioners,Stack Exchange,Technical debt,Technical debt management,acm reference format,eder pereira dos santos,felipe gomes,management practitioners,manoel men-,project,stack exchange,s{\'{a}}vio freire,technical debt,technical debt management},
number = {1},
pages = {31--40},
publisher = {ACM},
title = {{Investigating the Point of View of Project Management Practitioners on Technical Debt - A Preliminary Study on Stack Exchange}},
volume = {1},
year = {2022}
}
@article{Kashiwa2022,
abstract = {Technical debt is a sub-optimal state of development in projects. In particular, the type of technical debt incurred by developers themselves (e.g., comments that mean the implementation is imperfect and should be replaced with another implementation) is called self-admitted technical debt (SATD). In theory, technical debt should not be left for a long period because it accumulates more cost over time, making it more difficult to process. Accordingly, developers have traditionally conducted code reviews to find technical debt. In fact, we observe that many SATD comments are often introduced during modern code reviews (MCR) that are light-weight reviews with web applications. However, it is uncertain about the nature of SATD comments that are introduced in the review process: impact, frequency, characteristics, and triggers. Herein, this study empirically examines the relationship between SATD and MCR. Our case study of 156,372 review records from the Qt and OpenStack systems shows that (i) review records involving SATD are about 6{\%}–7{\%} less likely to be accepted by reviews than those without SATD; (ii) review records involving SATD tend to require two to three more revisions compared with those without SATD; (iii) 28–48{\%} of SATD comments are introduced during code reviews; (iv) SATD during reviews works for communicating between authors and reviewers; and (v) 20{\%} of the SATD comments are introduced due to reviewers' requests.},
author = {Kashiwa, Yutaro and Nishikawa, Ryoma and Kamei, Yasutaka and Kondo, Masanari and Shihab, Emad and Sato, Ryosuke and Ubayashi, Naoyasu},
doi = {10.1016/j.infsof.2022.106855},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/1-s2.0-S0950584922000258-main.pdf:pdf},
issn = {09505849},
journal = {Information and Software Technology},
keywords = {Modern code reviews,Self-admitted technical debt},
number = {July 2021},
pages = {106855},
publisher = {Elsevier B.V.},
title = {{An empirical study on self-admitted technical debt in modern code review}},
volume = {146},
year = {2022}
}
@article{Digkas2022,
abstract = {While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the 'cleanness' of new code. To obtain the required data, we have performed a large-scale case study on twenty-seven open-source software projects by the Apache Software Foundation, analyzing 66,661 classes and 56,890 commits. The results suggest that writing 'clean' (or at least 'cleaner') new code can be an efficient strategy for reducing Technical Debt Density, and thus preventing software decay over time. The findings also suggest that projects adopting an explicit policy for quality improvement, e.g., through discussions on code quality in board meetings, are associated with a higher frequency of cleaner new code commits. Therefore, we champion the establishment of processes that monitor the density of Technical Debt of new code to control the accumulation of Technical Debt in a software system.},
archivePrefix = {arXiv},
arxivId = {2010.09161},
author = {Digkas, George and Chatzigeorgiou, Alexander and Ampatzoglou, Apostolos and Avgeriou, Paris},
doi = {10.1109/TSE.2020.3032557},
eprint = {2010.09161},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Can{\_}Clean{\_}New{\_}Code{\_}Reduce{\_}Technical{\_}Debt{\_}Density.pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Technical debt,case study,clean code,refactoring},
number = {5},
pages = {1705--1721},
publisher = {IEEE},
title = {{Can Clean New Code Reduce Technical Debt Density?}},
volume = {48},
year = {2022}
}
@article{Yu2022,
abstract = {Keeping track of and managing Self-Admitted Technical Debts (SATDs) are important to maintaining a healthy software project. This requires much time and effort from human experts to identify the SATDs manually. The current automated solutions do not have satisfactory precision and recall in identifying SATDs to fully automate the process. To solve the above problems, we propose a two-step framework called Jitterbug for identifying SATDs. Jitterbug first identifies the 'easy to find' SATDs automatically with close to 100 percent precision using a novel pattern recognition technique. Subsequently, machine learning techniques are applied to assist human experts in manually identifying the remaining 'hard to find' SATDs with reduced human effort. Our simulation studies on ten software projects show that Jitterbug can identify SATDs more efficiently (with less human effort) than the prior state-of-the-art methods.},
archivePrefix = {arXiv},
arxivId = {2002.11049},
author = {Yu, Zhe and Fahid, Fahmid Morshed and Tu, Huy and Menzies, Tim},
doi = {10.1109/TSE.2020.3031401},
eprint = {2002.11049},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Identifying{\_}Self-Admitted{\_}Technical{\_}Debts{\_}With{\_}Jitterbug{\_}A{\_}Two-Step{\_}Approach.pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Technical debt,machine learning,pattern recognition,software engineering},
number = {5},
pages = {1676--1691},
publisher = {IEEE},
title = {{Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach}},
volume = {48},
year = {2022}
}


@misc{Fowler2009,
author = {Fowler, Martin},
title = {{Technical Debt Quadrant}},
url = {https://martinfowler.com/bliki/TechnicalDebtQuadrant.html},
urldate = {2022-07-13},
year = {2009}
}

@article{Kruchten2012f,
abstract = {The technical debt metaphor is gaining significant traction in the software development community as a way to understand and communicate issues of intrinsic quality, value, and cost. This is a report on a third workshop on managing technical debt, which took place as part of the 34rd International Conference on Software Engineering (ICSE 2012). The goal of this third workshop was to discuss managing technical debt as a part of the research agenda for the software engineering field, in particular focusing on eliciting and visualizing debt, and creating payback strategies.},
author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek and Visser, Joost},
doi = {10.1145/2347696.2347698},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kruchten et al. - 2012 - Technical debt in software development.pdf:pdf},
issn = {0163-5948},
journal = {ACM SIGSOFT Software Engineering Notes},
keywords = {00untagged,software economics,software quality,technical debt},
mendeley-tags = {00untagged},
number = {5},
pages = {36--38},
title = {{Technical debt in software development}},
volume = {37},
year = {2012}
}


@article{Stol2015,
abstract = {There has been a growing interest in the role of theory within Software Engineering (SE) research. For several decades, researchers within the SE research community have argued that, to become a 'real' engineering science, SE needs to develop stronger theoretical foundations. However, so far, the role of theory is neither fully appreciated nor well understood in SE research. Without a good common understanding of what theory is, what it constitutes in SE research, and the various roles it can play in SE research, it is difficult to appreciate how theory building can help to strengthen SE research. In this paper we discuss the importance of theory and conceptualization, and review the key components that comprise a theory. We then present the Research Path Schema (RPS), which is an adaptation of an analytical framework from the social sciences. The RPS defines a research study as consisting of three components: some phenomenon, system or substance that a researcher is interested in; some technique or method to study that substance; and some form of conceptualization or theory that provides an explanation for, or abstraction of the observations made in a study. Different research studies have a different archetypical 'architecture,' depending on the selection of these three components. Consequently, the role of the conceptualization or theory will be different for each archetypical study design, or selected research path. We conclude this paper by outlining a number of implications for future SE research, and argue for a Theory-Oriented Software Engineering research perspective, which can complement the recent focus on Evidence Based Software Engineering.},
author = {Stol, Klaas Jan and Fitzgerald, Brian},
doi = {10.1016/j.scico.2014.11.010},
file = {:C$\backslash$:/Users/BZWGolem/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Stol, Fitzgerald - 2015 - Theory-oriented software engineering.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {01read,Empirical research,Software engineering research,Theory building,Theory fragment,Theory-oriented software engineering,hypothetical path,observational path,research path,study design path},
mendeley-tags = {01read,hypothetical path,observational path,research path,study design path},
pages = {79--98},
publisher = {Elsevier B.V.},
title = {{Theory-oriented software engineering}},
volume = {101},
year = {2015}
}
@article{Jain2013,
abstract = {Empirical Software Engineering research has achieved considerable results in building our knowledge about selecting and applying appropriate empirical methods for technology evaluation. Empirical studies in general and empirical studies in industrial settings in particular have played an important role in successful transition of many Software Engineering technologies to industry, for example, defect detection techniques and automated test cases. However, conducting empirical research in industrial settings remains a challenging undertaking for a variety of reasons. There is no substantial literature reporting on the challenges and complexities involved in conducting empirical studies in an industry in general and in settings whose business models are built around global sourcing. This paper reports some of our experiences and lessons learned from conducting empirical research in industry. Some of the observed challenges include short time horizon for research, high expectations, limited research skills, and the 'acceptable' research rigor. The paper discusses some of these issues with relevant examples and provides some strategies for overcoming these issues. We also stress that researchers and practitioners should share their experiences of conducting empirical research in order to help build a body of knowledge to guide the future efforts. {\textcopyright} 2013 IEEE.},
author = {Jain, Shilpi and Babar, Muhammad Ali and Fernandez, Jude},
doi = {10.1109/CESI.2013.6618463},
file = {:C$\backslash$:/Users/BZWGolem/Downloads/Conducting{\_}empirical{\_}studies{\_}in{\_}industry{\_}Balancing{\_}rigor{\_}and{\_}relevance.pdf:pdf},
isbn = {9781467362863},
journal = {2013 1st International Workshop on Conducting Empirical Studies in Industry, CESI 2013 - Proceedings},
keywords = {Empirical studies,Evidence Based Software Engineering,Field Experiments},
pages = {9--14},
publisher = {IEEE},
title = {{Conducting empirical studies in industry: Balancing rigor and relevance}},
year = {2013}
}

@article{baltes2022sampling,
  title={Sampling in software engineering research: A critical review and guidelines},
  author={Baltes, Sebastian and Ralph, Paul},
  journal={Empirical Software Engineering},
  volume={27},
  number={4},
  pages={1--31},
  year={2022},
  publisher={Springer}
}


@article{kahneman1991anomalies,
  title={Anomalies: The endowment effect, loss aversion, and status quo bias},
  author={Kahneman, Daniel and Knetsch, Jack L and Thaler, Richard H},
  journal={Journal of Economic perspectives},
  volume={5},
  number={1},
  pages={193--206},
  year={1991}
}

@book{kahneman2011thinking,
  title={Thinking, fast and slow},
  author={Kahneman, Daniel},
  year={2011},
  publisher={Macmillan}
}



@inproceedings{ahmadjee2021assessing,
  title={Assessing smart contracts security technical debts},
  author={Ahmadjee, Sabreen and Mera-G{\'o}mez, Carlos and Bahsoon, Rami},
  booktitle={2021 IEEE/ACM International Conference on Technical Debt (TechDebt)},
  pages={6--15},
  year={2021},
  organization={IEEE}
}

@inproceedings{de2019business,
  title={Business-driven technical debt prioritization},
  author={de Almeida, Rodrigo Rebou{\c{c}}as},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  pages={605--609},
  organization={IEEE}
}

@inproceedings{boss2016setting,
  title={Setting up architectural sw health builds in a new product line generation},
  author={Boss, Birgit and Tischer, Christian and Krishnan, Sreejith and Nutakki, Arun and Gopinath, Vinod},
  booktitle={Proccedings of the 10th European Conference on Software Architecture Workshops},
  pages={1--7},
  year={2016}
}

@inproceedings{gupta2017pragmatic,
  title={Pragmatic Scrum Transformation: Challenges, Practices \& Impacts During the Journey A case study in a multi-location legacy software product development team},
  author={Gupta, Rajeev Kumar and Manikreddy, Prabhulinga and Arya, KC},
  booktitle={Proceedings of the 10th Innovations in Software Engineering Conference},
  pages={147--156},
  year={2017}
}

@article{lenarduzzi2020does,
  title={Does migrating a monolithic system to microservices decrease the technical debt?},
  author={Lenarduzzi, Valentina and Lomio, Francesco and Saarim{\"a}ki, Nyyti and Taibi, Davide},
  journal={Journal of Systems and Software},
  volume={169},
  pages={110710},
  year={2020},
  publisher={Elsevier}
}
@inproceedings{Rocha2017b,
author = {Rocha, Junior Cesar and Zapalowski, Vanius and Nunes, Ingrid},
title = {Understanding Technical Debt at the Code Level from the Perspective of Software Developers},
year = {2017},
isbn = {9781450353267},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/3131151.3131164},
abstract = {Keeping the source code clean and organized throughout the software development and evolution is a challenging task. Due to many factors, design choices that cause the overall code structure to decay may be made and implemented, so that benefits, such as reduced development time, can be obtained in the short term. In order to deal with these situations, the metaphor of technical debt emerged to allow such situations to be systematically managed. Although this concept is already known in academia, there are limited evidences that the industry widely adopts it. Therefore, this paper presents the results of a survey involving 74 participants that work in the Brazilian software industry, in order to understand why technical debt is introduced, eliminated and how it is managed in practice, with a focus on the code level. Our survey is not limited to the explicit management of technical debt but also includes the notion that the introduction of poor code without the awareness that it is a poor design choice can also become a debt. Such a code can be acknowledged as a debt to be paid as the software evolves. Our results show that overload of work and lack of time, together with pressure from the management, are the main reasons for the creation of technical debt. However, when participants evaluate other developers, they believe that inexperience also plays a key role. Moreover, the most effective practice to avoid the creation of technical debt is code review, in the opinion of participants.},
booktitle = {Proceedings of the 31st Brazilian Symposium on Software Engineering},
pages = {64–73},
numpages = {10},
keywords = {Programming Best Practices, Survey, Technical Debt},
location = {Fortaleza, CE, Brazil},
series = {SBES'17}
}
@inproceedings{Schmid2013a,
abstract = {Over recent years the topic of technical debt has gained significant attention in the software engineering community. The area of technical debt research is somewhat peculiar within software engineering as it is built on a metaphor. This has certainly benefited the field as it helps to achieve a lot of attention and eases communication about the topic, however, it seems it is to some extent also sidetracking research work, if the metaphor is used beyond its range of applicability. In this paper, we focus on the limits of the metaphor and the problems that arise when over-extending its applicability. We do also aim at providing some additional insights by proposing certain ways of handling these restrictions. {\textcopyright} 2013 IEEE.},
author = {Schmid, Klaus},
booktitle = {Fourth Workshop on Managing Technical Debt, Workshop at the International Conference on Software Engineering},
doi = {10.1109/MTD.2013.6608681},
isbn = {9781467364430},
keywords = {Economic Model,Metaphor,Software Architecture,TD Causes,TD Consequences,TD Costs,TD Metaphor,Technical Debt,debt-free,effective TD,potential TD,valuation method},
pages = {63--66},
publisher = {IEEE},
title = {{On the Limits of the Technical Debt Metaphor: Some Guidance on Going Beyond}},
year = {2013}
}
@misc{scrum2012practical,
  title={Essential Scrum: A Practical Guide to the Most Popular Agile Process},
  author={Rubin, Kenneth S.},
  year={2012},
  publisher={Addison-Wesley Professional}
}

@article{Schmid2013,
	title = {A formal approach to technical debt decision making},
	doi = {10.1145/2465478.2465492},
	abstract = {The notion of technical debt attracts significant attention, especially in the context of reconciling architecture and agile development. However, most work on technical debt is still largely informal and if it provides a formalization it is often ad-hoc. In this paper, we provide a detailed, formal analysis of decision making on technical debt in development. Using this formalization, we show that optimal decision making is not effectively computable in real-world situations and provide several well-defined approximations that allow to handle the problem nevertheless in practical situations. Combining these approximations in a single method leads to a light-weight approach that can be effectively applied in iterative software development, including agile approaches. Copyright 2013 ACM.},
	journal = {QoSA 2013 - Proceedings of the 9th International ACM Sigsoft Conference on the Quality of Software Architectures},
	author = {Schmid, Klaus},
	year = {2013},
	note = {ISBN: 9781450321266},
	keywords = {TD prioritization, decision-making, Cost estimation, formal, Formal model, Incremental development, effective TD, topic, OverviewTopic, FutureWork, Cost Estimation, Decision Making, Formal Model, Incremental Development, potential debt, Software Systems, IST-Ready, software systems, TD decision-making, TD repayment, TD management, actual TD, TD technical debt, 01 read},
	pages = {153--162},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\W2ZFFVCG\\Schmid - 2013 - A Formal Approach to Technical Debt Decision Making.pdf:application/pdf},
}

@article{Stochel2020,
abstract = {In this survey paper on the recent research, the authors evaluate consistency of the use of technical debt terminology and its convergence with the agreed-upon conceptual model. This consistency is important from the perspective of decision makers, who may delay or even abandon investment in a given area of the product, unless the benefits from repaying a specific technical debt are clear enough. Additionally, the paper discusses a degree in which the metaphorical origins of the technical debt term are still present and influence the research. The analysis is focused on the selected conference papers and offers a view on the inherent dynamics behind shaping the technical debt concept and its conceptual model. Besides, by discussing aspects related to cognitive linguistics, this study provides the means to understand this dynamics and equip the reader with suggestions to decrease ambiguity in the research.The results of the research lead to the following conclusions: 1. Ambiguity stemming from the origin of metaphorical expression of technical debt still exists in the research and there is a need to decrease it by e.g. framing, clarification, and explicit limitation of the research field. 2. Tool designers, such as SonarQube, are not bound by the research results and lead to more confusion in defining technical debt. 3. Risk Management models should be applied to enable technical debt management by decision makers. Thus, Architecture Tradeoff Analysis Method and other Quality Attribute Models may serve as good references to expand the current technical debt model. Even though some ambiguity is still present, the technical debt concept as a software development artifact and agreed-upon conceptual model provide a consistent approach for interpretation and analysis of technical debt phenomenon. Notably, code smells can be mapped to a list of symptoms of technical debt items.},
author = {Stochel, Marek G. and Cholda, Piotr and Wawrowski, Mariusz R.},
doi = {10.1109/SEAA51224.2020.00067},
isbn = {9781728195322},
journal = {Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020},
keywords = {Architectural Smell,Architectural Technical Debt,Cognitive Linguistics,Design Smell,Metaphor,RiskmanagementTopic,Smell,Software Architecture,Software Economics,Software Engineering,Software Maintenance and Evolution,Technical Debt,Technical Debt Metaphor,Technical Debt Research},
pages = {367--375},
title = {{On Coherence in Technical Debt Research : Awareness of the Risks Stemming from the Metaphorical Origin and Relevant Remediation Strategies}},
year = {2020}
}





@article{wiese_it_2023,
	title = {{IT} managers’ perspective on {Technical} {Debt} {Management}},
	volume = {202},
	copyright = {All rights reserved},
	issn = {01641212},
	doi = {10.1016/j.jss.2023.111700},
	abstract = {Context. Technical Debt (TD) is a term for software solutions that are beneficial in the short-term but impede future change. Goal. Previous research on TD indicates various management-related causes. We analyze the perspective of IT managers on TD since they usually have a major influence on deadlines, the project’s budget, and setting up a TD management (TDM) process. Method. To determine the IT managers’ perspective, we obtained and analyzed data from 16 semi-structured interviews and a three-person focus group discussion. Results. We found that all IT managers understood the TD concept. They consider TDM to be an essential topic, though nearly none of them had set up a TDM process so far. We identified three major concerns the IT managers had regarding TDM: communicating about TD, establishing a TDM process, and dealing with vintage systems, i.e., old legacy systems We developed a model specifying causes and consequences visible to business stakeholders, causal chains, and vicious cycles. Conclusions. Our research identifies new research gaps and demonstrates to practitioners that investing in a TDM process may be beneficial. It provides the V4CTD model of Visibility, Cycles \& Chains of Causes \& Consequences of TD, extending the TD conceptual model and facilitating communication on TD with business stakeholders.},
	language = {en},
	journal = {Journal of Systems and Software},
	author = {Wiese, Marion and Borowa, Klara},
	month = apr,
	year = {2023},
	keywords = {Legacy systems, AwarenessTopic!, Technical Debt, Technical Debt causes, Technical Debt communication, Technical Debt consequences, Technical Debt Management, SLR excluded notMetadata, ScienceDirect, SLR excluded},
	pages = {111700},
	file = {ManagementPerspectiveOnTD_JSS_final.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\M8A66PEL\\ManagementPerspectiveOnTD_JSS_final.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\48677EWW\\S016412122300095X.html:text/html;Wiese und Borowa - 2023 - IT managers’ perspective on Technical Debt Managem.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\HQW2V6ZR\\Wiese und Borowa - 2023 - IT managers’ perspective on Technical Debt Managem.pdf:application/pdf},
}

@inproceedings{Oliveira2015,
	title = {Managing {Technical} {Debt} in {Software} {Projects} {Using} {Scrum}: {An} {Action} {Research}},
	isbn = {978-1-4673-7153-7},
	doi = {10.1109/Agile.2015.7},
	abstract = {Ward Cunningham in his experience report presented at the OOPSLA'92 conference introduced the metaphor of technical debt. This metaphor is related to immature, incomplete or inadequate artifacts in the software development cycle that cause higher costs and lower quality. A strategy for the technical debt management is still a challenge because its definition is not yet part of the software development process. Carolyn Seaman and Yuepu Guo proposed a technical debt management framework based on three stages. First, debts are identified and listed. After that, debts are measured by their payment efforts and then debts are selected to be considered in the software development cycle. This study evaluates the application of this framework in the real context of software projects adopting Scrum. Action research is conducted in two companies where their projects have significant technical debt. We performed three action research cycles based on the three stages of the framework for both companies. The main contribution of this paper is to provide real experiences and improvements for projects using Scrum and that may adopt the technical debt management framework proposed by Seaman and Guo. Both teams recognized that the proposed approach is feasible for being considered in the software development process after some modifications. Because of projects time constraints and ease of use, we reduced the use of the proposed metrics to two: Principal and the Current Amount of Interest. In consequence, decision-making was benefitted by the early consideration of the debts that really need to be paid. Instead of using probabilities to find the interest, these are registered every time the technical debt occurs. During the first phase, the debts identification was improved when all Scrum roles participated, while measurement and decision-making were improved when the team was responsible for these phases. The Product Owner role in both companies understood the importance of Technical Debt monitoring and prioritization during a development cycle. With these changes, the two teams mentioned they would remain using the resulting approach.},
	booktitle = {Proceedings - 2015 {Agile} {Conference}, {Agile} 2015},
	author = {Oliveira, Frederico and Goldman, Alfredo and Santos, Viviane},
	year = {2015},
	keywords = {00untagged, Action research, Case StudyTopic, Companies, decision-making, Framework, FrameworkTopic, Monitoring, Overview, OverviewRelation, Planning, Scrum, Seminars, TD management, TD technical debt, TDGuide\_RelatedWork, TDMTopic!, topic, visualization},
	pages = {50--59},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\SDKJHXJJ\\Oliveira, Goldman, Santos - 2015 - Managing Technical Debt in Software Projects Using Scrum An Action Research.pdf:application/pdf},
}

@inproceedings{borup_deliberative_2021,
	address = {Cham},
	series = {Lecture {Notes} in {Business} {Information} {Processing}},
	title = {Deliberative {Technical} {Debt} {Management}: {An} {Action} {Research} {Study}},
	isbn = {978-3-030-91983-2},
	shorttitle = {Deliberative {Technical} {Debt} {Management}},
	doi = {10.1007/978-3-030-91983-2_5},
	abstract = {Technical Debt (TD) has seen a growing interest from software companies and researchers since the term was first established almost 30 years ago. TD refers to concessions made for short-term advantages or conveniences, which may result in long-term difficulties. Numerous TD management strategies have been proposed to avoid the severe consequences of leaving TD unchecked. However, these strategies often suffer from being too abstract, making it difficult to initiate TD deliberations. To investigate how software development companies can initiate such deliberations, we conducted an Action Research study in collaboration with a Danish software development department, SoftShelf. Through two Action Research interventions at SoftShelf, we introduced strategies and tools for TD management and reified them to their situation in order to initiate deliberations on the matter. After reporting the interventions’ practical consequences in SoftShelf, we discuss the usefulness of deliberation theory in TD management research and practice.},
	language = {en},
	booktitle = {Software {Business}},
	publisher = {Springer International Publishing},
	author = {Borup, Nichlas Bødker and Christiansen, Ann Louise Jul and Tovgaard, Sabine Hørdum and Persson, John Stouby},
	editor = {Wang, Xiaofeng and Martini, Antonio and Nguyen-Duc, Anh and Stray, Viktoria},
	year = {2021},
	keywords = {Action research, AwarenessRelation, Deliberation theory, SLR excluded notMetadata, Springer, TD technical debt, Technical Debt},
	pages = {50--65},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\PCI5BQ8L\\Borup et al. - 2021 - Deliberative Technical Debt Management An Action .pdf:application/pdf},
}


@incollection{seaman_2011,
	title = {{Measuring} and {Monitoring} {Technical} {Debt}},
	volume = {82},
	abstract = {Technical debt is a metaphor for immature, incomplete, or inadequate artifacts in the software development lifecycle that cause higher costs and lower quality in the long run. These artifacts remaining in a system affect subsequent development and maintenance activities, and so can be seen as a type of debt that the system developers owe the system. Incurring technical debt may speed up software development in the short run, but such benefit is achieved at the cost of extra work in the future, as if paying interest on the debt. In this sense, the technical debt metaphor characterizes the relationship between the short-term benefits of delaying certain software maintenance tasks or doing them quickly and less carefully, and the long-term cost of those delays. However, managing technical debt is more complicated than managing financial debt because of the uncertainty involved. In this chapter, the authors review the main issues associated with technical debt, and propose a technical debt management framework and a research plan for validation. The objective of our research agenda is to develop and validate a comprehensive technical debt theory that formalizes the relationship between the cost and benefit sides of the concept. Further, we propose to use the theory to propose mechanisms (processes and tools) for measuring and managing technical debt in software product maintenance. The theory and management mechanisms are intended ultimately to contribute to the improved quality of software and facilitate decision making in software maintenance.},
	urldate = {2024-07-19},
	booktitle = {Advances in {Computers}},
	publisher = {Elsevier},
	author = {Seaman, Carolyn and Guo, Yuepu},
	editor = {Zelkowitz, Marvin V.},
	month = jan,
	year = {2011},
	doi = {10.1016/B978-0-12-385512-1.00002-5},
	pages = {25--46},
	file = {Eingereichte Version:C\:\\Users\\Marion Wiese\\Zotero\\storage\\DWLIEUR7\\Seaman und Guo - 2011 - Chapter 2 - Measuring and Monitoring Technical Deb.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\XCJT5I9L\\B9780123855121000025.html:text/html},
}

@inproceedings{yli-huumo_developing_2016,
	address = {Cham},
	title = {Developing {Processes} to {Increase} {Technical} {Debt} {Visibility} and {Manageability} – {An} {Action} {Research} {Study} in {Industry}},
	isbn = {978-3-319-49094-6},
	doi = {10.1007/978-3-319-49094-6_24},
	abstract = {The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future.},
	language = {en},
	booktitle = {Product-{Focused} {Software} {Process} {Improvement}},
	publisher = {Springer International Publishing},
	author = {Yli-Huumo, Jesse and Maglyas, Andrey and Smolander, Kari and Haller, Johan and Törnroos, Hannu},
	editor = {Abrahamsson, Pekka and Jedlitschka, Andreas and Nguyen Duc, Anh and Felderer, Michael and Amasaki, Sousuke and Mikkonen, Tommi},
	year = {2016},
	keywords = {Action research, Software process improvement, TD management, Technical debt, Technical debt management},
	pages = {368--378},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\3UURP39L\\Yli-Huumo et al. - 2016 - Developing Processes to Increase Technical Debt Vi.pdf:application/pdf},
}

@book{staron_action_2020,
	address = {Cham},
	title = {Action {Research} in {Software} {Engineering}: {Theory} and {Applications}},
	isbn = {978-3-030-32609-8 978-3-030-32610-4},
	shorttitle = {Action {Research} in {Software} {Engineering}},
	language = {en},
	urldate = {2023-03-14},
	publisher = {Springer International Publishing},
	author = {Staron, Miroslaw},
	year = {2020},
	doi = {10.1007/978-3-030-32610-4},
	keywords = {02 started},
	file = {Staron - 2020 - Action Research in Software Engineering Theory an.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\MGG3ZL76\\Staron - 2020 - Action Research in Software Engineering Theory an.pdf:application/pdf},
}


@article{Buschmann2011,
	title = {To pay or not to pay technical debt},
	volume = {28},
	issn = {07407459},
	doi = {10.1109/MS.2011.150},
	abstract = {Technical debt is a widely used metaphor to illustrate and discuss the consequences of design and coding decisions over time. The architect's position on technical debt, however, should be driven more by business aspects and less by technical concerns. Only then can architects assess when to incur technical debt and whether or not to retire it, when to retire it, and how. © 2011 IEEE.},
	number = {6},
	urldate = {2019-10-26},
	journal = {IEEE Software},
	author = {Buschmann, Frank},
	month = nov,
	year = {2011},
	keywords = {★, architectual technical dept, software engineering, architecture, business perspective, software, IST-Ready, TD conversion, TD interest, TD repayment, TD management, TD interest payment, TD in architecture (ATD), TD technical debt, 01 read},
	pages = {29--31},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\R3JFWR8H\\2011 - Buschmann - To pay or not to pay technical debt.pdf:application/pdf},
}

@book{Fuhring2021a,
	title = {Change {Management} {Essentials} for {Managers} and {Smart} {Leaders}},
	isbn = {978-3-95710-293-5},
	doi = {10.5771/9783957102935},
	author = {Führing, Meik},
	year = {2021},
	keywords = {organizational change, StakeholderAnalyse, ChangeKickOff, ChangeTouchDown, ChangeWorkshops, 01 read},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\XWZLR4MC\\Führing - 2021 - Change Management Essentials for Managers and Smart Leaders.pdf:application/pdf},
}

@inproceedings{Borowa2021,
	title = {The {Influence} of {Cognitive} {Biases} on {Architectural} {Technical} {Debt}},
	isbn = {978-1-72816-260-7},
	doi = {10.1109/ICSA51549.2021.00019},
	abstract = {Cognitive biases exert a significant influence on human thinking and decision-making. In order to identify how they influence the occurrence of architectural technical debt, a series of semi-structured interviews with software architects was performed. The results show which classes of architectural technical debt originate from cognitive biases, and reveal the antecedents of technical debt items (classes) through biases. This way, we analysed how and when cognitive biases lead to the creation of technical debt. We also identified a set of debiasing techniques that can be used in order to prevent the negative influence of cognitive biases. The observations of the role of organisational culture in the avoidance of inadvertent technical debt throw a new light on that issue.},
	booktitle = {International {Conference} on {Software} {Architecture} ({ICSA})},
	author = {Borowa, Klara and Zalewski, Andrzej and Kijas, Szymon},
	year = {2021},
	keywords = {software architecture, decision-making, Architectural Decision- Making, cal Debt, Cognitive Bias, Techni-, noOverview, topic, PreventionSolution, PreventionTopic, Overview={\textgreater}Prevention, CommunicationProblemStatement, Interviews, IST-, IST-ToDo, psychology, Conferences, TD causes, Architectural DecisionMaking, Organizational aspects, IST-Ready, TD prevention, TD in architecture (ATD), TD technical debt, 01 read},
	pages = {115--125},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\KEJF7RBQ\\Borowa, Zalewski, Kijas - 2021 - The Influence of Cognitive Biases on Architectural Technical Debt.pdf:application/pdf},
}

@inproceedings{zalewski_cognitive_2017,
	address = {Cham},
	title = {On {Cognitive} {Biases} in {Architecture} {Decision} {Making}},
	isbn = {978-3-319-65831-5},
	doi = {10.1007/978-3-319-65831-5_9},
	abstract = {The research carried out to date shows that architectural decision-making is far from being a rational process. Architects tend to adopt a satisfying approach, rather than looking for the optimal architecture, which is a result of many human and social factors. The results of a workshop, carried out with 14 software engineering practitioners show that cognitive biases are commonly present in architecture decision-making. A systematic approach to analysing the influence of biases on decision making has been introduced. Twelve cognitive biases identified during the workshop were analysed with regard to the elements of the decision-making context that affected the aspects of architectural decision making. Finally, we analyse the interactions between cognitive biases and the conditions of real-world software development.},
	language = {en},
	booktitle = {Software {Architecture}},
	publisher = {Springer International Publishing},
	author = {Zalewski, Andrzej and Borowa, Klara and Ratkowski, Andrzej},
	editor = {Lopes, Antónia and de Lemos, Rogério},
	year = {2017},
	keywords = {Architectural decision-making, Architectural decisions, Cognitive biases},
	pages = {123--137},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\64SSDYEH\\Zalewski et al. - 2017 - On Cognitive Biases in Architecture Decision Makin.pdf:application/pdf},
}

@misc{iso_25010_2023,
	title = {{ISO} 25010-2023 {\textbar} {Systems} and software engineering - {Systems} and software {Quality} {Requirements} and {Evaluation} ({SQuaRE}) - {System} and software quality models},
	year = {2023},
        author={ISO/IEC},
        publisher={ISO/IEC},
	file = {ISO IEC 25010_2nd edition 2023.11.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\PQWXZR73\\ISO IEC 25010_2nd edition 2023.11.pdf:application/pdf},
}

@inproceedings{rachow_architecture_2022,
	address = {New York, NY, USA},
	series = {{TechDebt} '22},
	title = {An architecture smell knowledge base for managing architecture technical debt},
	isbn = {978-1-4503-9304-1},
	doi = {10.1145/3524843.3528092},
	abstract = {Many software projects suffer from architecture erosion and architecture technical debt. One challenge is to identify affected parts and prioritize them for refactoring. Architecture smells are indicators of potential architecture technical debt, but architecture smells are ambiguous and their impact is not always clear. To address this, we have built a knowledge base that improves understanding of architecture smells and identifies violated software design principles and affected quality attributes. The design principles help our understanding of what causes architecture smells, while the impaired quality attributes represent the consequences. We conducted a systematic literature review to identify these relations and built an architecture smell ontology. This ontology provides a knowledge base that architects can use to prioritize the smells according to the project's individual quality goals.},
	urldate = {2024-07-22},
	booktitle = {Proceedings of the {International} {Conference} on {Technical} {Debt}},
	publisher = {Association for Computing Machinery},
	author = {Rachow, Paula and Riebisch, Matthias},
	month = aug,
	year = {2022},
	pages = {1--10},
	file = {Rachow und Riebisch - 2022 - An architecture smell knowledge base for managing .pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\6SQCQEFX\\Rachow und Riebisch - 2022 - An architecture smell knowledge base for managing .pdf:application/pdf},
}

@article{Kruchten2012a,
	title = {Technical debt: {From} metaphor to theory and practice},
	volume = {29},
	issn = {07407459},
	doi = {10.1109/MS.2012.167},
	abstract = {The metaphor of technical debt in software development was introduced two decades ago to explain to nontechnical stakeholders the need for what we call now refactoring. As the term is being used to describe a wide range of phenomena, this paper proposes an organization of the technical debt landscape, and introduces the papers on technical debt contained in the issue. © 2012 IEEE.},
	number = {6},
	urldate = {2019-10-20},
	journal = {IEEE Software},
	author = {Kruchten, Philippe and Nord, Robert L. and Ozkaya, Ipek},
	month = nov,
	year = {2012},
	keywords = {★, software maintenance, software quality, reasons, backlog colors, evolvability, financial model, maintainability, refactoring, taxonomy, Investments, name, topic, topic!, AwarenessTopic, AwarenessProblemStatement, Overview={\textgreater}Awareness, OverviewTopic!, Awareness={\textgreater}Management, Awareness={\textgreater}Overview, Kruchten2012, Sofwa, TD causes, TD Concepts, risk management, IST-Ready, 00untagged, Sofware testing, TD backlog, ATD causes, TD landscape, TD technical debt, 01 read},
	pages = {18--21},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ZNX6TBVA\\2012 - Kruchten, Nord, Ozkaya - Technical debt From metaphor to theory and practice.pdf:application/pdf},
}


@article{Vogel-Heuser2021,
	title = {Interdisciplinary effects of technical debt in companies with mechatronic products — a qualitative study},
	volume = {171},
	issn = {0164-1212},
	abstract = {Digitalization of products and production systems requires a fusion of mechatronic disciplines, where interfaces between mechanical, electrical, and software engineering are inevitable. The increasingly rapid pace of innovations in mechatronic systems triggers decisions being taken under time and cost pressure. At times, compromises in technical solutions are made, neglecting their long-term damage to the system. Technical debt (TD), a concept from software engineering, refers to short-term benefits that lead to long-term negative consequences, e.g., in the form of more difficult maintainability or evolvability. This also applies to mechatronic systems, yet the knowledge of TD characteristics and correlations in the interdisciplinary life cycle has only received little attention. This first comprehensive survey investigates TD in mechatronics systematically and across sectors. 50 experts, of whom 42\% hold positions as department heads, from 21 renowned companies and 10 sectors in the German-speaking region supported this study with real scenarios where TD caused damage to their system. 94 informative TD incidents that were classified into twelve TD types were recorded, of which 2/3 have not yet been eliminated and posed a potential risk to the system. TD emerges most frequently in the first three stages of the life cycle, where the consequences rarely remain isolated at their source but are forwarded to later phases and disciplines in the life cycle. In contrast to the research focus in software engineering, the multi-domain analysis of mechatronic TD issues reveals that software engineers are most burdened by Requirements TD and Infrastructure TD in the interdisciplinary environment.},
	journal = {Journal of Systems and Software},
        doi = {10.1016/j.jss.2020.110809},
	author = {Vogel-Heuser, Birgit and Bi, Fandi},
	year = {2020},
	keywords = {noOverview, topic, PreventionTopic, AwarenessTopic, AwarenessProblemStatement, ManagementAwarenessProblemStatement, SpecialArea, AutomatedProductionSystem, PreventionProblemStatement, Awareness={\textgreater}Management, Life cycle, mechatronic disciplines, IST-Ready, TD vicious cycles, TD in mechatronics, TD technical debt, 01 read, TD inheritence from other disciplines, Mechatronic},
	pages = {110809},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\G5LDRGL4\\Vogel-Heuser, Bi - 2021 - Interdisciplinary effects of technical debt in companies with mechatronic products — a qualitative study.pdf:application/pdf},
}

@article{Dong2019,
	title = {Technical {Debt} as indicator for weaknesses in engineering of automated production systems},
	volume = {13},
	issn = {18637353},
	doi = {10.1007/s11740-019-00897-0},
	abstract = {The concept of Technical Debt describes a situation in which a technical compromise is made despite better knowledge. The survey presented delivers insights on Technical Debt in 48 German companies supplying automated production systems. The participating companies do have some immediate benefits from taking Technical Debt under time pressure, but encounter a significant higher long-term additional effort to recover from technical debt. However, awareness for Technical Debt at these companies is low. Therefore, the automated production system manufacturers need to keep a closer eye on expenditure for Technical Debt. The developed survey can be used as a self-assessment method for other companies to compare their results with the average results from this survey.},
	number = {3-4},
	journal = {Production Engineering},
	author = {Dong, Quang Huan and Ocker, Felix and Vogel-Heuser, Birgit},
	year = {2019},
	note = {Publisher: Springer Berlin Heidelberg
ISBN: 0123456789},
	keywords = {topic, AwarenessTopic, Management, IST-SpecialToDo, SpecialArea, AutomatedProductionSystem, Automated production systems, Cross-disciplinary engineering, TD technical debt, Technical debt, SLR included, Springer, 01 read, TD inheritence from other disciplines, Mechatronic},
	pages = {273--282},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\8XR48C3U\\Dong, Ocker, Vogel-Heuser - 2019 - Technical Debt as indicator for weaknesses in engineering of automated production systems.pdf:application/pdf},
}


@inproceedings{Tonin2017,
	title = {Effects of {Technical} {Debt} {Awareness}: {A} {Classroom} {Study}},
	isbn = {978-3-319-57633-6},
	doi = {10.1007/978-3-319-57633-6_6},
	abstract = {Technical Debt is a metaphor that has, in recent years, helped devel‐ opers to think about and to monitor software quality. The metaphor refers to flaws in software (usually caused by shortcuts to save time) that may affect future maintenance and evolution. We conducted an empirical study in an academic environment, with nine teams of graduate and undergraduate students during two offerings of a laboratory course on Extreme Programming (XP Lab). The teams had a comprehensive lecture about several alternative ways to identify and manage Technical Debt. We monitored the teams, performed interviews, did close observations and collected feedback. The results show that the awareness of Technical Debt influences team behavior. Team members report thinking and discussing more about software quality after becoming aware of Technical Debt in their projects},
	booktitle = {18th {International} {Conference}, {XP} 2017},
	author = {Tonin, Graziela Simone and Goldman, Alfredo and Seaman, Carolyn and Pina, Diogo},
	editor = {Baumeister, Hubert and Lichter, Horst and Riebisch, Matthias},
	year = {2017},
	keywords = {TD awareness, Extreme programming, Technical debt awareness, Technical debt impact, topic, topic!, AwarenessTopic!, IST-Ready, TD incurrence, TD technical debt, Technical debt, SLR included, Springer, Management={\textgreater}Discussions, 01 read},
	pages = {84--100},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\LMYUY7FQ\\Tonin et al. - 2017 - Effects of Technical Debt Awareness A Classroom Study.pdf:application/pdf},
}

@article{lenarduzzi_systematic_2020,
	title = {A systematic literature review on {Technical} {Debt} prioritization: {Strategies}, processes, factors, and tools (journal version)},
    doi = {10.1016/j.jss.2020.110827},
	volume = {171},
	abstract = {Background Software companies need to manage and refactor Technical Debt issues. Therefore, it is necessary to understand if and when refactoring of Technical Debt should be prioritized with respect to developing features or fixing bugs. Objective The goal of this study is to investigate the existing body of knowledge in software engineering to understand what Technical Debt prioritization approaches have been proposed in research and industry. Method We conducted a Systematic Literature Review of 557 unique papers published until 2020, following a consolidated methodology applied in software engineering. We included 44 primary studies. Results Different approaches have been proposed for Technical Debt prioritization, all having different goals and proposing optimization regarding different criteria. The proposed measures capture only a small part of the plethora of factors used to prioritize Technical Debt qualitatively in practice. We present an impact map of such factors. However, there is a lack of empirical and validated set of tools. Conclusion We observed that Technical Debt prioritization research is preliminary and there is no consensus on what the important factors are and how to measure them. Consequently, we cannot consider current research conclusive. In this paper, we therefore outline different directions for necessary future investigations.},
	number = {171},
	journal = {The Journal ofSystems \& Software journal},
	author = {Lenarduzzi, Valentina and Besker, Terese and Taibi, Davide and Martini, Antonio and Fontana, Francesca Arcelli},
	year = {2020},
	keywords = {01 read, Debt, Debt prioritization, Literature, OverviewRelation, Relation, Review, Systematic, systematic literature review, TD prioritization, TD technical debt, Technical, Technical Debt prioritization, threats to validity},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\PY394KN9\\98137204.pdf:application/pdf},
}


@article{FREIRE2023,
	title = {Software practitioners’ point of view on technical debt payment},
	volume = {196},
	issn = {0164-1212},
	doi = {https://doi.org/10.1016/j.jss.2022.111554},
	abstract = {Context:
Technical debt (TD) payment refers to the activity of expending maintenance effort and resources to make up for the effects of previous technical compromises.
Aims:
To investigate if software practitioners have paid debt items off in their projects, the practices that have been used for paying off debt items, and the issues that hamper the implementation of these practices.
Method:
We analyze 653 responses collected by surveying practitioners from six countries about TD payment.
Results:
Practitioners have not paid off TD items in most cases. We identified 27 reasons for not paying off those items and 32 payment-related practices. Practices are mainly related to internal quality issues, while reasons for not paying TD off are mostly associated with planning and management issues. Lastly, we identified relationships between practices and between reasons, indicating that both can appear in combination.
Conclusion:
. We use different views to consolidate the set of information on TD payment, extending the conceptual model for TD and organizing the set of practices and reasons into a TD payment map. We believe that the model and the map can support practitioners in planning their TD payment strategy.},
	journal = {Journal of Systems and Software},
	author = {Freire, Sávio and Rios, Nicolli and Pérez, Boris and Castellanos, Camilo and Correal, Darío and Ramač, Robert and Mandić, Vladimir and Taušan, Nebojša and López, Gustavo and Pacheco, Alexia and Mendonça, Manoel and Falessi, Davide and Izurieta, Clemente and Seaman, Carolyn and Spínola, Rodrigo},
	year = {2023},
	keywords = {verfügbarkeit nicht frei, TD repayment, TD management, TD technical debt, 09 abstract read, RepaymentTopic!},
	pages = {111554},
	file = {Freire et al. - 2023 - Software practitioners’ point of view on technical.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\TF6ILCDC\\Freire et al. - 2023 - Software practitioners’ point of view on technical.pdf:application/pdf},
}

@article{Mendes2019,
	title = {{VisminerTD}: a tool for automatic identification and interactive monitoring of the evolution of technical debt items},
	volume = {25},
	issn = {16784804},
	doi = {10.1186/s13173-018-0083-1},
	abstract = {Technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during software development. Software TD is a type of debt that brings a short-term benefit, but which may have to be paid with interest later on in the software development life cycle. Its presence brings risks to the project and can reduce its quality. It is worthwhile to have automatic mechanisms to monitor it, as TD monitoring requires the analysis of large amounts of complex data. Therefore, the combination of software metrics and code comment analysis, in the identification, and information visualization techniques, in monitoring, present themselves as a promising strategy to manage TD. This work presents VisminerTD, a tool that allows the automatic identification and interactive monitoring of the evolution of TD items by combining software metrics, code comment analysis, and information visualization. To evaluate its applicability, a feasibility study was carried out considering JUnit 4 and Apache Ant software projects. The results indicated that VisminerTD can support software development teams in monitoring TD items. In addition, a second case study was performed to assess the feasibility of the proposed tool regarding its usefulness, ease of use, and self-predicted future use. The results provided positive evidence on the use of the proposed tool, indicating (i) that it can be useful in supporting TD Identification and TD monitoring activities and (ii) that it can bring gains in terms of comprehensiveness and efficacy when evaluating the desirable time to identify and monitor different types of debt. Given the current scenario characterized by limited options of tools that combine different information to support automatic identification and monitoring of the evolution of TD items in software projects, VisminerTD can approximate the state-of-the-art and the state-of-the-practice in the TD area, contributing to a wider dissemination of the concept.},
	number = {1},
	journal = {Journal of the Brazilian Computer Society},
	author = {Mendes, Thiago S. and Gomes, Felipe G.S. and Gonçalves, David P. and Mendonça, Manoel G. and Novais, Renato L. and Spínola, Rodrigo O.},
	year = {2019},
	keywords = {software evolution, Software visualization, Technical debt monitoring, TD identification, topic, OverviewTopic, noProjectManagement, open source software, OSS, IST-Ready, 00untagged, TD in code, TD technical debt},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\K434TQ8L\\Mendes et al. - 2019 - VisminerTD a tool for automatic identification and interactive monitoring of the evolution of technical debt item.pdf:application/pdf},
}

@inproceedings{holvitie_debtflag_2013,
	title = {{DebtFlag}: {Technical} debt management with a development environment integrated tool},
	shorttitle = {{DebtFlag}},
	doi = {10.1109/MTD.2013.6608674},
	abstract = {In this paper, we introduce the DebtFlag tool for capturing, tracking and resolving technical debt in software projects. DebtFlag integrates into the development environment and provides developers with lightweight documentation tools to capture technical debt and link them to corresponding parts in the implementation. During continued development these links are used to create propagation paths for the documented debt. This allows for an up-to-date and accurate presentation of technical debt to be upheld, which enables developer conducted implementation-level micromanagement as well as higher level technical debt management.},
	urldate = {2024-07-26},
	booktitle = {2013 4th {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Holvitie, Johannes and Leppänen, Ville},
	month = may,
	year = {2013},
	keywords = {Cognition, Color, Context, DebtFlag, Documentation, Java, Software, source code analysis, source code assessment, Technical debt, technical debt management, Visualization},
	pages = {20--27},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Marion Wiese\\Zotero\\storage\\5JBYKTQ7\\6608674.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\GWM8E4VY\\Holvitie und Leppänen - 2013 - DebtFlag Technical debt management with a develop.pdf:application/pdf},
}

@inproceedings{silva_multidimer_2022,
	address = {New York, NY, USA},
	series = {{TechDebt} '22},
	title = {{MultiDimEr}: a multi-dimensional bug {analyzEr}},
	isbn = {978-1-4503-9304-1},
	shorttitle = {{MultiDimEr}},
	doi = {10.1145/3524843.3528099},
	abstract = {Background: Bugs and bug management consumes a significant amount of time and effort from software development organizations. A reduction in bugs can significantly improve the capacity for new feature development. Aims: We categorize and visualize dimensions of bug reports to identify accruing technical debt. This evidence can serve practitioners and decision makers not only as an argumentative basis for steering improvement efforts, but also as a starting point for root cause analysis, reducing overall bug inflow. Method: We implemented a tool, MultiDimEr, that analyzes and visualizes bug reports. The tool was implemented and evaluated at Ericsson. Results: We present our preliminary findings using the MultiDimEr for bug analysis, where we successfully identified components generating most of the bugs and bug trends within certain components. Conclusions: By analyzing the dimensions provided by MultiDimEr, we show that classifying and visualizing bug reports in different dimensions can stimulate discussions around bug hot spots as well as validating the accuracy of manually entered bug report attributes used in technical debt measurements such as fault slip through.},
	urldate = {2024-07-26},
	booktitle = {Proceedings of the {International} {Conference} on {Technical} {Debt}},
	publisher = {Association for Computing Machinery},
	author = {Silva, Lakmal and Unterkalmsteiner, Michael and Wnuk, Krzysztof},
	month = aug,
	year = {2022},
	pages = {66--70},
	file = {Volltext:C\:\\Users\\Marion Wiese\\Zotero\\storage\\5TRQW557\\Silva et al. - 2022 - MultiDimEr a multi-dimensional bug analyzEr.pdf:application/pdf},
}

@inproceedings{falessi_towards_2015,
	title = {Towards an open-source tool for measuring and visualizing the interest of technical debt},
	doi = {10.1109/MTD.2015.7332618},
	abstract = {Current tools for managing technical debt are able to report the principal of the debt, i.e., the amount of effort required to fix all the quality rules violated in a project. However, they do not report the interest, i.e., the disadvantages the project had or will have due to quality rules violations. As a consequence, the user lacks support in understanding how much the principal should be reduced and why. We claim that information about the interest is, at least, as important as the information about the principal; the interest should be quantified and treated as a first-class entity like the principal. In this paper we aim to advance the state of the art of how the interest is measured and visualized. The goal of the paper is to describe MIND, an open-source tool which is, to the best of our knowledge, the first tool supporting the quantification and visualization of the interest. MIND, by analyzing historical data coming from Redmine and Git repositories, reports the interest incurring in a software project in terms of how many extra defects occurred, or will occur, due to quality rules violations. We evaluated MIND by using it to analyze a software project stored in a dataset of more than a million lines of code. Results suggest that MIND accurately measures the interest of technical debt.},
	urldate = {2024-07-26},
	booktitle = {2015 {IEEE} 7th {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Falessi, Davide and Reichel, Andreas},
	month = oct,
	year = {2015},
	keywords = {Current measurement, Data visualization, defect proneness, interest, maintainability, Mathematical model, Monitoring, Open source software, Predictive models, quality rules, technical debt},
	pages = {1--8},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Marion Wiese\\Zotero\\storage\\QNED7YLT\\7332618.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\B9EVSC6L\\Falessi und Reichel - 2015 - Towards an open-source tool for measuring and visu.pdf:application/pdf},
}

@inproceedings{fernandez-sanchez_open_2017,
	title = {An {Open} {Tool} for {Assisting} in {Technical} {Debt} {Management}},
	doi = {10.1109/SEAA.2017.60},
	abstract = {Technical debt monitoring is one of the activities that have to be performed in technical debt management. To do that, there are different techniques that can be used to estimate technical debt and different tools that implement those different techniques. This paper presents TEDMA Tool, a tool for monitoring technical debt over the software evolution and that it is open to integrate third party tools. TEDMA is based on the analysis of source code repositories and is useful for researching using empirical data extracted from software projects. Currently, it is been used to analyze big projects in the execution of several case studies. The expected evolution of TEDMA will make the tool useful for software development industry.},
	urldate = {2024-07-26},
	booktitle = {2017 43rd {Euromicro} {Conference} on {Software} {Engineering} and {Advanced} {Applications} ({SEAA})},
	author = {Fernández-Sánchez, Carlos and Humanes, Héctor and Garbajosa, Juan and Díaz, Jessica},
	month = aug,
	year = {2017},
	keywords = {Data models, Databases, git, Measurement, Monitoring, neo4j, Software, technical debt, technical debt management, Time division multiplexing, tool, Tools},
	pages = {400--403},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Marion Wiese\\Zotero\\storage\\Z65FRBLS\\8051378.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\8WHDJR3T\\Fernández-Sánchez et al. - 2017 - An Open Tool for Assisting in Technical Debt Manag.pdf:application/pdf},
}


@article{segel_narrative_2010,
	title = {Narrative {Visualization}: {Telling} {Stories} with {Data}},
	volume = {16},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {1077-2626},
	shorttitle = {Narrative {Visualization}},
	doi = {10.1109/TVCG.2010.179},
	abstract = {Data visualization is regularly promoted for its ability to reveal stories within data, yet these “data stories” differ in important ways from traditional forms of storytelling. Storytellers, especially online journalists, have increasingly been integrating visualizations into their narratives, in some cases allowing the visualization to function in place of a written story. In this paper, we systematically review the design space of this emerging class of visualizations. Drawing on case studies from news media to visualization research, we identify distinct genres of narrative visualization. We characterize these design differences, together with interactivity and messaging, in terms of the balance between the narrative ﬂow intended by the author (imposed by graphical elements and the interface) and story discovery on the part of the reader (often through interactive exploration). Our framework suggests design strategies for narrative visualization, including promising under-explored approaches to journalistic storytelling and educational media.},
	language = {en},
	number = {6},
	urldate = {2024-07-26},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	author = {Segel, E and Heer, J},
	month = nov,
	year = {2010},
	pages = {1139--1148},
	file = {Segel und Heer - 2010 - Narrative Visualization Telling Stories with Data.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\R7S9PXW6\\Segel und Heer - 2010 - Narrative Visualization Telling Stories with Data.pdf:application/pdf},
}

@article{kosara_storytelling_2013,
	title = {Storytelling: {The} {Next} {Step} for {Visualization}},
	volume = {46},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {0018-9162},
	shorttitle = {Storytelling},
	doi = {10.1109/MC.2013.36},
	language = {en},
	number = {5},
	urldate = {2024-07-26},
	journal = {Computer},
	author = {Kosara, Robert and Mackinlay, Jock},
	month = may,
	year = {2013},
	pages = {44--50},
	file = {Kosara und Mackinlay - 2013 - Storytelling The Next Step for Visualization.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\DM9PV524\\Kosara und Mackinlay - 2013 - Storytelling The Next Step for Visualization.pdf:application/pdf},
}

@article{ajani_declutter_2022,
	title = {Declutter and {Focus}: {Empirically} {Evaluating} {Design} {Guidelines} for {Effective} {Data} {Communication}},
	volume = {28},
	copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
	issn = {1077-2626, 1941-0506, 2160-9306},
	shorttitle = {Declutter and {Focus}},
	doi = {10.1109/TVCG.2021.3068337},
	abstract = {Data visualization design has a powerful effect on which patterns we see as salient and how quickly we see them. The visualization practitioner community prescribes two popular guidelines for creating clear and efﬁcient visualizations: declutter and focus. The declutter guidelines suggest removing non-critical gridlines, excessive labeling of data values, and color variability to improve aesthetics and to maximize the emphasis on the data relative to the design itself. The focus guidelines for explanatory communication recommend including a clear headline that describes the relevant data pattern, highlighting a subset of relevant data values with a unique color, and connecting those values to written annotations that contextualize them in a broader argument. We evaluated how these recommendations impact recall of the depicted information across cluttered, decluttered, and decluttered+focused designs of six graph topics. Participants were asked to redraw previously seen visualizations, to recall their topics and main conclusions, and to rate the varied designs on aesthetics, clarity, professionalism, and trustworthiness. Decluttering designs led to higher ratings on professionalism, and adding focus to the design led to higher ratings on aesthetics and clarity, and better memory for the highlighted pattern in the data, as reﬂected both by redrawings of the original visualization and typed free-response conclusions. The results largely empirically validate the intuitions of visualization designers and practitioners.},
	language = {en},
	number = {10},
	urldate = {2024-07-26},
	journal = {IEEE Transactions on Visualization and Computer Graphics},
	author = {Ajani, Kiran and Lee, Elsie and Xiong, Cindy and Knaflic, Cole Nussbaumer and Kemper, William and Franconeri, Steven},
	month = oct,
	year = {2022},
	pages = {3351--3364},
	file = {Ajani et al. - 2022 - Declutter and Focus Empirically Evaluating Design.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ATBJZMIZ\\Ajani et al. - 2022 - Declutter and Focus Empirically Evaluating Design.pdf:application/pdf},
}

@article{errey_evaluating_2024,
	title = {Evaluating narrative visualization: a survey of practitioners},
	volume = {18},
	issn = {2364-415X, 2364-4168},
	shorttitle = {Evaluating narrative visualization},
	doi = {10.1007/s41060-023-00394-9},
	abstract = {Narrative visualization is characterized by the integration of data visualization and storytelling techniques. These characteristics provide challenges in its evaluation. Little is known about how these evaluation challenges are addressed by narrative visualization practitioners. We surveyed experienced narrative visualization practitioners to investigate their methods of evaluation. To gain deeper insight we conducted a series of semi-structured interviews with practitioners. We found that there is usually an informal approach to narrative visualization evaluation, where practitioners rely on prior experience and their peers for evaluation. Our study also revealed novel approaches to evaluation. We introduce a practice-led heuristic framework to aid practitioners to evaluate narrative visualization systematically. Our practice-led heuristic framework couples ﬁrst-hand practitioner experience with recent research literature. This work sheds light on how to address narrative visualization evaluation to better inform both academic research and practice.},
	language = {en},
	number = {1},
	urldate = {2024-07-26},
	journal = {International Journal of Data Science and Analytics},
	author = {Errey, Nina and Liang, Jie and Leong, Tuck Wah and Zowghi, Didar},
	month = jun,
	year = {2024},
	pages = {19--34},
	file = {Errey et al. - 2024 - Evaluating narrative visualization a survey of pr.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ZP4YXNGP\\Errey et al. - 2024 - Evaluating narrative visualization a survey of pr.pdf:application/pdf},
}

@article{airaldi_navi-q_nodate,
	title = {{NaVi}-{Q}: {A} {Quality} {Model} for {Evaluating} {Narrative} {Information} {Visualizations}},
	abstract = {Context: Evaluating narrative visualizations is often described as a complex task due to the unique characteristics they present, which poses difficulties in formulating objective evaluation criteria and developing standard evaluation procedures. Objective: This study introduces an evaluation model designed to assess the quality of narrative visualizations. Our goal was to capture the fundamental features of these visualizations to enable a comprehensive evaluation, enabling teams to identify targeted areas for improvement. Method: We draw upon existing models in Software Engineering and Information Visualization. To test the feasibility of our model, we conducted a small-scale evaluation that involved three evaluators with varying levels of expertise. Results: The results of the evaluation demonstrated high reliability, suggesting that the model is robust and capable of producing consistent results regardless of the evaluators' background. This indicates that our model is adaptable and can be utilized by diverse evaluators. Conclusion: The model introduced in this work serves as a valuable tool in defining clear quality criteria and providing a systematic approach to evaluation. It holds practical implications for creating standardized designs and bridging the gap between technical and non-technical teams.},
	language = {en},
	author = {Lezcano Airaldi, Andrea and Irrazábal, Emanuel and Diaz-Pace, Jorge Andrés},
	file = {Airaldi et al. - NaVi-Q A Quality Model for Evaluating Narrative I.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\29WLHJEP\\Airaldi et al. - NaVi-Q A Quality Model for Evaluating Narrative I.pdf:application/pdf},
}

@book{nussbaumer_knaflic_storytelling_2015,
	title = {Storytelling with {Data}},
	isbn = {978-1-119-00225-3},
	language = {en},
	publisher = {John Wiley \& Sons Ltd.},
	author = {Nussbaumer Knaflic, Cole},
	year = {2015},
	file = {Knaflic - Storytelling with Data.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\SPT25W9J\\Knaflic - Storytelling with Data.pdf:application/pdf},
}

@article{gershon_what_2001,
	title = {What storytelling can do for information visualization},
	volume = {44},
	issn = {0001-0782, 1557-7317},
	doi = {10.1145/381641.381653},
	language = {en},
	number = {8},
	urldate = {2024-07-26},
	journal = {Communications of the ACM},
	author = {Gershon, Nahum and Page, Ward},
	month = aug,
	year = {2001},
	pages = {31--37},
	file = {Gershon und Page - 2001 - What storytelling can do for information visualiza.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\6NSYBVZN\\Gershon und Page - 2001 - What storytelling can do for information visualiza.pdf:application/pdf},
}

@article{airaldi_data-driven_2021,
	title = {Data-driven {Storytelling} to {Support} {Decision} {Making} in {Crisis} {Settings}: {A} {Case} {Study}},
	volume = {27},
	copyright = {2021 Andrea Lezcano Airaldi, Jorge Andres Diaz-Pace, Emanuel Irrazábal},
	issn = {0948-6968},
	shorttitle = {Data-driven {Storytelling} to {Support} {Decision} {Making} in {Crisis} {Settings}},
	doi = {10.3897/jucs.66714},
	abstract = {Data-driven storytelling helps to communicate facts, easing comprehension and decision making, particularly in crisis settings such as the current COVID-19 pandemic. Several studies have reported on general practices and guidelines to follow in order to create effective narrative visualizations. However, research regarding the benefits of implementing those practices and guidelines in software development is limited. In this article, we present a case study that explores the benefits of including data visualization best practices in the development of a software system for the current health crisis. We performed a quantitative and qualitative analysis of sixteen graphs required by the system to monitor patients\&\#39; isolation and circulation permits in quarantine due to the COVID-19 pandemic. The results showed that the use of storytelling techniques in data visualization contributed to an improved decision-making process in terms of increasing information comprehension and memorability by the system stakeholders.},
	language = {en},
	number = {10},
	urldate = {2024-07-26},
	journal = {JUCS - Journal of Universal Computer Science},
	author = {Lezcano Airaldi, Andrea and Diaz-Pace, Jorge Andres and Irrazábal, Emanuel},
	month = oct,
	year = {2021},
	note = {Number: 10
Publisher: Journal of Universal Computer Science},
	pages = {1046--1068},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\RT5JNRPL\\Airaldi et al. - 2021 - Data-driven Storytelling to Support Decision Makin.pdf:application/pdf},
}

@book{maximini_scrum_2018,
	address = {Cham},
	series = {Management for {Professionals}},
	title = {The {Scrum} {Culture}},
	copyright = {http://www.springer.com/tdm},
	isbn = {978-3-319-73841-3 978-3-319-73842-0},
	language = {en},
	urldate = {2024-07-26},
	publisher = {Springer International Publishing},
	author = {Maximini, Dominik},
	year = {2018},
	doi = {10.1007/978-3-319-73842-0},
	file = {Maximini - 2018 - The Scrum Culture.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\WVFNEBQ4\\Maximini - 2018 - The Scrum Culture.pdf:application/pdf},
}

@book{meyer_agile_2014,
	address = {Cham},
	title = {Agile!: {The} {Good}, the {Hype} and the {Ugly}},
	copyright = {https://www.springernature.com/gp/researchers/text-and-data-mining},
	isbn = {978-3-319-05154-3 978-3-319-05155-0},
	shorttitle = {Agile!},
	language = {en},
	urldate = {2024-07-26},
	publisher = {Springer International Publishing},
	author = {Meyer, Bertrand},
	year = {2014},
	doi = {10.1007/978-3-319-05155-0},
	file = {Meyer - 2014 - Agile! The Good, the Hype and the Ugly.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\52I6S3ZG\\Meyer - 2014 - Agile! The Good, the Hype and the Ugly.pdf:application/pdf},
}


@article{chiesa_making_2008,
	title = {Making sense of social research: how useful is the {Hawthorne} {Effect}?},
	volume = {38},
	copyright = {Copyright © 2006 John Wiley \& Sons, Ltd.},
	issn = {1099-0992},
        doi = {10.1002/ejsp.401},
	shorttitle = {Making sense of social research},
	abstract = {‘The Hawthorne Effect’ is a phrase frequently employed in textbooks and other academic discourse. It appears to have been coined over 50 years ago and alludes to the outcome of research undertaken two decades earlier. This paper seeks to elucidate how the term ‘Hawthorne Effect’ has come to be used. A variety of texts will be presented to demonstrate the many different and often contradictory meanings ascribed to the term. A consideration of Guerin's review of research in social facilitation suggests the complexity of issues that seem to be involved in the use of the term ‘Hawthorne Effect’ is such that greater precision is required. Ultimately, we conclude, the term has no useful role in the discussion of research findings. Copyright © 2006 John Wiley \& Sons, Ltd.},
	language = {en},
	number = {1},
	urldate = {2023-11-15},
	journal = {European Journal of Social Psychology},
	author = {Chiesa, Mecca and Hobbs, Sandy},
	year = {2008},
	pages = {67--74},
	file = {Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\MV2QX3VF\\ejsp.html:text/html},
}



@article{MCCAMBRIDGE2014,
title = {Systematic review of the Hawthorne effect: New concepts are needed to study research participation effects},
journal = {Journal of Clinical Epidemiology},
volume = {67},
number = {3},
pages = {267-277},
year = {2014},
issn = {0895-4356},
doi = {https://doi.org/10.1016/j.jclinepi.2013.08.015},
author = {Jim McCambridge and John Witton and Diana R. Elbourne},
keywords = {Hawthorne effect, Reactivity, Observation, Research methods, Research participation, Assessment},
abstract = {Objectives
This study aims to (1) elucidate whether the Hawthorne effect exists, (2) explore under what conditions, and (3) estimate the size of any such effect.
Study Design and Setting
This systematic review summarizes and evaluates the strength of available evidence on the Hawthorne effect. An inclusive definition of any form of research artifact on behavior using this label, and without cointerventions, was adopted.
Results
Nineteen purposively designed studies were included, providing quantitative data on the size of the effect in eight randomized controlled trials, five quasiexperimental studies, and six observational evaluations of reporting on one's behavior by answering questions or being directly observed and being aware of being studied. Although all but one study was undertaken within health sciences, study methods, contexts, and findings were highly heterogeneous. Most studies reported some evidence of an effect, although significant biases are judged likely because of the complexity of the evaluation object.
Conclusion
Consequences of research participation for behaviors being investigated do exist, although little can be securely known about the conditions under which they operate, their mechanisms of effects, or their magnitudes. New concepts are needed to guide empirical studies.}
}


% ------------------------------------------------------
%    Psychology
% ------------------------------------------------------


@article{Endsley1988,
author = {Mica R. Endsley},
title ={Design and Evaluation for Situation Awareness Enhancement},

journal = {Proceedings of the Human Factors Society Annual Meeting},
volume = {32},
number = {2},
pages = {97-101},
year = {1988},
    abstract = { Situation awareness (SA) is an important component of pilot/system performance in all types of aircraft. It is the role of the human factors engineer to develop aircraft cockpits which will enhance SA. Research in the area of situation awareness is is vitally needed if system designers are to meet the challenge of providing cockpits which enhance SA. This paper presents a discussion of the SA construct, important considerations facing designers of aircraft systems, and current research in the area of SA measurement. },
doi={https://doi.org/10.1177/154193128803200221}
}


@article{dawson1987human,
  title={Human autonomic and skeletal classical conditioning: The role of conscious cognitive factors.},
  author={Dawson, Michael E and Schell, Anne M},
  year={1987},
  publisher={John Wiley \& Sons}
}
@article{schwarz2007science,
  title={The science of real-time data capture: Self-reports in health research},
  author={Schwarz, Norbert and Stone, A and Shiffman, S and Atienza, A and Nebeling, L},
  journal={Retrospective and concurrent self-reports: The rationale for real-time data capture},
  pages={11--27},
  year={2007}
}

@article{zhou2023research,
  title={Research on multilevel situation awareness changes under the cumulative effect of mental fatigue},
  author={Zhou, Xiaozhou and Han, Jichen and Qin, Hao and Xue, Chengqi},
  journal={Cognition, Technology \& Work},
  pages={1--13},
  year={2023},
  publisher={Springer},
doi={https://doi.org/10.1007/s10111-023-00723-99}
}

@article{purkis_does_2001,
	title = {Does {Affective} {Learning} {Exist} in the {Absence} of {Contingency} {Awareness}?},
	volume = {32},
	issn = {0023-9690},
	doi = {10.1006/lmot.2000.1066},
	abstract = {The proposal that affective learning, the learning of likes and dislikes, can exist in the absence of contingency awareness, whereas signal learning, the learning of stimulus relationships, cannot, was investigated in a differential conditioning paradigm that was embedded in a visual masking task. Startle magnitude modulation and changes in verbal ratings served as measures of affective learning, whereas skin conductance was taken to reflect signal learning. Awareness was assessed online with an expectancy dial and in a postexperimental questionnaire. Both between-subject comparisons of verbalizers and nonverbalizers and within-subject comparisons of verbalizers before and after verbalization failed to reveal any evidence for learning, whether affective or otherwise, in the absence of knowledge of the stimulus contingencies.},
	number = {1},
	journal = {Learning and Motivation},
	author = {Purkis, Helena M. and Lipp, Ottmar V.},
	month = feb,
	year = {2001},
	keywords = {Key Words: affective learning, Pavlovian conditioning, skin conductance, startle},
	pages = {84--99},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\B4VZ44QS\\Purkis und Lipp - 2001 - Does Affective Learning Exist in the Absence of Co.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\IFLIZJHJ\\S002396900091066X.html:text/html},
}

@article{chugh_bounded_2007,
	title = {Bounded awareness: what you fail to see can hurt you},
	volume = {6},
	issn = {1593-7879, 1860-1839},
	shorttitle = {Bounded awareness},
	doi = {10.1007/s11299-006-0020-4},
	abstract = {Objective We argue that people often fail to perceive and process stimuli easily available to them. In other words, we challenge the tacit assumption that awareness is unbounded and provide evidence that humans regularly fail to see and use stimuli and information easily available to them. We call this phenomenon ‘‘bounded awareness’’ (Bazerman and Chugh in Frontiers of social psychology: negotiations, Psychology Press: College Park 2005).},
	language = {en},
	number = {1},
	journal = {Mind \& Society},
	author = {Chugh, Dolly and Bazerman, Max H.},
	month = jun,
	year = {2007},
	pages = {1--18},
	file = {Chugh und Bazerman - 2007 - Bounded awareness what you fail to see can hurt y.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\98P4XLBI\\Chugh und Bazerman - 2007 - Bounded awareness what you fail to see can hurt y.pdf:application/pdf},
}

@article{baeyens_contingency_1990,
	title = {Contingency awareness in evaluative conditioning: {A} case for unaware affective-evaluative learning},
	volume = {4},
	issn = {0269-9931},
	shorttitle = {Contingency awareness in evaluative conditioning},
	doi = {10.1080/02699939008406760},
	abstract = {According to Martin and Levey (1987) evaluative conditioning is different from signal learning, i.e. the acquisition of knowledge about predictive relations between environmental events. The hypothesis was tested that evaluative conditioning, unlike signal learning, does not require awareness of the CS-US contingency. In three pilot experiments it was demonstrated that pairing neutral stimuli with either liked or disliked stimuli is sufficient to change neutral stimuli into a positive or negative direction. As indicated by postconditioning recognition questionnaires, this evaluative shift did not require and was not even influenced by contingency awareness. These findings were replicated and corroborated in an experiment, using a concurrent awareness assessment procedure and more fine-grained evaluative response measurements. The relevance of this conditioning without contingency awareness is discussed in the context of recent information processing models of Pavlovian conditioning.},
	number = {1},
	journal = {Cognition and Emotion},
	author = {Baeyens, Frank and Eelen, Paul and Bergh, Omer van den},
	month = mar,
	year = {1990},
	pages = {3--18},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\TSBPI727\\Baeyens et al. - 1990 - Contingency awareness in evaluative conditioning .pdf:application/pdf},
}


@inproceedings{wilson_unfortunate_2012,
	address = {Orlando, FL, USA},
	title = {Some {Unfortunate} {Consequences} of {Non}-{Randomized}, {Grouped}-{Item} {Survey} {Administration} in {IS} {Research}},
	abstract = {Arranging survey items to group measures of the same construct together has several benefits, including ease of administration and enhanced statistical reliability and validity of constructs. Yet some IS researchers claim this practice contributes to common methods bias and camouflages “true” measures of reliability. Our study takes a new approach to this issue by using a range of IS research measures in an online survey context to contrast grouped-item survey administration with a design in which the ordering of item administration is programmatically re-randomized for each individual subject. We find significant differences in construct reliability between grouped-item and individually randomized treatments as well as strong temporal effects and widespread anomalies related to item-ordering in the grouped-item treatment. Our results suggest the purported benefits of grouped-item surveys are outweighed by hazards these create to the integrity of research findings, and we caution IS researchers against their continued use.},
	language = {en},
	booktitle = {33. {International} {Conference} on {Information} {Systems}},
	author = {Wilson, Vance and Lankton, Nancy},
	year = {2012},
	file = {Wilson und Lankton - Some Unfortunate Consequences of Non-Randomized, G.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\4SLG5LLB\\Wilson und Lankton - Some Unfortunate Consequences of Non-Randomized, G.pdf:application/pdf},
}


@article{royal_impact_2016,
	title = {The {Impact} of {Item} {Sequence} {Order} on {Local} {Item} {Dependence}: {An} {Item} {Response} {Theory} {Perspective}},
	volume = {9},
	shorttitle = {The {Impact} of {Item} {Sequence} {Order} on {Local} {Item} {Dependence}},
	doi = {10.29115/SP-2016-0027},
	abstract = {\&nbsp; Local item dependence (LID) suggests a response to one item was directly influenced by a response to another item. Items exhibiting LID typically cause survey participants to provide biased/inaccurate responses, which ultimately poses a threat to score validity. Further, conflicting ‘best practice’ guidelines from survey research experts on how to construct surveys, particularly whether related items should be presented in a random or consistent order, may contribute to LID bias. The purpose of this paper is to bring attention to the issue of LID via a case example/experiment and illustrate how following best practice guidelines for survey construction may actually increase bias/error in some instances. Implications and recommendations are discussed. \&nbsp;},
	language = {en},
	number = {5},
	urldate = {2023-11-15},
	journal = {Survey Practice},
	author = {Royal, Kenneth D.},
	month = sep,
	year = {2016},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\M6JPFNKX\\Royal - 2016 - The Impact of Item Sequence Order on Local Item De.pdf:application/pdf},
}

% ------------------------------------------------------
%    Awareness Theory
% ------------------------------------------------------
@article{Endsley1995a,
	title = {Toward a theory of situation awareness in dynamic systems},
	volume = {37},
	doi = {10.4324/9781315092898-13},
        author = {Mica R. Endsley},
	abstract = {This paper presents a theoretical model of situation awareness based on its role in dynamic human decision making in a variety of domains. Situation awareness is presented as a predominant concern in system operation, based on a descriptive view of decision making. The relationship between situation awareness and numerous individual and environmental factors is explored. Among these factors, attention and working memory are presented as critical factors limiting operators from acquiring and interpreting information from the environment to form situation awareness, and mental models and goal-directed behavior are hypothesized as important mechanisms for overcoming these limits. The impact of design features, workload, stress, system complexity, and automation on operator situation awareness is addressed, and a taxonomy of errors in situation awareness is introduced, based on the model presented. The model is used to generate design implications for enhancing operator situation awareness and future directions for situation awareness research.},
	number = {1},
	journal = {HUMAN FACTORS, 1995,},
	year = {1995},
	keywords = {AwarenessTopic, AwarenessProblemStatement, IST-ToDo, Awareness={\textgreater}DecisionMaking, AwarenessTheory, SituationAwareness, topicAwarenessTheory},
	pages = {32--64},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\2DNL9G2C\\Endsley - 2017 - Toward a theory of situation awareness in dynamic systems.pdf:application/pdf},
}

@article{Endsley1995b,
	title = {Designing for {Situation} {Awareness} in {Complex} {System}},
	issn = {1468-2044},
	author = {Endsley, Mica R.},
	abstract = {We are living in what has been termed the "information age". In many{\textbackslash}ndomains, this{\textbackslash}n{\textbackslash}nhas meant a huge increase in systems, displays and technologies. From{\textbackslash}nvoice control to{\textbackslash}n{\textbackslash}nsophisticated line of sight head mounted displays, almost anything{\textbackslash}nis possible in today's{\textbackslash}n{\textbackslash}nworld, but too much is proving to be as big a challenge as too little{\textbackslash}nonce was. The problem{\textbackslash}n{\textbackslash}nis no longer lack of information, but finding what is needed when{\textbackslash}nit is needed.},
	journal = {Proceedings of the 2nd International Workshop on Symbiosis of Humans, Artifacts and Environment},
	year = {1995},
	pmid = {21454361},
	keywords = {AwarenessTopic, AwarenessTheory, SituationAwareness, IST-Ready},
	pages = {1--14},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\TWKYN79J\\Endsley - 1995 - Designing for Situation Awareness in Complex System.pdf:application/pdf},
}

@article{Baysal2013,
	title = {Developer dashboards: {The} need for qualitative analytics},
	volume = {30},
	issn = {07407459},
	doi = {10.1109/MS.2013.66},
	abstract = {Prominent technology companies including IBM, Microsoft, and Google have embraced an analytics-driven culture to help improve their decision making. Analytics aim to help practitioners answer questions critical to their projects, such as 'Are we on track to deliver the next release on schedule?' and 'Of the recent features added, which are the most prone to defects?' by providing fact-based views about projects. Analytic results are often quantitative in nature, presenting data as graphical dashboards with reports and charts. Although current dashboards are often geared toward project managers, they aren't well suited to help individual developers. Mozilla developer interviews show that developers face challenges maintaining a global understanding of the tasks they're working on and that they desire improved support for situational awareness, a form of qualitative analytics that's difficult to achieve with current quantitative tools. This article motivates the need for qualitative dashboards designed to improve developers' situational awareness by providing task tracking and prioritizing capabilities, presenting insights on the workloads of others, listing individual actions, and providing custom views to help manage workload while performing day-to-day development tasks. © 1984-2012 IEEE.},
	number = {4},
	journal = {IEEE Software},
	author = {Baysal, Olga and Holmes, Reid and Godfrey, Michael W.},
	year = {2013},
	keywords = {topic, OverviewTopic, AwarenessTopic, AwarenessProblemStatement, IST-ToDo, AwarenessSolution, AwarenessTheory, developer dashboards, qualitative analytics, qualitative dashboards, situational awareness, IST-Ready},
	pages = {46--52},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\79LU3762\\Baysal, Holmes, Godfrey - 2013 - Developer dashboards The need for qualitative analytics.pdf:application/pdf},
}

@article{Endsley2015,
	title = {Situation awareness misconceptions and misunderstandings},
	volume = {9},
	issn = {21695032},
	doi = {10.1177/1555343415572631},
	abstract = {Situation awareness (SA) has become a widely used construct within the human factors community, the focus of considerable research over the past 25 years. This research has been used to drive the development of advanced information displays, the design of automated systems, information fusion algorithms, and new training approaches for improving SA in individuals and teams. In recent years, a number of papers criticized the Endsley model of SA on various grounds. I review those criticisms here and show them to be based on misunderstandings of the model. I also review several new models of SA, including situated SA, distributed SA, and sensemaking, in light of this discussion and show how they compare to existing models of SA in individuals and teams.},
	number = {1},
	journal = {Journal of Cognitive Engineering and Decision Making},
	author = {Endsley, Mica R.},
	year = {2015},
	keywords = {AwarenessTheory, SituationAwareness, sensemaking, situation assessment, situation awareness, team situation awareness, working memory},
	pages = {4--32},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\BY435LWN\\Endsley - 2015 - Situation awareness misconceptions and misunderstandings.pdf:application/pdf},
}

@book{Salvendy2012,
	title = {{HANDBOOK} {OF} {HUMAN} {FACTORS} {AND} {ERGONOMICS}},
	isbn = {978-1-4398-2944-8},
	abstract = {This handbook is concerned with the role of humans in complex systems, the design of equipment and facilities for human use, and the development of environments for comfort and safety. The first, second, and third editions of the handbook were a major success and profoundly influenced the human factors profession. It was translated and published in Japanese and Russian and won the Institute of Industrial Engineers Joint Publishers Book of the Year Award. It has received strong endorsement from top management; the late Eliot Ester, retired president of General Motors Corporation, who wrote the forward to the first edition of the handbook, indicated that “regardless of what phase of the economy a person is involved in, this handbook is a very useful tool. Every area of human factors from environmental conditions and motivation to the use of new communication systems ... is well covered in the handbook by experts in every field.” In a literal sense, human factors and ergonomics is as old as the machine and environmental design, for it was aimed at designing them for human use. However, it was not until World War II that human factors emerged as a separate discipline. The field of human factors and ergonomics has developed and broadened considerably since its inception 70 years ago and has generated a body of knowledge in the following areas of specializations: • Human factors profession • Human factors fundamentals • Design of tasks and jobs • Equipment, workplace, and environmental design • Design for health, safety, and comfort • Performance modeling • Evaluation • Human–computer interaction • Design for individual differences • Selected applications The foregoing list shows how broad the field has become. As such, this handbook should be of value to all human factors and ergonomics specialists, engineers, industrial hygienists, safety engineers, and human–computer interaction specialists. The 61 chapters constituting the fourth edition of the handbook were written by 131 experts. In creating this handbook, the authors gathered information from over 7500 references and presented over 500 figures and 200 tables to provide theoretically based and practically oriented material for use by both practitioners and researchers. In the fourth edition of the Handbook of Human Factors and Ergonomics, the chapters have been completely, newly written. This fourth editionof the handbook covers totally new areas that were not included in the third edition. These include the following subjects: • Managing low-back disorder risk in the workplace • Neuroergonomics • Social networking • User requirements • Human factors in ambient intelligent environments • Online interactivity • Office ergonomics • Human factors and ergonomics in motor vehicle transportation • Human factors and ergonomics in aviation The main purpose of this handbook is to serve the needs of the human factors and ergonomics researchers, practitioners, and graduate students. Each chapter has a strong theory and science base and is heavily tilted toward application orientation. As such, a significant number of case studies, examples, figures, and tables are utilized to facilitate usability of the presented material. The many contributing authors came through magnificently. I thank them all most sincerely for agreeing so willingly to create this handbook with me. I had the privilege of working with Robert L. Argentieri, our Wiley executive editor, who significantly facilitated my editorial work with his assistant Dan Magers. I was truly fortunate to have during the preparation of this handbook the most able contribution of Myrna Kasdorf, editorial coordinator of the handbook, who has done a truly outstanding job.},
	author = {Salvendy, Gavriel},
	editor = {Salvendy, Gavriel},
	year = {2012},
	doi = {10.1201/b11963-ch-28},
	keywords = {02 started, AwarenessTheory, SituationAwareness},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\86THJ24D\\Stanney, Cohn - 2012 - Virtual Environments.pdf:application/pdf},
}

@article{Bishop2020,
	title = {Introduction to the special issue on software engineering in practice},
	volume = {50},
	issn = {1097024X},
	doi = {10.1002/spe.2780},
	number = {3},
	journal = {Software - Practice and Experience},
	author = {Bishop, Judith and Cooper, Kendra M.L. and Sharp, Helen and Whalen, Michael},
	year = {2020},
	keywords = {name, AwarenessTheory, AffectAwareness},
	pages = {187--188},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\THBCX4YD\\Bishop et al. - 2020 - Introduction to the special issue on software engineering in practice.pdf:application/pdf},
}

@article{Wright2004,
	title = {Objective measures of situation awareness in a simulated medical environment},
	volume = {13},
	issn = {14753898},
	doi = {10.1136/qshc.2004.009951},
	abstract = {One major limitation in the use of human patient simulators is a lack of objective, validated measures of human performance. Objective measures are necessary if simulators are to be used to evaluate the skills and training of medical practitioners and teams or to evaluate the impact of new processes or equipment design on overall system performance. Situation awareness (SA) refers to a person's perception and understanding of their dynamic environment. This awareness and comprehension is critical in making correct decisions that ultimately lead to correct actions in medical care settings. An objective measure of SA may be more sensitive and diagnostic than traditional performance measures. This paper reviews a theory of SA and discusses the methods required for developing an objective measure of SA within the context of a simulated medical environment. Analysis and interpretation of SA data for both individual and team performance in health care are also presented.},
	number = {SUPPL. 1},
	journal = {Quality and Safety in Health Care},
	author = {Wright, Melanie C. and Taekman, J. M. and Endsley, M. R.},
	year = {2004},
	pmid = {15465958},
	keywords = {AwarenessTheory, SituationAwareness, SAMetric, 01 read},
	pages = {65--71},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\2AYMS85P\\Wright, Taekman, Endsley - 2004 - Objective measures of situation awareness in a simulated medical environment.pdf:application/pdf},
}

@article{Webb2014a,
	title = {A situation awareness model for information security risk management},
	volume = {44},
	issn = {01674048},
	doi = {10.1016/j.cose.2014.04.005},
	abstract = {Information security risk management (ISRM) is the primary means by which organizations preserve the confidentiality, integrity and availability of information resources. A review of ISRM literature identified deficiencies in the practice of information security risk assessment that inevitably lead to poor decision-making and inadequate or inappropriate security strategies. In this conceptual paper, we propose a situation aware ISRM (SA-ISRM) process model to complement the information security risk management process. Our argument is that the model addresses the aforementioned deficiencies through an enterprise-wide collection, analysis and reporting of risk-related information. The SA-ISRM model is adapted from Endsley's situation awareness model and has been refined using our findings from a case study of the US national security intelligence enterprise. © 2014 Elsevier Ltd. All rights reserved.},
	number = {February 2019},
	journal = {Computers and Security},
	author = {Webb, Jeb and Ahmad, Atif and Maynard, Sean B. and Shanks, Graeme},
	year = {2014},
	keywords = {AwarenessTheory, SituationAwareness, Evidence-based information security, Information security compliance, Information security intelligence, Information security investigation, Information security management, Information security risk management, Situation awareness, Situation awareness theory, 01 read},
	pages = {1--15},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\PAL5NL48\\Webb et al. - 2014 - A situation awareness model for information security risk management(3).pdf:application/pdf},
}

@article{Stanton2001,
	title = {Situational awareness and safety},
	volume = {39},
	issn = {09257535},
	doi = {10.1016/S0925-7535(01)00010-8},
	abstract = {This paper considers the applicability of situation awareness concepts to safety in the control of complex systems. Much of the research to date has been conducted in aviation, which has obvious safety implications. It is argued that the concepts could be extended to other safety critical domains. The paper presents three theories of situational awareness: the three-level model, the interactive sub-systems approach, and the perceptual cycle. The difference between these theories is the extent to which they emphasise process or product as indicative of situational awareness. Some data from other studies are discussed to consider the negative effects of losing situational awareness, as this has serious safety implications. Finally, the application of situational awareness to system design, and training are presented. © 2001 Elsevier Science Ltd. All rights reserved.},
	number = {3},
	journal = {Safety Science},
	author = {Stanton, N. A. and Chambers, P. R.G. and Piggott, J.},
	year = {2001},
	keywords = {Design, AwarenessTheory, SituationAwareness, Cognitive models, Errors, Situational awareness, Teams},
	pages = {189--204},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\44JQE3CN\\Stanton, Chambers, Piggott - 2001 - Situational awareness and safety.pdf:application/pdf},
}

@article{Salas1995,
	title = {Situation {Awareness} in {Team} {Performance}: {Implications} for {Measurement} and {Training}},
	volume = {37},
	issn = {00187208},
	abstract = {Situation awareness has long been recognized as an important variable in aviation performance. Research to date has focused on idedntifying characteristics of stuation awareness for individuals, not on the behaviors and processes associated with team situation awareness. The purpose of this review is to delineate and identify characteristics of team situation awareness. In addition, implications are discussed and research quaestions are outlined that target the measurement and taining of situational awareness in teams.},
	number = {1},
	journal = {Human Factors},
	author = {Salas, Eduardo and Prince, Carolyn and Baker, David P and Shrestha, Lisa},
	year = {1995},
	keywords = {AwarenessTheory, SituationAwareness},
	pages = {123--136},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\UPHRSHZV\\Salas et al. - 1995 - Sit_Awrns_Teamprf_0.Pdf.pdf:application/pdf},
}

@article{Lanubile2013,
	title = {Group awareness in global software engineering},
	volume = {30},
	issn = {07407459},
	doi = {10.1109/MS.2013.30},
	abstract = {Insufficient team collaboration often challenges global software engineering projects. Group awareness can improve teams' trust, relationships, and efficiency. This article surveys the key technologies and tools that support group awareness and collaboration. © 1984-2012 IEEE.},
	number = {2},
	journal = {IEEE Software},
	author = {Lanubile, Filippo and Calefato, Fabio and Ebert, Christof},
	year = {2013},
	keywords = {collaboration, software engineering, 02 scanned, AwarenessTheory, global software, group awareness, remote work, social awareness, teams},
	pages = {18--23},
	annote = {eig. überholt seit Corona. Kann höchstens erwähnt werden, als " da hat sich mal jemand mit beschäftigt."},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\F4RXHBQG\\Lanubile, Calefato, Ebert - 2013 - Group awareness in global software engineering.pdf:application/pdf},
}

@article{Wang2009,
	title = {A review of awareness in distributed collaborative software engineering},
	volume = {40},
	doi = {10.1002/spe.1005},
	abstract = {Software development projects are inherently cooperative, requiring many developers to coordinate their efforts to produce complex systems. An integral part of this process is the development and maintenance of a shared understanding concerning the state of software project tasks, artefacts, and the activities and expertise of developers working on the project. In co-located settings, this vital awareness information that concerns developers, either directly or tangentially, is typically acquired using formal, regular meetings, informal personal interruptions and electronic communication. Developing and maintaining such an awareness are far more difficult in distributed teams where developers are separated by time and space. The goal of this review is to help bridge the gap between the theoretical benefits of distributed collaborative software development and the practical impediments to successful implementation, and more specifically, achieving similar levels of awareness in distributed settings to those available in co-located settings. The review starts with a detailed discussion of awareness and awareness types with particular relevance to collaboration. This is followed by a discussion of how awareness information is disseminated during collaborative processes. Awareness information needs and dissemination mechanisms in software development teams are then presented. The main contribution of the review, derived from a comparison of awareness needs in distributed collaborative software engineering and current support from tools and techniques, is that more support is required for the type of awareness known as context awareness. Context awareness crosscuts other (more basic) forms of awareness and arises because, over time, individual collaborators work on different sets of tasks and artefacts and form different perceptions of their colleagues; their colleagues’ work, roles, and relationships; and, the workspace. This awareness is highly contextual and therefore cannot be generalized across individuals, entities or activities that are found in a collaboration space.},
	journal = {Software - Practice and Experience},
	author = {Omoronyia, Inah and Ferguson, John and Roper, Marc and Wood, Murray},
	year = {2010},
	keywords = {empirical study, 02 scanned, AwarenessTheory, remote work, social awareness, context awareness, distributed teamwork, global software development},
	pages = {1107--1133},
	annote = {eig. überholt seit Corona. Kann höchstens erwähnt werden, als " da hat sich mal jemand mit beschäftigt."},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ENH4P4U2\\Wang, Wu - 2009 - Achieving high and consistent rendering performance of java AWTSwing on multiple platforms(2).pdf:application/pdf},
}

@article{Stanton2017,
	title = {State-of-science: situation awareness in individuals, teams and systems},
	volume = {60},
	issn = {13665847},
	doi = {10.1080/00140139.2017.1278796},
	abstract = {Our review addresses one of the most used, but debated, topics in Ergonomics: Situation Awareness (SA). We examine and elaborate upon key SA models. These models are divided into individual SA, team SA and systems SA categories. Despite, or perhaps because of, the debates surrounding SA it remains an enduring theme for research and practice in the domain of Ergonomics, now for over two decades. A contingent approach, which seeks to match different models of SA to different types of ergonomics problem, enables the differences between positions to be revealed and reconciled, and the practitioner guided towards optimum methodological solutions. Practitioner Summary: Measuring SA in individuals, teams and systems has become a key objective in Ergonomics. One single approach to SA does not fit all problems encountered. This review shows the importance of considering all three types of models and achieving a match between them and the problem at hand.},
	number = {4},
	journal = {Ergonomics},
	author = {Stanton, N. A. and Salmon, P. M. and Walker, G. H. and Salas, E. and Hancock, P. A.},
	year = {2017},
	pmid = {28051356},
	keywords = {theory, AwarenessTheory, SituationAwareness, Situation awareness, distributed cognition, models, team SA},
	pages = {449--466},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\83ZNJC8J\\Stanton et al. - 2017 - State-of-science situation awareness in individuals, teams and systems.pdf:application/pdf},
}

@article{Baeuchl2019,
	title = {Contingency awareness as a prerequisite for differential contextual fear conditioning},
	volume = {19},
	issn = {15307026},
	doi = {10.3758/S13415-018-00666-Z/FIGURES/9},
	abstract = {Contingency awareness during conditioning describes the phenomenon of becoming consciously aware of the association between a conditioned stimulus (CS) and an unconditioned stimulus (US). Despite the fact that contingency awareness is necessary for associative learning in some conditioning paradigms, its role in contextual fear conditioning, a variant that uses a context-CS (CTX) instead of a cue, has not been characterized thus far. We investigated if contingency awareness is a prerequisite for contextual fear conditioning and if subjects classified as aware differ from unaware subjects on a hemodynamic, autonomic, and behavioral level. We used a computer-generated picture context as CTX and slightly painful electric stimulation as US while we recorded brain responses by functional magnetic resonance imaging (fMRI), and obtained skin conductance responses (SCR) and verbal ratings of emotional valence and arousal. SCR analyses revealed that only aware subjects became conditioned to the US-associated CTX (CTX+). Brain activity related to the CTX+ was more strongly pronounced in fear-associated areas like the insula in the aware relative to the unaware group. Finally, the hippocampus was functionally connected to the cingulate cortex and posterior medial frontal gyrus in aware subjects relative to unaware subjects. These task-related differential connectivity patterns suggest that information exchange between the hippocampus and regions involved in the expression of conditioned fear and decision uncertainty is crucial for the acquisition of contingency knowledge. This study demonstrates the importance of contingency awareness for contextual fear conditioning and points to the hippocampus as a potential mediator for contingency learning in contextual learning.},
	number = {4},
	journal = {Cognitive, Affective and Behavioral Neuroscience},
	author = {Baeuchl, Christian and Hoppstädter, Michael and Meyer, Patric and Flor, Herta},
	month = aug,
	year = {2019},
	pmid = {30523574},
	keywords = {AwarenessTheory, Contextual fear conditioning, Contingency awareness, ContingencyAwareness, fMRI, Functional connectivity, Hippocampus, Neuropsychological testing},
	pages = {811--828},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ZVXVX7QE\\full-text.pdf:application/pdf},
}

@article{Bazerman2016,
	title = {Bounded awareness: {Implications} for ethical decision making},
	volume = {136},
	issn = {07495978},
	doi = {10.1016/j.obhdp.2015.11.004},
	abstract = {In many of the business scandals of the new millennium, the perpetrators were surrounded by people who could have recognized the misbehavior, yet failed to notice it. To explain such inaction, management scholars have been developing the area of behavioral ethics and the more specific topic of bounded ethicality—the systematic and predictable ways in which even good people engage in unethical conduct without their own awareness. In this paper, we review research on both bounded ethicality and bounded awareness, and connect the two areas to highlight the challenges of encouraging managers and leaders to notice and act to stop unethical conduct. We close with directions for future research and suggest that noticing unethical behavior should be considered a critical leadership skill.},
	journal = {Organizational Behavior and Human Decision Processes},
	author = {Bazerman, Max H. and Sezer, Ovul},
	year = {2016},
	keywords = {decision-making, Ethics, AwarenessTheory, Bounded awareness, BoundedAwareness},
	pages = {95--105},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\8CTBNFPP\\Bazerman, Sezer - 2016 - Bounded awareness Implications for ethical decision making.pdf:application/pdf},
}

@article{Bazerman2005,
	title = {Bounded {Awareness}: {Focusing} {Failures} in {Negotiation}},
	abstract = {Recent reviews have documented a shift over the last 25 years in the study of negotiation toward the decision-making process of the negotiator (Bazerman, Curhan, \& Moore, 2000; Bazerman, Curhan, Moore, \& Valley, 2000; Neale \& Fragale, this volume; Neuberg \& Fiske, 1987; Thompson \& Fox, 2000). The decision perspective to negotiation has highlighted important ways in which negotiator judgment falls systematically short of rationality. This paper is broadly compatible with this perspective, but highlights an underexplored aspect of the judgmental failure - how decision-makers and negotiators systematically ignore valuable information that is readily available. Recent research in social and cognitive psychology has documented the ability of the human mind to focus on specific information while failing to incorporate other information that is readily available and relevant. We use this literature to integrate what we know about this failure, and organize this knowledge under our organizing construct of "bounded awareness". We define bounded awareness as an individual's failure to "see" and use accessible and perceivable information while "seeing" and using other equally accessible and perceivable information. We believe that bounded awareness is relevant to both individual decision making and negotiation. Thus, after reviewing the decision perspective to negotiation, we develop the individual decision making aspect of bounded awareness before identifying the specific application of the concept to negotiation. We conclude by suggesting future research directions on bounded awareness in negotiation.},
	number = {04-062},
	journal = {Frontieres of Social Psychology: Negotiation},
	author = {Bazerman, Max H. and Chugh, Dolly},
	year = {2005},
	keywords = {AwarenessTheory, BoundedAwareness},
	pages = {7--26},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\BBLGTUMK\\Bazerman, Chugh - 2005 - Bounded Awareness Focusing Failures in Negotiation.pdf:application/pdf},
}

@article{Chugh2007,
	title = {Bounded awareness: {What} you fail to see can hurt you},
	volume = {6},
	issn = {15937879},
	doi = {10.1007/s11299-006-0020-4},
	abstract = {We argue that people often fail to perceive and process stimuli easily available to them. In other words, we challenge the tacit assumption that awareness is unbounded and provide evidence that humans regularly fail to see and use stimuli and information easily available to them. We call this phenomenon "bounded awareness" (Bazerman and Chugh in Frontiers of social psychology: negotiations, Psychology Press: College Park 2005). We begin by first describing perceptual mental processes in which obvious information is missed-that is, simply not seen-by the visual perceiver. Inattentional blindness and change blindness are examples. We then extend this phenomenon to decision making and forecasting, using evidence about focalism to illustrate how people over focus on some information and fail to use other easily available information. We next examine how these processes of bounded awareness may extend to other important domains and across levels of analysis, such as information-sharing in groups, decision making in negotiators, and in competitive bidding situations such as auctions. Bounded awareness is a phenomenon that encompasses a variety of psychological processes, all of which lead to the same error: a failure to see, seek, use, or share important and relevant information that is easily seen, sought, used, or shared. © Fondazione Rosselli 2007.},
	number = {1},
	journal = {Mind and Society},
	author = {Chugh, Dolly and Bazerman, Max H.},
	year = {2007},
	keywords = {Focusing, AwarenessTheory, Bounded awareness, BoundedAwareness, Bounded rationality, Change blindness, Focalism, Inattentional blindness, Winner's curse, 01 read},
	pages = {1--18},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\M6Q5PDLK\\Chugh, Bazerman - 2007 - Bounded awareness What you fail to see can hurt you.pdf:application/pdf},
}

@article{Kosanke2019,
	title = {Bounded {Awareness}: {What} {You} {Fail} to {See} {Can} {Hurt} {You}},
	abstract = {Predicting the binding mode of flexible polypeptides to proteins is an important task that falls outside the domain of applicability of most small molecule and protein−protein docking tools. Here, we test the small molecule flexible ligand docking program Glide on a set of 19 non-α-helical peptides and systematically improve pose prediction accuracy bynhancing Glide sampling for flexible polypeptides. In addition, scoring of the poses was improved by post-processing with physics-based implicit solvent MM- GBSA calculations. Using the best RMSD among the top 10 scoring poses as a metric, the success rate (RMSD ≤ 2.0 Å for the interface backbone atoms) increased from 21\% with default Glide SP settings to 58\% with the enhanced peptide sampling and scoring protocol in the case of redocking to the native protein structure. This approaches the accuracy of the recently developed Rosetta FlexPepDock method (63\% success for these 19 peptides) while being over 100 times faster. Cross-docking was performed for a subset of cases where an unbound receptor structure was available, and in that case, 40\% of peptides were docked successfully. We analyze the results and find that the optimized polypeptide protocol is most accurate for extended peptides of limited size and number of formal charges, defining a domain of applicability for this approach.},
	author = {Chugh, Dolly and Bazerman, Max H.},
	year = {2019},
	keywords = {AwarenessTheory, BoundedAwareness},
	pages = {1--35},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\H5JQTHG5\\Chugh, Bazerman - 2019 - Bounded Awareness What You Fail to See Can Hurt You.pdf:application/pdf},
}

@incollection{Endsley2000,
	address = {Mahwah, NJ},
	title = {Direct {Measurement} of {Situation} {Awareness}: {Validity} and {Use} of {SAGAT}},
	isbn = {978-0-8058-2134-5},
	author = {Endsley, Mica R.},
	abstract = {Situation Awareness Analysis and Measurement provides a comprehensive overview of different approaches to the measurement of situation awareness in experimental and applied settings. Creating system designs and training programs to enhance situation awareness is a key goal in the development of systems in such widely ranging fields as aviation, advanced transportation programs, command and control, process control, and medicine. This book directly tackles the problem of ensuring that system designs and training programs are effective at promoting situation awareness. Situation Awareness Analysis and Measurement is the first book to provide a comprehensive coverage of situation awareness and its measurement. Topics addressed provide a detailed analysis of the use of a wide variety of techniques for measuring situation awareness and situation assessment processes. It will provide a rich resource for engineers and human factors psychologists involved in designing and evaluating systems in many domains.},
	booktitle = {Situation {Awareness} {Analysis} and {Measurement}},
	publisher = {Routledge},
	editor = {Endsley, M. R. and Garland, D. J},
	year = {2000},
	keywords = {SituationAwareness, SAMetric, 01 read},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\W9KJAG3Z\\Ringstrand - Unknown - SAGAT chapter 3.pdf:application/pdf},
}

@article{Bolton2021,
	title = {The {Level} of {Measurement} of {Subjective} {Situation} {Awareness} and {Its} {Dimensions} in the {Situation} {Awareness} {Rating} {Technique} ({SART})},
	issn = {2168-2291},
	doi = {10.1109/thms.2021.3121960},
	number = {November},
	journal = {IEEE Transactions on Human-Machine Systems},
	author = {Bolton, Matthew and Biltekoff, Elliot and Humphrey, Laura},
	year = {2021},
	keywords = {SituationAwareness, SAMetric},
	pages = {1--8},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\E4FKTDB8\\Bolton, Biltekoff, Humphrey - 2021 - The Level of Measurement of Subjective Situation Awareness and Its Dimensions in the Situation Awar.pdf:application/pdf},
}

@article{Endsley1998,
	title = {Comparative analysis of {SAGAT} and {SART} for evaluations of situation awareness},
	volume = {1},
	issn = {10711813},
	doi = {10.1177/154193129804200119},
	abstract = {Situation awareness (SA) has become an important criterion for systems evaluation efforts. Several measures of SA have been developed, the most widely used among them being the Situation Awareness Global Assessment Technique (SAGAT) and the Situational Awareness Rating Technique (SART). SAGAT provides an objective measure of SA based on queries during freezes in a simulation. SART provides a subjective rating of SA by operators. This paper presents a direct comparison of the two measures which were used within a display evaluation study. It was found that both SART and SAGAT contributed sensitivity and diagnosticity regarding the effects of the display concept. The SART measure was highly correlated with subjective measures of confidence level, a simple subjective SA measure and a subjective performance measure. The SAGAT and SART measures were not correlated with each other. The implications of these findings for the interpretation of subjective SA measures are discussed as well as advantages and disadvantages of both measurement approaches.},
	journal = {Proceedings of the Human Factors and Ergonomics Society},
	author = {Endsley, Mica R. and Selcon, Stephen J. and Hardiman, Thomas D. and Croft, Darryl G.},
	year = {1998},
	keywords = {SituationAwareness, SAMetric, 01 read},
	pages = {82--86},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\5DPHRITU\\Endsley et al. - 1998 - Comparative analysis of SAGAT and SART for evaluations of situation awareness.pdf:application/pdf},
}

@article{endsley_systematic_2021,
	title = {A {Systematic} {Review} and {Meta}-{Analysis} of {Direct} {Objective} {Measures} of {Situation} {Awareness}: {A} {Comparison} of {SAGAT} and {SPAM}},
	volume = {63},
	issn = {0018-7208},
	author = {Endsley, Mica R.},
	shorttitle = {A {Systematic} {Review} and {Meta}-{Analysis} of {Direct} {Objective} {Measures} of {Situation} {Awareness}},
	doi = {10.1177/0018720819875376},
	abstract = {ObjectiveTo examine evidence of sensitivity, predictiveness, and methodological concerns regarding direct, objective measures of situation awareness (SA).BackgroundThe ability to objectively measure SA is important to the evaluation of user interfaces and displays, training programs, and automation initiatives, as well as for studies that seek to better understand SA in both individuals and teams. A number of methodological criticisms have been raised creating significant confusion in the research field.MethodA meta-analysis of 243 studies was conducted to examine evidence of sensitivity and predictiveness, and to address methodological questions regarding Situation Awareness Global Assessment Technique (SAGAT), Situation Present Assessment Technique (SPAM), and their variants.ResultsSAGAT and SPAM were found to be equally predictive of performance. SPAM (64\%) and real-time probes (73\%) were found to have significantly lower sensitivity in comparison to SAGAT (94\%). While SAGAT was found not to be overly memory reliant nor intrusive into operator performance, SPAM resulted in problems with intrusiveness in 40\% of the studies examined, as well as problems with speed-accuracy tradeoffs, sampling bias, and confounds with workload. Concerns about memory reliance, the utility of these measures for assessing Team SA, and other issues are also addressed.ConclusionSAGAT was found to be a highly sensitive, reliable, and predictive measure of SA that is useful across a wide variety of domains and experimental settings.ApplicationDirect, objective SA measurement provides useful and diagnostic insights for research and design in a wide variety of domains and study objectives.},
	number = {1},
	journal = {Human Factors},
	year = {2021},
	pages = {124--150},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ALIKARVS\\Endsley - 2021 - A Systematic Review and Meta-Analysis of Direct Ob.pdf:application/pdf},
}

@article{flach_situation_1995,
	title = {Situation {Awareness}: {Proceed} with {Caution}},
	volume = {37},
	issn = {0018-7208},
	shorttitle = {Situation {Awareness}},
	doi = {10.1518/001872095779049480},
	abstract = {Situation awareness (SA) is a relatively new concept that has captured the imagination of the human factors community. This new concept is considered in the light of Benton J. Underwood's discussion about psychological concepts. In particular the distinction between SA as a phenomenon description (Level 2 concept) and SA as a causal agent (Level 3 concept) is discussed. The argument that SA is valuable as a phenomenon description draws attention to the intimate interactions between human and environment in determining meaning (or what matters) and reflects an increased appreciation for the intimate coupling between processing stages (e.g., perception, decision, and action) within closed-loop systems. However, I caution against considering SA as a causal agent. When SA is considered to be an object within the cognitive agent, there is a danger of circular reasoning in which SA is presented as the cause of itself. As a causal explanation, SA is a simple, easy-to-understand wrong answer that, in the end, will be an obstacle to research. As a phenomenon description, SA invites further research to discover causal relationships between the design of human-machine systems and the resulting performance.},
	number = {1},
	journal = {Human Factors},
	author = {Flach, John M.},
	month = mar,
	year = {1995},
	pages = {149--157},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\BZEFR9GV\\Flach - 1995 - Situation Awareness Proceed with Caution.pdf:application/pdf},
}

@article{sasmita_young_2015,
	title = {Young consumers’ insights on brand equity},
	volume = {43},
	doi = {10.1108/IJRDM-02-2014-0024},
	abstract = {Purpose
– The purpose of this paper is to examine the effects of brand association, brand loyalty, brand awareness, and brand image on brand equity among young consumers.

Design/methodology/approach
– Data from 200 young consumers were analysed using descriptive, correlation and multiple regression analysis via the Statistical Package for Social Sciences computer programme version 21.

Findings
– Empirical results via multiple regressions authenticated that brand awareness predominantly affects brand equity among young consumers. These young consumers get input and awareness of the particular product or brand from the social media. They can clearly recognize the particular product or brand in comparison to competing products or brands and know how it looks and its characteristics from the social media.

Research limitations/implications
– Respondents were randomly drawn from the population of the full time students in a public university in Malaysia. Consequently, they may not represent the entire population of Malaysia.

Practical implications
– Input regarding the effects of brand association, brand loyalty, brand awareness, and brand image on brand equity among young consumers would help marketers and practitioners to formulate strategies to enhance their brand equity in order to obtain competitive advantage and business sustainability, particularly among young consumer markets.

Originality/value
– Empirical findings offer academic contributions to the existing body of knowledge of consumer behaviour as the sophisticated quantitative data analyses used will eventually allow future researchers to explicate the contribution of the current study to understand the importance of brand equity among young consumers in Malaysia.},
	journal = {International Journal of Retail \& Distribution Management},
	author = {Sasmita, Jumiati and Mohd Suki, Norazah},
	month = mar,
	year = {2015},
	pages = {276--292},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\WSBB4D2T\\Sasmita und Mohd Suki - 2015 - Young consumers’ insights on brand equity.pdf:application/pdf},
}

@article{osman_effects_2017,
	title = {{EFFECTS} {OF} {TEACHING} {GAMES} {FOR} {UNDERSTANDING} {ON} {TACTICAL} {AWARENESS} {AND} {DECISION} {MAKING} {IN} {SOCCER} {FOR} {COLLEGE} {STUDENTS}},
	abstract = {Methods. Twenty college students were randomly allocated to receive either two months of learning program, the experimental group used Teaching Games for Understanding (TGFU)(n = 10). In addition,the control group learning through the traditional method (n = 10). The data collected before and after the program for the two groups.
Results. Statistical analyses showed that:  The experimental group had significantly higher than the control group in performance level oftactical awareness and decision-making.
Conclusions. Under the conditions of our study, use of Teaching Games for Understanding (TGFU) in learning for college studentsresulted an improvement in tactical awareness and decision-making. These results have to be taken into account by instructors in order to better understand and implicated of these concepts for technical effects of teaching.},
	language = {en},
	number = {2},
	author = {Osman, ASHRAF},
	year = {2017},
	file = {Osman - 2017 - EFFECTS OF TEACHING GAMES FOR UNDERSTANDING ON TAC.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\FUMWGV7M\\Osman - 2017 - EFFECTS OF TEACHING GAMES FOR UNDERSTANDING ON TAC.pdf:application/pdf},
}


@inproceedings{avgeriou_technical_2023,
	title = {Technical {Debt} {Management}: {The} {Road} {Ahead} for {Successful} {Software} {Delivery}},
	shorttitle = {Technical {Debt} {Management}},
	doi = {10.1109/ICSE-FoSE59343.2023.00007},
	abstract = {Technical Debt, considered by many to be the ‘silent killer’ of software projects, has undeniably become part of the everyday vocabulary of software engineers. We know it compromises the internal quality of a system, either deliberately or inadvertently. We understand Technical Debt is not all derogatory, often serving the purpose of expediency. But, it is associated with a clear risk, especially for large and complex systems with extended service life: if we do not properly manage Technical Debt, it threatens to “bankrupt” those systems. Software engineers and organizations that develop software-intensive systems are facing an increasingly more dire future state of those systems if they do not start incorporating Technical Debt management into their day to day practice. But how? What have the wins and losses of the past decade of research and practice in managing Technical Debt taught us and where should we focus next? In this paper, we examine the state of the art in both industry and research communities in managing Technical Debt; we subsequently distill the gaps in industrial practice and the research shortcomings, and synthesize them to define and articulate a vision for what Technical Debt management looks like five years hence.},
	urldate = {2024-03-14},
	booktitle = {2023 {IEEE}/{ACM} {International} {Conference} on {Software} {Engineering}: {Future} of {Software} {Engineering} ({ICSE}-{FoSE})},
	author = {Avgeriou, Paris and Ozkaya, Ipek and Chatzigeorgiou, Alexander and Ciolkowski, Marcus and Ernst, Neil A. and Koontz, Ronald J. and Poort, Eltjo and Shull, Forrest},
	month = may,
	year = {2023},
	keywords = {03 next, TD prio, TD awareness, Software measurement, Maintenance engineering, software maintenance and evolution, Vocabulary, Roads, Software engineering, technical debt, TD Visualization, Organizations, Software systems, cite},
	pages = {15--30},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Marion Wiese\\Zotero\\storage\\ET2PHS6Z\\10449672.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\4FH7PHEH\\Avgeriou et al. - 2023 - Technical Debt Management The Road Ahead for Succ.pdf:application/pdf},
}
@article{VANHEESCH2012795,
title = {A documentation framework for architecture decisions},
journal = {Journal of Systems and Software},
volume = {85},
number = {4},
pages = {795-820},
year = {2012},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2011.10.017},
author = {U. {van Heesch} and P. Avgeriou and R. Hilliard},
keywords = {Software architecture, Architecture decisions, Architecture knowledge management, Architectural viewpoints, Case study, Architecture framework},
abstract = {In this paper, we introduce a documentation framework for architecture decisions. This framework consists of four viewpoint definitions using the conventions of ISO/IEC/IEEE 42010, the new international standard for the description of system and software architectures. The four viewpoints, a Decision Detail viewpoint, a Decision Relationship viewpoint, a Decision Chronology viewpoint, and a Decision Stakeholder Involvement viewpoint satisfy several stakeholder concerns related to architecture decision management. With the exception of the Decision Stakeholder Involvement viewpoint, the framework was evaluated in an industrial case study. The results are promising, as they show that decision views can be created with reasonable effort while satisfying many of the stakeholder concerns in decision documentation.}
}

@article{pimentel2019some,
  title={Some biases in Likert scaling usage and its correction},
  author={Pimentel, Jonald L},
  journal={International Journal of Science: Basic and Applied Research (IJSBAR)},
  volume={45},
  number={1},
  pages={183--191},
  year={2019}
}


@article{li_identifying_2022,
	title = {Identifying self-admitted technical debt in issue tracking systems using machine learning},
	volume = {27},
	issn = {1573-7616},
	doi = {10.1007/s10664-022-10128-3},
	abstract = {Technical debt is a metaphor indicating sub-optimal solutions implemented for short-term benefits by sacrificing the long-term maintainability and evolvability of software. A special type of technical debt is explicitly admitted by software engineers (e.g. using a TODO comment); this is called Self-Admitted Technical Debt or SATD. Most work on automatically identifying SATD focuses on source code comments. In addition to source code comments, issue tracking systems have shown to be another rich source of SATD, but there are no approaches specifically for automatically identifying SATD in issues. In this paper, we first create a training dataset by collecting and manually analyzing 4,200 issues (that break down to 23,180 sections of issues) from seven open-source projects (i.e., Camel, Chromium, Gerrit, Hadoop, HBase, Impala, and Thrift) using two popular issue tracking systems (i.e., Jira and Google Monorail). We then propose and optimize an approach for automatically identifying SATD in issue tracking systems using machine learning. Our findings indicate that: 1) our approach outperforms baseline approaches by a wide margin with regard to the F1-score; 2) transferring knowledge from suitable datasets can improve the predictive performance of our approach; 3) extracted SATD keywords are intuitive and potentially indicating types and indicators of SATD; 4) projects using different issue tracking systems have less common SATD keywords compared to projects using the same issue tracking system; 5) a small amount of training data is needed to achieve good accuracy.},
	language = {en},
	number = {6},
	urldate = {2023-04-04},
	journal = {Empirical Software Engineering},
	author = {Li, Yikun and Soliman, Mohamed and Avgeriou, Paris},
	month = jul,
	year = {2022},
	keywords = {TD identification, deep learning, 00untagged, Issue tracking system, Transfer learning, self-admitted technical debt (SATD)},
	pages = {131},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\YBG9CF7I\\Li et al. - 2022 - Identifying self-admitted technical debt in issue .pdf:application/pdf},
}

@article{perera_systematic_2024,
	title = {A {Systematic} {Mapping} {Study} {Exploring} {Quantification} {Approaches} to {Code}, {Design}, and {Architecture} {Technical} {Debt}},
	issn = {1049-331X},
	doi = {10.1145/3675393},
	abstract = {To effectively manage Technical Debt (TD), we need reliable means to quantify it. We conducted a Systematic Mapping Study (SMS) where we identified 39 quantification approaches for Code, Design, and Architecture TD. We analyzed concepts and metrics discussed in these quantification approaches by classifying the quantification approaches based on a set of abstract TD Quantification (TDQ) concepts and their high-level themes, process/time, cost, benefit, probability, and priority, which we developed during our SMS. This helped identify gaps in the literature and to propose future research directions. Among the abstract TDQ concepts discussed in the different quantification approaches, TD item, TD remediation cost, TD interest, and Benefit of remediating TD were the most frequently discussed concepts. They were also supported by some form of measurement. However, some TDQ concepts were poorly examined, for example, the benefit of taking TD. It was evident that cost concepts were more frequently quantified among the approaches, while benefit concepts were not. Most of the approaches focused on remediating TD in retrospect rather than quantifying TD to strategically use it during software development. This raises the question of whether existing approaches reliably quantify TD and suggests the need to further explore TD quantification.},
	urldate = {2024-08-05},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	author = {Perera, Judith and Tempero, Ewan and Tu, Yu-Cheng and Blincoe, Kelly},
	month = jul,
	year = {2024},
	note = {Just Accepted},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\MU9K757H\\Perera et al. - 2024 - A Systematic Mapping Study Exploring Quantificatio.pdf:application/pdf},
}

@inproceedings{borowa_debiasing_2022,
	address = {Cham},
	title = {Debiasing {Architectural} {Decision}-{Making}: {A} {Workshop}-{Based} {Training} {Approach}},
	isbn = {978-3-031-16697-6},
	shorttitle = {Debiasing {Architectural} {Decision}-{Making}},
	doi = {10.1007/978-3-031-16697-6_11},
	abstract = {Cognitive biases distort the process of rational decision-making, including architectural decision-making. So far, no method has been empirically proven to reduce the impact of cognitive biases on architectural decision-making. We conducted an experiment in which 44 master’s degree graduate students took part. Divided into 12 teams, they created two designs – before and after a debiasing workshop. We recorded this process and analysed how the participants discussed their decisions. In most cases (10 out of 12 groups), the teams’ reasoning improved after the workshop. Thus, we show that debiasing architectural decision-making is an attainable goal and provide a simple debiasing treatment that could easily be used when training software practitioners.},
	language = {en},
	booktitle = {Software {Architecture}},
	publisher = {Springer International Publishing},
	author = {Borowa, Klara and Jarek, Maria and Mystkowska, Gabriela and Paszko, Weronika and Zalewski, Andrzej},
	editor = {Gerostathopoulos, Ilias and Lewis, Grace and Batista, Thais and Bureš, Tomáš},
	year = {2022},
	keywords = {Architectural decisions, Cognitive bias, Debiasing},
	pages = {159--166},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\5SXNBYUT\\Borowa et al. - 2022 - Debiasing Architectural Decision-Making A Worksho.pdf:application/pdf},
}

@inproceedings{DosSantos2013,
	title = {Visualizing and managing technical debt in agile development: {An} experience report},
	volume = {149},
	isbn = {978-3-642-38313-7},
	doi = {10.1007/978-3-642-38314-4_9},
	abstract = {This paper reports the experience of an architecture team of a software development department with 25 agile teams in supporting technical decisions regarding technical practices. The main motivation to use technical debt metaphor was its acknowledged potential in driving software development and maintenance decisions, especially those long term maintenance tradeoffs which are usually less visible to developers and decision makers in general. We propose the use of a "technical debt board" with main technical debt categories to manage and visualize the high-level debt, combined with tools to measure it at low-level (software metrics and other kind of static analysis). We have found that our approach improved the teams’ awareness about the technical debt, stimulated a beneficial competition between teams towards the debt payment and enhanced the communication regarding technical decisions.},
	booktitle = {Lecture {Notes} in {Business} {Information} {Processing}},
	author = {dos Santos, Paulo Sérgio Medeiros and Varella, Amanda and Dantas, Cristine Ribeiro and Borges, Daniel Beltrão},
	year = {2013},
	keywords = {software quality, agile practices, agile, gamification, topic, OverviewTopic, AwarenessTopic, Overview={\textgreater}Awareness, Management={\textgreater}Awareness, visualization, TDGuide\_RelatedWork, TD technical debt, technical debt, SLR included, Awareness=InformationOnFactors, Springer, 01 read, TD Visualization},
	pages = {121--134},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\3CXGGMZD\\dos Santos et al. - 2013 - Visualizing and managing technical debt in agile development An experience report.pdf:application/pdf},
}

@phdthesis{guo_measuring_2011,
	address = {Baltimore County, USA},
	title = {Measuring and {Monitoring} {Technical} {Debt}},
	abstract = {Technical debt is a metaphor for immature, incomplete, or inadequate artifacts in the software development lifecycle that cause higher costs and lower quality in the long run. These artifacts remaining in a system affect subsequent development and maintenance activities, and so can be seen as a type of debt that the system developers owe the system. Incurring technical debt may speed up software development in the short run, but such benefit is achieved at the cost of extra work in the future, as if paying interest on the debt. In this sense, the technical debt metaphor characterizes the relationship between the short-term benefits of delaying certain software maintenance tasks or doing them quickly and less carefully, and the long-term cost of those delays. However, managing technical debt is more complicated than managing financial debt because of the uncertainty involved. In this chapter, the authors review the main issues associated with technical debt, and propose a technical debt management framework and a research plan for validation. The objective of our research agenda is to develop and validate a comprehensive technical debt theory that formalizes the relationship between the cost and benefit sides of the concept. Further, we propose to use the theory to propose mechanisms (processes and tools) for measuring and managing technical debt in software product maintenance. The theory and management mechanisms are intended ultimately to contribute to the improved quality of software and facilitate decision making in software maintenance.},
	urldate = {2024-07-19},
	school = {University of Maryland},
	author = {Guo, Yuepu},
	collaborator = {Seaman, Carolyn},
	month = jan,
	year = {2011},
	doi = {10.1016/B978-0-12-385512-1.00002-5},
	keywords = {Framework},
	file = {Eingereichte Version:C\:\\Users\\Marion Wiese\\Zotero\\storage\\DWLIEUR7\\Seaman und Guo - 2011 - Chapter 2 - Measuring and Monitoring Technical Deb.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\XCJT5I9L\\B9780123855121000025.html:text/html},
}


@inproceedings{seaman_using_2012,
	title = {Using technical debt data in decision making: {Potential} decision approaches},
	shorttitle = {Using technical debt data in decision making},
	doi = {10.1109/MTD.2012.6225999},
	abstract = {The management of technical debt ultimately requires decision making - about incurring, paying off, or deferring technical debt instances. This position paper discusses several existing approaches to complex decision making, and suggests that exploring their applicability to technical debt decision making would be a worthwhile subject for further research.},
	booktitle = {2012 {Third} {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Seaman, Carolyn and Guo, Yuepu and Zazworka, Nico and Shull, Forrest and Izurieta, Clemente and Cai, Yuanfang and Vetrò, Antonio},
	month = jun,
	year = {2012},
	keywords = {Analytic Hierarchy Process, cost-benefit analysis, options, portfolio management, Investments, Mathematical model, Maintenance engineering, Portfolios, USA Councils, Software, technical debt, decision making, Decision making},
	pages = {45--48},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\Marion Wiese\\Zotero\\storage\\26R8JJJP\\6225999.html:text/html;IEEE Xplore Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\8U9ZDHQU\\Seaman et al. - 2012 - Using technical debt data in decision making Pote.pdf:application/pdf},
}

@inproceedings{Curtis2012,
	title = {Estimating the size, cost, and types of {Technical} {Debt}},
	doi = {10.1109/MTD.2012.6226000},
	abstract = {This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.},
	booktitle = {2012 {Third} {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
	year = {2012},
	keywords = {Encoding, noPrevention, Organization, Production, ISO sta},
	pages = {49--53},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\V35BRE2M\\Curtis, Sappidi, Szynkarski - 2012 - Estimating the size, cost, and types of Technical Debt.pdf:application/pdf},
}

@inproceedings{Nugroho2011,
	address = {New York, NY, USA},
	title = {An {Empirical} {Model} of {Technical} {Debt} and {Interest}},
	isbn = {978-1-4503-0586-0},
	doi = {10.1145/1985362.1985364},
	abstract = {Cunningham introduced the metaphor of technical debt as guidance for software developers that must trade engineering quality against short-term goals.We revisit the technical debt metaphor, and translate it into terms that can help IT executives better understand their IT investments. An approach is proposed to quantify debts (cost to fix technical quality issues) and interest (extra cost spent on maintenance due to technical quality issues). Our approach is based on an empirical assessment method of software quality developed at the Software Improvement Group (SIG). The core part of the technical debt calculation is constructed on the basis of empirical data of 44 systems that are currently being monitored by SIG.In a case study, we apply the approach to a real system, and discuss how the results provide useful insights on important questions related to IT investment such as the return on investment (ROI) in software quality improvement.},
	booktitle = {Proceedings of the 2nd {Workshop} on {Managing} {Technical} {Debt}},
	publisher = {Association for Computing Machinery},
	author = {Nugroho, Ariadi and Visser, Joost and Kuipers, Tobias},
	year = {2011},
	note = {Series Title: MTD '11
ISSN: 02705257},
	keywords = {software economics, estimation, effort, maintenance, measurement, AwarenessRelation, cost, Relation, 00untagged},
	pages = {1--8},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\DXTFXXIU\\Nugroho, Visser, Kuipers - 2011 - An Empirical Model of Technical Debt and Interest.pdf:application/pdf},
}


@inproceedings{Zazworka2013,
	title = {A case study on effectively identifying technical debt},
	isbn = {978-1-4503-1848-8},
	doi = {10.1145/2460999.2461005},
	abstract = {Context: The technical debt (TD) concept describes a tradeoff between short-term and long-term goals in software development. While it is highly useful as a metaphor, it has utility beyond the facilitation of discussion, to inspire a useful set of methods and tools that support the identification, measurement, monitoring, management, and payment of TD. Objective: This study focuses on the identification of TD. We evaluate human elicitation of TD and compare it to automated identification. Method: We asked a development team to identify TD items in artifacts from a software project on which they were working. We provided the participants with a TD template and a short questionnaire. In addition, we also collected the output of three tools to automatically identify TD and compared it to the results of human elicitation. Results: There is little overlap between the TD reported by different developers, so aggregation, rather than consensus, is an appropriate way to combine TD reported by multiple developers. The tools used are especially useful for identifying defect debt but cannot help in identifying many other types of debt, so involving humans in the identification process is necessary. Conclusion: We have conducted a case study that focuses on the practical identification of TD, one area that could be facilitated by tools and techniques. It contributes to the TD landscape, which depicts an understanding of relationships between different types of debt and how they are best discovered. Copyright 2013 ACM.},
	booktitle = {{ACM} {International} {Conference} {Proceeding} {Series}},
	author = {Zazworka, Nico and Spínola, Rodrigo O. and Vetro, Antonio and Shull, Forrest and Seaman, Carolyn},
	year = {2013},
	keywords = {software maintenance, Automatic Static Analysis, code smells, noOverview, AwarenessRelation, automatic static analysis, Relation, 00untagged, TD technical debt},
	pages = {42--47},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\R67CMKZY\\2013 - Zazworka et al. - A case study on effectively identifying technical debt.pdf:application/pdf;PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\CMBMDIJY\\Zazworka et al. - 2013 - A Case Study on Effectively Identifying Technical Debt(2).pdf:application/pdf;PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\BHJ94UU5\\Zazworka et al. - 2013 - A Case Study on Effectively Identifying Technical Debt(2).pdf:application/pdf},
}

@inproceedings{detofeno_priortd_2022,
	address = {New York, NY, USA},
	series = {{SBES} '22},
	title = {{PriorTD}: {A} {Method} for {Prioritization} {Technical} {Debt}},
	isbn = {978-1-4503-9735-3},
	shorttitle = {{PriorTD}},
	doi = {10.1145/3555228.3555238},
	abstract = {Advances in Technical Debt (TD) have enabled the identification of numerous immature artifacts and their impacts on software maintenance and evolution. However, organizations can identify and understand the impacts of TD, but challenges arise when deciding which TD item should be paid for and which should be deferred. These decisions are influenced by many contextual factors that cannot be determined by considering source code alone. Prioritization strategies must consider the business objectives, the scope of the projects, and the needs of the development teams. This paper presents the PriorTD method, which prioritizes TD from the most relevant source code for the project and provides scenarios to meet business needs. It was built throughout two cycles of action research, over two years and eight months, in a software development company. PriorTD analyzes the source code and TD from the perspective of the importance of the source code for the project, team, and managers and provides guidance and support for all involved to understand the decisions related to the prioritization of TD.},
	urldate = {2024-07-30},
	booktitle = {Proceedings of the {XXXVI} {Brazilian} {Symposium} on {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Detofeno, Thober and Malucelli, Andreia and Reinehr, Sheila},
	month = oct,
	year = {2022},
	keywords = {Action research, TD in code, TD prioritization},
	pages = {230--240},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\C6DT5GJ9\\Detofeno et al. - 2022 - PriorTD A Method for Prioritization Technical Deb.pdf:application/pdf},
}

@inproceedings{detofeno_technical_2021,
	address = {New York, NY, USA},
	series = {{SBQS} '21},
	title = {Technical {Debt} {Guild}: {When} experience and engagement improve {Technical} {Debt} {Management}},
	isbn = {978-1-4503-9553-3},
	shorttitle = {Technical {Debt} {Guild}},
	doi = {10.1145/3493244.3493271},
	abstract = {Efficient Technical Debt Management (TDM) requires specialized guidance so that decisions taken are oriented to add value to the business. Because it is a complex problem that involves several variables, TDM requires a systemic look that considers professionals' experiences from different specialties. Guilds have been a means technology companies using the Spotify methodology have found to unite specialized professionals around a common interest. This paper presents the experience in implementing a guild to support TDM's source code activities in a software development organization, using the action research method. The project lasted two years, and approximately 100 developers were involved in updating about 63,300 source-code files. The actions resulting from the TDM guild's efforts impacted the company's culture by introducing new development practices and standards. Besides, they positively influenced the quality of the artifact delivered by the developers. This study shows that, as the company acquires maturity in TDM, it increases the need for professionals dedicated to TDM's activities.},
	urldate = {2024-07-30},
	booktitle = {Proceedings of the {XX} {Brazilian} {Symposium} on {Software} {Quality}},
	publisher = {Association for Computing Machinery},
	author = {Detofeno, Thober and Reinehr, Sheila and Andreia, Malucelli},
	month = dec,
	year = {2021},
	keywords = {Action research, Community of Practice, TD communication, TD in code},
	pages = {1--10},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\58MGIKLM\\Detofeno et al. - 2021 - Technical Debt Guild When experience and engageme.pdf:application/pdf},
}

@article{Ramac2021,
	title = {Prevalence, {Common} {Causes} and {Effects} of {Technical} {Debt}: {Results} from a {Family} of {Surveys} with the {IT} {Industry}},
	issn = {01641212},
	doi = {10.1016/j.jss.2021.111114},
	abstract = {The technical debt (TD) metaphor describes actions made during various stages of software development that lead to a more costly future regarding system maintenance and evolution. According to recent studies, on average 25\% of development effort is spent, i.e. wasted, on TD caused issues in software development organizations. However, further research is needed to investigate the relations between various software development activities and TD. The objective of this study is twofold. First, to get empirical insight on the understanding and the use of the TD concept in the IT industry. Second, to contribute towards precise conceptualization of the TD concept through analysis of causes and effects. In order to address the research objective a family of surveys was designed as a part of an international initiative that congregates researchers from 12 countries -- InsighTD. At country level, national teams ran survey replications with industry practitioners from the respective countries. In total 653 valid responses were collected from 6 countries. Regarding the prevalence of the TD concept 22\% of practitioners have only theoretical knowledge about it, and 47\% have some practical experiences with TD identification or management. Further analysis indicated that senior practitioners who work in larger organizations, larger teams, and on larger systems are more likely to be experienced with TD management. Time pressure or deadline was the single most cited cause of TD. Regarding the effects of TD: delivery delay, low maintainability, and rework were the most cited. InsighTD is the first family of surveys on technical debt in software engineering. It provided a methodological framework that allowed multiple replication teams to conduct research activities and to contribute to a single dataset. Future work will focus on more specific aspects of TD management.},
	journal = {Journal of Systems and Software},
	author = {Ramač, Robert and Mandić, Vladimir and Taušan, Nebojša and Rios, Nicolli and Freire, Sávio and Pérez, Boris and Castellanos, Camilo and Correal, Darío and Pacheco, Alexia and Lopez, Gustavo and Izurieta, Clemente and Seaman, Carolyn and Spinola, Rodrigo},
	year = {2021},
	keywords = {★, survey, InsighTD, causes of technical debt, 00untagged, TD effects, TD technical debt},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\XBDD7I9Y\\Ramač et al. - 2021 - Prevalence, Common Causes and Effects of Technical Debt Results from a Family of Surveys with the IT Industry.pdf:application/pdf},
}

@book{Ernst2021,
	address = {London, England},
	isbn = {978-0-262-54211-1},
	title = {Technical {Debt} in {Practice}},
	publisher = {The MIT Press Cambridge, Massachusetts},
	author = {Ernst, Neil and Kazman, Rick and Delange, Julien},
	year = {2021},
}

@inproceedings{ahmadjee_assessing_2021,
	title = {Assessing {Smart} {Contracts} {Security} {Technical} {Debts}},
	isbn = {978-1-66541-405-0},
	doi = {10.1109/TechDebt52882.2021.00010},
	abstract = {Smart contracts are self-enforcing agreements that are employed to exchange assets without the approval of trusted third parties. This feature has encouraged various sectors to make use of smart contracts when transacting. Experience shows that many deployed contracts are vulnerable to exploitation due to their poor design, which allows attackers to steal valuable assets from the involved parties. Therefore, an assessment approach that allows developers to recognise the consequences of deploying vulnerable contracts is needed. In this paper, we propose a debt-aware approach for assessing security design vulnerabilities in smart contracts. Our assessment approach involves two main steps: (i) identification of design vulnerabilities using security analysis techniques and (ii) an estimation of the ramifications of the identified vulnerabilities leveraging the technical debt metaphor, its principal and interest. We use examples of vulnerable contracts to demonstrate the applicability of our approach. The results show that our assessment approach increases the visibility of security design issues. It also allows developers to concentrate on resolving smart contract vulnerabilities through technical debt impact analysis and prioritisation. Developers can use our approach to inform the design of more secure contracts and for reducing unintentional debts caused by a lack of awareness of security issues.},
	author = {Ahmadjee, Sabreen and Mera-Gómez, Carlos and Bahsoon, Rami},
	year = {2021},
	keywords = {01 read, AwarenessTopic, estimation, IEEE, Overview={\textgreater}Prevention, OverviewTopic, PreventionRelation, security, Security, SLR included, smart contracts, SpecialArea, TD technical debt, Tools, topic, visualization},
	pages = {6--15},
	file = {Ahmadjee et al. - 2021 - Assessing Smart Contracts Security Technical Debts.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\XD5XFYPJ\\Ahmadjee et al. - 2021 - Assessing Smart Contracts Security Technical Debts.pdf:application/pdf;PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\L6MM6YSD\\Ahmadjee, Mera-Gómez, Bahsoon - 2021 - Assessing Smart Contracts Security Technical Debts.pdf:application/pdf},
}
@article{Guo2016a,
abstract = {Technical debt is a metaphor for delayed software maintenance tasks. Incurring technical debt may bring short-term benefits to a project, but such benefits are often achieved at the cost of extra work in future, analogous to paying interest on the debt. Currently technical debt is managed implicitly, if at all. However, on large systems, it is too easy to lose track of delayed tasks or to misunderstand their impact. Therefore, we have proposed a new approach to managing technical debt, which we believe to be helpful for software managers to make informed decisions. In this study we explored the costs of the new approach by tracking the technical debt management activities in an on-going software project. The results from the study provided insights into the impact of technical debt management on software projects. In particular, we found that there is a significant start-up cost when beginning to track and monitor technical debt, but the cost of ongoing management soon declines to very reasonable levels.},
author = {Guo, Yuepu and Sp{\'{i}}nola, Rodrigo Oliveira and Seaman, Carolyn},
doi = {10.1007/s10664-014-9351-7},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2016/Guo, Sp{\'{i}}nola, Seaman/Guo, Sp{\'{i}}nola, Seaman - 2016 - Exploring the costs of technical debt management – a case study.pdf:pdf},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {01read,AwarenessSolution,AwarenessTopic,Case StudyTopic,Case study,Cost,Decision making,FrameworkTopic,IST-ready,Overview={\textgreater}Awareness,Overview={\textgreater}DecisionMaking,ProjectManagementProblemStatement,ProjectManagementRelation,TD Management,TD Prioritization,TD management,Technical debt,topic},
mendeley-tags = {01read,AwarenessSolution,AwarenessTopic,Case StudyTopic,FrameworkTopic,IST-ready,Overview={\textgreater}Awareness,Overview={\textgreater}DecisionMaking,ProjectManagementProblemStatement,ProjectManagementRelation,TD Management,TD Prioritization,TD management,topic},
number = {1},
pages = {159--182},
title = {{Exploring the costs of technical debt management – a case study}},
volume = {21},
year = {2016}
}
@book{bass2012software,
  title={Software Architecture in Practice: Software Architect Practice\_c3},
  author={Bass, Len and Clements, Paul and Kazman, Rick},
  year={2012},
  publisher={Addison-Wesley}
}
@article{Crespo2022,
	title = {The role of awareness and gamification on technical debt management},
	volume = {150},
	issn = {09505849},
	doi = {10.1016/j.infsof.2022.106946},
	number = {April},
	journal = {Information and Software Technology},
	author = {Crespo, Yania and López-Nozal, Carlos and Marticorena-Sánchez, Raúl and Gonzalo-Tasis, Margarita and Piattini, Mario},
	year = {2022},
	keywords = {SonarQube, gamification, AwarenessTopic, Raising awareness, Quasi-experiment, TD technical debt, Technical Debt, Gamification, SLR included, ScienceDirect, 01 read},
	pages = {106946},
	file = {Crespo et al. - 2022 - The role of awareness and gamification on technical debt management.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\Z74A8HHS\\Crespo et al. - 2022 - The role of awareness and gamification on technical debt management.pdf:application/pdf;Crespo et al. - 2022 - The role of awareness and gamification on technical debt management(2).pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\HQFR3E9A\\Crespo et al. - 2022 - The role of awareness and gamification on technical debt management(2).pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\WQJHPERN\\S0950584922000921.html:text/html},
}

@article{BALDASSARRE2020106377,
	title = {On the diffuseness of technical debt items and accuracy of remediation time when using {SonarQube}},
	volume = {128},
	issn = {0950-5849},
	doi = {https://doi.org/10.1016/j.infsof.2020.106377},
	abstract = {Context. Among the static analysis tools available, SonarQube is one of the most used. SonarQube detects Technical Debt (TD) items—i.e., violations of coding rules—and then estimates TD as the time needed to remedy TD items. However, practitioners are still skeptical about the accuracy of remediation time estimated by the tool. Objective. In this paper, we analyze both diffuseness of TD items and accuracy of remediation time, estimated by SonarQube, to fix TD items on a set of 21 open-source Java projects. Method. We designed and conducted a case study where we asked 81 junior developers to fix TD items and reduce the TD of 21 projects. Results. We observed that TD items are diffused in the analyzed projects and most items are code smells. Moreover, the results point out that the remediation time estimated by SonarQube is inaccurate and, as compared to the actual time spent to fix TD items, is in most cases overestimated. Conclusions. The results of our study are promising for practitioners and researchers. The former can make more aware decisions during project execution and resource management, the latter can use this study as a starting point for improving TD estimation models.},
	journal = {Information and Software Technology},
	author = {Baldassarre, Maria Teresa and Lenarduzzi, Valentina and Romano, Simone and Saarimäki, Nyyti},
	year = {2020},
	keywords = {case study, SonarQube, noOverview, noAwareness, noCase Study, 02 scanned, Remediation time, effort estimation, TD technical debt, Technical debt, Case study, Effort estimation, Sonarqube, SLR included, ScienceDirect},
	pages = {106377},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\U3LM2CSM\\Baldassarre et al. - 2020 - On the diffuseness of technical debt items and accuracy of remediation time when using SonarQube.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\Marion Wiese\\Zotero\\storage\\8SARQNLN\\S0950584919302113.html:text/html},
}
@inproceedings{Liu_2020,
	address = {New York, NY, USA},
	title = {Is {Using} {Deep} {Learning} {Frameworks} {Free}? {Characterizing} {Technical} {Debt} in {Deep} {Learning} {Frameworks}},
	isbn = {9781450371244},
	doi = {10.1145/3377815.3381377},
	abstract = {Developers of deep learning applications (shortened as application developers) commonly use deep learning frameworks in their projects. However, due to time pressure, market competition, and cost reduction, developers of deep learning frameworks (shortened as framework developers) often have to sacrifice software quality to satisfy a shorter completion time. This practice leads to technical debt in deep learning frameworks, which results in the increasing burden to both the application developers and the framework developers in future development.In this paper, we analyze the comments indicating technical debt (self-admitted technical debt) in 7 of the most popular open-source deep learning frameworks. Although framework developers are aware of such technical debt, typically the application developers are not. We find that: 1) there is a significant number of technical debt in all the studied deep learning frameworks. 2) there is design debt, defect debt, documentation debt, test debt, requirement debt, compatibility debt, and algorithm debt in deep learning frameworks. 3) the majority of the technical debt in deep learning framework is design debt (24.07\% - 65.27\%), followed by requirement debt (7.09\% - 31.48\%) and algorithm debt (5.62\% - 20.67\%). In some projects, compatibility debt accounts for more than 10\%. These findings illustrate that technical debt is common in deep learning frameworks, and many types of technical debt also impact the deep learning applications. Based on our findings, we highlight future research directions and provide recommendations for practitioners.},
	booktitle = {Proceedings of the {ACM}/{IEEE} 42nd {International} {Conference} on {Software} {Engineering}: {Software} {Engineering} in {Society}},
	publisher = {Association for Computing Machinery},
	author = {Liu, Jiakun and Huang, Qiao and Xia, Xin and Shihab, Emad and Lo, David and Li, Shanping},
	year = {2020},
	keywords = {software quality, software engineering, empirical study, AwarenessRelation, 02 scanned, C++ languages, open source software, software development management, categorization, deep learning, Manuals, Maintaining software, self-admitted technical debt (SATD), self-admitted technical debt, SLR included, ACM, IEEE},
	pages = {1--10},
	file = {Liu et al. - 2020 - Is Using Deep Learning Frameworks Free Characteri.pdf:C\:\\Users\\Marion Wiese\\Zotero\\storage\\668UMRV3\\Liu et al. - 2020 - Is Using Deep Learning Frameworks Free Characteri.pdf:application/pdf;PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\LKKZAYM7\\Liu et al. - 2020 - Is Using Deep Learning Frameworks Free Characterizing Technical Debt in Deep Learning Frameworks.pdf:application/pdf},
}

@inproceedings{berenguer_technical_2021,
	title = {Technical {Debt} is not {Only} about {Code} and {We} {Need} to be {Aware} about {It}},
	doi = {10.1145/3493244.3493285},
	abstract = {Context: It is common for a software project to incur technical debt (TD) during its development. It can impact several artifacts produced throughout the software development process. Therefore, it is necessary to carry out management actions to find a balance between the benefits of incurring it and the effects of its presence. However, so far, much of the attention has been given only to discussions relating TD to coding issues. This is a worrying scenario because other types of debt can also have impactful, or even worse, consequences on projects. Aims: This study elaborates on the need to consider other issues of the development process and not just the source-code when investigating the TD phenomenon. Method: We analyze responses from 653 practitioners concerning TD causes, effects, prevention, reasons for non-prevention, repayment, and reasons for non-repayment and investigate whether these TD management elements are related to coding or to other software development issues. Results: Coding issues are commonly related to the investigated elements but, indeed, they are only part of the big picture we draw. Issues related to the project planning and management, human factors, knowledge, quality, process, requirements, verification, validation, and test, design, architecture, TD management, and the organization are also common. Lastly, we present a hump diagram that, in combination with the detailed results, provides guidance on what to expect from the presence of TD and how to react to it considering several issues of software development. Conclusion: The results shed light on other concerns beyond code that the research community and practitioners need to be aware of.},
	author = {Berenguer, Clara and Borges, Adriano and Freire, Sávio and Rios, Nicolli and Tausan, Nebojsa and Ramac, Robert and Pérez, Boris and Castellanos, Camilo and Correal, Darío and Pacheco, Alexia and López, Gustavo and Falessi, Davide and Seaman, Carolyn and Mandic, Vladimir and Izurieta, Clemente and Spínola, Rodrigo},
	year = {2021},
	keywords = {TD causes, Effects, TD management, Causes, Technical debt management, SLR included, ACM, NotOnlyCodeDebtProblemStatement, TwoDecisionsProblemStatement, 01 read, TDM problem},
	pages = {1--12},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\B5XVAGNH\\Berenguer et al. - 2021 - Technical Debt is not Only about Code and We Need .pdf:application/pdf;PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\YSYR27NW\\Berenguer et al. - 2021 - Technical Debt is not Only about Code and We Need to be Aware about It.pdf:application/pdf},
}

@article{zampetti_self-admitted_2021,
	title = {Self-admitted technical debt practices: a comparison between industry and open-source},
	volume = {26},
	issn = {1573-7616},
	shorttitle = {Self-admitted technical debt practices},
	doi = {10.1007/s10664-021-10031-3},
	abstract = {Self-admitted technical debt (SATD) consists of annotations, left by developers as comments in the source code or elsewhere, as a reminder about pieces of software manifesting technical debt (TD), i.e., “not being ready yet”. While previous studies have investigated SATD management and its relationship with software quality, there is little understanding of the extent and circumstances to which developers admit TD. This paper reports the results of a study in which we asked developers from industry and open-source about their practices in annotating source code and other artifacts for self-admitting TD. The study consists of two phases. First, we conducted 10 interviews to gather a first understanding of the phenomenon and to prepare a survey questionnaire. Then, we surveyed 52 industrial developers as well as 49 contributors to open-source projects. Results of the study show how the TD annotation practices, as well as the typical content of SATD comments, are very similar between open-source and industry. At the same time, our results highlight how, while open-source code is spread of comments admitting the need for improvements, SATD in industry may be dictated by organizational guidelines but, at the same time, implicitly discouraged by the fear of admitting responsibilities. Results also highlight the need for tools helping developers to achieve a better TD awareness.},
	language = {en},
	number = {6},
	journal = {Empirical Software Engineering},
	author = {Zampetti, Fiorella and Fucci, Gianmarco and Serebrenik, Alexander and Di Penta, Massimiliano},
	year = {2021},
	keywords = {software quality, empirical study, AwarenessTopic, 02 scanned, self-admitted technical debt (SATD), TD technical debt, Technical debt, Self-admitted technical debt, Empirical study, Software quality, SLR included, Springer},
	pages = {131},
	file = {Full Text PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\G5Q9JLY6\\Zampetti et al. - 2021 - Self-admitted technical debt practices a comparis.pdf:application/pdf},
}

@inproceedings{Baars2019a,
	title = {{CodeArena}: {Inspecting} and {Improving} {Code} {Quality} {Metrics} using {Minecraft}},
	isbn = {978-1-72813-371-3},
	doi = {10.1109/TechDebt.2019.00023},
	abstract = {To minimize technical debt and increase the maintainability of software, it is essential to make developers aware of what factors influence the maintainability of a codebase. To make the field of code quality and maintenance intuitive to developers, we propose CodeArena, which is an extension to the popular 3D sandbox game called Minecraft. CodeArena converts patterns in a codebase that are considered harmful to monsters in Minecraft, which can then be fought to improve the codebase. This way, the developer can gradually improve the quality of the code, while learning about code quality in an engaging way.},
	booktitle = {2019 {IEEE}/{ACM} {International} {Conference} on {Technical} {Debt} ({TechDebt})},
	author = {Baars, Simon and Meester, Sander},
	year = {2019},
	keywords = {software evolution, Measurement, maintainability, code metrics, Java, TDGame, education, Tools, gamification, noOverview, topic, AwarenessTopic, code quality, IST-ToDo, AwarenessSolution, visualization, Games, Three-dimensional displays, IST-Ready, minecraft, rascal, SLR included, ACM, IEEE, 01 read},
	pages = {68--70},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\23QAIVFV\\Baars, Meester - 2019 - CodeArena Inspecting and Improving Code Quality Metrics using Minecraft.pdf:application/pdf},
}
@inproceedings{Besker2017c,
	address = {New York, NY, USA},
	title = {An {Investigation} of {Technical} {Debt} in {Automatic} {Production} {Systems}},
	isbn = {978-1-4503-5264-2},
	doi = {10.1145/3120459.3120466},
	abstract = {Technical Debt is a recent concept, borrowed from the financial domain. It has been recently used in software development to describe technical sub-optimal solutions that have short-term benefits but long-term extra-costs. However, no body of literature investigates how Automatic Production Systems companies deal with Technical Debt. We investigated how Technical Debt is known, how much it hurts and how is managed in an automatic production systems company. Results from one in-depth investigation show that the automatic production systems company spend quite a lot of resources because of Technical Debt, both in the extra-costs (interest) and in its management. The company presents moderate awareness of what Technical Debt is and how much is present in its systems. However, the tracking level is quite low. We, therefore, claim that Technical Debt needs more research in this domain, as it is a source of substantial extracosts and the current practices to manage it are not suitable.},
	booktitle = {Proceedings of the {XP2017} {Scientific} {Workshops}},
	publisher = {Association for Computing Machinery},
	author = {Besker, Terese and Martini, Antonio and Bosch, Jan and Tichy, Matthias},
	year = {2017},
	keywords = {management, survey, topic, OverviewTopic, AwarenessTopic, AwarenessProblemStatement, OverviewProblemStatement, SpecialArea, AutomatedProductionSystem, IST-Ready, TD technical debt, technical debt, automatic production systems, SLR included, ACM, 01 read, Mechatronic},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\FESR4GKG\\Besker et al. - 2017 - An Investigation of Technical Debt in Automatic Production Systems.pdf:application/pdf},
}

@article{Apa2020,
abstract = {The software startups are a particular scenario where Technical Debt (TD) may occur in an intentional or unintentional way. However, the current knowledge about the perception and management of TD are mainly related to mature software organizations. This chapter contextualizes the startups' characteristics that can lead to TD incurrence, the concepts related to TD and its management, and presents the results of a survey with Uruguayan software startups. The survey's primary goal was to understand how software startups perceive and manage TD in their projects. The results refer to the level of understanding of the startup's practitioners concerning TD concept, the adopted Technical Debt Management (TDM) activities, and the strategies and technologies used in their projects to support such activities. The findings show that startups seem to invest time and effort in TDM activities being TD prevention, one of the most conducted activities. Besides that, it was observed that the participant's experience and the size of the organization seem to be also related to the perception and management of TD.},
author = {Apa, Cecilia and Jeronimo, Helvio and Nascimento, Luciana M. and Vallespir, Diego and Travassos, Guilherme Horta},
doi = {10.1007/978-3-030-35983-6_4},
file = {:C$\backslash$:/Users/Marion Wiese/Documents/Mendeley Desktop/2020/Apa et al/Apa et al. - 2020 - The perception and management of technical debt in software startups.pdf:pdf},
isbn = {9783030359836},
journal = {Fundamentals of Software Startups: Essential Engineering and Business Aspects},
keywords = {AwarenessProblemStatement,AwarenessTopic,Empirical software engineering,ExperienceLevel,IST-ready,Management,PreventionBeforeRepayment,PreventionBeforeRepaymentPractitioner,PreventionProblemStatement,PreventionSolution,PreventionTopic,Startup,Survey,Technical Debt,code debt,topic},
mendeley-tags = {AwarenessProblemStatement,AwarenessTopic,ExperienceLevel,IST-ready,PreventionBeforeRepayment,PreventionBeforeRepaymentPractitioner,PreventionProblemStatement,PreventionSolution,PreventionTopic,code debt,topic},
pages = {61--78},
title = {{The perception and management of technical debt in software startups}},
year = {2020}
}
@inproceedings{Eliasson2015,
	title = {Identifying and visualizing {Architectural} {Debt} and its efficiency interest in the automotive domain: {A} case study},
	doi = {10.1109/MTD.2015.7332622},
	abstract = {Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short-term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural violations in the detailed design had an impact on the efficiency of the communication between components, which is an essential quality in cars and other embedded systems. Such interest is not studied in literature, which usually focuses on the maintainability aspects of Technical Debt. To explore how this Architectural Technical Debt and its interest could be communicated to stakeholders, we developed a visual tool. We found that not only was the Architectural Debt highly interesting for the architects and other stakeholders at VCG, but the proposed visualization was useful in increasing the awareness of the impact that Architectural Technical Debt had on efficiency.},
	booktitle = {2015 {IEEE} 7th {International} {Workshop} on {Managing} {Technical} {Debt} ({MTD})},
	author = {Eliasson, Ulf and Martini, Antonio and Kaufmann, Robert and Odeh, Sam},
	year = {2015},
	keywords = {CommunicationTopic, architecture, TD communication, topic, Stakeholders, OverviewTopic, AwarenessTopic, Overview={\textgreater}Awareness, SpecialArea, Context, Automotive, Visualization tool, visualization, Complex systems, Automotive engineering, IST-Ready, SLR included, IEEE, 01 read, TD Visualization, Visualization={\textgreater}Awareness, Mechatronic},
	pages = {33--40},
	file = {PDF:C\:\\Users\\Marion Wiese\\Zotero\\storage\\HT8QBULC\\Eliasson et al. - 2015 - Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain A case stud.pdf:application/pdf},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GBL Theory + Related Work
%%%%%%%%%%%%%%%%%%%%%%%%%%%%



@inproceedings{DeBoer2019,
	title = {{DecidArch} {V2}: {An} {Improved} {Game} to {Teach} {Architecture} {Design} {Decision} {Making}},
	doi = {10.1109/ICSA-C.2019.00034},
	abstract = {We report on the use of our DecidArch game to teach software architecture design decision making in two consecutive years. We compare the support of three learning goals for the first version of the game with the second, revised version. Results show how the game has clearly improved. For the remaining issues. we suggest final improvements.},
	booktitle = {Proceedings - 2019 {IEEE} {International} {Conference} on {Software} {Architecture} - {Companion}, {ICSA}-{C} 2019},
	author = {De Boer, Remco C. and Lago, Patricia and Verdecchia, Roberto and Kruchten, Philippe},
	year = {2019},
	note = {ISBN: 9781728118765
Publisher: IEEE},
	keywords = {★, software architecture, decision-making, game, Cognition, Stakeholders, Games, decision making, Software architecture, Decision making, Databases, Computer architecture},
	pages = {153--157},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\JLQVVJMF\\de Boer et al. - 2019 - DecidArch V2 An Improved Game to Teach Architecture Design Decision Making.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\admin\\Zotero\\storage\\GCNY3AG2\\8712358.html:text/html;PDF:C\:\\Users\\admin\\Zotero\\storage\\WP3KKCJU\\De Boer et al. - 2019 - DecidArch V2 An Improved Game to Teach Architecture Design Decision Making.pdf:application/pdf},
}

@inproceedings{Ganesh2014,
	title = {Board game as a tool to teach software engineering concept - {Technical} debt},
	doi = {10.1109/T4E.2014.28},
	abstract = {The existing method of teaching software engineering subjects is severely limited by scope, time and exposure to real world settings. As a result of which the significance of Software Development Processes (SDP) is not very well appreciated by students. Technical debt is the debt that the project incurs by missing any process/activity in the SDP. The idea of this paper is to impart the concept of technical debt in a real world setting to students through the board game "Hard Choices". The board game Hard Choices developed by SEI, at Carnegie Mellon University is available under creative commons license. Additionally, this paper evaluates the effectiveness of this board game to communicate the concept of technical debt. During the course of the experiment we observed that students: (i) attached importance to SDP, (ii) understood the consequence of skipping a step in SDP. The above observations stem from the comparison of scores of pre and post test which show that after the conduct of the board game the scores obtained in post-test were significantly higher at 95\% confidence levels (t-test paired two sample for means). Additionally a Likert questionnaire analysis also revealed that the students perceived the instruction methodology of using board games to be lucid and engaging.},
	booktitle = {Proceedings - {IEEE} 6th {International} {Conference} on {Technology} for {Education}, {T4E} 2014},
	author = {Ganesh, Lakshmi},
	year = {2014},
	note = {ISBN: 9781479964895
Publisher: IEEE},
	keywords = {Software Engineering, CommunicationTopic, TDGame, game-based learning, Board Game, Hard Choices, SDP, Educational institutions, Games, TD technical debt, Software, Software engineering, Technical Debt, Computer architecture, Bridges},
	pages = {44--47},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\admin\\Zotero\\storage\\Q9J99ICH\\7009534.html:text/html;PDF:C\:\\Users\\admin\\Zotero\\storage\\7PU5FT5D\\Ganesh - 2014 - Board game as a tool to teach software engineering concept - Technical debt.pdf:application/pdf},
}

@inproceedings{fernandes_playscrum_2010,
	title = {{PlayScrum} - {A} {Card} {Game} to {Learn} the {Scrum} {Agile} {Method}},
	doi = {10.1109/VS-GAMES.2010.24},
	abstract = {To motivate and engage students and, consequently, improve the quality of learning, some researchers suggest new ways of teaching, including the use of serious games in the classroom. This paper describes PlayScrum, a new card game devised to allow university-level students to learn Scrum, an agile software development method. We present the card game, its rules, and how it supports the main concepts of the Scrum method. We also discuss how PlayScrum was validated, based on questionnaires filled in by master students who have played it.},
	urldate = {2024-11-10},
	booktitle = {2010 {Second} {International} {Conference} on {Games} and {Virtual} {Worlds} for {Serious} {Applications}},
	author = {Fernandes, João M. and Sousa, Sónia M.},
	month = mar,
	year = {2010},
	keywords = {Application software, card game, Education, learning, Process design, Programming profession, Project management, Robustness, Scrum, software engineering, Software engineering, Software quality, Software systems, Telecommunications},
	pages = {52--59},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\S7SAG9JQ\\Fernandes und Sousa - 2010 - PlayScrum - A Card Game to Learn the Scrum Agile Method.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\admin\\Zotero\\storage\\ESK8APMC\\5460150.html:text/html},
}

@article{plass_foundations_2015,
	title = {Foundations of {Game}-{Based} {Learning}},
	copyright = {Copyright © 2015 Division 15, American Psychological Association},
	url = {https://www.tandfonline.com/doi/abs/10.1080/00461520.2015.1122533},
	abstract = {In this article we argue that to study or apply games as learning environments, multiple perspectives have to be taken into account. We first define game-based learning and gamification, and then d...},
	language = {EN},
	urldate = {2024-11-10},
	journal = {Educational Psychologist},
	author = {Plass, Jan L. and Homer, Bruce D. and Kinzer, Charles K.},
	month = oct,
	year = {2015},
	note = {Publisher: Routledge},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\IPB8TQ74\\Plass et al. - 2015 - Foundations of Game-Based Learning.pdf:application/pdf;Snapshot:C\:\\Users\\admin\\Zotero\\storage\\JUY6NHHL\\00461520.2015.html:text/html},
}

@article{suits_what_1967,
	title = {What is a {Game}?},
	volume = {34},
	issn = {0031-8248, 1539-767X},
	doi = {10.1086/288138},
	abstract = {By means of a critical examination of a number of theses as to the nature of game-playing, the following definition is advanced: To play a game is to engage in activity directed toward bringing about a specific state of affairs, using only means permitted by specific rules, where the means permitted by the rules are more limited in scope than they would be in the absence of the rules, and where the sole reason for accepting such limitation is to make possible such activity.},
	language = {en},
	number = {2},
	urldate = {2024-11-10},
	journal = {Philosophy of Science},
	author = {Suits, Bernard},
	month = jun,
	year = {1967},
	pages = {148--156},
	file = {JSTOR Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\5Q2S6I2F\\Suits - 1967 - What Is a Game.pdf:application/pdf},
}

@article{shi_game_2015,
	title = {Game {Factors} and {Game}-{Based} {Learning} {Design} {Model}},
	volume = {2015},
	issn = {1687-7055},
	doi = {10.1155/2015/549684},
	abstract = {How to design useful digital game-based learning is a topic worthy of discussion. Past research focused on specific game genres design, but it is difficult to use when the target game genre differs f...},
	language = {en},
	number = {1},
	urldate = {2024-11-10},
	journal = {International Journal of Computer Games Technology},
	author = {Shi, Yen-Ru and Shih, Ju-Ling},
	month = jan,
	year = {2015},
	note = {Publisher: John Wiley \& Sons, Ltd},
	pages = {549684},
	file = {Eingereichte Version:C\:\\Users\\admin\\Zotero\\storage\\9K54IR6W\\Shi und Shih - 2015 - Game Factors and Game-Based Learning Design Model.pdf:application/pdf;Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\J9TR4FQP\\Shi und Shih - 2015 - Game Factors and Game-Based Learning Design Model.pdf:application/pdf;Snapshot:C\:\\Users\\admin\\Zotero\\storage\\8L7EW8QC\\549684.html:text/html;Snapshot:C\:\\Users\\admin\\Zotero\\storage\\D874P64B\\549684.html:text/html},
}

@article{huizenga_teacher_2017,
	title = {Teacher perceptions of the value of game-based learning in secondary education},
	volume = {110},
	issn = {0360-1315},
	doi = {10.1016/j.compedu.2017.03.008},
	abstract = {Teachers' perceptions of the usefulness of digital games might be a reason for the limited application of digital games in education. However, participants in most studies of teaching with digital games are teachers who do not use digital games regularly in their teaching. This study examined the practice-based perceptions of teachers who do teach with digital games - either playing or creating games - in their classroom. Semi-structured interviews were conducted with 43 secondary education teachers. Our findings showed that most teachers who actually use games in class perceived student engagement with a game and cognitive learning outcomes as effects of the use of games in formal teaching settings. Fewer teachers mentioned motivational effects of learning with digital games. The implications of these findings for the use of digital games in teachers’ educational practice are discussed.},
	urldate = {2024-11-10},
	journal = {Computers \& Education},
	author = {Huizenga, J. C. and ten Dam, G. T. M. and Voogt, J. M. and Admiraal, W. F.},
	month = jul,
	year = {2017},
	keywords = {Applications in subject areas, Media in education, Secondary education},
	pages = {105--115},
	file = {ScienceDirect Snapshot:C\:\\Users\\admin\\Zotero\\storage\\87NDTWT2\\S0360131517300568.html:text/html;Volltext:C\:\\Users\\admin\\Zotero\\storage\\RM7A8KQF\\Huizenga et al. - 2017 - Teacher perceptions of the value of game-based learning in secondary education.pdf:application/pdf},
}

@article{sousa_leadership_2019,
	title = {Leadership styles and skills developed through game-based learning},
	volume = {94},
	issn = {0148-2963},
	doi = {10.1016/j.jbusres.2018.01.057},
	abstract = {Game-based learning (GBL) as a universal approach to developing leadership skills have been winning attention from researchers and practitioners. There are numerous studies which support the positive effects of games on learning and knowledge development; however, more research is needed regarding how games may influence development of leadership skills. This paper examines recent literature regarding game-based learning influence in leadership skills development and if new leadership styles can emerge during a collaborative gaming process. The research questions were: 1) what were the leadership skills developed, during a GBL course? Moreover, 2) what kind of leadership styles emerge in the gaming context? The methodological approach was quantitative and also qualitative, privileging the interpretative approach and the primary technique used was content analysis from the forums of discussion of 8 GBL courses with 15 participants in each course summing a total of 120 individuals and also factor analysis based on data collected by a questionnaire about the leadership skills developed, and which conducted to the identification of the leadership styles. The findings suggest that a game-based learning approach is an effective approach to leadership skills development and the primary skills developed were: motivation, facilitation, coaching, mindset changing, and communication. The significant originality of the research was the analogy process between the games situations and the organisational life resulting on the creation of a leadership typology.},
	urldate = {2024-11-10},
	journal = {Journal of Business Research},
	author = {Sousa, Maria José and Rocha, Álvaro},
	month = jan,
	year = {2019},
	keywords = {Content analysis, Discussion forums, Factor analysis, Game-based learning, Leadership, Skills},
	pages = {360--366},
	file = {PDF:C\:\\Users\\admin\\Zotero\\storage\\YUMC665U\\Sousa und Rocha - 2019 - Leadership styles and skills developed through game-based learning.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\admin\\Zotero\\storage\\GUESRJZH\\S0148296318300572.html:text/html},
}

@article{garris_games_2002,
	title = {Games, {Motivation}, and {Learning}: {A} {Research} and {Practice} {Model}},
	shorttitle = {Games, {Motivation}, and {Learning}},
	doi = {10.1177/1046878102238607},
	abstract = {Although most agree that games can be engaging and that games can be instructive, there is little consensus regarding the essential characteristics of instructi...},
	language = {en},
	urldate = {2024-11-10},
	journal = {Simulation \& Gaming},
	author = {Garris, Rosemary and Ahlers, Robert and Driskell, James E.},
	month = dec,
	year = {2002},
	note = {Publisher: Sage PublicationsSage CA: Thousand Oaks, CA},
	file = {PDF:C\:\\Users\\admin\\Zotero\\storage\\2VGDS3XZ\\Garris et al. - 2002 - Games, Motivation, and Learning A Research and Practice Model.pdf:application/pdf;Snapshot:C\:\\Users\\admin\\Zotero\\storage\\J5VXJCYY\\1046878102238607.html:text/html},
}

@inproceedings{heikkila_teaching_2016,
	address = {New York, NY, USA},
	series = {{ICSE} '16},
	title = {Teaching university students {Kanban} with a collaborative board game},
	isbn = {978-1-4503-4205-6},
	doi = {10.1145/2889160.2889201},
	abstract = {Kanban is a workflow management method especially suitable for managing continuous software engineering work. We attempted to teach Kanban and lean thinking in a software project management course in Aalto University with a collaborative Kanban board game. Our goal was to measure if the learning goals of the class were reached and to study the student's perceptions of the game. Data was collected from two subsequent classes in 2014 and 2015. Quantitative data was collected with questionnaires and analysed descriptively and statistically. Qualitative data was collected from 57 learning diaries. The students perceived they had learned substantially from the game. They also evaluated the game very positively. However, the qualitative results and the measured learning indicated that the learning goals were only partially reached. The enjoyable game experience did not fully translate into effective learning.},
	urldate = {2024-11-10},
	booktitle = {Proceedings of the 38th {International} {Conference} on {Software} {Engineering} {Companion}},
	publisher = {Association for Computing Machinery},
	author = {Heikkilä, Ville T. and Paasivaara, Maria and Lassenius, Casper},
	month = may,
	year = {2016},
	pages = {471--480},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\J7BH6DAZ\\Heikkilä et al. - 2016 - Teaching university students Kanban with a collaborative board game.pdf:application/pdf},
}

@inproceedings{baker_problems_2003,
	title = {Problems and {Programmers}: an educational software engineering card game},
	shorttitle = {Problems and {Programmers}},
	doi = {10.1109/ICSE.2003.1201245},
	abstract = {Problems and Programmers is an educational card game that we have developed to help teach software engineering. It is based on the observation that students, in a typical software engineering course, gain little practical experience in issues regarding the software process. The underlying problem is time: any course faces the practical constraint of only being able to involve students in at most a few small software development projects. Problems and Programmers overcomes this limitation by providing a simulation of the software process. In playing the game, students become aware of not only general lessons, such as the fact that they must continuously make tradeoffs among multiple potential next steps, but also specific issues such as the fact that inspections improve the quality of code but delay its delivery time. We describe game play of Problems and Programmers, discuss its underlying design, and report on the results of a small experiment in which twenty-eight students played the game.},
	urldate = {2024-11-10},
	booktitle = {25th {International} {Conference} on {Software} {Engineering}, 2003. {Proceedings}.},
	author = {Baker, A. and Navarro, E.O. and van der Hoek, A.},
	month = may,
	year = {2003},
	note = {ISSN: 0270-5257},
	keywords = {Computational modeling, Computer science, Computer simulation, Delay effects, Educational programs, Employment, Inspection, Programming profession, Software engineering, Software testing},
	pages = {614--619},
	file = {Full Text PDF:C\:\\Users\\admin\\Zotero\\storage\\TTRRGG6M\\Baker et al. - 2003 - Problems and Programmers an educational software engineering card game.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\admin\\Zotero\\storage\\8CM4Q3ZP\\1201245.html:text/html},
}

@inproceedings{pivec_aspects_2003,
	address = {Graz, Austria},
	title = {Aspects of {GameBased} {Lerning}},
	urldate = {2024-11-10},
	booktitle = {Proceedings of 3rd {International} {Conference} on {Knowledge} {Management}},
	author = {Pivec, Maja and Dziabenko, Olga and Schinnerl, Irmgard},
	year = {2003},
	file = {PDF:C\:\\Users\\admin\\Zotero\\storage\\BCRXB2S6\\32_aspects_of-libre.pdf:application/pdf},
}
