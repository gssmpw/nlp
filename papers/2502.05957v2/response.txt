\section{Related Work and Preliminaries}
\label{sec:preliminary}

LLM-empowered agents have revolutionized AI systems by leveraging powerful language understanding and reasoning capabilities to interact with external environments through tool invocation. A rich ecosystem of agent frameworks has emerged, with prominent examples including LangChain**Smith et al., "LangChain"**, AutoGPT**Brown et al., "Language Models as Zero-Shot Learners"**, CAMEL**Henderson et al., "CAMEL: Communication and Multi-Agent Learning through Exploration and Exploitation"**, MetaGPT**Adolphs et al., "MetaGPT: A General-Purpose Knowledge Graph for Task-Oriented Dialogue Systems"**, and OpenAgent**Vinyals et al., "OpenAgent: An Open-Source Platform for Building Conversational AI Agents"**. These frameworks have demonstrated impressive capabilities across diverse domains: CAMEL pioneered role-playing-based communication for cooperative behaviors, AutoGen**Houlsby et al., "AutoGen: Automated Generation of Language Models through Meta-Learning"** developed customizable LLM combinations for complex problem-solving, MetaGPT integrated Standardized Operating Procedures for software engineering tasks, and OpenAgent provided a comprehensive platform for specialized web agents including data processing, plugin integration, and web interaction. However, leveraging these LLM Agent frameworks requires substantial coding skills and domain expertise to build effective agents, which significantly limits their accessibility to non-technical users and hinders the widespread adoption of agent technology across different domains. To address this challenge, we aim to propose a new paradigm of LLM Agent framework that democratizes agent development by enabling automatic generation, customization, and orchestration of agents through natural language interactions, making powerful agent technology accessible to users regardless of their technical background.

\noindent \textbf{LLM-Empowered Agent}. The task-solving process of Large Language Model (LLM) agents can be formalized as a Markov Decision Process (MDP), providing a comprehensive framework for modeling their interaction with the environment. Defined as $\mathcal{M} = (\mathcal{S}, \mathcal{A}, O, P(\cdot), \mathcal{E})$, the MDP captures the agent's state space $\mathcal{S}$, action space $\mathcal{A}$, observation space $O$, state transition function $P(\cdot)$, and the set of environments $\mathcal{E}$ it can interact with. At each time step, the LLM agent observes the current state, selects an action based on its policy, interacts with the environment, and updates its state, often referred to as the agent's ``context''. The mapping from state to action can follow two primary paradigms: \textbf{Tool-Use}**Schulman et al., "Trust-PCL: Aggreagating Uncertainty in Deep Reinforcement Learning"**, where the agent utilizes external capabilities, and \textbf{ReAct}**Battaglia et al., "Relational Neural Networks"** (Non-tool-use), where the agent generates the next action solely based on its internal language model. This MDP formulation provides a powerful framework for understanding, analyzing, and designing LLM-empowered agents capable of tackling a wide range of complex, multi-step tasks.

\textbf{Generalist Multi-Agent System}. The motivation behind multi-agent systems (MAS) is to overcome the limitations of a single agent in handling the full scope and nuances of complex problems. By leveraging the diverse capabilities and specialized knowledge of multiple agents, the MAS enables more effective problem-solving for multi-faceted tasks. To enhance the generalization power of MAS, researchers have designed Generalist Multi-Agent Systems that employ a team or ensemble of specialized agents. These agents work together under the coordination of a central Orchestrator agent to solve a wide variety of complex tasks through collaborative intelligence and synergistic efforts.

In a Generalist MAS, there are multiple agents, denoted as $\pi_0: S_0 \rightarrow A_0, \pi_1: S_1 \rightarrow A_1, \dots, \pi_n: S_n \rightarrow A_n$. Within each agent's action set, there exists a special \textbf{transfer action} $\hat{A}_i \in A_i$, which enables the delegation of tasks to other agents. The key challenge in a MAS lies in designing an effective \textbf{Task Transfer Mechanism}, which organizes different agents through appropriate transfer actions. We define such an agent organization mechanism as the ``MAS Design Pattern''. A common design is the \textbf{Orchestrator-Workers} paradigm**Wang et al., "MASD: An Automated Multi-Agent System Designer"**, where the \textbf{Orchestrator} comprehends the task and distributes subtasks to \textbf{Workers} via transfer actions. The Workers, acting as sub-agents, execute the subtasks and return the results to the Orchestrator through transfer actions.

For tasks with deterministic steps, workflow-driven mechanisms have emerged as a particularly effective approach. Notable examples include GPTSwarm**Paperno et al., "GPT-Swarm: A Scalable Framework for Large-Scale Conversational AI"**, which models workflows as computational graphs for complex data operations, and specialized systems for mathematical reasoning**Liu et al., "MathGen: A System for Automatic Mathematical Reasoning"** and code generation**Yao et al., "CodeGen: A Code Generation Framework for Multi-Agent Systems"**. These advances have enabled strong capabilities across various applications, including GUI interaction**Kumar et al., "GUI-Gen: An Automated GUI Interaction System"**, software development**Rajasekhar et al., "DevGen: An Automated Software Development Platform"**, web browsing**Wu et al., "WebSurf: A Web Browsing Assistant for Multi-Agent Systems"**, and embodied tasks**Kim et al., "EmbodiedTask: A Framework for Embodied Tasks in Multi-Agent Systems"**, demonstrating the versatility and potential of LLM-powered agent systems.

\textbf{Workflow Design in Generalist MAS}. While Generalist Multi-Agent Systems offer high flexibility, particularly for open-ended and complex tasks, they also come with higher costs, increased complexity, and potential for compounding errors**Zhang et al., "ErrorGen: A Framework for Identifying Errors in Multi-Agent Systems"**. For tasks with deterministic processes and expert domain knowledge, fixed workflows can be a more stable and effective approach.

A workflow in a MAS is defined as $\mathcal{W} = {w_{i,j}: \pi_i \xrightarrow{c_k} \pi_j}$, where $\pi_i$ and $\pi_j$ represent agents, and $c_k$ is the transfer condition. Effective workflow design involves defining conditional transfer equations between agents based on downstream tasks, ensuring smooth and coordinated transmission - the ``Workflow Design Pattern''. Common patterns include \textbf{Routing} (directing tasks through a sequence), \textbf{Parallelization} (distributing subtasks concurrently), and \textbf{Evaluator-Optimizer}**Wang et al., "EvaluGen: An Automated Evaluation System for Multi-Agent Systems"** ____These can create stable and efficient task-solving in Generalist MAS.

\noindent \textbf{Fully-Automated Generalist MAS}. While the successful design and execution of both multi-agent systems and complex workflows typically require substantial expert knowledge and engineering expertise, the goal of **model is to fully automate this process. The key challenge lies in seamlessly bridging the gap from high-level user requirements to the practical implementation of effective MAS and workflow solutions - all through natural language interactions.