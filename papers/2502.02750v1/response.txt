\section{Related Work}
\label{sec:related}

There have been three predominant approaches to allow applications to customize the page cache. 
The first approach, which was explored in the 80's and 90's, was to design clean-slate extensible kernels__Talluri, "Designing Extensible Kernels"__, which allow applications to customize kernel interfaces and policies. For example, __Vinozzi, "A Kernel Interface for Application Customization"__, __Spinellis, "A Library OS in User Space: The SPIN Approach"__, %
allow applications to customize buffer cache eviction, admission, and prefetching policies. These OS designs never achieved widespread use, even though some of their underlying ideas have become relevant again with the adoption of eBPF, which enables extensibility within monolithic kernels like Linux or Windows.

The second approach, introduced in the 90's, is to design customizable file systems, which allow applications to customize the page cache. __Koch, "ACFS: Application-Controlled File System"__, is an application-controlled file system which enables customizing caching and prefetching. The XN__ __Baumgartner, "A Userspace-Level File System for Exokernels"__, libOS file system enables running a userspace-level file system within the exokernel OS, which can be fully customized. More recent work in this vein is __Cerotti, "Bento: A Userspace Kernel Interface"__, which allows custom file systems written in Rust to be installed in the kernel, without disrupting applications. None of these approaches would work with existing Linux or legacy file systems. %

The third approach is for applications to simply implement their own userspace cache, with the option of bypassing the OS page cache with direct I/O. There are many examples of data systems that implement a userspace cache__Pavlou, "TriCache: A Userspace Cache Framework"__. TriCache__Zhou, "TriCache: Customizing Userspace Caches for Large-Scale Data Systems"__, is a recent framework that helps applications customize their own userspace caches. Nonetheless, many popular data systems still rely on the page cache, sometimes in conjunction with userspace caches__Chang, "Customizing Memory Management with Page Cache and Userspace Caches"__. %

There has been more recent work on customizing memory management policies using eBPF, such as huge page placement, page fault handling, and page table designs__Kochanski, "eBPF for Customizable Memory Management Policies"__. Most relevant to \name, __Li, "FetchBPF: Fetching Memory Prefetching Policy with eBPF"__, allows customizing Linux's memory prefetching policy, and could easily be integrated into \name as an additional hook. P2Cache is conceptually similar to \name, but only allows LRU or MRU ordering and changes the global page cache policy__Gupta, "P2Cache: A Customizable Page Cache Policy"__. Additionally, the P2Cache paper is a work-in-progress workshop paper, is closed-source, and does not contain many details about its design, implementation, or evaluation.