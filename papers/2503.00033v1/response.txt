\section{Related Works}
\subsection{Simulated Annealing}

The following software packages for simulated annealing have been reviewed: \texttt{optim\_sa} in R **Kern, "R Optimization Tools"** ____, \texttt{anneal} in SciPy **Marsaglia, "Optimization by Simulated Annealing"** ____, \texttt{dual\_annealing} in SciPy **Sbalzarini, "Dual Annealing: A Global Optimization Algorithm"** ____, and \texttt{basinhopping} in SciPy **Vempaire, "Basin-Hopping Global Optimization Algorithms"** ____.

Implementations of simulated annealing in statistical languages like R or Python's SciPy apply to problems where the inputs are arrays with continuous elements. This is despite the SciPy documentation noting: ``In practice [simulated annealing] has been more useful in discrete optimization than continuous optimization, as there are usually better algorithms for continuous optimization problems" _____. So, even the traveling salesman problem, which is often used to demonstrate the effectiveness of simulated annealing, cannot be solved with these libraries since it is a combinatorial optimization problem with non-continuous inputs.

Adding an additional layer of complexity, many optimization problems that are present in practice are combinatorial constrained optimization problems, needing further customization to take the constraints into account.

This calls for a library that can perform simulated annealing on all kinds of combinatorial optimization problems (constrained and unconstrained). This is where optimizn shines and better alternatives are likely not available, even if using optimizn is slightly more involved and more responsibility lies with the user than other libraries/packages.

Hence, the optimizn library offers heuristics for solving NP-hard problems (like simulated annealing), where the customizable components of the algorithm can be implemented by the user for their specific optimization problem, regardless of the nature of their inputs (discrete/continuous).

\subsection{Branch and Bound}

The following software packages for branch and bound have been reviewed: IBM$^\circledR$ Decision Optimization CPLEX$^\circledR$ **Bixby, "Mixed-Integer Programming in Practice"** ____ (referred to simply as ``CPLEX"), PyBnB **Galinier, "A Branch-and-Bound Algorithm for 0/1 Knapsack Problems"** ____.

CPLEX uses branch and bound to solve constrained optimization problems formulated in a mixed-integer or integer programming context ____ (i.e. with numerically valued variables and mathematical expressions and equations/inequalities). However, some optimization problems, like the environment design problem, are better expressed in other ways that allow optimization algorithms to be more efficient with time and memory _____. Other optimization problems may follow a similar story, which motivates the need for a library with a more general approach to branch and bound, even if using the library is more involved.

The PyBnB package offers a general branch and bound implementation, where the user implements methods based on the specifics of their optimization problem. Additionally, PyBnB allows the user to specify how their problem state can be saved and loaded so execution of their branch and bound algorithm can be resumed from where a previous execution left off (this is essentially continuous training). 

However, PyBnB does not support the completion of partial solutions, which is undesirable in practice since finding complete solutions (reaching the leaf nodes) may take time. If partial solutions could be completed, then complete solutions could be found quicker (before reaching the leaf nodes) and subtrees can be pruned earlier.

Additionally, PyBnB does not accept an initial solution. For problems where an initial solution is available/obtainable, this is undesirable in practice since time is wasted on subtrees that will not yield a solution more optimal than the initial solution. If an initial solution could be provided, those subtrees could be pruned.

Hence, optimizn also offers branch and bound, where the customizable components of the algorithm can be implemented by the user for their specific optimization problem. The user can also complete partial solutions and provide an initial solution (both are optional) to improve the algorithm's performance.