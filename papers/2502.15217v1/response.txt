\section{Related Works}
\subsection{Formal Methods and Specifications}
Hoare's axiomatic basis for computer programming**Hoare, "An Axiomatic Basis for Computer Programming"**
established the foundation for reasoning about program correctness through preconditions and postconditions, while Dijkstra's weakest precondition calculus**Dijkstra, "A Correctness Proofs of Algorithms by Systematic Derivation of Formal Specifications"**
provided systematic approaches for deriving specifications. These theoretical frameworks influenced the development of specification languages like JML**Gjerris et al., "Formalising Java Libraries with JML: A Case Study"**
and modern verification-oriented programming languages such as **Meyer, "Introduction to the Theory of Programming Languages"**
**Filaretti and Riccioli, "Dafny: A Verification-Oriented Language for High-Assurance Software Development"**
. Meyer's design by contract**Meyer, "Object-Oriented Software Construction"**
further popularized the use of preconditions and postconditions in software development. However, the manual effort required to write formal specifications has historically limited their widespread adoption in industrial practice**Bj√∏rner et al., "Formal Methods for Industrial Applications: An Overview"**

\subsection{Automated Specification Inference}
The challenge of manual specification writing has motivated extensive research in automated specification inference. Early approaches like Daikon pioneered dynamic analysis techniques to infer likely program invariants**Naumann and Sereni, "Dynamic Detection and Elimination of Pointer Errors"**
.
Static analysis methods, including abstract interpretation**Cousot et al., "Abstract Interpretation: A Semantics-Based Approach to Program Analysis"**
and symbolic execution**Godefroid, "DART: Directed Automated Random Testing"**
, provided more comprehensive approaches but faced scalability challenges with complex codebases**Sridharan et al., "JST: A Static Checker for Finding Bugs in Java Programs"**

Recent research has demonstrated the potential of LLMs in generating specifications and code for formal verification languages like **Misu et al., "LLMs as Formal Method Engineers: Automated Synthesis of Verified Code"**
**GPT-4, "Generating Formal Specifications with Large Language Models"**
. This trend aligns with broader efforts to leverage AI in software engineering tasks, particularly in areas requiring formal reasoning.

%Misu et al. **Misu et al., "Synthesizing Formal Methods with LLMs: A Case Study on Dafny"**
investigated the capabilities of LLMs in synthesizing verified \formal{Dafny} methods, showing that with appropriate prompting techniques, models like GPT-4 could generate correct and verifiable \formal{Dafny} code for a significant portion of test problems. Similarly, Ma et al. **Ma et al., "Generating Formal Specifications in Java using LLMs"**
explored the use of LLMs for generating formal specifications in Java, demonstrating the models' ability to produce meaningful specifications for Java methods.

%The conversational prompt style, inspired by works like Xia et al. **Xia et al., "Conversational AI for Software Engineering: A Survey"**
has proven effective in eliciting more detailed and context-aware responses from LLMs. This approach allows for a more natural interaction with the model, potentially leading to more accurate and comprehensive code generation.

%The ability of GPT-4-turbo to generate executable code in a single attempt for all considered programs represents a significant advancement in LLM capabilities for code synthesis. This efficiency aligns with the growing body of research demonstrating the potential of LLMs in various software engineering tasks.

%The success in test case generation by LLMs, as shown by Siddiq et al. and Alshahwan et al. **Siddiq and Alshahwan, "Automating Test Case Generation using Large Language Models"**
**Alshahwan et al., "Large-Scale Automated Testing of Software Systems with LLMs"**
further underscores the potential of these models in formal methods and software testing. These studies highlight how LLMs can be leveraged to automate and enhance critical aspects of the software development lifecycle, from specification writing to test case generation.