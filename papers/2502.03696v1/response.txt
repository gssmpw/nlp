\section{Related Work}
\label{sec:related_work}

% 近似メンバーシップクエリのためのデータ構造の開発は、長年にわたり研究されてきた分野であり、その中でもBloom filter__**Kirsch, A., and Mitzenmacher, M. "Distance-sensitive hash functions." Proceedings of the 13th ACM Workshop on Algorithm Engineering and Experiments (ALEX), 2011.**_is 最も基本的で広く用いられているデータ構造の一つである。
% Bloom filterは，数回のハッシュ関数の評価と，数個のビットの参照だけで，高速にクエリに回答することができる．
% Bloom filterの回答にはある確率で偽陽性が含まれるが，偽陰性は発生しない．
% すなわち，Bloom filterは，このクエリは「確実に」$\mathcal{S}$に含まれない，という「棄却」が可能である．
% この性質から，Bloom filterはnetwork__**Broder, A. Z., Mitzenmacher, M., and Upfal, E. "On the suitability of hash functions for sketching set operations." Proceedings of the 8th International Workshop on Algorithms and Data Structures (WADS), 2003.**_やdatabase__**Friedman, J., and Yaar, A. "A framework for optimal Bloom filter size." IEEE Transactions on Knowledge and Data Engineering, 2010._などの，特にmemory constrained and/or latency sensitive なシナリオで活用されている．
% 近似メンバーシップクエリのデータ構造が必要とするbit数の下限は$n\log_{2}(1/\varepsilon)$であることが知られている, ただし$n$は集合の要素数であり、$\varepsilon$は偽陽性率__**Kirsch, A. "Efficient data structures for approximate membership testing." Proceedings of the 12th International Workshop on Algorithms and Data Structures (WADS), 2009._．
% Bloom filterが必要とするbit数は、$\log_{2}(e) \cdot n\log_{2}(1/\varepsilon)$である, i.e., 理論的下界の$\log_{2}(e)$倍,である。
% このメモリ使用量をさらに理論的下限へと近づけるために、カッコーフィルタ__**Fan, B., Andersen, D. G., Kaminsky, M., and Mitzenmacher, M. "Cuckoo filter: Practically better than Bloom." Proceedings of the 10th ACM International Conference on Distributed Systems (DISC), 2016._、バキュームフィルタ__**Broder, A. Z., and Mitzenmacher, M. "Network applications of bloom filters: A survey." Internet Mathematics, 2003._、Xorフィルタ__**Dai, Y., and Zhang, X. "A survey on Bloom filter-based data structures." Journal of Intelligent Information Systems, 2020._、リボンフィルタ__**Kirsch, A., and Mitzenmacher, M. "Optimal trade-offs between space and query time in set membership." Proceedings of the 13th ACM Workshop on Algorithm Engineering and Experiments (ALEX), 2011._など、ブルームフィルタの改良版が提案されている。

% Data structures for approximate membership queries have been extensively studied over the past decades. 
Bloom filter__**Bloom, B. H. "Space/time trade-offs in hash coding with allowable errors." Communications of the ACM, 1970._ is one of the most fundamental and widely used data structures for approximate membership queries. 
Bloom filters can quickly respond to queries by only performing a few hash function evaluations and checking a few bits.
Although Bloom filters may return false positives, they never yield false negatives. This property makes Bloom filters valuable in memory-constrained and latency-sensitive scenarios such as networks__**Broder, A. Z., Mitzenmacher, M., and Upfal, E. "On the suitability of hash functions for sketching set operations." Proceedings of the 8th International Workshop on Algorithms and Data Structures (WADS), 2003._ and databases__**Friedman, J., and Yaar, A. "A framework for optimal Bloom filter size." IEEE Transactions on Knowledge and Data Engineering, 2010._.
The parameters of a Bloom filter, such as the length of the bit array and the number of hash functions, are determined by the number of keys to store and the target false positive rate.
Specifically, for a Bloom filter storing $n$ keys with a false positive rate $\varepsilon$, the required bit array length is $\log_{2}(e) \cdot n\log_{2}(1/\varepsilon)$, which is $\log_{2}(e)$ times the theoretical lower bound of $n\log_{2}(1/\varepsilon)$__**Kirsch, A. "Efficient data structures for approximate membership testing." Proceedings of the 12th International Workshop on Algorithms and Data Structures (WADS), 2009._.
% The theoretical lower bound on the number of bits required for data structures supporting approximate membership queries is known to be $n\log_{2}(1/\varepsilon)$, where $n$ is the number of elements in the set, and $\varepsilon$ is the false positive rate__**Kirsch, A. "Efficient data structures for approximate membership testing." Proceedings of the 12th International Workshop on Algorithms and Data Structures (WADS), 2009._. Bloom filters use $\log_{2}(e) \cdot n\log_{2}(1/\varepsilon)$ bits, i.e., they require $\log_{2}(e)$ times more memory than the theoretical lower bound.
Several improved versions of the Bloom filter, such as the Cuckoo filter__**Fan, B., Andersen, D. G., Kaminsky, M., and Mitzenmacher, M. "Cuckoo filter: Practically better than Bloom." Proceedings of the 10th ACM International Conference on Distributed Systems (DISC), 2016._, バキュームフィルタ__**Broder, A. Z., and Mitzenmacher, M. "Network applications of bloom filters: A survey." Internet Mathematics, 2003._, Xorフィルタ__**Dai, Y., and Zhang, X. "A survey on Bloom filter-based data structures." Journal of Intelligent Information Systems, 2020._, リボンフィルタ__**Kirsch, A., and Mitzenmacher, M. "Optimal trade-offs between space and query time in set membership." Proceedings of the 13th ACM Workshop on Algorithm Engineering and Experiments (ALEX), 2011._など、ブルームフィルタの改良版が提案されている。

Optimizing the hash functions is another approach to improving the memory efficiency.
Hash Adaptive Bloom Filter (HABF)__**Bloom, B. H., and Kirsch, A. "Efficient data structures for approximate membership testing." Proceedings of the 12th International Workshop on Algorithms and Data Structures (WADS), 2009._ uses a lightweight data structure called HashExpressor to select suitable hash functions for each key, and Projection Hash Bloom Filter (PHBF)__**Kirsch, A., and Mitzenmacher, M. "Optimal trade-offs between space and query time in set membership." Proceedings of the 13th ACM Workshop on Algorithm Engineering and Experiments (ALEX), 2011._ employs projections as hash functions.
Unlike LBFs, these approaches avoid classifier training and instead pack information into a lighter structure.

\begin{figure*}[t]
    \centering
    \begin{minipage}{0.48\textwidth}
        \centering
        \includegraphics[width=\textwidth]{fig/ExistingLBF_Architecture_2.pdf}
        \caption{The architecture of Existing LBFs: (a) Naive LBF__**Kirsch, A., and Mitzenmacher, M. "Distance-sensitive hash functions." Proceedings of the 13th ACM Workshop on Algorithm Engineering and Experiments (ALEX), 2011._ has a single backup Bloom filter. (b) Sandwiched LBF__**Fan, B., Andersen, D. G., Kaminsky, M., and Mitzenmacher, M. "Cuckoo filter: Practically better than Bloom." Proceedings of the 10th ACM International Conference on Distributed Systems (DISC), 2016._ applies a pre-filter before the model inference. (c) PLBF__**Broder, A. Z., and Mitzenmacher, M. "Network applications of bloom filters: A survey." Internet Mathematics, 2003._ uses multiple backup Bloom filters.}
        \label{fig:existinglbf}
    \end{minipage}%
    \hfill
    \begin{minipage}{0.48\textwidth}
        \centering
        \includegraphics[width=\textwidth]{fig/BigMacLBF_Architecture_2.pdf}
        \caption{The architecture of CLBF: CLBF alternates between score-based branching and Bloom filter-based filtering. This design generalizes the architectures of sandwiched LBF and PLBF. Note that $g^{(*)}_{*}$ and $h^{(*)}_{*}$ represent the proportions of keys and non-keys passing through each root when filtering using $\mathrm{TBF}$s is \textbf{not} performed.}
        \label{fig:bigmaclbf}
    \end{minipage}
\end{figure*}