\section{Related Work}
\label{section:related-works}
In this section, we provide an overview of relevant works that have not been previously discussed. These works explore system models distinct from Phoenix and therefore were not included in our comparison.

Although several studies have suggested process placement strategies, none of them have specifically discussed optimizing scheduling by considering page table placement in NUMA systems. Our comparison focuses exclusively on Mitosis, as it is the only existing work that specifically addresses page table replication within the same system model as Phoenix.

\textbf{Tiered memory systems:} Tiered memory systems involve the migration of page tables between different memory tiers. Radiant is a cutting-edge solution for page table migration in tiered memory systems **Kumar, “Radiant: Optimizing Page Table Migration in Tiered Memory Systems”** , specifically focusing on migration between DRAM and NVMM (Non-Volatile Memory Module). In Linux, when sufficient DRAM memory is available, it may allocate portions of the page table on slower NVMM. Radiant addresses this by selectively placing critical sections of the page table in fast DRAM, while migrating the remaining sections between NVMM and DRAM to achieve optimal memory placement. On average, Radiant reduces CPU cycles by $20\%$ compared to Linux.

\textbf{Virtualized systems:}
Virtualized systems utilize extended page tables that require two levels of address translations **Wang, “Virtualization: A Novel Approach to Address Translation”** ,  and **Chen, “Efficient Virtualized Memory Management”** . The virtual address of the guest must be translated to the corresponding physical address. This physical address represents the virtual address of the host, which needs further translation to determine the host's physical address. Resolving an address through a 2D page-walk process requires $24$ memory accesses. vMitosis, similar to the Mitosis sibling, applies the same replication mechanism to virtual machines and has achieved a speedup of up to $1.6x$ compared to Linux. On the other hand, recent work **Zhang, “Fast Virtualized Memory Management using 1D Address Translation”** , have explored a solution to use 1D address translation for virtual machines to achieve near-native translation latency. These findings could potentially complement the vMitosis approach.

\textbf{Flattening the page table:}
A promising strategy to alleviate page-walk overhead involves minimizing memory accesses, as explored in recent studies **Kim, “Reducing Memory Access Latency through Page Table Flattening”** , and **Lee, “Page Table Optimization for Modern Operating Systems”** . These works propose transforming 4 KB page table pages into 2 MB huge pages, effectively decreasing the required levels of page tables from four to two and reducing memory access requirements to nearly one in many scenarios. However, since the hardware unit responsible for performing page-walks is designed based on current structures, implementing such flattening approaches necessitates corresponding changes in hardware.

\textbf{Kernel state replication:} NrOS, a state-of-the-art kernel state replication system, offers a unique approach to addressing scalability challenges in operating system kernels **Brown, “NrOS: Efficient Kernel State Replication for Scalable Operating Systems”** . Developed from scratch using the Rust programming language, NrOS consists of approximately $11,000$ lines of kernel code and an additional $16,000$ lines of code for kernel libraries, including drivers and the bootloader. While NrOS shares similarities with Mitosis in replicating page tables across NUMA nodes, it distinguishes itself through the adoption of a novel approach called \emph{node replication}. This technique ensures coherency maintenance and enhances scalability. However, it should be noted that NrOS's current destructive implementation is incompatible with Linux and legacy applications, limiting its practicality in present-day data centers. Alternatively, Phoenix emerges as a promising production solution due to its compatibility with legacy applications, minimal kernel modifications, and reliance on stable kernel building blocks.