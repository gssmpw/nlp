@inproceedings{huang2024build,
  title={Build Issue Resolution from the Perspective of Non-Contributors},
  author={Huang, Sunzhou and Wang, Xiaoyin},
  booktitle={Proceedings of the 39th IEEE/ACM International Conference on Automated Software Engineering},
  pages={2304--2308},
  year={2024}
}
@INPROCEEDINGS{Pinto2017,
  author={Pinto, Gustavo Henrique Lima and Filho, Fernando Figueira and Steinmacher, Igor and Gerosa, Marco Aurelio},
  booktitle={2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE\&T)}, 
  title={Training Software Engineers Using Open-Source Software: The Professors' Perspective}, 
  year={2017},
  volume={},
  number={},
  pages={117-121},
  keywords={Interviews;Training;Face;Open source software;Software systems;Open-source software;Teaching Software Engineering;Open-Source Contributions},
  doi={10.1109/CSEET.2017.27}}


@article{Kotwani2011,
author = {Kotwani, Gunjan and Kalyani, Pawan},
year = {2011},
month = {12},
pages = {},
title = {Open Source Software (OSS): Realistic Implementation of OSS in School Education}
}

@INPROCEEDINGS{Gokhale2012,
  author={Gokhale, Swapna S. and Smith, Thérèse and McCartney, Robert},
  booktitle={2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex)}, 
  title={Integrating Open Source Software into software engineering curriculum: Challenges in selecting projects}, 
  year={2012},
  volume={},
  number={},
  pages={9-12},
  keywords={Maintenance engineering;Complexity theory;Predictive models;Documentation;Open source software;Measurement;Open Source Software;Maintenance;Evolution;Software Metrics;Predictive Models},
  doi={10.1109/EduRex.2012.6225697}}


@INPROCEEDINGS{Goswami2020,
  author={Goswami, Pronnoy and Gupta, Saksham and Li, Zhiyuan and Meng, Na and Yao, Daphne},
  booktitle={2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Investigating The Reproducibility of NPM Packages}, 
  year={2020},
  volume={},
  number={},
  pages={677-681},
  doi={10.1109/ICSME46990.2020.00071}}

@article{lahtinen2005study,
  title={A study of the difficulties of novice programmers},
  author={Lahtinen, Essi and Ala-Mutka, Kirsti and J{\"a}rvinen, Hannu-Matti},
  journal={Acm sigcse bulletin},
  volume={37},
  number={3},
  pages={14--18},
  year={2005},
  publisher={ACM New York, NY, USA}
}

@inproceedings{phillips2014understanding,
  title={Understanding and improving software build teams},
  author={Phillips, Shaun and Zimmermann, Thomas and Bird, Christian},
  booktitle={Proceedings of the 36th international conference on software engineering},
  pages={735--744},
  year={2014}
}

@article{hilton2016continuous,
  title={Continuous integration (CI) needs and wishes for developers of proprietary code.(2016)},
  author={Hilton, Michael and Nelson, Nicholas and Dig, Danny and Tunnell, Timothy and Marinov, Darko and others},
  year={2016}
}

@article{vassallo2020every,
  title={Every build you break: developer-oriented assistance for build failure resolution},
  author={Vassallo, Carmine and Proksch, Sebastian and Zemp, Timothy and Gall, Harald C},
  journal={Empirical Software Engineering},
  volume={25},
  pages={2218--2257},
  year={2020},
  publisher={Springer}
}

@inproceedings{downs2012ambient,
  title={Ambient awareness of build status in collocated software teams},
  author={Downs, John and Plimmer, Beryl and Hosking, John G},
  booktitle={2012 34th International Conference on Software Engineering (ICSE)},
  pages={507--517},
  year={2012},
  organization={IEEE}
}

@article{xia2014empirical,
  title={An empirical study of bugs in software build system},
  author={Xia, Xin and Zhou, Xiaozhen and Lo, David and Zhao, Xiaoqiong and Wang, Ye},
  journal={IEICE TRANSACTIONS on Information and Systems},
  volume={97},
  number={7},
  pages={1769--1780},
  year={2014},
  publisher={The Institute of Electronics, Information and Communication Engineers}
}

@article{barrak2021builds,
  title={Why do builds fail?—A conceptual replication study},
  author={Barrak, Amine and Eghan, Ellis E and Adams, Bram and Khomh, Foutse},
  journal={Journal of Systems and Software},
  volume={177},
  pages={110939},
  year={2021},
  publisher={Elsevier}
}

@inproceedings{lou2020understanding,
  title={Understanding build issue resolution in practice: symptoms and fix patterns},
  author={Lou, Yiling and Chen, Zhenpeng and Cao, Yanbin and Hao, Dan and Zhang, Lu},
  booktitle={Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  pages={617--628},
  year={2020}
}

@inproceedings{zolfagharinia2017not,
  title={Do not trust build results at face value-an empirical study of 30 million cpan builds},
  author={Zolfagharinia, Mahdis and Adams, Bram and Gu{\'e}h{\'e}nuc, Yann-Ga{\"e}l},
  booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},
  pages={312--322},
  year={2017},
  organization={IEEE}
}


@inproceedings{wu2020empirical,
  title={An empirical study of build failures in the docker context},
  author={Wu, Yiwen and Zhang, Yang and Wang, Tao and Wang, Huaimin},
  booktitle={Proceedings of the 17th international conference on mining software repositories},
  pages={76--80},
  year={2020}
}


@article{salleh2010empirical,
  title={Empirical studies of pair programming for CS/SE teaching in higher education: A systematic literature review},
  author={Salleh, Norsaremah and Mendes, Emilia and Grundy, John},
  journal={IEEE Transactions on Software Engineering},
  volume={37},
  number={4},
  pages={509--525},
  year={2010},
  publisher={IEEE}
}

@inproceedings{romano2019empirical,
  title={An empirical assessment on affective reactions of novice developers when applying test-driven development},
  author={Romano, Simone and Fucci, Davide and Baldassarre, Maria Teresa and Caivano, Danilo and Scanniello, Giuseppe},
  booktitle={Product-Focused Software Process Improvement: 20th International Conference, PROFES 2019, Barcelona, Spain, November 27--29, 2019, Proceedings 20},
  pages={3--19},
  year={2019},
  organization={Springer}
}

@inproceedings{rehman2020newcomer,
  title={Newcomer candidate: Characterizing contributions of a novice developer to github},
  author={Rehman, Ifraz and Wang, Dong and Kula, Raula Gaikovina and Ishio, Takashi and Matsumoto, Kenichi},
  booktitle={2020 IEEE international conference on software maintenance and evolution (ICSME)},
  pages={855--855},
  year={2020},
  organization={IEEE}
}

@article{oliveira2020collaborative,
  title={Collaborative or individual identification of code smells? On the effectiveness of novice and professional developers},
  author={Oliveira, Roberto and de Mello, Rafael and Fernandes, Eduardo and Garcia, Alessandro and Lucena, Carlos},
  journal={Information and Software Technology},
  volume={120},
  pages={106242},
  year={2020},
  publisher={Elsevier}
}

@misc{script,
  author = {Michael Kerrisk},
  title = {script - make typescript of terminal session},
  howpublished = {\url{https://man7.org/linux/man-pages/man1/script.1.html}},
  year={2023},
}
@misc{docker,
  title = {How to fix docker: Got permission denied issue},
  howpublished = {\url{stackoverflow.com/questions/48957195}},
  note = {Accessed: 2024}
}

@inproceedings{kerzazi2014automated,
  title={Why do automated builds break? an empirical study},
  author={Kerzazi, Noureddine and Khomh, Foutse and Adams, Bram},
  booktitle={2014 IEEE International Conference on Software Maintenance and Evolution},
  pages={41--50},
  year={2014},
  organization={IEEE}
}

@inproceedings{shridhar2014qualitative,
  title={A qualitative analysis of software build system changes and build ownership styles},
  author={Shridhar, Mini and Adams, Bram and Khomh, Foutse},
  booktitle={Proceedings of the 8th ACM/IEEE international symposium on empirical software engineering and measurement},
  pages={1--10},
  year={2014}
}

@inproceedings{li2021deeplv,
  title={DeepLV: Suggesting log levels using ordinal based neural networks},
  author={Li, Zhenhao and Li, Heng and Chen, Tse-Hsun and Shang, Weiyi},
  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
  pages={1461--1472},
  year={2021},
  organization={IEEE}
}

@inproceedings{zhang2023deeplog,
  title={DeepLog: Deep-Learning-Based Log Recommendation},
  author={Zhang, Yang and Chang, Xiaosong and Fang, Lining and Lu, Yifan},
  booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
  pages={88--92},
  year={2023},
  organization={IEEE}
}

@article{wang2021will,
  title={Will dependency conflicts affect my program's semantics?},
  author={Wang, Ying and Wu, Rongxin and Wang, Chao and Wen, Ming and Liu, Yepang and Cheung, Shing-Chi and Yu, Hai and Xu, Chang and Zhu, Zhiliang},
  journal={IEEE Transactions on Software Engineering},
  volume={48},
  number={7},
  pages={2295--2316},
  year={2021},
  publisher={IEEE}
}

@inproceedings{hassan2017automatic,
  title={Automatic building of java projects in software repositories: A study on feasibility and challenges},
  author={Hassan, Foyzul and Mostafa, Shaikh and Lam, Edmund SL and Wang, Xiaoyin},
  booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  pages={38--47},
  year={2017},
  organization={IEEE}
}

@article{plonka2015knowledge,
  title={Knowledge transfer in pair programming: An in-depth analysis},
  author={Plonka, Laura and Sharp, Helen and Van der Linden, Janet and Dittrich, Yvonne},
  journal={International journal of human-computer studies},
  volume={73},
  pages={66--78},
  year={2015},
  publisher={Elsevier}
}

@article{marques2017enhancing,
  title={Enhancing the student learning experience in software engineering project courses},
  author={Marques, Maira and Ochoa, Sergio F and Bastarrica, Maria Cecilia and Gutierrez, Francisco J},
  journal={IEEE Transactions on Education},
  volume={61},
  number={1},
  pages={63--73},
  year={2017},
  publisher={IEEE}
}

@inproceedings{ardimento2019evaluating,
  title={Evaluating coding behavior in software development processes: A process mining approach},
  author={Ardimento, Pasquale and Bernardi, Mario Luca and Cimitile, Marta and Maggi, Fabrizio Maria},
  booktitle={2019 IEEE/ACM International Conference on Software and System Processes (ICSSP)},
  pages={84--93},
  year={2019},
  organization={IEEE}
}

@inproceedings{licker2019detecting,
  title={Detecting incorrect build rules},
  author={Licker, N{\'a}ndor and Rice, Andrew},
  booktitle={2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
  pages={1234--1244},
  year={2019},
  organization={IEEE}
}

@inproceedings{warner2017codepilot,
  title={Codepilot: Scaffolding end-to-end collaborative software development for novice programmers},
  author={Warner, Jeremy and Guo, Philip J},
  booktitle={Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems},
  pages={1136--1141},
  year={2017}
}

@article{kwan2011does,
  title={Does socio-technical congruence have an effect on software build success? a study of coordination in a software project},
  author={Kwan, Irwin and Schroter, Adrian and Damian, Daniela},
  journal={IEEE Transactions on Software Engineering},
  volume={37},
  number={3},
  pages={307--324},
  year={2011},
  publisher={IEEE}
}

@article{mcintosh2015large,
  title={A large-scale empirical study of the relationship between build technology and build maintenance},
  author={McIntosh, Shane and Nagappan, Meiyappan and Adams, Bram and Mockus, Audris and Hassan, Ahmed E},
  journal={Empirical Software Engineering},
  volume={20},
  pages={1587--1633},
  year={2015},
  publisher={Springer}
}

@inproceedings{zhao2014empirical,
  title={An empirical study of bugs in build process},
  author={Zhao, Xiaoqiong and Xia, Xin and Kochhar, Pavneet Singh and Lo, David and Li, Shanping},
  booktitle={Proceedings of the 29th Annual ACM Symposium on Applied Computing},
  pages={1187--1189},
  year={2014}
}

@inproceedings{xia2017could,
  title={Could we predict the result of a continuous integration build? An empirical study},
  author={Xia, Jing and Li, Yanhui},
  booktitle={2017 IEEE International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
  pages={311--315},
  year={2017},
  organization={IEEE}
}

@inproceedings{mcintosh2011empirical,
  title={An empirical study of build maintenance effort},
  author={McIntosh, Shane and Adams, Bram and Nguyen, Thanh HD and Kamei, Yasutaka and Hassan, Ahmed E},
  booktitle={Proceedings of the 33rd international conference on software engineering},
  pages={141--150},
  year={2011}
}

@inproceedings{beller2017travistorrent,
  title={Travistorrent: Synthesizing travis ci and github for full-stack research on continuous integration},
  author={Beller, Moritz and Gousios, Georgios and Zaidman, Andy},
  booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)},
  pages={447--450},
  year={2017},
  organization={IEEE}
}

@misc{baak2019new,
      title={A new correlation coefficient between categorical, ordinal and interval variables with Pearson characteristics}, 
      author={M. Baak and R. Koopman and H. Snoek and S. Klous},
      year={2019},
      eprint={1811.11440},
      archivePrefix={arXiv},
      primaryClass={stat.ME}
}

@book{smith2011software,
  title={Software build systems: principles and experience},
  author={Smith, Peter},
  year={2011},
  publisher={Addison-Wesley Professional}
}

 @inproceedings{Fang_Endres_Zimmermann_Ford_Weimer_Leach_Huang_2023, address={New York, NY, USA}, series={ESEC/FSE 2023}, title={A Four-Year Study of Student Contributions to OSS vs. OSS4SG with a Lightweight Intervention}, ISBN={9798400703270}, url={https://dl.acm.org/doi/10.1145/3611643.3616250}, DOI={10.1145/3611643.3616250}, abstractNote={Modern software engineering practice and training increasingly rely on Open Source Software (OSS). The recent growth in demand for professional software engineers has led to increased contributions to, and usage of, OSS. However, there is limited understanding of the factors affecting how developers, and how new or student developers in particular, decide which OSS projects to contribute to, a process critical to OSS sustainability, access, adoption, and growth. To better understand OSS contributions from the developers of tomorrow, we conducted a four-year study with 1,361 students investigating the life cycle of their contributions (from project selection to pull request acceptance). During the study, we also delivered a lightweight intervention to promote the awareness of open source projects for social good (OSS4SG), OSS projects that have positive impacts in other domains. Using both quantitative and qualitative methods, we analyze student experience reports and the pull requests they submit. Compared to general OSS projects, we find significant differences in project selection (�� < 0.0001, effect size = 0.84), student motivation (�� < 0.01, effect size = 0.13), and increased pull-request acceptance rates for OSS4SG contributions. We also find that our intervention correlates with increased student contributions to OSS4SG (�� < 0.0001, effect size = 0.38). Finally, we analyze correlations of factors such as gender or working with a partner. Our findings may help improve the experience for new developers participating in OSS4SG and the quality of their contributions. We also hope our work helps educators, project leaders, and contributors to build a mutually-beneficial framework for the future growth of OSS4SG.}, booktitle={Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, publisher={Association for Computing Machinery}, author={Fang, Zihan and Endres, Madeline and Zimmermann, Thomas and Ford, Denae and Weimer, Westley and Leach, Kevin and Huang, Yu}, year={2023}, month=nov, pages={3–15}, collection={ESEC/FSE 2023} }
 @inproceedings{Fronchetti_Shepherd_Wiese_Treude_Gerosa_Steinmacher_2023, address={New York, NY, USA}, series={ESEC/FSE 2023}, title={Do CONTRIBUTING Files Provide Information about OSS Newcomers’ Onboarding Barriers?}, ISBN={9798400703270}, url={https://dl.acm.org/doi/10.1145/3611643.3616288}, DOI={10.1145/3611643.3616288}, abstractNote={Effectively onboarding newcomers is essential for the success of open source projects. These projects often provide onboarding guidelines in their ’CONTRIBUTING’ files (e.g., CONTRIBUTING.md on GitHub). These files explain, for example, how to find open tasks, implement solutions, and submit code for review. However, these files often do not follow a standard structure, can be too large, and miss barriers commonly found by newcomers. In this paper, we propose an automated approach to parse these CONTRIBUTING files and assess how they address onboarding barriers. We manually classified a sample of files according to a model of onboarding barriers from the literature, trained a machine learning classifier that automatically predicts the categories of each paragraph (precision: 0.655, recall: 0.662), and surveyed developers to investigate their perspective of the predictions’ adequacy (75% of the predictions were considered adequate). We found that CONTRIBUTING files typically do not cover the barriers newcomers face (52% of the analyzed projects missed at least 3 out of the 6 barriers faced by newcomers; 84% missed at least 2). Our analysis also revealed that information about choosing a task and talking with the community, two of the most recurrent barriers newcomers face, are neglected in more than 75% of the projects. We made available our classifier as an online service that analyzes the content of a given CONTRIBUTING file. Our approach may help community builders identify missing information in the project ecosystem they maintain and newcomers can understand what to expect in CONTRIBUTING files.}, booktitle={Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, publisher={Association for Computing Machinery}, author={Fronchetti, Felipe and Shepherd, David C. and Wiese, Igor and Treude, Christoph and Gerosa, Marco Aurélio and Steinmacher, Igor}, year={2023}, month=nov, pages={16–28}, collection={ESEC/FSE 2023} }
 @article{Gao_Treude_Zahedi_2023, title={“Add more config detail”: A Taxonomy of Installation Instruction Changes}, url={http://arxiv.org/abs/2312.03250}, DOI={10.48550/arXiv.2312.03250}, abstractNote={README files play an important role in providing installation-related instructions to software users and are widely used in open source software systems on platforms such as GitHub. However, these files often suffer from various documentation issues, leading to challenges in comprehension and potential errors in content. Despite their significance, there is a lack of systematic understanding regarding the documentation efforts invested in README files, especially in the context of installation-related instructions, which are crucial for users to start with a software project. To fill the research gap, we conducted a qualitative study, investigating 400 GitHub repositories with 1,163 README commits that focused on updates in installation-related sections. Our research revealed six major categories of changes in the README commits, namely pre-installation instructions, installation instructions, post-installation instructions, help information updates, document presentation, and external resource management. We further provide detailed insights into modification behaviours and offer examples of these updates. Based on our findings, we provide recommendations to practitioners for maintaining their README files, as well as motivations for future research directions. These recommendations and research directions encompass completeness, correctness and up-to-dateness, and information presentation consideration. The proposed research directions span the development of automated documentation tools and empirical studies to enhance comprehension of the needs of documentation users. Furthermore, we provide a comprehensive README template tailored to cover the installation-related sections for document maintainers, serving as a practical starting point for their efforts.}, note={arXiv:2312.03250 [cs]}, number={arXiv:2312.03250}, publisher={arXiv}, author={Gao, Haoyu and Treude, Christoph and Zahedi, Mansooreh}, year={2023}, month=dec }
 @inproceedings{Hassan_2019, title={Tackling build failures in continuous integration}, booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, publisher={IEEE}, author={Hassan, Foyzul}, year={2019}, pages={1242–1245} }
 @inproceedings{Hassan_Mostafa_Lam_Wang_2017, title={Automatic building of java projects in software repositories: A study on feasibility and challenges}, booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, publisher={IEEE}, author={Hassan, Foyzul and Mostafa, Shaikh and Lam, Edmund SL and Wang, Xiaoyin}, year={2017}, pages={38–47} }
 @inproceedings{Hickey_Nogin_2006, title={OMake: Designing a scalable build process}, booktitle={International Conference on Fundamental Approaches to Software Engineering}, publisher={Springer}, author={Hickey, Jason and Nogin, Aleksey}, year={2006}, pages={63–78} }
 @article{Hull_2021, title={The Role of Technical Communicators in Open-Source Software: A Systematic Review}, url={http://conservancy.umn.edu/handle/11299/219614}, abstractNote={To survive, Free/Open-Source Software (FOSS) projects need to attract and retain new contributors. Research has studied the many barriers that newcomers face when trying to contribute to FOSS projects. These barriers can cause newcomers to give up on contributing to FOSS projects. Many of the hurdles that newcomers face can be reduced or eliminated by skills that technical writers possess. In this paper, I aim to 1) present the results of a systematic literature review to identify the barriers that newcomers face, 2) identify roles that technical writers can take to help alleviate those barriers, and 3) identify ways that contributing to FOSS as part of the technical communication curriculum would be beneficial to students.}, note={Accepted: 2021-05-10T18:17:26Z}, author={Hull, Mary Frances}, year={2021}, language={en} }
 @article{Kwan_Schroter_Damian_2011, title={Does Socio-Technical Congruence Have an Effect on Software Build Success? A Study of Coordination in a Software Project}, volume={37}, ISSN={1939-3520}, DOI={10.1109/TSE.2011.29}, abstractNote={Socio-technical congruence is an approach that measures coordination by examining the alignment between the technical dependencies and the social coordination in the project. We conduct a case study of coordination in the IBM Rational Team Concert project, which consists of 151 developers over seven geographically distributed sites, and expect that high congruence leads to a high probability of successful builds. We examine this relationship by applying two congruence measurements: an unweighted congruence measure from previous literature, and a weighted measure that overcomes limitations of the existing measure. We discover that there is a relationship between socio-technical congruence and build success probability, but only for certain build types, and observe that in some situations, higher congruence actually leads to lower build success rates. We also observe that a large proportion of zero-congruence builds are successful, and that socio-technical gaps in successful builds are larger than gaps in failed builds. Analysis of the social and technical aspects in IBM Rational Team Concert allows us to discuss the effects of congruence on build success. Our findings provide implications with respect to the limits of applicability of socio-technical congruence and suggest further improvements of socio-technical congruence to study coordination.}, number={3}, journal={IEEE Transactions on Software Engineering}, author={Kwan, Irwin and Schroter, Adrian and Damian, Daniela}, year={2011}, month=may, pages={307–324} }
 @article{Leite_Rocha_Kon_Milojicic_Meirelles_2019, title={A survey of DevOps concepts and challenges}, volume={52}, number={6}, journal={ACM Computing Surveys (CSUR)}, publisher={ACM New York, NY, USA}, author={Leite, Leonardo and Rocha, Carla and Kon, Fabio and Milojicic, Dejan and Meirelles, Paulo}, year={2019}, pages={1–35} }
 @inproceedings{Lou_Chen_Zhang_Hao_Zhang_2019, address={New York, NY, USA}, series={ISSTA 2019}, title={History-driven build failure fixing: how far are we?}, ISBN={978-1-4503-6224-5}, url={https://dl.acm.org/doi/10.1145/3293882.3330578}, DOI={10.1145/3293882.3330578}, abstractNote={Build systems are essential for modern software development and maintenance since they are widely used to transform source code artifacts into executable software. Previous work shows that build systems break frequently during software evolution. Therefore, automated build-fixing techniques are in huge demand. In this paper we target a mainstream build system, Gradle, which has become the most widely used build system for Java projects in the open-source community (e.g., GitHub). HireBuild, state-of-the-art build-fixing tool for Gradle, has been recently proposed to fix Gradle build failures via mining the history of prior fixes. Although HireBuild has been shown to be effective for fixing real-world Gradle build failures, it was evaluated on only a limited set of build failures, and largely depends on the quality/availability of historical fix information. To investigate the efficacy and limitations of the history-driven build fix, we first construct a new and large build failure dataset from Top-1000 GitHub projects. Then, we evaluate HireBuild on the extended dataset both quantitatively and qualitatively. Inspired by the findings of the study, we propose a simplistic new technique that generates potential patches via searching from the present project under test and external resources rather than the historical fix information. According to our experimental results, the simplistic approach based on present information successfully fixes 2X more reproducible build failures than the state-of-art HireBuild based on historical fix information. Furthermore, our results also reveal various findings/guidelines for future advanced build failure fixing.}, booktitle={Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis}, publisher={Association for Computing Machinery}, author={Lou, Yiling and Chen, Junjie and Zhang, Lingming and Hao, Dan and Zhang, Lu}, year={2019}, month=jul, pages={43–54}, collection={ISSTA 2019} }
 @inproceedings{Lou_Chen_Cao_Hao_Zhang_2020, title={Understanding build issue resolution in practice: symptoms and fix patterns}, booktitle={Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering}, author={Lou, Yiling and Chen, Zhenpeng and Cao, Yanbin and Hao, Dan and Zhang, Lu}, year={2020}, pages={617–628} }
 @inproceedings{McIntosh_Adams_Nguyen_Kamei_Hassan_2011, title={An empirical study of build maintenance effort}, booktitle={2011 33rd International Conference on Software Engineering (ICSE)}, publisher={IEEE}, author={McIntosh, Shane and Adams, Bram and Nguyen, Thanh HD and Kamei, Yasutaka and Hassan, Ahmed E.}, year={2011}, pages={141–150} }
 @inproceedings{Mendez_Padala_Steine-Hanson_Hilderbrand_Horvath_Hill_Simpson_Patil_Sarma_Burnett_2018, address={New York, NY, USA}, series={ICSE ’18}, title={Open source barriers to entry, revisited: a sociotechnical perspective}, ISBN={978-1-4503-5638-1}, url={https://dl.acm.org/doi/10.1145/3180155.3180241}, DOI={10.1145/3180155.3180241}, abstractNote={Research has revealed that significant barriers exist when entering Open-Source Software (OSS) communities and that women disproportionately experience such barriers. However, this research has focused mainly on social/cultural factors, ignoring the environment itself --- the tools and infrastructure. To shed some light onto how tools and infrastructure might somehow factor into OSS barriers to entry, we conducted a field study with five teams of software professionals, who worked through five use-cases to analyze the tools and infrastructure used in their OSS projects. These software professionals found tool/infrastructure barriers in 7% to 71% of the use-case steps that they analyzed, most of which are tied to newcomer barriers that have been established in the literature. Further, over 80% of the barrier types they found include attributes that are biased against women.}, booktitle={Proceedings of the 40th International Conference on Software Engineering}, publisher={Association for Computing Machinery}, author={Mendez, Christopher and Padala, Hema Susmita and Steine-Hanson, Zoe and Hilderbrand, Claudia and Horvath, Amber and Hill, Charles and Simpson, Logan and Patil, Nupoor and Sarma, Anita and Burnett, Margaret}, year={2018}, month=may, pages={1004–1015}, collection={ICSE ’18} }
 @inproceedings{Neitsch_Wong_Godfrey_2012, title={Build system issues in multilanguage software}, booktitle={2012 28th IEEE International Conference on Software Maintenance (ICSM)}, publisher={IEEE}, author={Neitsch, Andrew and Wong, Kenny and Godfrey, Michael W.}, year={2012}, pages={140–149} }
 @inproceedings{Riungu-Kalliosaari_Mäkinen_Lwakatare_Tiihonen_Männistö_2016, title={DevOps adoption benefits and challenges in practice: A case study}, booktitle={International conference on product-focused software process improvement}, publisher={Springer}, author={Riungu-Kalliosaari, Leah and Mäkinen, Simo and Lwakatare, Lucy Ellen and Tiihonen, Juha and Männistö, Tomi}, year={2016}, pages={590–597} }
 @inproceedings{Saidani_Ouni_Chouchen_Mkaouer_2020, title={On the prediction of continuous integration build failures using search-based software engineering}, booktitle={Proceedings of the 2020 Genetic and Evolutionary Computation Conference Companion}, author={Saidani, Islem and Ouni, Ali and Chouchen, Moataz and Mkaouer, Mohamed Wiem}, year={2020}, pages={313–314} }
 @inproceedings{Salerno_de2023, address={New York, NY, USA}, series={ITiCSE 2023}, title={Barriers and Self-Efficacy: A Large-Scale Study on the Impact of OSS Courses on Student Perceptions}, ISBN={9798400701382}, url={https://dl.acm.org/doi/10.1145/3587102.3588789}, DOI={10.1145/3587102.3588789}, abstractNote={Open source software (OSS) development offers a unique opportunity for students in Software Engineering to experience and participate in large-scale software development, however, the impact of such courses on students’ self-efficacy and the challenges faced by students are not well understood. This paper aims to address this gap by analyzing data from multiple instances of OSS development courses at universities in different countries and reporting on how students’ self-efficacy changed as a result of taking the course, as well as the barriers and challenges faced by students.}, booktitle={Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 1}, publisher={Association for Computing Machinery}, author={Salerno, Larissa and de França Tonhão, Simone and Steinmacher, Igor and Treude, Christoph}, year={2023}, month=jun, pages={320–326}, collection={ITiCSE 2023} }
 @inproceedings{Steinmacher_Conte_Treude_Gerosa_2016, address={New York, NY, USA}, series={ICSE ’16}, title={Overcoming open source project entry barriers with a portal for newcomers}, ISBN={978-1-4503-3900-1}, url={https://dl.acm.org/doi/10.1145/2884781.2884806}, DOI={10.1145/2884781.2884806}, abstractNote={Community-based Open Source Software (OSS) projects are usually self-organized and dynamic, receiving contributions from distributed volunteers. Newcomer are important to the survival, long-term success, and continuity of these communities. However, newcomers face many barriers when making their first contribution to an OSS project, leading in many cases to dropouts. Therefore, a major challenge for OSS projects is to provide ways to support newcomers during their first contribution. In this paper, we propose and evaluate FLOSScoach, a portal created to support newcomers to OSS projects. FLOSScoach was designed based on a conceptual model of barriers created in our previous work. To evaluate the portal, we conducted a study with 65 students, relying on qualitative data from diaries, self-efficacy questionnaires, and the Technology Acceptance Model. The results indicate that FLOSScoach played an important role in guiding newcomers and in lowering barriers related to the orientation and contribution process, whereas it was not effective in lowering technical barriers. We also found that FLOSScoach is useful, easy to use, and increased newcomers’ confidence to contribute. Our results can help project maintainers on deciding the points that need more attention in order to help OSS project newcomers overcome entry barriers.}, booktitle={Proceedings of the 38th International Conference on Software Engineering}, publisher={Association for Computing Machinery}, author={Steinmacher, Igor and Conte, Tayana Uchoa and Treude, Christoph and Gerosa, Marco Aurélio}, year={2016}, month=may, pages={273–284}, collection={ICSE ’16} }
 @article{Vassallo_Proksch_Zemp_Gall_2020, title={Every build you break: developer-oriented assistance for build failure resolution}, volume={25}, ISSN={1573-7616}, DOI={10.1007/s10664-019-09765-y}, abstractNote={Continuous integration is an agile software development practice. Instead of integrating features right before a release, they are constantly being integrated into an automated build process. This shortens the release cycle, improves software quality, and reduces time to market. However, the whole process will come to a halt when a commit breaks the build, which can happen for several reasons, e.g., compilation errors or test failures, and fixing the build suddenly becomes a top priority. Developers not only have to find the cause of the build break and fix it, but they have to be quick in all of it to avoid a delay for others. Unfortunately, these steps require deep knowledge and are often time-consuming. To support developers in fixing a build break, we propose Bart, a tool that summarizes the reasons for Maven build failures and suggests possible solutions found on the internet. We will show in a case study with 17 participants that developers find Bart useful to understand build breaks and that using Bart substantially reduces the time to fix a build break, on average by 37%. We have also conducted a qualitative study to better understand the workflows and information needs when fixing builds. We found that typical workflows differ substantially between various error categories, and that several uncommon build errors are both very hard to investigate and to fix. These findings will be useful to inform future research in this area.}, number={3}, journal={Empirical Software Engineering}, author={Vassallo, Carmine and Proksch, Sebastian and Zemp, Timothy and Gall, Harald C.}, year={2020}, month=may, pages={2218–2257}, language={en} }
 @article{Zolfagharinia_Adams_Guéhéneuc_2019, title={A study of build inflation in 30 million CPAN builds on 13 Perl versions and 10 operating systems}, volume={24}, number={6}, journal={Empirical Software Engineering}, publisher={Springer}, author={Zolfagharinia, Mahdis and Adams, Bram and Guéhéneuc, Yann-Gaël}, year={2019}, pages={3933–3971} }

 @article{Seaman_1999, title={Qualitative methods in empirical studies of software engineering}, volume={25}, ISSN={1939-3520}, DOI={10.1109/32.799955}, abstractNote={While empirical studies in software engineering are beginning to gain recognition in the research community, this subarea is also entering a new level of maturity by beginning to address the human aspects of software development. This added focus has added a new layer of complexity to an already challenging area of research. Along with new research questions, new research methods are needed to study nontechnical aspects of software engineering. In many other disciplines, qualitative research methods have been developed and are commonly used to handle the complexity of issues involving human behaviour. The paper presents several qualitative methods for data collection and analysis and describes them in terms of how they might be incorporated into empirical studies of software engineering, in particular how they might be combined with quantitative methods. To illustrate this use of qualitative methods, examples from real software engineering studies are used throughout.}, number={4}, journal={IEEE Transactions on Software Engineering}, author={Seaman, C.B.}, year={1999}, month=jul, pages={557–572} }

 @inproceedings{Sulír_Porubän_2016, address={Amsterdam Netherlands}, title={A quantitative study of Java software buildability}, ISBN={978-1-4503-4638-2}, url={https://dl.acm.org/doi/10.1145/3001878.3001882}, DOI={10.1145/3001878.3001882}, booktitle={Proceedings of the 7th International Workshop on Evaluation and Usability of Programming Languages and Tools}, publisher={ACM}, author={Sulír, Matúš and Porubän, Jaroslav}, year={2016}, month=nov, pages={17–25}, language={en} }

 @article{Tufano_Palomba_Bavota_Di2017, title={There and back again: Can you compile that snapshot?}, volume={29}, ISSN={2047-7473, 2047-7481}, DOI={10.1002/smr.1838}, abstractNote={A broken snapshot represents a snapshot from a project’s change history that cannot be compiled. Broken snapshots can have significant implications for researchers, as they could hinder any analysis of the past project history that requires code to be compiled. Noticeably, while some broken snapshots may be observable in change history repositories (e.g., no longer available dependencies), some of them may not necessarily happen during the actual development. In this paper, we systematically study the compilability of broken snapshots in 219 395 snapshots belonging to 100 Java projects from the Apache Software Foundation, all relying on Maven as an automated build tool. We investigated broken snapshots from 2 different perspectives: (1) how frequently they happen and (2) likely causes behind them. The empirical results indicate that broken snapshots occur in most (96%) of the projects we studied and that they are mainly due to problems related to the resolution of dependencies. On average, only 38% of the change history of the analyzed systems is
              currently
              successfully compilable.}, number={4}, journal={Journal of Software: Evolution and Process}, author={Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea and Poshyvanyk, Denys}, year={2017}, month=apr, pages={e1838}, language={en} }

 @inproceedings{Rausch_Hummer_Leitner_Schulte_2017, title={An empirical analysis of build failures in the continuous integration workflows of java-based open-source software}, url={https://ieeexplore.ieee.org/abstract/document/7962384/}, booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)}, publisher={IEEE}, author={Rausch, Thomas and Hummer, Waldemar and Leitner, Philipp and Schulte, Stefan}, year={2017}, pages={345–355} }
 @inproceedings{Vassallo_Schermann_Zampetti_Romano_Leitner_Zaidman_Di, title={A tale of CI build failures: An open source and a financial organization perspective}, url={https://ieeexplore.ieee.org/abstract/document/8094420/}, booktitle={2017 IEEE international conference on software maintenance and evolution (ICSME)}, publisher={IEEE}, author={Vassallo, Carmine and Schermann, Gerald and Zampetti, Fiorella and Romano, Daniele and Leitner, Philipp and Zaidman, Andy and Di Penta, Massimiliano and Panichella, Sebastiano}, year={2017}, pages={183–193} }

@misc{Bitcoin,
  title = {Difference between downloading bitcoire core from bitcoin.org and compiling from Github},
  howpublished = {\url{https://bitcoin.stackexchange.com/questions/59875}},
  note = {Accessed: 2024-03-21}
}

@misc{openai2024chatgpt,
  author = {OpenAI},
  title = {ChatGPT ({Feb 24 version}) [Large language model]},
  year = {2024},
  url = {https://chat.openai.com}
}

@article{creswell2011best,
  title={Best practices for mixed methods research in the health sciences},
  author={Creswell, John W and Klassen, Ann Carroll and Plano Clark, Vicki L and Smith, Katherine Clegg and others},
  journal={Bethesda (Maryland): National Institutes of Health},
  volume={2013},
  pages={541--545},
  year={2011}
}

@inproceedings{choi2021open,
  title={Open Source Software Practices in CS2},
  author={Choi, Emma and Meng, Lisa and Hott, John},
  booktitle={Proceedings of the 21st Koli Calling International Conference on Computing Education Research},
  pages={1--5},
  year={2021}
}

@article{nascimento2015open,
  title={Open source projects in software engineering education: a mapping study},
  author={Nascimento, Debora MC and Almeida Bittencourt, Roberto and Chavez, Christina},
  journal={Computer Science Education},
  volume={25},
  number={1},
  pages={67--114},
  year={2015},
  publisher={Taylor \& Francis}
}

@misc{github,
  author={github},
  title={GitHub},
  year={2022},
  url={https://github.com/},
}