\section{Related Work: Combining LLMs and ZKPs}
Efforts to combine LLMs with ZKP technology are in their early stages. zkLLM **Luu, "Zero-Knowledge Proofs for Deep Learning"** aims to enable verification of the entire inference process of an LLM using ZKP. In this framework, the model owner commits to their model parameters, and the commitment is used to prove that the inference process has been executed correctly using those parameters. Meanwhile, HuRef **Mittal et al., "Human-Readable Fingerprints for Deep Learning Models"** focuses on copyright protection for LLMs by proposing “human-readable fingerprints” to identify LLMs. ZKP is used to demonstrate that the claimed LLM parameters were used to generate the fingerprints accurately. While zkLLM and HuRef primarily focus on model verification using ZKP technology, Singh’s study **Singh et al., "Zero-Knowledge Proofs for Deep Learning: Applications to User Authentication"** explores potential applications related to the data input to LLMs, such as user authentication, prompt analysis, source data verification, and source data relevance filtering. In this context, our use case specifically emphasizes the protection of user-provided data. A related example is presented by Cai et al., **Cai et al., "Secure Chatbots for Healthcare Applications"**, who demonstrated a chatbot in the healthcare domain using ZKP to protect sensitive user information. However, their ZKP application was limited to four data points—age, height, weight, and medical history—and relied on a simple implementation, such as range proof verification, resulting in a relatively small-scale application. Additionally, the design of prompts to effectively utilize ZKP-generated outputs within LLM chatbots remains an unexplored area. This field is evolving rapidly and highlights a promising direction for privacy-focused LLM applications. However, further advancements require more practical implementations and detailed evaluations tailored to specific and complex use cases.

\begin{table*}[tbp]
\centering
\small
\setlength{\tabcolsep}{3pt}
\renewcommand{\arraystretch}{1}
\caption{Comparative Analysis of Popular zkVM Projects}
\label{tab:zkvm_comparison}
\vspace{-0.4cm}
\resizebox{0.9\textwidth}{!}{
\begin{threeparttable}
\begin{tabular}{lllccl}
\toprule
\textbf{Project} & \textbf{Supported Languages} & \textbf{ISA (Instruction Set Architecture)} & \textbf{Proof System} & \textbf{Crate/Package Import Support} & \textbf{Private Inputs} \\
\midrule
CairoVM (Starkware) & Cairo & Proprietary Architecture & STARK & No & Yes \\
MidenVM (Polygon Miden) & Miden Assembly & Proprietary Architecture & STARK & No & Yes \\
Valida & C, Rust & Proprietary Architecture & SNARK & No & N/A\tnote{*} \\
Nexus & Rust (no std) & General Architecture (RISC-V) & SNARK & No & Yes \\
zkWASM & C (no std), Rust (no std) & General Architecture (WASM) & SNARK & Yes & Yes \\
Jolt (a16z) & Rust & General Architecture (RISC-V) & SNARK & Yes & N/A\tnote{*} \\
SP1 (Succinct Labs) & Rust & General Architecture (RISC-V) & STARK/SNARK & Yes & Yes \\
RiscZero & Rust & General Architecture (RISC-V) & STARK/SNARK & Yes & Yes \\
\bottomrule
\end{tabular}
\begin{tablenotes}
\footnotesize
%\item Projects are selected based on their capability to operate in off-blockchain environments, enabling proof generation and verification outside the blockchain. 
\item [*] N/A indicates features that are currently not implemented as of this writing but may be added in future updates.

\end{tablenotes}
\end{threeparttable}
}
\vspace{-0.4cm}
\end{table*}