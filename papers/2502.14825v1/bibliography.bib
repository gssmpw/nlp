@article{RICH,
   title={RICH: OPEN-SOURCE HYDRODYNAMIC SIMULATION ON A MOVING VORONOI MESH},
   volume={216},
   ISSN={1538-4365},
   url={http://dx.doi.org/10.1088/0067-0049/216/2/35},
   DOI={10.1088/0067-0049/216/2/35},
   number={2},
   journal={The Astrophysical Journal Supplement Series},
   publisher={American Astronomical Society},
   author={Yalinewich, Almog and Steinberg, Elad and Sari, Re’em},
   year={2015},
   month=feb, pages={35}
}

@article{AREPO,
   title={E pur si muove:Galilean-invariant cosmological hydrodynamical simulations on a moving mesh},
   volume={401},
   ISSN={1365-2966},
   url={http://dx.doi.org/10.1111/j.1365-2966.2009.15715.x},
   DOI={10.1111/j.1365-2966.2009.15715.x},
   number={2},
   journal={Monthly Notices of the Royal Astronomical Society},
   publisher={Oxford University Press (OUP)},
   author={Springel, Volker},
   year={2010},
   month=jan, pages={791–851}
}

@INPROCEEDINGS{HUGO_DELAUNAY_VORONOI,
  author={Ledoux, Hugo},
  booktitle={4th International Symposium on Voronoi Diagrams in Science and Engineering (ISVD 2007)}, 
  title={Computing the 3D Voronoi Diagram Robustly: An Easy Explanation}, 
  year={2007},
  volume={},
  number={},
  pages={117-129},
  keywords={Robustness;Algorithm design and analysis;Programming profession;Data mining;Geographic Information Systems;Distributed computing;Computational geometry;Sorting;Application software;Data structures},
  doi={10.1109/ISVD.2007.10}
}

@article{VORONOI_TESS,
author = {Watson, Dave},
issn = {0098-3004},
journal = {Computers \& geosciences},
language = {eng},
number = {8},
pages = {1209-1210},
title = {Spatial tessellations: concepts and applications of voronoi diagrams},
volume = {19},
year = {1993},
}


@ARTICLE{DELAUNAY_ALL,
  author={Elshakhs, Yahia S. and Deliparaschos, Kyriakos M. and Charalambous, Themistoklis and Oliva, Gabriele and Zolotas, Argyrios},
  journal={IEEE Access}, 
  title={A Comprehensive Survey on Delaunay Triangulation: Applications, Algorithms, and Implementations Over CPUs, GPUs, and FPGAs}, 
  year={2024},
  volume={12},
  number={},
  pages={12562-12585},
  keywords={Graphics processing units;Field programmable gate arrays;Three-dimensional displays;Surveys;Central Processing Unit;Geographic information systems;Electrical engineering;Delaunay triangulation;applications of Delaunay triangulation;algorithmic approaches to Delaunay triangulation;CPU implementation of Delaunay triangulation;GPU implementation of Delaunay triangulation;FPGA implementation of Delaunay triangulation;Voronoi diagram;CPU;GPU;FPGA},
  doi={10.1109/ACCESS.2024.3354709}}

@article{DeWall,
title = {DeWall: A fast divide and conquer Delaunay triangulation algorithm in Ed},
journal = {Computer-Aided Design},
volume = {30},
number = {5},
pages = {333-341},
year = {1998},
issn = {0010-4485},
doi = {https://doi.org/10.1016/S0010-4485(97)00082-1},
url = {https://www.sciencedirect.com/science/article/pii/S0010448597000821},
author = {P Cignoni and C Montani and R Scopigno},
keywords = {Delaunay triangulation, divide and conquer, uniform grids},
abstract = {The paper deals with Delaunay Triangulations (DT) in Ed space. This classic computational geometry problem is studied from the point of view of the efficiency, extendibility to any dimensionality, and ease of implementation. A new solution to DT is proposed, based on an original interpretation of the well-known Divide and Conquer paradigm. One of the main characteristics of this new algorithm is its generality: it can be simply extended to triangulate point sets in any dimension. The technique adopted is very efficient and presents a subquadratic behaviour in real applications in E3, although its computational complexity does not improve the theoretical bounds reported in the literature. An evaluation of the performance on a number of datasets is reported, together with a comparison with other DT algorithms.}
}

@article{WU2023102995,
title = {ParVoro++: A scalable parallel algorithm for constructing 3D Voronoi tessellations based on kd-tree decomposition},
journal = {Parallel Computing},
volume = {115},
pages = {102995},
year = {2023},
issn = {0167-8191},
doi = {https://doi.org/10.1016/j.parco.2023.102995},
url = {https://www.sciencedirect.com/science/article/pii/S0167819123000017},
author = {Guoqing Wu and Hongyun Tian and Guo Lu and Wei Wang},
keywords = {Computational geometry, Voronoi tessellation, Parallel algorithm, Distributed-memory},
abstract = {The Voronoi tessellation is a fundamental geometric data structure which has numerous applications in various scientific and technological fields. For large particle datasets, computing Voronoi tessellations must be conducted in parallel on a distributed-memory supercomputer in order to satisfy time and memory-size constraints. However, due to load balance and communication, the parallelization of the Voronoi tessellation renders a challenge. In this paper, we present a scalable parallel algorithm for constructing 3D Voronoi tessellations, which evenly distributes the input particles between blocks through kd-tree decomposition. In order to construct the correct global Voronoi topology, we investigate both parametric and non-parametric methods for particle communication among the blocks of a spatial decomposition. The algorithm is implemented exploiting process-level and thread-level parallelization and can be used in a diverse architectural landscape. Using datasets containing up to 330 million particles, we show that our algorithm achieves parallel efficiency up to 57% using 4096 cores on a distributed-memory computer. Moreover, we compare our algorithm with previous attempts to parallelize Voronoi tessellations showing encouraging improvements in terms of computation time.}
}

@misc{PARAVT,
      title={PARAVT: Parallel Voronoi Tessellation code}, 
      author={Roberto E. Gonzalez},
      year={2016},
      eprint={1601.06429},
      archivePrefix={arXiv},
      primaryClass={astro-ph.IM},
      url={https://arxiv.org/abs/1601.06429}, 
}

@INPROCEEDINGS{DELAUNAY_KD,
  author={Morozov, Dmitriy and Peterka, Tom},
  booktitle={SC '16: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}, 
  title={Efficient Delaunay Tessellation through K-D Tree Decomposition}, 
  year={2016},
  volume={},
  number={},
  pages={728-738},
  keywords={Three-dimensional displays;Approximation algorithms;Parallel algorithms;Algorithm design and analysis;Computational modeling;Octrees;Clustering algorithms},
  doi={10.1109/SC.2016.61}}

@article{BORRELL2018264,
title = {Parallel mesh partitioning based on space filling curves},
journal = {Computers \& Fluids},
volume = {173},
pages = {264-272},
year = {2018},
issn = {0045-7930},
doi = {https://doi.org/10.1016/j.compfluid.2018.01.040},
url = {https://www.sciencedirect.com/science/article/pii/S0045793018300446},
author = {R. Borrell and J.C. Cajas and D. Mira and A. Taha and S. Koric and M. Va\`zquez and G. Houzeaux},
keywords = {Space filling curve, SFC, Mesh partitioning, Geometric partitioning, Parallel computing},
abstract = {Larger supercomputers allow the simulation of more complex phenomena with increased accuracy. Eventually this requires finer and thus also larger geometric discretizations. In this context, and extrapolating to the Exascale paradigm, meshing operations such as generation, deformation, adaptation/regeneration or partition/load balance, become a critical issue within the simulation workflow. In this paper we focus on mesh partitioning. In particular, we present a fast and scalable geometric partitioner based on Space Filling Curves (SFC), as an alternative to the standard graph partitioning approach. We have avoided any computing or memory bottleneck in the algorithm, while we have imposed that the solution achieved is independent (discounting rounding off errors) of the number of parallel processes used to compute it. The performance of the SFC-based partitioner presented has been demonstrated using up to 4096 CPU-cores in the Blue Waters supercomputer.}
}

@article{METIS,
author = {Karypis, George and Kumar, Vipin},
title = {A Fast and High Quality Multilevel Scheme for Partitioning Irregular Graphs},
journal = {SIAM Journal on Scientific Computing},
volume = {20},
number = {1},
pages = {359-392},
year = {1998},
doi = {10.1137/S1064827595287997},

URL = { 
    
        https://doi.org/10.1137/S1064827595287997
    
    

},
eprint = { 
    
        https://doi.org/10.1137/S1064827595287997
    
    

}
,
    abstract = { Recently, a number of researchers have investigated a class of graph partitioning algorithms that reduce the size of the graph by collapsing vertices and edges, partition the smaller graph, and then uncoarsen it to construct a partition for the original graph [Bui and Jones, Proc. of the 6th SIAM Conference on Parallel Processing for Scientific Computing, 1993, 445--452; Hendrickson and Leland, A Multilevel Algorithm for Partitioning Graphs, Tech. report SAND 93-1301, Sandia National Laboratories, Albuquerque, NM, 1993]. From the early work it was clear that multilevel techniques held great promise; however, it was not knownif they can be made to consistently produce high quality partitions for graphs arising in a wide range of application domains. We investigate the effectiveness of many different choices for all three phases: coarsening, partition of the coarsest graph, and refinement. In particular, we present a new coarsening heuristic (called heavy-edge heuristic) for which the size of the partition of the coarse graph is within a small factor of the size of the final partition obtained after multilevel refinement. We also present a much faster variation of the Kernighan--Lin (KL) algorithm for refining during uncoarsening. We test our scheme on a large number of graphs arising in various domains including finite element methods, linear programming, VLSI, and transportation. Our experiments show that our scheme produces partitions that are consistently better than those produced by spectral partitioning schemes in substantially smaller time. Also, when our scheme is used to compute fill-reducing orderings for sparse matrices, it produces orderings that have substantially smaller fill than the widely used multiple minimum degree algorithm. }
}

@INPROCEEDINGS {7336274,
author = {A. Sasidharan and J. M. Dennis and M. Snir},
booktitle = {2015 IEEE 17th International Conference on High Performance Computing and Communications (HPCC), 2015 IEEE 7th International Symposium on Cyberspace Safety and Security (CSS) and 2015 IEEE 12th International Conf on Embedded Software and Systems (ICESS)},
title = {A General Space-filling Curve Algorithm for Partitioning 2D Meshes},
year = {2015},
volume = {},
issn = {},
pages = {875-879},
abstract = {This paper describes a recursive algorithm for constructing a generalSpace-Filling Curve (SFC) for an arbitrary distribution of points in2D. We use the SFC to partition 2D meshes, both structured andunstructured, and compare the quality of partitions with traditionalSFCs and the multilevel partitioning schemes of Metis and Scotch. The algorithm is independent of the geometry of the mesh and can be easily adapted to irregular meshes. We discuss the advantages of SFCs over multilevel partitioners for meshes in scientific simulations. We define three performance metrics for a reasonable comparison ofpartitions: volume or load per partition, degree or the number ofdistinct edges of a partition in the communication graph andcommunication volume or the sum of the weights of outgoing edges foreach partition in the communication graph. We propose a performancemodel for modern architectures using these metrics. We find ourpartitions comparable to and in some cases better than the bestmultilevel partitions, while being computed much faster. Unlike Metis, our hierarchical approach yields good hierarchical partitions (e.g., forpartitioning to node and core level), and is appropriate for adaptivemesh refinement kernels.},
keywords = {partitioning algorithms;measurement;electronic mail;computer science;shape;load modeling;adaptation models},
doi = {10.1109/HPCC-CSS-ICESS.2015.192},
url = {https://doi.ieeecomputersociety.org/10.1109/HPCC-CSS-ICESS.2015.192},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {aug}
}

@artice{hilbert_testing,
author = {M. Filipiak},
title={Mesh reordering in Fluidity using Hilbert space-filling curves},
year = {2013}
}

@ARTICLE{499920,
  author={Gotsman, C. and Lindenbaum, M.},
  journal={IEEE Transactions on Image Processing}, 
  title={On the metric properties of discrete space-filling curves}, 
  year={1996},
  volume={5},
  number={5},
  pages={794-797},
  keywords={Image reconstruction;Entropy;Image processing;Iterative algorithms;X-ray imaging;Multidimensional systems;Radioactive decay;Positron emission tomography;Convergence;Image converters},
  doi={10.1109/83.499920}}

@ARTICLE{908985,
  author={Moon, B. and Jagadish, H.V. and Faloutsos, C. and Saltz, J.H.},
  journal={IEEE Transactions on Knowledge and Data Engineering}, 
  title={Analysis of the clustering properties of the Hilbert space-filling curve}, 
  year={2001},
  volume={13},
  number={1},
  pages={124-141},
  keywords={Hilbert space;Multidimensional systems;Image coding;Image databases;Geographic Information Systems;Moon;Shape;Time measurement;Fractals;Helium},
  doi={10.1109/69.908985}}

@INPROCEEDINGS{7013068,
  author={Peterka, Tom and Morozov, Dmitriy and Phillips, Carolyn},
  booktitle={SC '14: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}, 
  title={High-Performance Computation of Distributed-Memory Parallel 3D Voronoi and Delaunay Tessellation}, 
  year={2014},
  volume={},
  number={},
  pages={997-1007},
  keywords={Libraries;Parallel algorithms;Computational geometry;Three-dimensional displays;Face;Data models;Heuristic algorithms;computational geometry;Voronoi;Delaunay tessellation},
  doi={10.1109/SC.2014.86}}


@inproceedings{curve_balancing_comparison,
author = {Harlacher, Daniel and Klimach, Harald and Roller, Sabine and Siebert, Christian and Wolf, Felix},
year = {2012},
month = {05},
pages = {1661-1669},
title = {Dynamic Load Balancing for Unstructured Meshes on Space-Filling Curves},
isbn = {978-1-4673-0974-5},
journal = {Proceedings of the 2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops, IPDPSW 2012},
doi = {10.1109/IPDPSW.2012.207}
}

@article{BaumanK.E.2006Tdfo,
abstract = {It is proved that the maximum value of the ratio vertical bar p(x) - p(y)vertical bar(2)/vertical bar x-y vertical bar for the Peano-Hilbert curve p: [0, 1] = I -> I-2 is equal to 6.},
author = {Bauman, K. E.},
address = {NEW YORK},
copyright = {Copyright 2006 Elsevier B.V., All rights reserved.},
issn = {0001-4346},
journal = {Mathematical Notes},
keywords = {Mathematics ; Peano-Hilbert curve ; Physical Sciences ; Science & Technology ; Square-to-linear dilation factor ; Square-to-linear ratio},
language = {eng},
number = {5-6},
pages = {609-620},
publisher = {Springer Nature},
title = {The dilation factor of the Peano-Hilbert curve},
volume = {80},
year = {2006},
}

@article{Vorocpp,
    author = {Rycroft, Chris H.},
    title = "{VORO++: A three-dimensional Voronoi cell library in C++}",
    journal = {Chaos: An Interdisciplinary Journal of Nonlinear Science},
    volume = {19},
    number = {4},
    pages = {041111},
    year = {2009},
    month = {10},
    abstract = "{VORO++1,2 is an open source software library for the computation of the Voronoi tessellation, originally proposed by Georgy Voronoi in 1907. For a set of points in a domain, the tessellation is defined by associating a cell of space to each point that is closer to that point than any other. It has applications in many fields, and in physics and materials science it has been used extensively in the analysis of particle systems, for tracking changes in density, or for examining local neighbor relationships. While other mature software libraries exist (particularly QHULL, used by MATLAB), VORO++ has been designed specifically for handling large-scale three-dimensional research problems where flexibility is required. It is structured around several C++ classes and is designed to be easily modified and incorporated into other programs. It employs a direct method of calculation whereby each cell is computed individually—this perspective is useful in many physical applications which often rely on cell-based statistics, and it allows the computation of individual cells to be tailored to account for walls and other complex boundary conditions. Plane wall surfaces can be computed exactly (Fig. 1), while curved surfaces (Figs. 2 and 3) can be well-approximated. The code deals with truncation errors in floating point arithmetic, and can natively handle degenerate cases where Voronoi cells with high-order vertices may form. Neighbor calculations and tessellations for polydisperse particle packings (Fig. 4) are also supported. Since each cell is computed individually, it is straightforward to generalize to a multicore architecture and achieve very high parallel efficiency.}",
    issn = {1054-1500},
    doi = {10.1063/1.3215722},
    url = {https://doi.org/10.1063/1.3215722},
    eprint = {https://pubs.aip.org/aip/cha/article-pdf/doi/10.1063/1.3215722/13277008/041111\_1\_online.pdf},
}

@article{SIMON1991135,
title = {Partitioning of unstructured problems for parallel processing},
journal = {Computing Systems in Engineering},
volume = {2},
number = {2},
pages = {135-148},
year = {1991},
note = {Parallel Methods on Large-scale Structural Analysis and Physics Applications},
issn = {0956-0521},
doi = {https://doi.org/10.1016/0956-0521(91)90014-V},
url = {https://www.sciencedirect.com/science/article/pii/095605219190014V},
author = {H.D. Simon},
abstract = {Many large-scale computational problems are based on unstructured computational domains. Primary examples are unstructured grid calculations based on finite volume methods in computational fluid dynamics, or structural analysis problems based on finite element approximations. Here we will address the question of how to distribute such unstructured computational domains over a large number of processors in a MIMD machine with distributed memory. A graph theoretical framework for these problems will be established. Based on this framework three decomposition algorithms will be introduced. In particular a new decomposition algorithm will be discussed, which is based on the computation of an eigenvector of the Laplacian matrix associated with the graph. Numerical comparisons on large-scale two- and three-dimensional problems demonstrate the superiority of the new spectral bisection algorithm.}
}

@techreport{CGAL_VORONOI,
  TITLE = {{Delaunay Tessellations and Voronoi Diagrams in CGAL}},
  AUTHOR = {Alliez, Pierre and Delage, Christophe and Karavelas, Menelaos I and Pion, Sylvain and Teillaud, Monique and Yvinec, Mariette},
  URL = {https://inria.hal.science/hal-01421021},
  TYPE = {Research Report},
  INSTITUTION = {{INRIA Sophia Antipolis - M{\'e}diterran{\'e}e ; University of Crete}},
  YEAR = {2010},
  PDF = {https://inria.hal.science/hal-01421021/file/jigsaw.pdf},
  HAL_ID = {hal-01421021},
  HAL_VERSION = {v1},
}

@article{ChenJie2022Gcfs,
abstract = {The general method of graph coarsening or graph reduction has been a remarkably useful and ubiquitous tool in scientific computing and it is now just starting to have a similar impact in machine learning. The goal of this paper is to take a broad look into coarsening techniques that have been successfully deployed in scientific computing and see how similar principles are finding their way in more recent applications related to machine learning. In scientific computing, coarsening plays a central role in algebraic multigrid methods as well as the related class of multilevel incomplete LU factorizations. In machine learning, graph coarsening goes under various names, e.g., graph downsampling or graph reduction. Its goal in most cases is to replace some original graph by one which has fewer nodes, but whose structure and characteristics are similar to those of the original graph. As will be seen, a common strategy in these methods is to rely on spectral properties to define the coarse graph.},
author = {Chen, Jie and Saad, Yousef and Zhang, Zechen},
address = {Cham},
copyright = {The Author(s) 2022},
issn = {2254-3902},
journal = {SeMA journal},
keywords = {Applications of Mathematics ; Coarsening ; Computation ; Graph Coarsening ; Graphs and Networks ; Hierarchical methods. Graph Neural Networks ; Machine learning ; Mathematics ; Mathematics and Statistics ; Multigrid methods ; Multilevel methods ; Reduction ; Software},
language = {eng},
number = {1},
pages = {187-223},
publisher = {Springer International Publishing},
title = {Graph coarsening: from scientific computing to machine learning},
volume = {79},
year = {2022},
}

@ARTICLE{KL,
  author={Kernighan, B. W. and Lin, S.},
  journal={The Bell System Technical Journal}, 
  title={An efficient heuristic procedure for partitioning graphs}, 
  year={1970},
  volume={49},
  number={2},
  pages={291-307},
  keywords={},
  doi={10.1002/j.1538-7305.1970.tb01770.x}}

@inproceedings{JOSTLE,
  title={JOSTLE: multilevel graph partitioning software: an overview},
  author={Chris Walshaw and Mark Cross},
  year={2007},
  url={https://api.semanticscholar.org/CorpusID:59804754}
}

@article{benchmark_graph_frameworks,
author = {Bokhare, Anuja and Metkewar, Pravin},
year = {2019},
month = {11},
pages = {775-787},
title = {Benchmarking of Graph Partitioning Tools and Techniques},
volume = {8},
journal = {International Journal of Recent Technology and Engineering (IJRTE)},
doi = {10.35940/ijrte.D7369.118419}
}

@article{
SIMULATED_ANNEALING,
author = {S. Kirkpatrick  and C. D. Gelatt  and M. P. Vecchi },
title = {Optimization by Simulated Annealing},
journal = {Science},
volume = {220},
number = {4598},
pages = {671-680},
year = {1983},
doi = {10.1126/science.220.4598.671},
URL = {https://www.science.org/doi/abs/10.1126/science.220.4598.671},
eprint = {https://www.science.org/doi/pdf/10.1126/science.220.4598.671},
abstract = {There is a deep and useful connection between statistical mechanics (the behavior of systems with many degrees of freedom in thermal equilibrium at a finite temperature) and multivariate or combinatorial optimization (finding the minimum of a given function depending on many parameters). A detailed analogy with annealing in solids provides a framework for optimization of the properties of very large and complex systems. This connection to statistical mechanics exposes new information and provides an unfamiliar perspective on traditional optimization problems and methods.}}

@masterthesis{YANIV,
    author = {Yaniv Romem},
    title = {Utilizing Simulated Annealing for Static and Dynamic Data Mapping to Distributed Memory Multiprocessors},
    school = {Hebrew University of Jerusalem},
    year = 1992
}

@misc{MIZRACHI,
abstract = {The Voronoi diagram is a fundamental mathematical structure with numerous scientific applications. It is built from a set of points, denoted as S, and consists of cells. Each cell comprises points in space that are closest to one of the points in set S compared to all the other points in S. A Vornooi cell can be shown to be a convex polyhedron. Constructing a Voronoi diagram, which involves calculating the cells and their geometrical boundaries, has been extensively researched, with several known algorithms. However, there is a need for a distributed tessellation where the points are distributed across multiple processors, each with its own memory. The goal is for each processor to contain the appropriate cells of its given points, creating a local tessellation. Ultimately, the union of these local tessellations should form the same tessellation that would have been built if all points were gathered on a single processor and the Voronoi tessellation was created there, which is referred to as a global tessellation. Our primary motivation for accelerating the distributed Voronoi construction is using Voronoi tessellation in physics simulations. We represent frameworks that solve the distributed Voronoi tessellation problem and focus on an algorithm that builds a dual equivalent spatial structure called Delaunay triangulation. We also consider two algorithms for a distributed Delaunay triangulation and present an improvement for them. Since communication and synchronization are needed between the processors in a distributed Delaunay triangulation build, we are allowed to redistribute the initial points among the processors in order to make a better communication pattern between processors. This operation is also called load balancing or mesh partitioning. This problem is equivalent to the graph partitioning problem and turns out to be NP-hard. We cover several heuristics to solve the graph partitioning problem and then present a known heuristic to solve the mesh partitioning problem called curve-based balancing, especially using a space-filling curve (SFC) called the Hilbert curve. This method has multiple issues, especially when the decomposed space shape is non-rectangular. We introduce a novel technique for overcoming this problem in several scenarios, called kernelization, and later evaluate this technique in a shape called a frustum. The new approach does not impair the running time, which is a proof of concept for the proposed method.},
author = {Mizrachi, Maor and Steinberg, Elad and Raveh, Barak and Hebrew University of Jerusalem, degree granting institution},
address = {Jerusalem},
booktitle = {Parallel Constructing of Voronoi Diagrams and Delaunay Triangulations for Distributed Memory Physics Simulations},
language = {eng},
publisher = {[The Hebrew University of Jerusalem]},
title = {Parallel Constructing of Voronoi Diagrams and Delaunay Triangulations for Distributed Memory Physics Simulations },
year = {2024},
keywords = {Computer capacity -- Management},
}

@article{survey,
author = {Nr, Vol and Fjallstrom, Per-Olof},
year = {1998},
month = {10},
pages = {},
journal = {},
title = {Algorithms for Graph Partitioning: A Survey}
}

@article{RSB,
author = {Pothen, Alex and Simon, Horst D. and Liou, Kang-Pu},
title = {Partitioning Sparse Matrices with Eigenvectors of Graphs},
journal = {SIAM Journal on Matrix Analysis and Applications},
volume = {11},
number = {3},
pages = {430-452},
year = {1990},
doi = {10.1137/0611030},
URL = { 
        https://doi.org/10.1137/0611030
},
eprint = { 
        https://doi.org/10.1137/0611030
}
,
    abstract = { The problem of computing a small vertex separator in a graph arises in the context of computing a good ordering for the parallel factorization of sparse, symmetric matrices. An algebraic approach for computing vertex separators is considered in this paper. It is, shown that lower bounds on separator sizes can be obtained in terms of the eigenvalues of the Laplacian matrix associated with a graph. The Laplacian eigenvectors of grid graphs can be computed from Kronecker products involving the eigenvectors of path graphs, and these eigenvectors can be used to compute good separators in grid graphs. A heuristic algorithm is designed to compute a vertex separator in a general graph by first computing an edge separator in the graph from an eigenvector of the Laplacian matrix, and then using a maximum matching in a subgraph to compute the vertex separator. Results on the quality of the separators computed by the spectral algorithm are presented, and these are compared with separators obtained from other algorithms for computing separators. Finally, the time required to compute the Laplacian eigenvector is reported, and the accuracy with which the eigenvector must be computed to obtain good separators is considered. The spectral algorithm has the advantage that it can be implemented on a medium-size multiprocessor in a straightforward manner. }
}

@article{Edelsbrunner_Shah_1992,
    title={Incremental topological flipping works for regular triangulations},
    author={Edelsbrunner, H.
    and Shah, N. R.},
    title={Incremental topological flipping works for regular triangulations},
    journal={Algorithmica},
    year={1996},
    month={Mar},
    day={01},
    volume={15},
    number={3},
    pages={223-241},
    abstract={A set ofn weighted points in general position in ℝddefines a unique regular triangulation. This paper proves that if the points are added one by one, then flipping in a topological order will succeed in constructing this triangulation. If, in addition, the points are added in a random sequence and the history of the flips is used for locating the next point, then the algorithm takes expected time at mostO(nlogn+n[d/2]). Under the assumption that the points and weights are independently and identically distributed, the expected running time is between proportional to and a factor logn more than the expected size of the regular triangulation. The expectation is over choosing the points and over independent coin-flips performed by the algorithm.},
    issn={1432-0541},
    doi={10.1007/BF01975867},
    url={https://doi.org/10.1007/BF01975867}
}

@article{Duffell_2011,
   title={TESS: A RELATIVISTIC HYDRODYNAMICS CODE ON A MOVING VORONOI MESH},
   volume={197},
   ISSN={1538-4365},
   url={http://dx.doi.org/10.1088/0067-0049/197/2/15},
   DOI={10.1088/0067-0049/197/2/15},
   number={2},
   journal={The Astrophysical Journal Supplement Series},
   publisher={American Astronomical Society},
   author={Duffell, Paul C. and MacFadyen, Andrew I.},
   year={2011},
   month=nov, pages={15} }

@misc{singh2024votessmultitargetgpucapableparallel,
      title={votess: A multi-target, GPU-capable, parallel Voronoi tessellator}, 
      author={Samridh Dev Singh and Chris Byrohl and Dylan Nelson},
      year={2024},
      eprint={2412.04514},
      archivePrefix={arXiv},
      primaryClass={astro-ph.IM},
      url={https://arxiv.org/abs/2412.04514}, 
}

@article{LO201288,
title = {Parallel Delaunay triangulation in three dimensions},
journal = {Computer Methods in Applied Mechanics and Engineering},
volume = {237-240},
pages = {88-106},
year = {2012},
issn = {0045-7825},
doi = {https://doi.org/10.1016/j.cma.2012.05.009},
url = {https://www.sciencedirect.com/science/article/pii/S0045782512001570},
author = {S.H. Lo},
keywords = {Parallel Delaunay triangulation, Partition into cells and zones, Point insertion, Three dimensions},
abstract = {A generic parallel Delaunay triangulation scheme by means of zonal partition of points is proposed. For efficient Delaunay triangulation, points are first sorted into cells, each of which is allocated roughly equal number of points. The cells are naturally grouped into zones, in which Delaunay triangulation is constructed by simultaneous point insertion cell by cell within each zone. Tetrahedra at the boundary between zones are created in parallel by adding layers of cells at the boundary of each zone to ensure that circumspheres of boundary tetrahedra contain no points in their interior. Redundant tetrahedra at the boundary between zones can be easily eliminated by individual processors in a completely independent manner by means of the elegant minimum vertex allocation scheme, such that a simplex with k vertices from zones (z1,z2,…,zk) is allocated to zone z=min(z1,z2,…,zk). The parallel 3D Delaunay triangulation algorithm has been coded in Intel FORTRAN VS2010. The parallel zonal insertion on a PC can boost the speed of the single-processor insertion by 4.5 times for the insertion of 50 million randomly generated spatial points in 133s. The scalability of the parallel zonal insertion algorithm has also been tested on a proper multi-core machine with 12 processors running on OpenMP parallel directives with shared memory. Provided the number of zones is an integral multiple of the number of processors used, almost 100% scalability at 90% efficiency was observed for parallel insertion using 2, 4, 6, 8 and 12 processors, and a 10.8 time speed up was recorded in a parallel insertion of 20 million points in 2×2×3=12 zones by 12 processors.}
}

@article{Steinberg_2015,
   title={BALANCING THE LOAD: A VORONOI BASED SCHEME FOR PARALLEL COMPUTATIONS},
   volume={216},
   ISSN={1538-4365},
   url={http://dx.doi.org/10.1088/0067-0049/216/1/14},
   DOI={10.1088/0067-0049/216/1/14},
   number={1},
   journal={The Astrophysical Journal Supplement Series},
   publisher={American Astronomical Society},
   author={Steinberg, Elad and Yalinewich, Almog and Sari, Re’em and Duffell, Paul},
   year={2015},
   month=jan, pages={14} }
