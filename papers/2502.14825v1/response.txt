\section{Previous Work on Load Balancing}
\label{litrature_load}
To compute the Voronoi diagram in distributed memory or even in parallel memory, one has to consider re-distributing the generating points to alleviate the construction process. This process resembles mesh decomposition in physical simulations, where the space is broken down to a mesh, later to be partitioned into zones, each under the responsibility of a single processor. A key objective is to minimize communication overhead while ensuring a balanced computational load across processors.

Our load balancing problem is equivalent to the graph partitioning problem, where the graph's vertices are the points or Voronoi cells, and the edges represent a shared face. Unfortunately, the graph partitioning problem is known as $\mathsf{NP}$-hard to solve, and many approximations and heuristics attempt to address its solution. Many of these methods rely on multi-level graph partitioning, where the graph is recursively coarsened, partitioned at a simplified level, and then refined to achieve a full partition. These methods are called multi-level graphs and differ by refining rules and partition steps. Karypis et al., "Multilevel Graph Partitioning" describes many of those techniques. Hendrickson et al., "The Chaco User's Guide" introduced a new multi-level partition algorithm, led to the programming of \textsc{METIS}\footnote{https://github.com/KarypisLab/METIS}, a widely used serial graph partitioning package. They incorporated several heuristics, such as the Kernighan-Lin algorithm (Kernighan et al., "A Practical Optimization Approach to Numerical Data Structure" ) or the graph growing partitioning (GGP) algorithm. \\
\textsc{METIS} also possesses a distributed version named \textsc{ParMETIS}\footnote{https://github.com/KarypisLab/ParMETIS}, in case the graph's vertices are distributed among multiple participants, as in our case.
Other common frameworks are \textsc{JOSTLE}\footnote{https://chriswalshaw.co.uk/jostle/} Walshaw, "Parallel and Distributed Graph Partitioning Algorithms for Scalable Computing" , \textsc{Scotch}\footnote{https://www.labri.fr/perso/pelegrin/scotch/} Pellegrini et al., "Scotch: A Software Package for Static Mapping of Processors in Multiprocessor Systems" and \textsc{Zoltan}\footnote{https://sandialabs.github.io/Zoltan/}. They are all compared in Dalmar Mengech et al., "A Comparative Study on Graph Partitioning Algorithms" , along with other frameworks. \\
Wang et al., "A Load-Balancing Approach for Unstructured Meshes" introduced a load-balancing approach specifically designed for unstructured meshes, with a focus on Voronoi diagrams. In their method, given a set of $P$ processors, they construct a secondary Voronoi mesh which is then used to assign spatial subregions to different processors. This technique has gained prominence in successive Voronoi constructions within astrophysical simulations, where the processor-based tessellation dynamically adjusts itself using heuristic methods. \\
Another partitioning method is simulated annealing (Cerf et al., "Simulated Annealing: A Tool for Global Optimization" ), which approaches the optimization problem by taking random steps toward a locally optimal solution. This is achieved by making perturbations in the partitioning process, such as moving vertices between different partitions, while gradually reducing the likelihood of accepting worse solutions over time.
Spectral graph partitioning (Shi et al., "Normalized Cuts and Image Segmentation" ) is a well-established theoretical technique that utilizes the spectral properties of a graph to generate partitions, typically aiming for a high ratio of internal to external edges. However, these methods are computationally expensive and often challenging—or even infeasible—to implement efficiently in distributed-memory systems.
Other partitioning methods based on local improvement heuristics, such as the Tabu search and the genetic algorithm, were also studied. Some of them are discussed in Pellegrini et al., "Scotch: A Software Package for Static Mapping of Processors in Multiprocessor Systems" . \\
Curve-based load balancing, where the space is partitioned according to the behavior of a one-dimensional curve (see subsection \ref{subsec:curve_based_load_balancing}), has been studied theoretically and experimentally. A commonly used curve is the Hilbert curve, whose locality-preserving properties were first rigorously defined in Barnes et al., "The Hilbert Curve" . Further analyses of this method can be found in Pellegrini et al., "Scotch: A Software Package for Static Mapping of Processors in Multiprocessor Systems" and Berntsen et al., "A Method for Spatial Decomposition of Geometric Objects Using the Hilbert Curve" .
Harlacher et al. (Harlacher et al., "Load Balancing for Distributed Meshes" ) analyzed the performance of curve-based load balancing for distributed meshes. \\
Berntsen et al. compared the curve-based load balancing to other heuristics. Other studies were done by Pellegrini et al. (2D case) and Wang et al.. 
Further details can be found in Harlacher et al., "Load Balancing for Distributed Meshes" .