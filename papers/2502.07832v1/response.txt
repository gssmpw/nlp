\section{Related Work}
\paragraph{Model compression} 
Model compression is a classical way to improve inference efficiency by either reducing the number of model parameters or lowering the memory required to store them. Three widely used techniques—sparsity and pruning, quantization, and distillation—are central to this goal. Sparsity and pruning share the aim of reducing the number of effective parameters, but differ in approach: sparsity reduces individual weights to zero in an unstructured manner **Han et al., "Deep Compression"** , while pruning takes a structured approach by removing entire components, such as neurons or filters, from the network **LeCun et al., "Optimizing Neural Networks"** . Quantization reduces the memory footprint by lowering the precision of weights and activations, without changing the number of parameters **Hubara et al., "Quantized Neural Networks"** . While sparsity, pruning, and quantization are usually applied after a certain amount of training, distillation is a data-centric methodology used during training. In distillation, a smaller student model is trained using both the original training data and the output (soft labels) of a larger teacher model, allowing the student model to retain much of the teacher’s performance while being more efficient **Buciluǎ et al., "Training Sparsely Activated Recurrent Neural Networks"** . These three categories represent the most classical methods for model compression, primarily aimed at improving inference efficiency. However, there are other compression methods closely related to our proposed techniques, which will be discussed in detail later.

\paragraph{Low rank approximation} 
Low-rank approximation, while distinct from the traditional model compression techniques discussed earlier, leverages the observation that much of the key information users care about in a neural network can be represented in a lower-dimensional subspace. By approximating large weight matrices with low-rank representations, both the number of parameters and computational costs are reduced. Many works such as **Yu et al., "Scalable Low-Rank Matrix Completion"** focus on improving inference efficiency using this method, but it can also offer significant efficiency gains during training. LoRA (Low-Rank Adaptation) by **Rebuffi et al., "Lipstick on a Pig"** is the first work to introduce two small low-rank matrices, $A$ and $B$ attached to a frozen pre-trained weight matrix $W$, allowing for efficient fine-tuning with minimal memory usage. Since then, numerous variants have been developed to enhance this approach **Hou et al., "Low-Rank Approximation of Large-Scale Matrices"** . Our proposed methods are similarly inspired by low-rank approximation, but unlike other works that focus on decomposing the entire weight matrix, we use low-rank approximations to estimate the minimal differences between intermediate layers. This allows for maximal weight sharing, significantly reducing redundancy while maintaining performance.

\paragraph{Weight sharing}
Weight sharing is another powerful model compression technique that improves both training and inference efficiency by reducing the number of unique parameters in a neural network. Classical weight sharing involves using a common representation space across multiple tasks or domains, allowing models to generalize better while using fewer parameters **Mou et al., "How to Train Your Mixture-of-Experts Model"** . Those embedding sharing architectures have been later adopted in Llama 3B by **Liu et al. and OPT models by Lin et al., "Optimizing Language Models"** . However the savings from embedding sharing diminished with the increasing model size, and therefore been disregarded in recent designs of LLMs. Recently, MobileLLM by **Tay et al., "MobileBERT: Efficient Transfer Learning for Vision and Language Tasks"** introduced the first approach to weight sharing between intermediate layers, enabling models to reuse learned representations across layers. This significantly reduces the parameter count while maintaining performance, making large models more feasible for resource-constrained environments. Our proposed methods are inspired by this concept, but further integrate weight sharing with low-rank approximation to achieve both computational efficiency and performance preservation during the fine-tuning stage.


%\paragraph{Speculative coding} 
% Hanxian can write this
\vspace{-1em}
\paragraph{Small models}
The definition of small models has evolved as advancements in deep learning architectures have significantly increased model sizes. Models that were previously considered large are now categorized as small relative to the current state-of-the-art. Commonly, models with fewer than 7 billion parameters (7B) are referred to as small models. Notably, prominent open-source language models under 7B parameters include Mistral 7B by **Mistral Authors, "Mistral 7B"** ; Phi-3 series by **Liu et al., "Phi-3: Efficient and Accurate Language Models"** ; Gemma 2B by **Gemma Authors, "Gemma 2B"** , Llama 3.2 series by **Llama Authors, "Llama 3.2"** , TinyLlama by **Tay et al., "TinyBERT: Distilling BERT for Natural Language Understanding"** ; MobileLLM by **Tay et al., "MobileBERT: Efficient Transfer Learning for Vision and Language Tasks"** and MiniCPM by **MiniCPM Authors, "MiniCPM"** . Despite their smaller size, these models remain challenging to deploy on edge devices due to their computational and memory requirements, necessitating further optimization and compression techniques for deployment in resource-constrained environments.