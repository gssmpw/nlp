@inproceedings{Zhuohua2021MirChecker,
    author = {Li, Zhuohua and Wang, Jincheng and Sun, Mingshen and Lui, John C.S.},
    title = {MirChecker: Detecting Bugs in Rust Programs via Static Analysis},
    year = {2021},
    isbn = {9781450384544},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3460120.3484541},
    doi = {10.1145/3460120.3484541},
    booktitle = {Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {2183–2196},
    numpages = {14},
    location = {Virtual Event, Republic of Korea},
    series = {CCS '21}
}

@inproceedings{Yechan2021Rudra,
    author = {Bae, Yechan and Kim, Youngsuk and Askar, Ammar and Lim, Jungwon and Kim, Taesoo},
    title = {Rudra: Finding Memory Safety Bugs in Rust at the Ecosystem Scale},
    year = {2021},
    isbn = {9781450387095},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3477132.3483570},
    doi = {10.1145/3477132.3483570},
    booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
    pages = {84–99},
    numpages = {16},
    location = {Virtual Event, Germany},
    series = {SOSP '21}
}

@article{Hui2021StudyWithRustCVEs,
    author = {Xu, Hui and Chen, Zhuangbin and Sun, Mingshen and Zhou, Yangfan and Lyu, Michael R.},
    title = {Memory-Safety Challenge Considered Solved? An In-Depth Study with All Rust CVEs},
    year = {2021},
    issue_date = {January 2022},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {31},
    number = {1},
    issn = {1049-331X},
    url = {https://doi.org/10.1145/3466642},
    doi = {10.1145/3466642},
    journal = {ACM Trans. Softw. Eng. Methodol.},
    month = {sep},
    articleno = {3},
    numpages = {25}
}

@misc{WhyCargo,
author = {},
title = {Why Cargo Exists - The Cargo Book},
howpublished = {\url{https://doc.rust-lang.org/cargo/guide/why-cargo-exists.html}},
month = {},
year = {}
}

@misc{rustlang-cargo,
author = {},
title = {rust-lang/cargo: The Rust package manager},
howpublished = {\url{https://github.com/rust-lang/cargo}},
month = {},
year = {}
}

@misc{mirdef,
author = {},
title = {The MIR (Mid-level IR) - Rust Compiler Development Guide},
howpublished = {\url{https://rustc-dev-guide.rust-lang.org/mir/index.html}},
month = {},
year = {}
}

@misc{mono,
author = {},
title = {Monomorphization - Rust Compiler Development Guide},
howpublished = {\url{https://rustc-dev-guide.rust-lang.org/backend/monomorph.html}},
month = {},
year = {}
}

@inproceedings{libafl,
 author       = {Andrea Fioraldi and Dominik Maier and Dongjia Zhang and Davide Balzarotti},
 title        = {{LibAFL: A Framework to Build Modular and Reusable Fuzzers}},
 booktitle    = {Proceedings of the 29th ACM conference on Computer and communications security (CCS)},
 series       = {CCS '22},
 year         = {2022},
 month        = {November},
 location     = {Los Angeles, U.S.A.},
 publisher    = {ACM},
}

@misc{clippy,
author = {},
title = {rust-lang/rust-clippy: A bunch of lints to catch common mistakes and improve your Rust code. Book: https://doc.rust-lang.org/clippy/},
howpublished = {\url{https://github.com/rust-lang/rust-clippy/tree/master}},
month = {},
year = {}
}

@misc{miri,
author = {},
title = {rust-lang/miri: An interpreter for Rust's mid-level intermediate representation},
howpublished = {\url{https://github.com/rust-lang/miri}},
month = {},
year = {}
}

@misc{cargofuzz,
author = {},
title = {rust-fuzz/cargo-fuzz: Command line helpers for fuzzing},
howpublished = {\url{https://github.com/rust-fuzz/cargo-fuzz}},
month = {},
year = {}
}

@misc{libfuzzer,
author = {},
title = {libFuzzer – a library for coverage-guided fuzz testing. — LLVM 18.0.0git documentation},
howpublished = {\url{https://llvm.org/docs/LibFuzzer.html}},
month = {},
year = {}
}

@misc{2023-0047,
    author = "{Anonym}",
    title = "{RUSTSEC-2023-0047 - impl FromMdbValue for bool is unsound}",
    year = {2023},
    howpublished = {\url{https://rustsec.org/advisories/RUSTSEC-2023-0047.html}}
}

@misc{lmdb-rs2023,
    author = {Valerii Hiora},
    title = {lmdb-rs: Rust bindings for LMDB},
    year = {},
    howpublished = {\url{https://crates.io/crates/lmdb-rs}}
}

@misc{aflplus,
author = {},
title = {The AFL++ fuzzing framework | AFLplusplus},
howpublished = {\url{https://aflplus.plus/}},
month = {},
year = {}
}

@misc{openssl,
author = {},
title = {OpenSSL: Cryptography and SSL/TLS Toolkit},
howpublished = {\url{https://www.openssl.org/}},
month = {},
year = {}
}

@misc{openssl-binding,
author = {},
title = {openssl - crates.io: Rust Package Registry},
howpublished = {\url{https://crates.io/crates/openssl}},
month = {},
year = {}
}

@misc{rustls,
author = {},
title = {rustls - crates.io: Rust Package Registry},
howpublished = {\url{https://crates.io/crates/rustls}},
month = {},
year = {}
}

@misc{rustsec,
author = {},
title = {RUSTSEC: The Rust Security Advisory Database},
howpublished = {\url{https://rustsec.org/advisories/}},
month = {},
year = {}
}

@misc{cast-rule,
author = {},
title = {Operator expressions - The Rust Reference},
howpublished = {\url{https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions}},
month = {},
year = {}
}

@misc{cve-2021-45695,
author = {},
title = {CVE - CVE-2021-45695},
howpublished = {\url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45695}},
month = {},
year = {}
}

@misc{cve-2021-45709,
author = {},
title = {CVE - CVE-2021-45709},
howpublished = {\url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45709}},
month = {},
year = {}
}

@article{safedrop,
author = {Cui, Mohan and Chen, Chengjun and Xu, Hui and Zhou, Yangfan},
title = {SafeDrop: Detecting Memory Deallocation Bugs of Rust Programs via Static Data-Flow Analysis},
year = {2023},
issue_date = {July 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/3542948},
doi = {10.1145/3542948},
abstract = {Rust is an emerging programming language that aims to prevent memory-safety bugs. However, the current design of Rust also brings side effects, which may increase the risk of memory-safety issues. In particular, it employs ownership-based resource management and enforces automatic deallocation of unused resources without using the garbage collector. It may therefore falsely deallocate reclaimed memory and lead to use-after-free or double-free issues. In this article, we study the problem of invalid memory deallocation and propose SafeDrop, a static path-sensitive data-flow analysis approach to detect such bugs. Our approach analyzes each function of a Rust crate iteratively in a flow-sensitive and field-sensitive way. It leverages a modified Tarjan algorithm to achieve scalable path-sensitive analysis and a cache-based strategy for efficient inter-procedural analysis. We have implemented our approach and integrated it into the Rust compiler. Experiment results show that the approach can successfully detect all such bugs in our experiments with a limited number of false positives and incurs a very small overhead compared to the original compilation time.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {may},
articleno = {82},
numpages = {21},
keywords = {path sensitivity, Rust, meet over path, data-flow analysis}
}


@article{Cui2023rCanaryDM,
  title={rCanary: Detecting Memory Leaks Across Semi-automated Memory Management Boundary in Rust},
  author={Mohan Cui and Suran Sun and Hui Xu and Yangfan Zhou},
  journal={ArXiv},
  year={2023},
  volume={abs/2308.04787},
  url={https://api.semanticscholar.org/CorpusID:260735817}
}

@inproceedings{crabsandwich,
author = {Crump, Addison and Zhang, Dongjia and Asif, Syeda Mahnur and Maier, Dominik and Fioraldi, Andrea and Holz, Thorsten and Balzarotti, Davide},
title = {CrabSandwich: Fuzzing Rust with Rust (Registered Report)},
year = {2023},
isbn = {9798400702471},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3605157.3605176},
doi = {10.1145/3605157.3605176},
abstract = {The rust programming language is one of the fastest-growing programming languages, thanks to its unique blend of high performance execution and memory safety. Still, programs implemented in rust can contain critical bugs. Apart from logic bugs and crashes, code in unsafe blocks can still trigger memory corruptions. To find these, the community uses traditional fuzzers like libfuzzer or aflpp, in combination with rust-specific macros. Of course, the fuzzers themselves are still written in memory-unsafe languages. In this paper, we explore the possibility of replacing the input generators with rust, while staying compatible to existing harnesses. Based on the rust fuzzer library libafl, we develop ourtool, a drop-in replacement for the C++ component of cargo-fuzz. We evaluate our tool, written in rust, against the original fuzzer libfuzzer. We show that we are not only able to successfully fuzz all three targets we tested with ourtool, but outperform cargo-fuzz in bug coverage. During our preliminary evaluation, we already manage to uncover new bugs in the pdf crate that could not be found by cargo-fuzz, proving the real-world applicability of our approach, and giving us high hopes for the planned follow-up evaluations.},
booktitle = {Proceedings of the 2nd International Fuzzing Workshop},
pages = {39–46},
numpages = {8},
keywords = {framework, fuzzing},
location = {Seattle, WA, USA},
series = {FUZZING 2023}
}

@misc{readunalign,
author = {},
title = {read\_unaligned in std::ptr - Rust},
howpublished = {\url{https://doc.rust-lang.org/nightly/std/ptr/fn.read_unaligned.html}},
month = {},
year = {}
}

@misc{writeunalign,
author = {},
title = {write\_unaligned in std::ptr - Rust},
howpublished = {\url{https://doc.rust-lang.org/stable/std/ptr/fn.write_unaligned.html}},
month = {},
year = {}
}

@misc{Podinbyt5:online,
author = {},
title = {Pod in bytemuck - Rust},
howpublished = {\url{https://docs.rs/bytemuck/latest/bytemuck/trait.Pod.html}},
month = {},
year = {},
note = {}
}

@misc{Typelayo51:online,
author = {},
title = {Type layout - The Rust Reference},
howpublished = {\url{https://doc.rust-lang.org/reference/type-layout.html}},
month = {},
year = {},
note = {}
}

@misc{fromutf884:online,
author = {},
title = {from\_utf8\_unchecked in std::str - Rust},
howpublished = {\url{https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html}},
month = {},
year = {},
note = {}
}

@misc{fromutf844:online,
author = {},
title = {from\_utf8 in std::str - Rust},
howpublished = {\url{https://doc.rust-lang.org/stable/std/str/fn.from_utf8.html}},
month = {},
year = {},
note = {}
}

@inproceedings{jeon2017hextype,
  title={Hextype: Efficient detection of type confusion errors for c++},
  author={Jeon, Yuseok and Biswas, Priyam and Carr, Scott and Lee, Byoungyoung and Payer, Mathias},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2373--2387},
  year={2017}
}

@inproceedings{haller2016typesan,
  title={TypeSan: Practical type confusion detection},
  author={Haller, Istvan and Jeon, Yuseok and Peng, Hui and Payer, Mathias and Giuffrida, Cristiano and Bos, Herbert and Van Der Kouwe, Erik},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={517--528},
  year={2016}
}

@inproceedings{duck2018effectivesan,
  title={EffectiveSan: type and memory error detection using dynamically typed C/C++},
  author={Duck, Gregory J and Yap, Roland HC},
  booktitle={Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={181--195},
  year={2018}
}

@inproceedings{lee2015type,
  title={Type casting verification: Stopping an emerging attack vector},
  author={Lee, Byoungyoung and Song, Chengyu and Kim, Taesoo and Lee, Wenke},
  booktitle={24th USENIX Security Symposium (USENIX Security 15)},
  pages={81--96},
  year={2015}
}

@inproceedings{pradel2015typedevil,
  title={TypeDevil: Dynamic type inconsistency analysis for JavaScript},
  author={Pradel, Michael and Schuh, Parker and Sen, Koushik},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={1},
  pages={314--324},
  year={2015},
  organization={IEEE}
}

@INPROCEEDINGS{9842686,
  author={Sun, Lili and Wu, Chenggang and Wang, Zhe and Kang, Yan and Tang, Bowen},
  booktitle={2022 IEEE 46th Annual Computers, Software, and Applications Conference (COMPSAC)}, 
  title={KOP-Fuzzer: A Key-Operation-based Fuzzer for Type Confusion Bugs in JavaScript Engines}, 
  year={2022},
  volume={},
  number={},
  pages={757-766},
  doi={10.1109/COMPSAC54236.2022.00125}}

@INPROCEEDINGS{7958598,
  author={Brown, Fraser and Narayan, Shravan and Wahby, Riad S. and Engler, Dawson and Jhala, Ranjit and Stefan, Deian},
  booktitle={2017 IEEE Symposium on Security and Privacy (SP)}, 
  title={Finding and Preventing Bugs in JavaScript Bindings}, 
  year={2017},
  volume={},
  number={},
  pages={559-578},
  doi={10.1109/SP.2017.68}}

@article{Qin2020ReplicationPF,
  title={Replication Package for Article: Understanding Memory and Thread Safety Practices and Issues in Real-World Rust Programs},
  author={Boqin Qin and Yilun Chen and Zeming Yu and Linhai Song and Yiying Zhang},
  journal={Artifact Digital Object Group},
  year={2020},
  url={https://api.semanticscholar.org/CorpusID:215761919}
}

@article{Evans2020IsRU,
  title={Is Rust Used Safely by Software Developers?},
  author={Ana Nora Evans and Bradford Campbell and Mary Lou Soffa},
  journal={2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)},
  year={2020},
  pages={246-257},
  url={https://api.semanticscholar.org/CorpusID:220302286}
}

@article{Xu2020MemorySafetyCC,
  title={Memory-Safety Challenge Considered Solved? An In-Depth Study with All Rust CVEs},
  author={Hui Xu and Zhuangbin Chen and Mingshen Sun and Yangfan Zhou and Michael R. Lyu},
  journal={ACM Trans. Softw. Eng. Methodol.},
  year={2020},
  volume={31},
  pages={3:1-3:25},
  url={https://api.semanticscholar.org/CorpusID:222080332}
}

@inproceedings{zhang2022towards,
  title={Towards understanding the runtime performance of rust},
  author={Zhang, Yuchen and Zhang, Yunhang and Portokalidis, Georgios and Xu, Jun},
  booktitle={Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering},
  pages={1--6},
  year={2022}
}

@misc{TypeIdin2:online,
author = {},
title = {TypeId in std::any - Rust},
howpublished = {\url{https://doc.rust-lang.org/stable/std/any/struct.TypeId.html}},
month = {},
year = {}
}

@article{Hua2021RupairTA,
  title={Rupair: Towards Automatic Buffer Overflow Detection and Rectification for Rust},
  author={Baojian Hua and Wanrong Ouyang and Chengman Jiang and Qiliang Fan and Zhizhong Pan},
  journal={Annual Computer Security Applications Conference},
  year={2021},
  url={https://api.semanticscholar.org/CorpusID:244910777}
}

@misc{Undefine31:online,
author = {},
title = {Glossary - Unsafe Code Guidelines Reference},
howpublished = {\url{https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#undefined-behavior}},
month = {},
year = {}
}

@misc{Traitand70:online,
author = {},
title = {Trait and lifetime bounds - The Rust Reference},
howpublished = {\url{https://doc.rust-lang.org/reference/trait-bounds.html}},
month = {},
year = {}
}

@misc{CastingR14:online,
author = {},
title = {Casting - Rust By Example},
howpublished = {\url{https://doc.rust-lang.org/rust-by-example/types/cast.html#:~:text=Rust%20provides%20no%20implicit%20type,where%20C%20has%20undefined%20behavior.}},
month = {},
year = {}
}

@misc{Lintsoft25:online,
author = {},
title = {Lint (software) - Wikipedia},
howpublished = {\url{https://en.wikipedia.org/wiki/Lint_(software)}},
month = {},
year = {}
}

@misc{unsoundcollectiontransmute,
author = {},
title = {Clippy Lints - unsound collection transmute},
howpublished = {\url{https://rust-lang.github.io/rust-clippy/master/index.html#/unsound_collection_transmute}},
month = {},
year = {}
}

@misc{castptralignment,
author = {},
title = {Clippy Lints - cast pointer alignment},
howpublished = {\url{https://rust-lang.github.io/rust-clippy/master/index.html#/cast_ptr_alignment}},
month = {},
year = {}
}

@misc{Breadthf77:online,
author = {},
title = {Breadth-first search - Wikipedia},
howpublished = {\url{https://en.wikipedia.org/wiki/Breadth-first_search}},
month = {},
year = {}
}

@misc{unsafeRu19:online,
author = {},
title = {unsafe - Rust},
howpublished = {\url{https://doc.rust-lang.org/std/keyword.unsafe.html}},
month = {},
year = {}
}

@misc{soundness,
author = {},
title = {Glossary - Unsafe Code Guidelines Reference},
howpublished = {\url{https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#soundness-of-code--of-a-library}},
month = {},
year = {}
}

@misc{GenericD71:online,
author = {},
title = {Generic Data Types - The Rust Programming Language},
howpublished = {\url{https://doc.rust-lang.org/book/ch10-01-syntax.html}},
month = {},
year = {}
}

@misc{cargotarget54:online,
author = {},
title = {Cargo Targets - The Cargo Book},
howpublished = {\url{https://doc.rust-lang.org/cargo/reference/cargo-targets.html}},
month = {},
year = {}
}

@misc{HIR,
author = {},
title = {The HIR (High-level IR) - Rust Compiler Development Guide},
howpublished = {\url{https://rustc-dev-guide.rust-lang.org/hir.html}},
month = {},
year = {}
}

@misc{MIR,
author = {},
title = {The MIR (Mid-level IR) - Rust Compiler Development Guide},
howpublished = {\url{https://rustc-dev-guide.rust-lang.org/mir/index.html}},
month = {},
year = {}
}

@misc{FFI,
author = {},
title = {Foreign Function Interface - The Rustonomicon},
howpublished = {\url{https://doc.rust-lang.org/nomicon/ffi.html}},
month = {},
year = {}
}

@misc{TyKind,
author = {},
title = {TyKind in rustc\_type\_ir::sty - Rust},
howpublished = {\url{https://doc.rust-lang.org/stable/nightly-rustc/rustc_type_ir/sty/enum.TyKind.html}},
month = {},
year = {}
}

@misc{cve-2021-45687,
author = {},
title = {CVE - CVE-2021-45687},
howpublished = {\url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45687}},
month = {},
year = {}
}

@misc{cve-2020-25016,
author = {},
title = {CVE - CVE-2020-25016},
howpublished = {\url{https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-25016}},
month = {},
year = {}
}

@phdthesis{switzer2020preventing,
  title={Preventing IPC-facilitated type confusion in Rust},
  author={Switzer, Jennifer F},
  year={2020},
  school={Massachusetts Institute of Technology}
}

@INPROCEEDINGS{10062361,
  author={Hu, Shuang and Hua, Baojian and Wang, Yang},
  booktitle={2022 IEEE 22nd International Conference on Software Quality, Reliability and Security (QRS)}, 
  title={Comprehensiveness, Automation and Lifecycle: A New Perspective for Rust Security}, 
  year={2022},
  volume={},
  number={},
  pages={982-991},
  keywords={Computer languages;Automation;Runtime;Program processors;Software quality;Manuals;Programming;Perspective;Rust;Security},
  doi={10.1109/QRS57517.2022.00102}}

@misc{pprof,
author = {},
title = {pprof},
howpublished = {\url{https://crates.io/crates/pprof}},
month = {},
year = {}
}

@misc{fromrawparts,
author = {},
title = {std::slice::from\_raw\_parts},
howpublished = {\url{https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html}},
month = {},
year = {}
}

@misc{greptimedb,
author = {},
title = {Greptime},
howpublished = {\url{https://greptime.com/}},
month = {},
year = {}
}

@misc{traits,
author = {Rust},
title = {Traits},
howpublished = {\url{https://doc.rust-lang.org/reference/items/traits.html}},
month = {},
year = {}
}

@misc{RustLang,
  author = {The Rust Project},
  title = {{Rust Programming Language}},
  howpublished = {\url{https://www.rust-lang.org/}},
  year = {},
}

@misc{LinuxKernel,
  title        = {The Linux Kernel},
  author       = {Linus Torvalds and thousands of contributors},
  year         = {},
  note         = {\url{https://www.kernel.org/}}
}

@misc{MozillaFirefox,
    title = {Mozilla Firefox},
    note = {\url{https://www.mozilla.org/en-US/firefox/new/}},
    publisher = {Mozilla Foundation},
    year = {},
    Author = {Mozilla},
}

@misc{whitehouse,
author = {The White House},
title = {Future Software Should Be Memory Safe},
howpublished = {\url{https://www.whitehouse.gov/oncd/briefing-room/2024/02/26/press-release-technical-report/}},
month = {},
year = {},
}

@misc{safeunsafe,
    author = {The Rust Team},
    title = {Meet Safe and Unsafe},
    year = {},
    note = {\url{https://doc.rust-lang.org/nomicon/meet-safe-and-unsafe.html\#meet-safe-and-unsafe}},
}

@misc{TypeConv22online,
    author = {The Rust Project},
    title = {Type Conversions - The Rustonomicon},
    howpublished = {\url{https://doc.rust-lang.org/nomicon/conversions.html}},
    month = {},
    year = {}
}

@misc{cve-2023-3079,
Author = {NIST},
Title = {NVD - CVE-2023-3079},
year = {},
note = {\url{https://nvd.nist.gov/vuln/detail/CVE-2023-3079}},
}

@misc{cve-2023-4762,
Author = {NIST},
Title = {NVD - CVE-2023-4762},
year = {},
note = {\url{https://nvd.nist.gov/vuln/detail/CVE-2023-4762}},
}

@misc{cve-2024-1939,
Author = {NIST},
Title = {NVD - CVE-2024-1939},
year = {},
note = {\url{https://nvd.nist.gov/vuln/detail/CVE-2024-1939}}
}

@misc{unsafeRu19online,
    author={The Rust Team},
    title={unsafe - Rust},
    year={},
    note={\url{https://doc.rust-lang.org/std/keyword.unsafe.html}}
}

@misc{ubreference,
    author = "{The Rust Reference}",
    title = "{Behavior considered undefined}",
    year = {},
    note = {\url{https://doc.rust-lang.org/reference/behavior-considered-undefined.html}},
}

@misc{rs-2019-0035,
    author = "RUSTSEC",
    title = "RUSTSEC-2019-0035",
    year = {},
    note = {\url{https://rustsec.org/advisories/RUSTSEC-2019-0035.html}}
}

@misc{rs-2022-0074,
    author = "RUSTSEC",
    title = "RUSTSEC-2022-0074",
    year = {},
    note = {\url{https://rustsec.org/advisories/RUSTSEC-2022-0074.html}}
}

@misc{rs-2020-0029,
    author = "RUSTSEC",
    title = "RUSTSEC-2020-0029",
    year = {},
    note = {\url{https://rustsec.org/advisories/RUSTSEC-2020-0029.html}}
}


@misc{alias-analysis,
    author = "Wikipedia",
    title = "Alias analysis",
    year = {2024},
    note = {\url{https://en.wikipedia.org/wiki/Alias\_analysis}}
}

@misc{Local,
    author = "rustc\_middle",
    title = "rustc\_middle::mir::Local",
    year = {},
    note = {\url{https://doc.rust-lang.org/nightly/nightly-rustc/rustc\_middle/mir/struct.Local.html}}
}

@misc{Ownership,
    author = "The Rust Programming Language",
    title = "What Is Ownership?",
    year = {},
    note = {\url{https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html}}
}

@misc{cargotarget54online,
author = {Rust},
title = {Cargo Targets - The Cargo Book},
note = {\url{https://doc.rust-lang.org/cargo/reference/cargo-targets.html}},
year = {}
}


@misc{Breadthf77online,
Author = {Wikipedia},
Title = {Breadth-first search},
note = {\url{https://en.wikipedia.org/wiki/Breadth-first_search}},
year = {}
}

@misc{candle-core,
    Author = {The HuggingFace},
    Title = {Candle - Minimalist ML framework for Rust.},
    year = {},
    note = {\url{https://github.com/huggingface/candle}}
}

@misc{HuggingFace,
    Author = {The HuggingFace},
    Title = {The AI community building the future.},
    year = {},
    note = {\url{https://huggingface.co/}}
}

@misc{LLVM,
    Author = {LLVM},
    Title = {LLVM Language Reference Manual},
    year = {2024},
    note = {\url{https://llvm.org/docs/LangRef.html}}
}

@inproceedings{typesan,
author = {Haller, Istvan and Jeon, Yuseok and Peng, Hui and Payer, Mathias and Giuffrida, Cristiano and Bos, Herbert and van der Kouwe, Erik},
title = {TypeSan: Practical Type Confusion Detection},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {\url{https://doi.org/10.1145/2976749.2978405}},
doi = {10.1145/2976749.2978405},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {517–528},
numpages = {12},
keywords = {typecasting, type safety, type confusion, downcasting},
location = {Vienna, Austria},
series = {CCS '16}
}

@inproceedings{hextype,
author = {Jeon, Yuseok and Biswas, Priyam and Carr, Scott and Lee, Byoungyoung and Payer, Mathias},
title = {HexType: Efficient Detection of Type Confusion Errors for C++},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134062},
doi = {10.1145/3133956.3134062},
abstract = {Type confusion, often combined with use-after-free, is the main attack vector to compromise modern C++ software like browsers or virtual machines. Typecasting is a core principle that enables modularity in C++. For performance, most typecasts are only checked statically, i.e., the check only tests if a cast is allowed for the given type hierarchy, ignoring the actual runtime type of the object. Using an object of an incompatible base type instead of a derived type results in type confusion. Attackers abuse such type confusion issues to attack popular software products including Adobe Flash, PHP, Google Chrome, or Firefox. We propose to make all type checks explicit, replacing static checks with full runtime type checks. To minimize the performance impact of our mechanism HexType, we develop both low-overhead data structures and compiler optimizations. To maximize detection coverage, we handle specific object allocation patterns, e.g., placement new or reinterpret_cast which are not handled by other mechanisms. Our prototype results show that, compared to prior work, HexType has at least 1.1 -- 6.1 times higher coverage on Firefox benchmarks. For SPEC CPU2006 benchmarks with overhead, we show a 2 -- 33.4 times reduction in overhead. In addition, HexType discovered 4 new type confusion bugs in Qt and Apache Xerces-C++.},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {2373–2387},
numpages = {15},
keywords = {Security, bad casting, dynamic_cast, reinterpret_cast, static_cast, type confusion, type safety, typecasting},
location = {Dallas, Texas, USA},
series = {CCS '17}
}


@misc{traitobjects,
    Author = {The Rust Reference},
    Title = {Trait objects},
    year = {},
    note = {\url{https://doc.rust-lang.org/reference/types/trait-object.html}}
}

@misc{poly,
    Author = {Wikipedia},
    Title = {Polymorphism},
    year = {},
    note = {\url{https://en.wikipedia.org/wiki/Polymorphism_(computer_science)}}
}

@misc{strutf8unchecked,
    author = {The Rust Team},
    title = "{Function from\_utf8\_unchecked in std::str - Rust}",
    year = {},
    note = {\url{https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html}}
}

@misc{strutf8,
    author = {The Rust Team},
    title = "{from\_utf8 in std::str - Rust}",
    year = {},
    note = {\url{https://doc.rust-lang.org/stable/std/str/fn.from_utf8.html}}
}

@inproceedings{kirth2022pkru,
  title={PKRU-Safe: Automatically locking down the heap between safe and unsafe languages},
  author={Kirth, Paul and Dickerson, Mitchel and Crane, Stephen and Larsen, Per and Dabrowski, Adrian and Gens, David and Na, Yeoul and Volckaert, Stijn and Franz, Michael},
  booktitle={Proceedings of the Seventeenth European Conference on Computer Systems},
  pages={132--148},
  year={2022}
}

@inproceedings{rivera2021keeping,
  title={Keeping safe rust safe with galeed},
  author={Rivera, Elijah and Mergendahl, Samuel and Shrobe, Howard and Okhravi, Hamed and Burow, Nathan},
  booktitle={Proceedings of the 37th Annual Computer Security Applications Conference},
  pages={824--836},
  year={2021}
}

@inproceedings{mergendahl2022cross,
  title={Cross-Language Attacks.},
  author={Mergendahl, Samuel and Burow, Nathan and Okhravi, Hamed},
  booktitle={NDSS},
  year={2022}
}

@article{papaevripides2021exploiting,
  title={Exploiting mixed binaries},
  author={Papaevripides, Michalis and Athanasopoulos, Elias},
  journal={ACM Transactions on Privacy and Security (TOPS)},
  volume={24},
  number={2},
  pages={1--29},
  year={2021},
  publisher={ACM New York, NY, USA}
}

@misc{Lintsoft25online,
author = {Wikipedia},
title = {Lint (software)},
year = {},
note = {\url{https://en.wikipedia.org/wiki/Lint_(software)}}
}

@misc{Typelayo51online,
author = {The Rust Reference},
title = {Type layout},
note = {\url{https://doc.rust-lang.org/reference/type-layout.html}},
year = {}
}

@misc{Podinbyt5online,
author = {Rust},
title = {Pod in bytemuck},
note = {\url{https://docs.rs/bytemuck/latest/bytemuck/trait.Pod.html}},
year = {},
}

@inproceedings{10.1145/3503222.3507770,
author = {Li, Tuo and Bai, Jia-Ju and Sui, Yulei and Hu, Shi-Min},
title = {Path-sensitive and alias-aware typestate analysis for detecting OS bugs},
year = {2022},
isbn = {9781450392051},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3503222.3507770},
doi = {10.1145/3503222.3507770},
abstract = {Operating system (OS) is the cornerstone for modern computer systems. It manages devices and provides fundamental service for user-level applications. Thus, detecting bugs in OSes is important to improve reliability and security of computer systems. Static typestate analysis is a common technique for detecting different types of bugs, but it is often inaccurate or unscalable for large-size OS code, due to imprecision of identifying alias relationships as well as high costs of typestate tracking and path-feasibility validation.  In this paper, we present PATA, a novel path-sensitive and aliasaware typestate analysis framework to detect OS bugs. To improve the precision of identifying alias relationships in OS code, PATA performs a path-based alias analysis based on control-flow paths and access paths. With these alias relationships, PATA reduces the costs of typestate tracking and path-feasibility validation, to boost the efficiency of path-sensitive typestate analysis for bug detection. We have evaluated PATA on the Linux kernel and three popular IoT OSes (Zephyr, RIOT and TencentOS-tiny) to detect three common types of bugs (null-pointer dereferences, uninitialized variable accesses and memory leaks). PATA finds 574 real bugs with a false positive rate of 28\%. 206 of these bugs have been confirmed by the developers of the four OSes.We also compare PATA to seven state-of-the-art static approaches (Cppcheck, Coccinelle, Smatch,CSA, Infer, Saber and SVF). PATA finds many real bugs missed by them, with a lower false positive rate.},
booktitle = {Proceedings of the 27th ACM International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {859–872},
numpages = {14},
keywords = {bug detection, operation system, static analysis},
location = {Lausanne, Switzerland},
series = {ASPLOS '22}
}

@INPROCEEDINGS{10301168,
  author={Li, Xuejian and Zhu, Zhengguang},
  booktitle={2023 IEEE International Test Conference in Asia (ITC-Asia)}, 
  title={Software Defect Detection Based on Feature Fusion and Alias Analysis}, 
  year={2023},
  volume={},
  number={},
  pages={1-6},
  keywords={Deep learning;Codes;Neural networks;NIST;Syntactics;Predictive models;Feature extraction;defect prediction;alias analysis;neural networks;feature fusion},
  doi={10.1109/ITC-Asia58802.2023.10301168}}


@article{fan2020accelerating,
  title={Accelerating type confusion detection with pointer analysis},
  author={Fan, Xiaokang and Xia, Zeyu and Long, Sifan and Huang, Chun and Yang, Canqun},
  journal={IAENG International Journal of Computer Science},
  volume={20},
  pages={664--671},
  year={2020}
}


@misc{rs-2024-0338,
    author = "RUSTSEC",
    title = "RUSTSEC-2024-0338",
    year = {},
    note = {\url{https://rustsec.org/advisories/RUSTSEC-2024-0338.html}}
}

@misc{rs-2024-0016,
    author = "RUSTSEC",
    title = "RUSTSEC-2024-0016",
    year = {},
    note = {\url{https://rustsec.org/advisories/RUSTSEC-2024-0016.html}}
}

@misc{statement,
    author = "rustc\_middle",
    title = "rustc\_middle::mir::Statement",
    year = {},
    note = {\url{https://doc.rust-lang.org/nightly/nightly-rustc/rustc\_middle/mir/struct.Statement.html}}
}

@misc{terminator,
    author = "rustc\_middle",
    title = "rustc\_middle::mir::terminator::Terminator",
    year = {},
    note = {\url{https://doc.rust-lang.org/nightly/nightly-rustc/rustc\_middle/mir/terminator/struct.Terminator.html}}
}

@inproceedings{10.1145/3368089.3409686,
author = {Zhai, Yizhuo and Hao, Yu and Zhang, Hang and Wang, Daimeng and Song, Chengyu and Qian, Zhiyun and Lesani, Mohsen and Krishnamurthy, Srikanth V. and Yu, Paul},
title = {UBITect: a precise and scalable method to detect use-before-initialization bugs in Linux kernel},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3409686},
doi = {10.1145/3368089.3409686},
abstract = {Use-before-Initialization (UBI) bugs in the Linux kernel have serious security impacts, such as information leakage and privilege escalation. Developers are adopting forced initialization to cope with UBI bugs, but this approach can still lead to undefined behaviors (e.g., NULL pointer dereference). As it is hard to infer correct initialization values, we believe that the best way to mitigate UBI bugs is detection and manual patching. Precise detection of UBI bugs requires path-sensitive analysis. The detector needs to track an associated variable’s initialization status along all the possible program execution paths to its uses. However, such exhaustive analysis prevents the detection from scaling to the whole Linux kernel. This paper presents UBITect, a UBI bug finding tool which combines flow-sensitive type qualifier analysis and symbolic execution to perform precise and scalable UBI bug detection. The scalable qualifier analysis guides symbolic execution to analyze variables that are likely to cause UBI bugs. UBITect also does not require manual effort for annotations and hence, it can be directly applied to the kernel without any source code or intermediate representation (IR) change. On the Linux kernel version 4.14, UBITect reported 190 bugs, among which 78 bugs were deemed by us as true positives and 52 were confirmed by Linux maintainers.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {221–232},
numpages = {12},
keywords = {type qualifier, symbolic execution, bug detection, Use-before-Initialization},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}

@article{10.1145/3649828,
author = {Li, Haonan and Hao, Yu and Zhai, Yizhuo and Qian, Zhiyun},
title = {Enhancing Static Analysis for Practical Bug Detection: An LLM-Integrated Approach},
year = {2024},
issue_date = {April 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {OOPSLA1},
url = {https://doi.org/10.1145/3649828},
doi = {10.1145/3649828},
abstract = {While static analysis is instrumental in uncovering software bugs, its precision in analyzing large and intricate codebases remains challenging. The emerging prowess of Large Language Models (LLMs) offers a promising avenue to address these complexities. In this paper, we present LLift, a pioneering framework that synergizes static analysis and LLMs, with a spotlight on identifying use-before-initialization (UBI) bugs within the Linux kernel. Drawing from our insights into variable usage conventions in Linux, we enhance path analysis using post-constraint guidance. This approach, combined with our methodically crafted procedures, empowers LLift to adeptly handle the challenges of bug-specific modeling, extensive codebases, and the unpredictable nature of LLMs. Our real-world evaluations identified four previously undiscovered UBI bugs in the mainstream Linux kernel, which the Linux community has acknowledged. This study reaffirms the potential of marrying static analysis with LLMs, setting a compelling direction for future research in this area.},
journal = {Proc. ACM Program. Lang.},
month = {apr},
articleno = {111},
numpages = {26},
keywords = {Static analysis, bug detection, large language model}
}

@misc{astar-truncation,
    author = "Zellic",
    title = "Astar Network Integer Truncation Error Bugfix Review",
    year = {},
    note = {\url{https://www.zellic.io/blog/finding-a-critical-vulnerability-in-astar/}}
}

@inproceedings{rupta,
author = {Li, Wei and He, Dongjie and Gui, Yujiang and Chen, Wenguang and Xue, Jingling},
title = {A Context-Sensitive Pointer Analysis Framework for Rust and Its Application to Call Graph Construction},
year = {2024},
isbn = {9798400705076},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3640537.3641574},
doi = {10.1145/3640537.3641574},
abstract = {Existing program analysis tools for Rust lack the ability to effectively detect security vulnerabilities due to the absence of an accurate call graph and precise points-to information. We present Rupta, the first context-sensitive pointer analysis framework designed for Rust, with a particular focus on its role in constructing call graphs. Operating on Rust MIR, Rupta employs callsite-based context-sensitivity and on-the-fly call graph construction to address a range of pointer analysis challenges, including method/function calls, pointer casts, and nested structs, while preserving type information.  

Our assessment of Rupta against two state-of-the-art call graph construction techniques, Rurta (Rapid Type Analysis-based) and Ruscg (static dispatch-only), across 13 real-world Rust programs demonstrates its high efficiency and precision. In particular, our results reveal that Rupta surpasses Ruscg in soundness by discovering 29\% more call graph edges and outperforms Rurta in precision by eliminating approximately 70\% of spurious dynamic call edges. Consequently, Rupta has the potential to enhance existing security analysis tools, enabling them to identify a greater number of security vulnerabilities in Rust programs.},
booktitle = {Proceedings of the 33rd ACM SIGPLAN International Conference on Compiler Construction},
pages = {60–72},
numpages = {13},
keywords = {Call Graph Construction, Pointer Analysis, Rust},
location = {Edinburgh, United Kingdom},
series = {CC 2024}
}

@misc{plain,
    author = "Plain",
    title = "Trait Plain - Doc.rs",
    year = {},
    note = {\url{https://docs.rs/plain/latest/plain/trait.Plain.html}}
}