@misc{2013ISOI,
  title={ISO / IEC 25010: 2011 Systems and software engineering — Systems and software Quality Requirements and Evaluation (SQuaRE) — System and software quality models},
  author={{International Organization for Standardization}},
  year={2013},
  url={https://www.iso.org/obp/ui/#iso:std:iso-iec:25010:ed-1:v1:en}
}

@misc{ISO25010:2023,
  title        = {ISO/IEC 25010:2023 Systems and software engineering — Systems and software Quality Requirements and Evaluation (SQuaRE) — System and software quality models},
  author={{International Organization for Standardization}},
  year         = {2023},
  month        = {December},
  url          = {https://www.iso.org/obp/ui/en/#iso:std:iso-iec:25010:ed-2:v1:en}
}

@misc{ISO9126,
  title = {{ISO/IEC 9126-1: Software Engineering - Product Quality - Part 1: Quality Model}},
  author = {{International Organization for Standardization}},
  year = {2001},
  url = {https://www.iso.org/standard/22749.html}
}

@article{Palma2020TowardsAC,
  title={Towards a Catalogue of Software Quality Metrics for Infrastructure Code},
  author={Stefano Dalla Palma and Dario Di Nucci and Fabio Palomba and Damian Andrew Tamburri},
  journal={ArXiv},
  year={2020},
  volume={abs/2005.13474},
  url={https://api.semanticscholar.org/CorpusID:218900954}
}

@article{Rahman_2019,
   title={Source code properties of defective infrastructure as code scripts},
   volume={112},
   ISSN={0950-5849},
   url={http://dx.doi.org/10.1016/j.infsof.2019.04.013},
   DOI={10.1016/j.infsof.2019.04.013},
   journal={Information and Software Technology},
   publisher={Elsevier BV},
   author={Rahman, Akond and Williams, Laurie},
   year={2019},
   month=aug, pages={148–163} }


@inproceedings{TerraMetrics,
author = {Begoug, Mahi and Chouchen, Moataz and Ouni, Ali},
title = {{TerraMetrics}: An Open Source Tool for {Infrastructure-as-Code} ({IaC}) Quality Metrics in {Terraform}},
year = {2024},
isbn = {9798400705861},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3643916.3644439},
doi = {10.1145/3643916.3644439},
abstract = {Infrastructure-as-Code (IaC) constitutes a pivotal DevOps methodology, leading edge of software deployment onto cloud platforms. IaC relies on source code files rather than manual configuration to manage the infrastructure of a software system. Terraform, an IaC tool and its declarative configuration language named HCL, has recently garnered considerable attention among IaC practitioners. Like other software artefacts, Terraform files could be affected by misconfigurations, faults, and smells. Therefore, DevOps practitioners might benefit from a quality assurance tool to help them perform quality assurance activities on Terrafrom artefacts. This paper introduces TerraMetrics, an open-source tool designed to characterize the quality of Terraform artefacts by providing a catalogue of 40 quality metrics. TerraMetrics leverages the Terraform Abstract Syntax Tree (AST) to extract the metric list, offering a potentially enduring solution compared to conventional regular expressions. This tool comprises three main components: (i) a parser transforming HCL code into an AST, (ii) visitors that traverse the AST nodes to extract the metrics, and (iii) collectors for storing the collected metrics in JSON format. The TerraMetrics tool is publicly available as an Open Source tool, with a demo video, at: https://github.com/stilab-ets/terametrics.},
booktitle = {Proceedings of the 32nd IEEE/ACM International Conference on Program Comprehension},
pages = {450–454},
numpages = {5},
keywords = {infrastructure-as-code, terraform, HCL, quality metrics, AST},
location = {Lisbon, Portugal},
series = {ICPC '24}
}

@book{stock2020introduction,
  title        = {Introduction to Econometrics},
  author       = {Stock, James H. and Watson, Mark W.},
  edition      = {4th},
  year         = {2020},
  publisher    = {Pearson},
  address      = {Boston, MA},
  isbn         = {9780134461366},
}

@misc{Ansible,
  title        = {Ansible},
  author       = {{Ansible Community}},
  organization = {Red Hat, Inc.},
  url          = {https://www.ansible.com/},
  version      = {8.1.0},
  year         = {2023}
}

@book{AnsibleBook,
  title         = {Ansible: Up and Running},
  edition       = {3rd Edition},
  author        = {Bas Meijer and Lorin Hochstein and René Moser},
  publisher     = {O'Reilly Media},
  address       = {Sebastopol, CA},
  year          = 2022
}

@misc{Puppet,
  title        = {Puppet},
  author       = {Puppet, Inc.},
  url          = {https://puppet.com/},
  version      = {8.3.0},
  year         = {2023}
}

@book{PuppetBook,
  title        = {Puppet 8 for {DevOps}Engineers: Automate Your Infrastructure at an Enterprise Scale},
  author        = {David Sandilands},
  publisher     = {Packt Publishing},
  address       = {Birmingham, UK},
  year          = 2023
}

@misc{Terraform,
  title        = {Terraform},
  author       = {HashiCorp},
  url          = {https://www.terraform.io/},
  version      = {1.6.0},
  year         = {2023}
}

@book{TerraformBook,
  title        = {Terraform in Action},
  author       = {Scott Winkler},
  publisher    = {Manning},
  address      = {Shelter Island},
  year         = 2021
}


@book{ChefBook,
  title         = {Mastering Chef Provisioning},
  author        = {Earl Waud},
  publisher     = {Packt Publishing},
  address       = {Birmingham, UK},
  year          = 2016
}

@misc{AnsibleGalaxy,
  title        = {Ansible {Galaxy}},
  author       = {{Ansible Community}},
  organization = {Red Hat, Inc.},
  url          = {https://galaxy.ansible.com/},
  year         = {2023}
}


@misc{CloudFormation,
  title        = {{AWS} {CloudFormation}},
  author       = {{Amazon Web Services, Inc.}},
  url          = {https://aws.amazon.com/cloudformation/},
  year         = {2023}
}

@misc{Chef,
  title        = {Chef},
  author       = {{Chef Software, Inc.}},
  url          = {https://www.chef.io/},
  year         = {2023}
}

@misc{Packer,
  title        = {Packer},
  author       = {HashiCorp},
  url          = {https://www.packer.io/},
  version      = {1.9.0},
  year         = {2023}
}

@book{PackerBook,
  title         = {{HashiCorp} {Packer} in Production: Efficiently Manage Sets of Images for Your Digital Transformation Or Cloud Adoption Journey},
  author        = {John Boero},
  publisher     = {Packt Publishing},
  address       = {Birmingham, UK},
  year          = 2023
}

@misc{Docker,
  title        = {Docker},
  author       = {{Docker, Inc.}},
  url          = {https://www.docker.com/},
  version      = {24.0.2},
  year         = {2023}
}


@book{DockerBook,
  title         = {Docker: Up and Running},
  edition       = {3rd Edition},
  author        = {Sean P. Kane and Karl Matthias},
  publisher     = {O'Reilly Media},
  address       = {Sebastopol, CA},
  year          = 2023
}


@misc{ChefSupermarket,
  title        = {Chef Supermarket},
  author       = {Chef},
  url          = {https://supermarket.chef.io/},
  year         = {2024}
}

@misc{AzureARMTemplates,
  title        = {{Azure Resource Manager} ({ARM}) Templates},
  author       = {Azure},
  url          = {https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/},
  year         = {2024}
}

@misc{GoogleCloudDeploymentManager,
  title        = {Google Cloud Deployment Manager},
  author       = {{Google Cloud}},
  url          = {https://cloud.google.com/deployment-manager},
  year         = {2024}
}

@misc{SaltStack,
  title        = {{SaltStack} ({Salt})},
  author       = {SaltStack},
  url          = {https://saltproject.io/},
  year         = {2024}
}

@misc{TerraformRegistry,
  title        = {Terraform Registry},
  author       = {Terraform},
  url          = {https://registry.terraform.io/},
  year         = {2024}
}

@misc{AzureQuickstartTemplates,
  title        = {Azure Quickstart Templates},
  author       = {Azure},
  url          = {https://github.com/Azure/azure-quickstart-templates},
  year         = {2024}
}

@misc{PuppetForge,
  title        = {Puppet Forge},
  author       = {Puppet},
  url          = {https://forge.puppet.com/},
  year         = {2024}
}

@misc{SaltStackFormula,
  title        = {{SaltStack} Formula ({Salt})},
  author       = {SaltStack},
  url          = {https://github.com/saltstack-formulas},
  year         = {2024}
}

@misc{Yamllint,
  title = {`yamllint' Documentation: A linter for {YAML} files},
  author = {Adrien Cunin},
  year = {2023},
  url = {https://yamllint.readthedocs.io}
}

@misc{AnsibleLint,
  title = {ansible-lint - Checks playbooks for practices and behavior that could potentially be improved},
  author = {Will Thames and contributors},
  year = {2023},
  url = {https://ansible-lint.readthedocs.io}
}



@INPROCEEDINGS{pandusok,

  author={Reddy Konala, Pandu Ranga and Kumar, Vimal and Bainbridge, David},
  booktitle={2023 IEEE International Conference on Cyber Security and Resilience (CSR)}, 
  title={{SoK}: Static Configuration Analysis in Infrastructure as Code Scripts}, 
  year={2023},
  volume={},
  number={},
  pages={281-288},
  keywords={Surveys;Codes;Buildings;Configuration management;Software systems;Security;Task analysis;devops;devsecops;sok;survey;empirical study;infrastructure as code;code;security;smells;defects;static configuration analysis},
  doi={10.1109/CSR57506.2023.10224925}}


@misc{oecd_2022,
	author       = {OECD},
	title        = {Financing {SMEs} and Entrepreneurs 2020 : An {OECD} Scoreboard},
	year         = 2022,
	publisher    = {OECD},
	url          = {https://www.oecd-ilibrary.org/sites/a819a8fe-en/index.html?itemId=/content/component/a819a8fe-en}
}
@article{brown2016state,
	title        = {state of DevOps report},
	author       = {Brown, Alanna and Forsgren, Nicole and Humble, Jez and Kersten, Nigel and Kim, Gene},
	year         = 2016,
	journal      = {Puppet Reports}
}

@article{6265084,
	title        = {Don't Install Software by Hand},
	author       = {Spinellis, Diomidis},
	year         = 2012,
	journal      = {IEEE Software},
	volume       = 29,
	number       = 4,
	pages        = {86--87},
	doi          = {10.1109/MS.2012.85}
}

@inproceedings{10.5555/2820518.2820527,
	title        = {Co-Evolution of Infrastructure and Source Code: An Empirical Study},
	author       = {Jiang, Yujuan and Adams, Bram},
	year         = 2015,
	booktitle    = {Proceedings of the 12th Working Conference on Mining Software Repositories},
	location     = {Florence, Italy},
	publisher    = {IEEE Press},
	series       = {MSR '15},
	pages        = {45–55},
	isbn         = 9780769555942,
	abstract     = {Infrastructure-as-code automates the process of configuring and setting up the environment (e.g., servers, VMs and databases) in which a software system will be tested and/or deployed, through textual specification files in a language like Puppet or Chef. Since the environment is instantiated automatically by the infrastructure languages' tools, no manual intervention is necessary apart from maintaining the infrastructure specification files. The amount of work involved with such maintenance, as well as the size and complexity of infrastructure specification files, have not yet been studied empirically. Through an empirical study of the version control system of 265 OpenStack projects, we find that infrastructure files are large and churn frequently, which could indicate a potential of introducing bugs. Furthermore, we found that the infrastructure code files are coupled tightly with the other files in a project, especially test files, which implies that testers often need to change infrastructure specifications when making changes to the test framework and tests.},
	numpages     = 11
}

@misc{jackson_2022,
	title        = {Uber breach 2022 – everything you need to know},
	author       = {Jackson, Mackenzie},
	year         = 2022,
	month        = {Nov},
	journal      = {GitGuardian Blog - Automated Secrets Detection},
	publisher    = {GitGuardian Blog - Automated Secrets Detection},
	url          = {https://blog.gitguardian.com/uber-breach-2022/}
}

@book{Wang_2022,
  title={Infrastructure as Code, Patterns and Practices: With examples in Python and Terraform},
  author={Wang, Rosemary},
  isbn={9781617298295},
  lccn={2022289477},
  series={ITpro collection},
  year={2022},
  publisher={Manning}
}

@misc{Ozanich_2022,
	title        = {Understanding the DevOps pipeline & how to build one},
	author       = {Ozanich, Athena},
	year         = 2022,
	month        = {Sep},
	journal      = {HubSpot},
	url          = {https://blog.hubspot.com/website/devops-pipeline},
	language     = {en}
}

@misc{Bhat_2019,
	title        = {Four Steps to Adopt Open-Source Software as part of the DevOps toolchain},
	author       = {Bhat, Manjunath},
	year         = 2019,
	month        = {Feb},
	journal      = {Manjunath Bhat},
	url          = {https://blogs.gartner.com/manjunath-bhat/2019/02/08/four-steps-to-adopt-open-source-software-as-part-of-the-devops-toolchain/},
	language     = {en}
}

@misc{Vmware_Art,
	title        = {What is configuration Management?},
	year         = 2022,
	month        = {Nov},
	journal      = {VMware},
	url          = {https://www.vmware.com/topics/glossary/content/configuration-management.html},
	language     = {en}
}

@article{kerravala2004value,
	title        = {As the value of enterprise networks escalates, so does the need for configuration management},
	author       = {Kerravala, Zeus},
	year         = 2004,
	journal      = {The Yankee Group},
	volume       = 4,
	url	     = {https://www.cs.princeton.edu/courses/archive/spring12/cos461/papers/Yankee04.pdf}
}

@misc{torberntsson2014study,
	title        = {A Study of Configuration Management Systems: Solutions for Deployment and Configurationof Software in a Cloud Environment},
	author       = {Torberntsson, Kim and Rydin, Ylva},
	year         = 2014
}

@mastersthesis{ty,
	title        = {Study of Configuration Management Systems : Solutions for Deployment and Configurationof Software in a Cloud Environment’, Dissertation},
	author       = {K. Torberntsson and Y. Rydin, ‘a},
	year         = 2014,
	note         = {(B.S. Thesis)},
	school       = {Uppsala University, Sweden}
}

@inproceedings{10.1007/978-3-319-67383-7_2,
	title        = {DevSecOps: A Multivocal Literature Review},
	author       = {Myrbakken, H{\aa}vard and Colomo-Palacios, Ricardo},
	year         = 2017,
	booktitle    = {Software Process Improvement and Capability Determination},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {17--29},
	isbn         = {978-3-319-67383-7},
	editor       = {Mas, Antonia and Mesquida, Antoni and O'Connor, Rory V. and Rout, Terry and Dorling, Alec},
	abstract     = {Involving security in DevOps has been a challenge because traditional security methods have been unable to keep up with DevOps' agility and speed. DevSecOps is the movement that works on developing and integrating modernized security methods that can keep up with DevOps. This study is meant to give an overview of what DevSecOps is, what implementing DevSecOps means, the benefits gained from DevSecOps and the challenges an organization faces when doing so. To that end, we conducted a multivocal literature review, where we reviewed a selection of grey literature. We found that implementing security that can keep up with DevOps is a challenge, but it can gain great benefits if done correctly.}
}

@misc{micro_focus,
	author       = {Microfocus},
	title	     = {What is DevSecOps?},
	url          = {https://www.microfocus.co\\m/en-us/what-is/devsecops}
}

@inproceedings{9779848,
	title        = {Static Analysis of Infrastructure as Code: a Survey},
	author       = {Chiari, Michele and De Pascalis, Michele and Pradella, Matteo},
	year         = 2022,
	booktitle    = {2022 IEEE 19th International Conference on Software Architecture Companion (ICSA-C)},
	volume       = {},
	number       = {},
	pages        = {218--225},
	doi          = {10.1109/ICSA-C54293.2022.00049}
}

@inproceedings{8812041,
	title        = {The Seven Sins: Security Smells in Infrastructure as Code Scripts},
	author       = {Rahman, Akond and Parnin, Chris and Williams, Laurie},
	year         = 2019,
	booktitle    = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	volume       = {},
	number       = {},
	pages        = {164--175},
	doi          = {10.1109/ICSE.2019.00033}
}

@misc{saldana2015coding,
	title        = {The Coding Manual for Qualitative Researchers. SAGE Publishing},
	author       = {Salda{\~n}a, J},
	year         = 2015
}

@misc{CWE,
	title        = {Common Weakness Enumeration},
	journal      = {Mitre.org},
	url          = {https://cwe.mitre.org/index.html},
	language     = {en}
}

@article{10.1145/3408897,
	title        = {Security Smells in Ansible and Chef Scripts: A Replication Study},
	author       = {Rahman, Akond and Rahman, Md Rayhanur and Parnin, Chris and Williams, Laurie},
	year         = 2021,
	month        = 1,
	journal      = {ACM Trans. Softw. Eng. Methodol.},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	volume       = 30,
	number       = 1,
	doi          = {10.1145/3408897},
	issn         = {1049-331X},
	url          = {https://doi.org/10.1145/3408897},
	issue_date   = {January 2021},
	abstract     = {Context: Security smells are recurring coding patterns that are indicative of security weakness and require further inspection. As infrastructure as code (IaC) scripts, such as Ansible and Chef scripts, are used to provision cloud-based servers and systems at scale, security smells in IaC scripts could be used to enable malicious users to exploit vulnerabilities in the provisioned systems. Goal: The goal of this article is to help practitioners avoid insecure coding practices while developing infrastructure as code scripts through an empirical study of security smells in Ansible and Chef scripts. Methodology: We conduct a replication study where we apply qualitative analysis with 1,956 IaC scripts to identify security smells for IaC scripts written in two languages: Ansible and Chef. We construct a static analysis tool called Security Linter for Ansible and Chef scripts (SLAC) to automatically identify security smells in 50,323 scripts collected from 813 open source software repositories. We also submit bug reports for 1,000 randomly selected smell occurrences. Results: We identify two security smells not reported in prior work: missing default in case statement and no integrity check. By applying SLAC we identify 46,600 occurrences of security smells that include 7,849 hard-coded passwords. We observe agreement for 65 of the responded 94 bug reports, which suggests the relevance of security smells for Ansible and Chef scripts amongst practitioners. Conclusion: We observe security smells to be prevalent in Ansible and Chef scripts, similarly to that of the Puppet scripts. We recommend practitioners to rigorously inspect the presence of the identified security smells in Ansible and Chef scripts using (i) code review, and (ii) static analysis tools.},
	articleno    = 3,
	numpages     = 31,
	keywords     = {security, devsecops, devops, configuration as code, Ansible, infrastructure as code, configuration scripts, smell, insecure coding, chef, static analysis, empirical study}
}

@inproceedings{10.1145/3416505.3423564,
	title        = {DeepIaC: Deep Learning-Based Linguistic Anti-Pattern Detection in IaC},
	author       = {Borovits, Nemania and Kumara, Indika and Krishnan, Parvathy and Palma, Stefano Dalla and Di Nucci, Dario and Palomba, Fabio and Tamburri, Damian A. and van den Heuvel, Willem-Jan},
	year         = 2020,
	booktitle    = {Proceedings of the 4th ACM SIGSOFT International Workshop on Machine-Learning Techniques for Software-Quality Evaluation},
	location     = {Virtual, USA},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {MaLTeSQuE 2020},
	pages        = {7–12},
	doi          = {10.1145/3416505.3423564},
	isbn         = 9781450381246,
	url          = {https://doi.org/10.1145/3416505.3423564},
	abstract     = {Linguistic anti-patterns are recurring poor practices concerning inconsistencies among the naming, documentation, and implementation of an entity. They impede readability, understandability, and maintainability of source code. This paper attempts to detect linguistic anti-patterns in infrastructure as code (IaC) scripts used to provision and manage computing environments. In particular, we consider inconsistencies between the logic/body of IaC code units and their names. To this end, we propose a novel automated approach that employs word embeddings and deep learning techniques. We build and use the abstract syntax tree of IaC code units to create their code embedments. Our experiments with a dataset systematically extracted from open source repositories show that our approach yields an accuracy between 0.785 and 0.915 in detecting inconsistencies.},
	numpages     = 6,
	keywords     = {IaC, Linguistic Anti-patterns, Code Embedding, Infrastructure Code, Word2Vec, Defects, Deep Learning}
}

@inproceedings{9284113,
	title        = {Gang of Eight: A Defect Taxonomy for Infrastructure as Code Scripts},
	author       = {Rahman, Akond and Farhana, Effat and Parnin, Chris and Williams, Laurie},
	year         = 2020,
	booktitle    = {2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)},
	volume       = {},
	number       = {},
	pages        = {752--764},
	doi          = {10.1145/3377811.3380409}
}

@inproceedings{10.1007/978-3-319-24072-5_2,
	title        = {Modelling and Analysing Cloud Application Management},
	author       = {Brogi, Antonio and Canciani, Andrea and Soldani, Jacopo},
	year         = 2015,
	booktitle    = {Service Oriented and Cloud Computing},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {19--33},
	isbn         = {978-3-319-24072-5},
	editor       = {Dustdar, Schahram and Leymann, Frank and Villari, Massimo},
	abstract     = {Managing complex applications over heterogeneous clouds is one of the emerging problems in the cloud era. The OASIS Topology and Orchestration Specification for Cloud Applications (TOSCA) aims at solving this problem by providing a language to describe and manage complex cloud applications in a portable and vendor-agnostic way. TOSCA permits to define an application as an orchestration of components, whose types can specify states, requirements, capabilities and management operations --- but not how they interact with each other.}
}

@inproceedings{8590193,
	title        = {Code Smells in Infrastructure as Code},
	author       = {Schwarz, Julian and Steffens, Andreas and Lichter, Horst},
	year         = 2018,
	booktitle    = {2018 11th International Conference on the Quality of Information and Communications Technology (QUATIC)},
	volume       = {},
	number       = {},
	pages        = {220--228},
	doi          = {10.1109/QUATIC.2018.00040}
}

@inproceedings{10.1007/978-3-030-72013-1_6,
	title        = {Analyzing Infrastructure as Code to Prevent Intra-update Sniping Vulnerabilities},
	author       = {Lepiller, Julien and Piskac, Ruzica and Sch{\"a}f, Martin and Santolucito, Mark},
	year         = 2021,
	booktitle    = {Tools and Algorithms for the Construction and Analysis of Systems},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {105--123},
	isbn         = {978-3-030-72013-1},
	editor       = {Groote, Jan Friso and Larsen, Kim Guldstrand},
	abstract     = {Infrastructure as Code is a new approach to computing infrastructure management that allows users to leverage tools such as version control, automatic deployments, and program analysis for infrastructure configurations. This approach allows for faster and more homogeneous configuration of a complete infrastructure. Infrastructure as Code languages, such as CloudFormation or TerraForm, use a declarative model so that users only need to describe the desired state of the infrastructure. However, in practice, these languages are not processed atomically. During an upgrade, the infrastructure goes through a series of intermediate states. We identify a security vulnerability that occurs during an upgrade even when the initial and final states of the infrastructure are secure, and we show that those vulnerability are possible in Amazon's AWS and Google Cloud. We call such attacks intra-update sniping vulnerabilities. In order to mitigate this shortcoming, we present a technique that detects such vulnerabilities and pinpoints the root causes of insecure deployment migrations. We implement this technique in a tool, H{\"a}yh{\"a}, that uses dataflow graph analysis. We evaluate our tool on a set of open-source CloudFormation templates and find that it is scalable and could be used as part of a deployment workflow.}
}

@inproceedings{7832899,
	title        = {Does Your Configuration Code Smell?},
	author       = {Sharma, Tushar and Fragkoulis, Marios and Spinellis, Diomidis},
	year         = 2016,
	booktitle    = {2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR)},
	volume       = {},
	number       = {},
	pages        = {189--200},
	doi          = {}
}

@article{9321740,
  author={Dalla Palma, Stefano and Di Nucci, Dario and Palomba, Fabio and Tamburri, Damian A.},
  journal={IEEE Transactions on Software Engineering}, 
  title={Within-Project Defect Prediction of Infrastructure-as-Code Using Product and Process Metrics}, 
  year={2022},
  volume={48},
  number={6},
  pages={2086-2104},
  doi={10.1109/TSE.2021.3051492}}

@inproceedings{10.1145/2908080.2908083,
	title        = {Rehearsal: A Configuration Verification Tool for Puppet},
	author       = {Shambaugh, Rian and Weiss, Aaron and Guha, Arjun},
	year         = 2016,
	booktitle    = {Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
	location     = {Santa Barbara, CA, USA},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {PLDI '16},
	pages        = {416–430},
	doi          = {10.1145/2908080.2908083},
	isbn         = 9781450342612,
	url          = {https://doi.org/10.1145/2908080.2908083},
	abstract     = {Large-scale data centers and cloud computing have turned system configuration into a challenging problem. Several widely-publicized outages have been blamed not on software bugs, but on configuration bugs. To cope, thousands of organizations use system configuration languages to manage their computing infrastructure. Of these, Puppet is the most widely used with thousands of paying customers and many more open-source users. The heart of Puppet is a domain-specific language that describes the state of a system. Puppet already performs some basic static checks, but they only prevent a narrow range of errors. Furthermore, testing is ineffective because many errors are only triggered under specific machine states that are difficult to predict and reproduce. With several examples, we show that a key problem with Puppet is that configurations can be non-deterministic. This paper presents Rehearsal, a verification tool for Puppet configurations. Rehearsal implements a sound, complete, and scalable determinacy analysis for Puppet. To develop it, we (1) present a formal semantics for Puppet, (2) use several analyses to shrink our models to a tractable size, and (3) frame determinism-checking as decidable formulas for an SMT solver. Rehearsal then leverages the determinacy analysis to check other important properties, such as idempotency. Finally, we apply Rehearsal to several real-world Puppet configurations.},
	numpages     = 15,
	keywords     = {Puppet, verification, system configuration, domain-specific languages}
}

@article{jayaraman2014automated,
	title        = {Automated analysis and debugging of network connectivity policies},
	author       = "Jayaraman, Karthick and Bj{\o}rner, Nikolaj and Outhred, Geoff and Kaufman, Charlie",
	year         = 2014,
	journal      = {Microsoft Research},
	pages        = {1--11}
}

@inproceedings{10.1145/3419111.3421303,
	title        = {Automatically Detecting Risky Scripts in Infrastructure Code},
	author       = {Dai, Ting and Karve, Alexei and Koper, Grzegorz and Zeng, Sai},
	year         = 2020,
	booktitle    = {Proceedings of the 11th ACM Symposium on Cloud Computing},
	location     = {Virtual Event, USA},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {SoCC '20},
	pages        = {358–371},
	doi          = {10.1145/3419111.3421303},
	isbn         = 9781450381376,
	abstract     = {Infrastructure code supports embedded scripting languages such as Shell and PowerShell to manage the infrastructure resources and conduct life-cycle operations. Risky patterns in the embedded scripts have widespread of negative impacts across the whole infrastructure, causing disastrous consequences. In this paper, we propose an analysis framework, which can automatically extract and compose the embedded scripts from infrastructure code before detecting their risky code patterns with correlated severity levels and negative impacts. We implement SecureCode based on the proposed framework to check infrastructure code supported by Ansible, i.e., Ansible playbooks. We integrate SecureCode with the DevOp pipeline deployed in IBM cloud and test Secure-Code on 45 IBM Services community repositories. Our evaluation shows that SecureCode can efficiently and effectively identify 3419 true issues with 116 false positives in minutes. Among the 3419 true issues, 1691 have high severity levels.},
	numpages     = 14,
	keywords     = {powershell, performance, shell, infrastructure-as-code, security, availability, ansible, reliability, static analysis}
}

@inproceedings{inproceedings,
	title        = {Towards Semantic Detection of Smells in Cloud Infrastructure Code},
	author       = {Kumara, Indika and Vasileiou, Zoe and Meditskos, Georgios and Tamburri, Damian and Heuvel, Willem-Jan and Karakostas, Anastasios and Vrochidis, Stefanos and Kompatsiaris, Ioannis},
	year         = 2020,
	month        = {06},
	pages        = {63--67},
	doi          = {10.1145/3405962.3405979}
}

@inproceedings{10.1007/978-3-319-94764-8_1,
	title        = {Sommelier: A Tool for Validating TOSCA Application Topologies},
	author       = {Brogi, Antonio and Di Tommaso, Antonio and Soldani, Jacopo},
	year         = 2018,
	booktitle    = {Model-Driven Engineering and Software Development},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {1--22},
	isbn         = {978-3-319-94764-8},
	editor       = {Pires, Lu{\'i}s Ferreira and Hammoudi, Slimane and Selic, Bran},
	abstract     = {TOSCA is an OASIS standard for specifying cloud applications and automating their management. The topology of a cloud application can be described as a typed and directed graph. The latter can then be automatically processed by so-called TOSCA engines to automate the deployment and management of the described application on cloud platforms. In this paper we first illustrate the conditions ensuring the validity of a TOSCA application topology. We then introduce Sommelier, an open-source validator of TOSCA application topologies based on such validity conditions.}
}

@misc{GLITCH,
	title        = {GLITCH: Automated Polyglot Security Smell Detection in Infrastructure as Code},
	author       = {Saavedra, Nuno and Ferreira, João F.},
	year         = 2022,
	publisher    = {arXiv},
	doi          = {10.48550/ARXIV.2205.14371},
	url          = {https://arxiv.org/abs/2205.14371},
	copyright    = {arXiv.org perpetual, non-exclusive license},
	keywords     = {Cryptography and Security (cs.CR), Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences}
}

@inproceedings{9787876,
	title        = {As Code Testing: Characterizing Test Quality in Open Source Ansible Development},
	author       = {Hassan, Mohammad Mehedi and Rahman, Akond},
	year         = 2022,
	booktitle    = {2022 IEEE Conference on Software Testing, Verification and Validation (ICST)},
	volume       = {},
	number       = {},
	pages        = {208--219},
	doi          = {10.1109/ICST53961.2022.00031}
}

@misc{Cookstyle,
  title        = {Cookstyle},
  author       = {Chef},
  url          = {https://github.com/chef/cookstyle},
  version      = {7.32.1},
  year         = {2023}
}


@software{SonarQube,
	title        = {SonarQube},
	author       = {{Sonar}},
	url          = {https://www.sonarsource.com/products/sonarqube/}
}

@software{Semgrep,
	title        = {Semgrep},
	author       = {{Semgrep}},
	url          = {semgrep.dev}	
}

@software{SnykIaC,
	title        = {SnykIaC},
	author       = {{SNYK}},
	url          = {https://snyk.io/product/infrastructure-as-code-security/}
}

@software{Checkov,
	title        = {Checkov},
	author       = {{BridgeCrew}},
	url          = {https://www.checkov.io/}
}

@software{KICS,
	title        = {KICS},
	author       = {{Checkmarx}},
	url          = {https://www.kics.io/}
}

@software{Bandit,
	title        = {Bandit},
	author       = {{PyCQA}},
	url          = {https://github.com/PyCQA/bandit},
	version      = {1.7.4}
}

@software{CloudSploit,
	title        = {CloudSploit},
	author       = {{Aqua}},
	url          = {cloudsploit.com}
}

@software{tfsec,
	title        = {tfsec},
	author       = {{aquasecurity}},
	url          = {https://github.com/aquasecurity/tfsec},
	version      = {1.28.1}
}

@software{GitLab,
	title        = {About the one DevOps Platform},
	author       = {{GitLab}},
	url          = {https://about.gitlab.com/}
}

@software{Aerides,
	title        = {Aerides},
	author       = {{Erik Steringer}},
	url          = {https://github.com/ncc-erik-steringer/Aerides}
}

@software{PMapper,
	title        = {PMapper},
	author       = {{NCCGroup}},
	url          = {https://github.com/nccgroup/PMapper},
	version      = {1.1.5}
}

@software{CloudMapper,
	title        = {CloudMapper},
	author       = {{Duo Labs}},
	url          = {https://github.com/duo-labs/cloudmapper},
	version      = {2.10.0}
}

@software{Cartography,
	title        = {Cartography},
	author       = {{lyft}},
	url          = {https://github.com/lyft/cartography},
	version      = {0.66.1}
}

@software{Hammer,
	title        = {Hammer},
	author       = {{Dow Jones}},
	url          = {https://github.com/dowjones/hammer}
}

@software{BloodHound,
	title        = {BloodHound},
	author       = {{BloodHound Enterprise}},
	url          = {https://github.com/BloodHoundAD/BloodHound},
	version      = {4.2.0}
}

@software{ANGRYPUPPY,
	title        = {ANGRYPUPPY},
	author       = {{vysecurity}},
	url          = {https://github.com/vysecurity/ANGRYPUPPY}
}

@software{SecurityMonkey,
	title        = {SecurityMonkey},
	author       = {{Netflix}},
	url          = {https://github.com/Netflix/security_monkey},
	version      = {1.1.3}
}

@software{Prowler,
	title        = {Prowler},
	author       = {{Prowler Cloud}},
	url          = {https://github.com/prowler-cloud/prowler},
	version      = {2.12.0}
}

@software{ChaosMonkey,
	title        = {ChaosMonkey},
	author       = {{Netflix}},
	url          = {https://github.com/Netflix/chaosmonkey}
}

@software{TomcatAnsiblePlaybook,
	title        = {Tomcat Ansible Playbook},
	author       = {{Jumtai}},
	url          = {https://github.com/jmutai/tomcat-ansible}
}

@software{ShellCheck,
	title        = {ShellCheck},
	author       = {{koalaman}},
	url          = {https://github.com/koalaman/shellcheck},
	version      = {0.8.0}
}

@software{PSScriptAnalyzer,
	title        = {PSScriptAnalyzer},
	author       = {{Microsoft}},
	url          = {https://github.com/PowerShell/PSScriptAnalyzer}
}

@article{4339230,
author = {Fluri, Beat and Wuersch, Michael and PInzger, Martin and Gall, Harald},
title = {Change Distilling: Tree Differencing for Fine-Grained Source Code Change Extraction},
year = {2007},
issue_date = {November 2007},
publisher = {IEEE Press},
volume = {33},
number = {11},
issn = {0098-5589},
url = {https://doi.org/10.1109/TSE.2007.70731},
doi = {10.1109/TSE.2007.70731},
journal = {IEEE Trans. Softw. Eng.},
month = {nov},
pages = {725–743},
numpages = {19},
keywords = {tree differencing algorithms, Source code change extraction, software evolution analysis, software repositories}
}

@inproceedings{Gangemi2003UnderstandingTS,
  title={Understanding the Semantic Web through Descriptions and Situations},
  author={Aldo Gangemi and Peter Mika},
  booktitle={OTM Conferences / Workshops},
  year={2003}
}

@misc{CWE_798,
	title        = {About CWE-798: Use of Hard-coded Credentials},
	author       = {Mitre},
	year         = 2018,
	url          = {https://cwe.mitre.org/data/definitions/798.html}
}

@article{GRUBER1993199,
	title        = {A translation approach to portable ontology specifications},
	author       = {Thomas R. Gruber},
	year         = 1993,
	journal      = {Knowledge Acquisition},
	volume       = 5,
	number       = 2,
	pages        = {199--220},
	doi          = {https://doi.org/10.1006/knac.1993.1008},
	issn         = {1042-8143},
	url          = {https://www.sciencedirect.com/science/article/pii/S1042814383710083},
	abstract     = {To support the sharing and reuse of formally represented knowledge among AI systems, it is useful to define the common vocabulary in which shared knowledge is represented. A specification of a representational vocabulary for a shared domain of discourse—definitions of classes, relations, functions, and other objects—is called an ontology. This paper describes a mechanism for defining ontologies that are portable over representation systems. Definitions written in a standard format for predicate calculus are translated by a system called Ontolingua into specialized representations, including frame-based systems as well as relational languages. This allows researchers to share and reuse ontologies, while retaining the computational benefits of specialized implementations. We discuss how the translation approach to portability addresses several technical problems. One problem is how to accommodate the stylistic and organizational differences among representations while preserving declarative content. Another is how to translate from a very expressive language into restricted languages, remaining system-independent while preserving the computational efficiency of implemented systems. We describe how these problems are addressed by basing Ontolingua itself on an ontology of domain-independent, representational idioms.}
}

@inproceedings{8919181,
  author={Guerriero, MIchele and Garriga, Martin and Tamburri, Damian A. and Palomba, Fabio},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Adoption, Support, and Challenges of Infrastructure-as-Code: Insights from Industry}, 
  year={2019},
  volume={},
  number={},
  pages={580-589},
  doi={10.1109/ICSME.2019.00092}}


@inproceedings{9282777,
	title        = {An Empirical Study of Utilization of Imperative Modules in Ansible},
	author       = {Kokuryo, Shoma and Kondo, Masanari and Mizuno, Osamu},
	year         = 2020,
	booktitle    = {2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)},
	volume       = {},
	number       = {},
	pages        = {442--449},
	doi          = {10.1109/QRS51102.2020.00063}
}

@article{DALLAPALMA2020100633,
	title        = {AnsibleMetrics: A Python library for measuring Infrastructure-as-Code blueprints in Ansible},
	author       = {Stefano {Dalla Palma} and Dario {Di Nucci} and Damian A. Tamburri},
	year         = 2020,
	journal      = {SoftwareX},
	volume       = 12,
	pages        = 100633,
	doi          = {https://doi.org/10.1016/j.softx.2020.100633},
	issn         = {2352-7110},
	url          = {https://www.sciencedirect.com/science/article/pii/S2352711020303460},
	keywords     = {Infrastructure as Code, Software metrics, Software quality},
	abstract     = {Infrastructure-as-Code (IaC) has recently received increasing attention in the research community, mainly due to the paradigm shift it brings in software design, development, and operations management. However, while IaC represents an ever-increasing and widely adopted practice, concerns arise about the need for instruments that help DevOps engineers efficiently maintain, speedily evolve, and continuously improve Infrastructure-as-Code. In this paper, we present AnsibleMetrics, a Python-based static source code measurement tool to characterize Infrastructure-as-Code. Although we focus on Ansible, the most used language for IaC, our tool could be easily extended to support additional formats. AnsibleMetrics represents a step forward towards software quality support for DevOps engineers developing and maintaining infrastructure code.}
}

@inproceedings{10.1145/2983990.2984000,
	title        = {Asserting Reliable Convergence for Configuration Management Scripts},
	author       = {Hanappi, Oliver and Hummer, Waldemar and Dustdar, Schahram},
	year         = 2016,
	booktitle    = {Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
	location     = {Amsterdam, Netherlands},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {OOPSLA 2016},
	pages        = {328–343},
	doi          = {10.1145/2983990.2984000},
	isbn         = 9781450344449,
	url          = {https://doi.org/10.1145/2983990.2984000},
	abstract     = {The rise of elastically scaling applications that frequently deploy new machines has led to the adoption of DevOps practices across the cloud engineering stack. So-called configuration management tools utilize scripts that are based on declarative resource descriptions and make the system converge to the desired state. It is crucial for convergent configurations to be able to gracefully handle transient faults, e.g., network outages when downloading and installing software packages. In this paper we introduce a conceptual framework for asserting reliable convergence in configuration management. Based on a formal definition of configuration scripts and their resources, we utilize state transition graphs to test whether a script makes the system converge to the desired state under different conditions. In our generalized model, configuration actions are partially ordered, often resulting in prohibitively many possible execution orders. To reduce this problem space, we define and analyze a property called preservation, and we show that if preservation holds for all pairs of resources, then convergence holds for the entire configuration. Our implementation builds on Puppet, but the approach is equally applicable to other frameworks like Chef, Ansible, etc. We perform a comprehensive evaluation based on real world Puppet scripts and show the effectiveness of the approach. Our tool is able to detect all idempotence and convergence related issues in a set of existing Puppet scripts with known issues as well as some hitherto undiscovered bugs in a large random sample of scripts.},
	numpages     = 16,
	keywords     = {Convergence, Puppet, System Configuration Scripts, Declarative Language, Configuration Management, Testing, DevOps, Idempotence}
}

@inproceedings{8811921,
	title        = {Automated Reporting of Anti-Patterns and Decay in Continuous Integration},
	author       = {Vassallo, Carmine and Proksch, Sebastian and Gall, Harald C. and Di Penta, Massimiliano},
	year         = 2019,
	booktitle    = {2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE)},
	volume       = {},
	number       = {},
	pages        = {105--115},
	doi          = {10.1109/ICSE.2019.00028}
}

@inproceedings{10.1145/3384217.3385618,
	title        = {Can We Use Software Bug Reports to Identify Vulnerability Discovery Strategies?},
	author       = {Bhuiyan, Farzana Ahamed and Shakya, Raunak and Rahman, Akond},
	year         = 2020,
	booktitle    = {Proceedings of the 7th Symposium on Hot Topics in the Science of Security},
	location     = {Lawrence, Kansas},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {HotSoS '20},
	doi          = {10.1145/3384217.3385618},
	isbn         = 9781450375610,
	url          = {https://doi.org/10.1145/3384217.3385618},
	abstract     = {Daily horror stories related to software vulnerabilities necessitates the understanding of how vulnerabilities are discovered. Identification of data sources that can be leveraged to understand how vulnerabilities are discovered could aid cybersecurity researchers to characterize exploitation of vulnerabilities. The goal of the paper is to help cybersecurity researchers in characterizing vulnerabilities by conducting an empirical study of software bug reports. We apply qualitative analysis on 729, 908, and 5336 open source software (OSS) bug reports respectively, collected from Gentoo, LibreOffice, and Mozilla to investigate if bug reports include vulnerability discovery strategies i.e. sequences of computation and/or cognitive activities that an attacker performs to discover vulnerabilities, where the vulnerability is indexed by a credible source, such as the National Vulnerability Database (NVD). We evaluate two approaches namely, text feature-based approach and regular expression-based approach to automatically identify bug reports that include vulnerability discovery strategies.We observe the Gentoo, LibreOffice, and Mozilla bug reports to include vulnerability discovery strategies. Using text feature-based prediction models, we observe the highest prediction performance for the Mozilla dataset with a recall of 0.78. Using the regular expression-based approach we observe recall to be 0.83 for the same dataset. Findings from our paper provide the groundwork for cybersecurity researchers to use OSS bug reports as a data source for advancing the science of vulnerabilities.},
	articleno    = 7,
	numpages     = 10,
	keywords     = {vulnerability, strategy, empirical study, ethical hacking, bug report}
}

@misc{https://doi.org/10.48550/arxiv.1809.07937,
	title        = {Bugs in Infrastructure as Code},
	author       = {Rahman, Akond and Elder, Sarah and Shezan, Faysal Hossain and Frost, Vanessa and Stallings, Jonathan and Williams, Laurie},
	year         = 2018,
	publisher    = {arXiv},
	doi          = {10.48550/ARXIV.1809.07937},
	url          = {https://arxiv.org/abs/1809.07937},
	copyright    = {arXiv.org perpetual, non-exclusive license},
	keywords     = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences}
}

@inproceedings{8449631,
	title        = {Characteristics of Defective Infrastructure as Code Scripts in DevOps},
	author       = {Rahman, Akond},
	year         = 2018,
	booktitle    = {2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion)},
	volume       = {},
	number       = {},
	pages        = {476--479},
	doi          = {}
}

@inproceedings{10.1145/3417113.3422154,
	title        = {Characterizing Co-Located Insecure Coding Patterns in Infrastructure as Code Scripts},
	author       = {Bhuiyan, Farzana Ahamed and Rahman, Akond},
	year         = 2021,
	booktitle    = {Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering Workshops},
	location     = {Virtual Event, Australia},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {ASE '20},
	pages        = {27–32},
	doi          = {10.1145/3417113.3422154},
	isbn         = 9781450381284,
	url          = {https://doi.org/10.1145/3417113.3422154},
	abstract     = {Context: Insecure coding patterns (ICPs), such as hard-coded passwords can be inadvertently introduced in infrastructure as code (IaC) scripts, providing malicious users the opportunity to attack provisioned computing infrastructure. As performing code reviews is resource-intensive, a characterization of co-located ICPs, i.e., ICPs that occur together in a script can help practitioners to prioritize their review efforts and mitigate ICPs in IaC scripts. Objective: The goal of this paper is to help practitioners in prioritizing code review efforts for infrastructure as code (IaC) scripts by conducting an empirical study of co-located insecure coding patterns in IaC scripts. Methodology: We conduct an empirical study with 1613, 2764 and 2845 Puppet scripts respectively collected from three organizations namely, Mozilla, Openstack, and Wikimedia. We apply association rule mining to identify co-located ICPs in IaC scripts. Results: We observe 17.9\%, 32.9\%, and 26.7\% of the scripts to include co-located ICPs respectively, for Mozilla, Openstack, and Wikimedia. The most frequent co-located ICP category is hard-coded secret and suspicious comment. Conclusion: Practitioners can prioritize code review efforts for IaC scripts by reviewing scripts that include co-located ICPs.},
	numpages     = 6,
	keywords     = {co-location, insecure coding pattern, empirical study, infrastructure as code, devsecops, security, devops, puppet, configuration script}
}

@inproceedings{8367034,
	title        = {Characterizing Defective Configuration Scripts Used for Continuous Deployment},
	author       = {Rahman, Akond and Williams, Laurie},
	year         = 2018,
	booktitle    = {2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)},
	volume       = {},
	number       = {},
	pages        = {34--45},
	doi          = {10.1109/ICST.2018.00014}
}

@inproceedings{7180066,
	title        = {Co-evolution of Infrastructure and Source Code - An Empirical Study},
	author       = {Jiang, Yujuan and Adams, Bram},
	year         = 2015,
	booktitle    = {2015 IEEE/ACM 12th Working Conference on Mining Software Repositories},
	volume       = {},
	number       = {},
	pages        = {45--55},
	doi          = {10.1109/MSR.2015.12}
}

@inproceedings{9230007,
	title        = {Coding Practices and Recommendations of Spring Security for Enterprise Applications},
	author       = {Islam, Mazharul and Rahaman, Sazzadur and Meng, Na and Hassanshahi, Behnaz and Krishnan, Padmanabhan and Yao, Danfeng Daphne},
	year         = 2020,
	booktitle    = {2020 IEEE Secure Development (SecDev)},
	volume       = {},
	number       = {},
	pages        = {49--57},
	doi          = {10.1109/SecDev45635.2020.00024}
}

@article{9388795,
	title        = {Different Kind of Smells: Security Smells in Infrastructure as Code Scripts},
	author       = {Rahman, Akond and Williams, Laurie},
	year         = 2021,
	journal      = {IEEE Security & Privacy},
	volume       = 19,
	number       = 3,
	pages        = {33--41},
	doi          = {10.1109/MSEC.2021.3065190}
}

@inproceedings{9251924,
	title        = {Does Infrastructure as Code Adhere to Semantic Versioning? An Analysis of Ansible Role Evolution},
	author       = {Opdebeeck, Ruben and Zerouali, Ahmed and Velázquez-Rodríguez, Camilo and Roover, Coen De},
	year         = 2020,
	booktitle    = {2020 IEEE 20th International Working Conference on Source Code Analysis and Manipulation (SCAM)},
	volume       = {},
	number       = {},
	pages        = {238--248},
	doi          = {10.1109/SCAM51674.2020.00032}
}

@inproceedings{10.1145/3377811.3380384,
	title        = {Practical Fault Detection in Puppet Programs},
	author       = {Sotiropoulos, Thodoris and Mitropoulos, Dimitris and Spinellis, Diomidis},
	year         = 2020,
	booktitle    = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
	location     = {Seoul, South Korea},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {ICSE '20},
	pages        = {26–37},
	doi          = {10.1145/3377811.3380384},
	isbn         = 9781450371216,
	url          = {https://doi.org/10.1145/3377811.3380384},
	abstract     = {Puppet is a popular computer system configuration management tool. By providing abstractions that model system resources it allows administrators to set up computer systems in a reliable, predictable, and documented fashion. Its use suffers from two potential pitfalls. First, if ordering constraints are not correctly specified whenever a Puppet resource depends on another, the non-deterministic application of resources can lead to race conditions and consequent failures. Second, if a service is not tied to its resources (through the notification construct), the system may operate in a stale state whenever a resource gets modified. Such faults can degrade a computing infrastructure's availability and functionality.We have developed an approach that identifies these issues through the analysis of a Puppet program and its system call trace. Specifically, a formal model for traces allows us to capture the interactions of Puppet resources with the file system. By analyzing these interactions we identify (1) resources that are related to each other (e.g., operate on the same file), and (2) resources that should act as notifiers so that changes are correctly propagated. We then check the relationships from the trace's analysis against the program's dependency graph: a representation containing all the ordering constraints and notifications declared in the program. If a mismatch is detected, our system reports a potential fault.We have evaluated our method on a large set of popular Puppet modules, and discovered 92 previously unknown issues in 33 modules. Performance benchmarking shows that our approach can analyze in seconds real-world configurations with a magnitude measured in thousands of lines and millions of system calls.},
	numpages     = 12,
	keywords     = {notifiers, puppet, system calls, ordering relationships, program analysis}
}

@article{RAHMAN2019148,
	title        = {Source code properties of defective infrastructure as code scripts},
	author       = {Akond Rahman and Laurie Williams},
	year         = 2019,
	journal      = {Information and Software Technology},
	volume       = 112,
	pages        = {148--163},
	doi          = {https://doi.org/10.1016/j.infsof.2019.04.013},
	issn         = {0950-5849},
	url          = {https://www.sciencedirect.com/science/article/pii/S0950584919300965},
	keywords     = {Configuration as code, Continuous deployment, Defect prediction, Devops, Empirical study, Infrastructure as code, Puppet},
	abstract     = {Context In continuous deployment, software and services are rapidly deployed to end-users using an automated deployment pipeline. Defects in infrastructure as code (IaC) scripts can hinder the reliability of the automated deployment pipeline. We hypothesize that certain properties of IaC source code such as lines of code and hard-coded strings used as configuration values, show correlation with defective IaC scripts. Objective The objective of this paper is to help practitioners in increasing the quality of infrastructure as code (IaC) scripts through an empirical study that identifies source code properties of defective IaC scripts. Methodology We apply qualitative analysis on defect-related commits mined from open source software repositories to identify source code properties that correlate with defective IaC scripts. Next, we survey practitioners to assess the practitioner’s agreement level with the identified properties. We also construct defect prediction models using the identified properties for 2439 scripts collected from four datasets. Results We identify 10 source code properties that correlate with defective IaC scripts. Of the identified 10 properties we observe lines of code and hard-coded string i.e. putting strings as configuration values, to show the strongest correlation with defective IaC scripts. According to our survey analysis, majority of the practitioners show agreement for two properties: include, the property of executing external modules or scripts, and hard-coded string. Using the identified properties, our constructed defect prediction models show a precision of 0.70∼0.78, and a recall of 0.54∼0.67. Conclusion Based on our findings, we recommend practitioners to allocate sufficient inspection and testing efforts on IaC scripts that include any of the identified 10 source code properties of IaC scripts.}
}

@inproceedings{10.1007/978-3-642-45065-5_19,
	title        = {Testing Idempotence for Infrastructure as Code},
	author       = {Hummer, Waldemar and Rosenberg, Florian and Oliveira, F{\'a}bio and Eilam, Tamar},
	year         = 2013,
	booktitle    = {Middleware 2013},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	pages        = {368--388},
	isbn         = {978-3-642-45065-5},
	editor       = {Eyers, David and Schwan, Karsten},
	abstract     = {Due to the competitiveness of the computing industry, software developers are pressured to quickly deliver new code releases. At the same time, operators are expected to update and keep production systems stable at all times. To overcome the development--operations barrier, organizations have started to adopt Infrastructure as Code (IaC) tools to efficiently deploy middleware and applications using automation scripts. These automations comprise a series of steps that should be idempotent to guarantee repeatability and convergence. Rigorous testing is required to ensure that the system idempotently converges to a desired state, starting from arbitrary states. We propose and evaluate a model-based testing framework for IaC. An abstracted system model is utilized to derive state transition graphs, based on which we systematically generate test cases for the automation. The test cases are executed in light-weight virtual machine environments. Our prototype targets one popular IaC tool (Chef), but the approach is general. We apply our framework to a large base of public IaC scripts written by operators, showing that it correctly detects non-idempotent automations.}
}

@inproceedings{10.1145/3416504.3424334,
	title        = {Testing Practices for Infrastructure as Code},
	author       = {Hasan, Mohammed Mehedi and Bhuiyan, Farzana Ahamed and Rahman, Akond},
	year         = 2020,
	booktitle    = {Proceedings of the 1st ACM SIGSOFT International Workshop on Languages and Tools for Next-Generation Testing},
	location     = {Virtual, USA},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {LANGETI 2020},
	pages        = {7–12},
	doi          = {10.1145/3416504.3424334},
	isbn         = 9781450381239,
	url          = {https://doi.org/10.1145/3416504.3424334},
	abstract     = {Infrastructure as code (IaC) helps practitioners to rapidly deploy software services to end-users. Despite reported benefits, IaC scripts are susceptible to defects. Defects in IaC scripts can cause serious consequences, for example, creating large-scale outages similar to the Amazon Web Services (AWS) incident in 2017. The prevalence of defects in IaC scripts necessitates practitioners to implement IaC testing and be aware of IaC testing practices. A synthesis of IaC testing practices can enable practitioners in early mitigation of IaC defects and also help researchers to identify potential research avenues. The goal of this paper is to help practitioners improve the quality of infrastructure as code (IaC) scripts by identifying a set of testing practices for IaC scripts. We apply open coding on 50 Internet artifacts, such as blog posts to derive IaC testing practices. We identify six testing practices that include behavior-focused test coverage, the practice of measuring coverage of IaC test cases in terms of expected behavior. We conclude our paper by discussing how practitioners and researchers can leverage our derived list of testing practices for IaC.},
	numpages     = 6,
	keywords     = {testing, practices, empirical study, infrastructure as code, qualitative analysis, configuration as code, devops}
}

@article{KUMARA2021106593,
	title        = {The do’s and don’ts of infrastructure code: A systematic gray literature review},
	author       = {Indika Kumara and Martín Garriga and Angel Urbano Romeu and Dario {Di Nucci} and Fabio Palomba and Damian Andrew Tamburri and Willem-Jan {van den Heuvel}},
	year         = 2021,
	journal      = {Information and Software Technology},
	volume       = 137,
	pages        = 106593,
	doi          = {https://doi.org/10.1016/j.infsof.2021.106593},
	issn         = {0950-5849},
	url          = {https://www.sciencedirect.com/science/article/pii/S0950584921000720},
	keywords     = {Infrastructure-as-code, DevOps, Gray literature review},
	abstract     = {Context: Infrastructure-as-code (IaC) is the DevOps tactic of managing and provisioning software infrastructures through machine-readable definition files, rather than manual hardware configuration or interactive configuration tools. Objective: From a maintenance and evolution perspective, the topic has picked the interest of practitioners and academics alike, given the relative scarcity of supporting patterns and practices in the academic literature. At the same time, a considerable amount of gray literature exists on IaC. Thus we aim to characterize IaC and compile a catalog of best and bad practices for widely used IaC languages, all using gray literature materials. Method: In this paper, we systematically analyze the industrial gray literature on IaC, such as blog posts, tutorials, white papers using qualitative analysis techniques. Results: We proposed a definition for IaC and distilled a broad catalog summarized in a taxonomy consisting of 10 and 4 primary categories for best practices and bad practices, respectively, both language-agnostic and language-specific ones, for three IaC languages, namely Ansible, Puppet, and Chef. The practices reflect implementation issues, design issues, and the violation of/adherence to the essential principles of IaC. Conclusion: Our findings reveal critical insights concerning the top languages as well as the best practices adopted by practitioners to address (some of) those challenges. We evidence that the field of development and maintenance IaC is in its infancy and deserves further attention.}
}

@article{Rahman2020,
	title        = {The `as code' activities: development anti-patterns for infrastructure as code},
	author       = {Rahman, Akond and Farhana, Effat and Williams, Laurie},
	year         = 2020,
	month        = {Sep},
	day          = {01},
	journal      = {Empirical Software Engineering},
	volume       = 25,
	number       = 5,
	pages        = {3430--3467},
	doi          = {10.1007/s10664-020-09841-8},
	issn         = {1573-7616},
	url          = {https://doi.org/10.1007/s10664-020-09841-8},
	abstract     = {The `as code' suffix in infrastructure as code (IaC) refers to applying software engineering activities, such as version control, to maintain IaC scripts. Without the application of these activities, defects that can have serious consequences may be introduced in IaC scripts. A systematic investigation of the development anti-patterns for IaC scripts can guide practitioners in identifying activities to avoid defects in IaC scripts. Development anti-patterns are recurring development activities that relate with defective IaC scripts.}
}

@article{8360943,
	title        = {Use and Misuse of Continuous Integration Features: An Empirical Study of Projects That (Mis)Use Travis CI},
	author       = {Gallaba, Keheliya and McIntosh, Shane},
	year         = 2020,
	journal      = {IEEE Transactions on Software Engineering},
	volume       = 46,
	number       = 1,
	pages        = {33--50},
	doi          = {10.1109/TSE.2018.2838131}
}

@inproceedings{10.1145/3194760.3194769,
	title        = {What Questions Do Programmers Ask about Configuration as Code?},
	author       = {Rahman, Akond and Partho, Asif and Morrison, Patrick and Williams, Laurie},
	year         = 2018,
	booktitle    = {Proceedings of the 4th International Workshop on Rapid Continuous Software Engineering},
	location     = {Gothenburg, Sweden},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {RCoSE '18},
	pages        = {16–22},
	doi          = {10.1145/3194760.3194769},
	isbn         = 9781450357456,
	url          = {https://doi.org/10.1145/3194760.3194769},
	abstract     = {Configuration as code (CaC) tools, such as Ansible and Puppet, help software teams to implement continuous deployment and deploy software changes rapidly. CaC tools are growing in popularity, yet what challenges programmers encounter about CaC tools, have not been characterized. A systematic investigation on what questions are asked by programmers, can help us identify potential technical challenges about CaC, and can aid in successful use of CaC tools. The goal of this paper is to help current and potential configuration as code (CaC) adoptees in identifying the challenges related to CaC through an analysis of questions asked by programmers on a major question and answer website. We extract 2,758 Puppet-related questions asked by programmers from January 2010 to December 2016, posted on Stack Overflow. We apply qualitative analysis to identify the questions programmers ask about Puppet. We also investigate the trends in questions with unsatisfactory answers, and changes in question categories over time. From our empirical study, we synthesize 16 major categories of questions. The three most common question categories are: (i) syntax errors, (ii) provisioning instances; and (iii) assessing Puppet's feasibility to accomplish certain tasks. Three categories of questions that yield the most unsatisfactory answers are (i) installation, (ii) security, and (iii) data separation.},
	numpages     = 7,
	keywords     = {infrastructure as code, challenge, question, programming, puppet, configuration as code, stack overflow, continuous deployment, devops}
}

@software{OpenCVE,
	title        = {OpenCVE - A Vulnerability Database Tool},
	author       = {Crocfer, Nicolas and Durnez, Laurent},
	url          = {https://www.opencve.io/}
}

@misc{OWASP_TOP10_2021,
	title        = {OWASP Top 10 2021 Report},
	author       = {OWASP},
	url          = {https://owasp.org/Top10/}
}

@book{KiefMorris,
	title        = {Infrastructure as Code},
	author       = {Morris, Kief},
	year         = 2021,
	publisher    = {O'Reilly},
	isbn         = 9781098114671
}

@software{AnsibleSnippet,
	title        = {Ansible Snippet for MySQL deployment},
	author       = {{geerlingguy}},
	url          = {https://github.com/geerlingguy/ansible-role-mysql/blob/master/tasks/main.yml},
	urldate        = {2022-11-16}
}

@book{berczuk2003software,
  title={Software configuration management patterns: effective teamwork, practical integration},
  author={Berczuk, Stephen P and Berczuk, Steve and Appleton, Brad},
  year={2003},
  publisher={Addison-Wesley Professional}
}
@misc{Eplexity,
	title        = {A side-by-side comparison of immutable vs. mutable infrastructure},
	journal      = {Eplexity.com},
	url          = {https://eplexity.com/blog/a-side-by-side-comparison-of-immutable-vs-mutable-infrastructure/},
	language     = {en}
}
@misc{Air_Force,
	title        = {DevOps},
	author       = {USAF},
	url          = {https://software.af.mil/training/devops/},
	language     = {en}
}
@book{chandrasekara2020hands,
  title={Hands-on Azure Pipelines: Understanding Continuous Integration and Deployment in Azure DevOps},
  author={Chandrasekara, C. and Herath, P.},
  isbn={9781484259016},
  url={https://books.google.co.nz/books?id=kvZXzQEACAAJ},
  year={2020},
  publisher={Apress}
}
@techreport{klein2018infrastructure,
  title={Infrastructure as Code-Final Report},
  author={Klein, John and Reynolds, Douglas},
  year={2018},
  institution={CARNEGIE-MELLON UNIV PITTSBURGH PA}
}

@article{owidtechnologicalchange,
    author = {Max Roser and Hannah Ritchie and Edouard Mathieu},
    title = {Technological Change},
    journal = {Our World in Data},
    year = {2013},
    note = {https://ourworldindata.org/technological-change}
}

@inproceedings{inproceedingsSane,
author = {Sane, Parth},
year = {2021},
month = {03},
pages = {130-134},
title = {A Brief Survey of Current Software Engineering Practices in Continuous Integration and Automated Accessibility Testing},
doi = {10.1109/WiSPNET51692.2021.9419464}
}

@Inbook{Riti2021,
author="Riti, Pierluigi
and Flynn, David",
title="Infrastructure as Code",
bookTitle="Beginning HCL Programming: Using Hashicorp Language for Automation and Configuration",
year="2021",
publisher="Apress",
address="Berkeley, CA",
pages="65--78",
abstract="Infrastructure as Code (IaC) has become an integral part of various careers in ICT, particularly in relation to the cloud. Software like Kubernetes, Docker, Chef, and Puppet lead the charge in utilizing IaC in daily operations. The HashiCorp suite fits perfectly into this genre. Tools like Terraform, Vault, and Vagrant can be used to create fully automated environments for realizing automation. In this chapter, we will introduce the basic principles of Infrastructure as Code from a theoretical perspective. This is fundamental for better design and implementing the automation in real applications.",
isbn="978-1-4842-6634-2",
doi="10.1007/978-1-4842-6634-2_4",
url="https://doi.org/10.1007/978-1-4842-6634-2_4"
}

@ARTICLE{7819402,
  author={Johann, Sven},
  journal={IEEE Software}, 
  title={Kief Morris on Infrastructure as Code}, 
  year={2017},
  volume={34},
  number={1},
  pages={117-120},
  doi={10.1109/MS.2017.13}
}

@misc{spencer_2020, 
title={AWS goes direct with Bank of New Zealand for Contact Centre overhaul}, 
url={https://www.reseller.co.nz/article/684850/aws-goes-direct-bank-new-zealand-contact-centre-overhaul/},
journal={Reseller News},
author={Spencer, Leon},
year={2020},
month={Dec}
}

@misc{bnz, title={Historic timeline of BNZ}, url={https://www.bnzheritage.co.nz/timeline}, journal={Timeline - BNZ Heritage}, author={BNZ, Bank of New Zealand}}

@misc{william_lee, title={William Lee invents the stocking frame knitting machine, the first stage in the mechanization of textiles}, url={https://www.historyofinformation.com/detail.php?entryid=3634}, journal={William Lee Invents the Stocking Frame Knitting Machine, the First Stage in the Mechanization of Textiles : History of Information}}

@misc{world_economic_forum, title={A short history of jobs and automation}, url={https://www.weforum.org/agenda/2020/09/short-history-jobs-automation/}, journal={World Economic Forum}}

@inproceedings{10.5555/2820690.2820694,
author = {Dyck, Andrej and Penners, Ralf and Lichter, Horst},
title = {Towards Definitions for Release Engineering and DevOps},
year = {2015},
publisher = {IEEE Press},
abstract = {Delivering software fast, reliable, and predictable is essential for software development organizations. Yet, they often struggle to implement proper approaches and practices like release engineering and DevOps. One reason is the lack of consistent definitions for both of these terms, making it difficult to grasp the meaning and adding further confusion.To the best of our knowledge, there are no uniform definitions for both terms, and thus, many inadequate or even wrong interpretations exist. Consequently, these terms are often confused, misinterpreted, or used as synonyms. In this paper, we propose definitions for release engineering and DevOps to tell both apart.},
booktitle = {Proceedings of the Third International Workshop on Release Engineering},
pages = {3},
numpages = {1},
location = {Florence, Italy},
series = {RELENG '15}
}

@inproceedings{10.1145/3377814.3381711,
author = {Pang, Candy and Hindle, Abram and Barbosa, Denilson},
title = {Understanding Devops Education with Grounded Theory},
year = {2020},
isbn = {9781450371247},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377814.3381711},
doi = {10.1145/3377814.3381711},
abstract = {DevOps stands for Development-Operations. It arises from the IT industry as a movement aligning development and operations teams. DevOps is broadly recognized as an IT standard, and there is high demand for DevOps practitioners in industry. Since ACM & IEEE suggest that undergraduate computer science curricula "must adequately prepare [students] for the workforce", we studied whether undergraduates acquired adequate DevOps skills to fulfill the demand for DevOps practitioners in industry. We employed Grounded Theory (GT), a social science qualitative research methodology, to study DevOps education from academic and industrial perspectives. In academia, academics were not motivated to learn or adopt DevOps, and we did not find strong evidence of academics teaching DevOps. Academics need incentives to adopt DevOps, in order to stimulate interest in teaching DevOps. In industry, DevOps practitioners lack clearly defined roles and responsibilities, for the DevOps topic is diverse and growing too fast. Therefore, practitioners can only learn DevOps through hands-on working experience. As a result, academic institutions should provide fundamental DevOps education (in culture, procedure, and technology) to prepare students for their future DevOps advancement in industry. Based on our findings, we proposed five groups of future studies to advance DevOps education in academia.},
booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering Education and Training},
pages = {107–118},
numpages = {12},
keywords = {devops, software engineering, continuous integration, continuous delivery, education, grounded theory},
location = {Seoul, South Korea},
series = {ICSE-SEET '20}
}

@misc{netflix, title={Netflix: Stories move us.they make us feel more emotion, see New Perspectives, and bring us closer to each other.}, url={https://about.netflix.com/en}}

@inproceedings{10.1145/3419394.3423658,
author = {Feldmann, Anja and Gasser, Oliver and Lichtblau, Franziska and Pujol, Enric and Poese, Ingmar and Dietzel, Christoph and Wagner, Daniel and Wichtlhuber, Matthias and Tapiador, Juan and Vallina-Rodriguez, Narseo and Hohlfeld, Oliver and Smaragdakis, Georgios},
title = {The Lockdown Effect: Implications of the {COVID-19} Pandemic on {Internet} Traffic},
year = {2020},
isbn = {9781450381383},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3419394.3423658},
doi = {10.1145/3419394.3423658},
booktitle = {Proceedings of the ACM Internet Measurement Conference},
pages = {1–18},
numpages = {18},
keywords = {Internet Traffic, Traffic Shifts, COVID-19, Internet Measurement},
location = {Virtual Event, USA},
series = {IMC '20}
}

@book{laplante2007every,
author = {Laplante, Phillip A.},
title = {What Every Engineer Should Know about Software Engineering (What Every Engineer Should Know)},
year = {2007},
isbn = {0849372283},
publisher = {CRC Press, Inc.},
address = {USA}
}