[
  {
    "index": 0,
    "papers": [
      {
        "key": "si2020code2inv",
        "author": "Si, Xujie and Naik, Aaditya and Dai, Hanjun and Naik, Mayur and Song, Le",
        "title": "Code2inv: A deep learning framework for program verification"
      }
    ]
  },
  {
    "index": 1,
    "papers": [
      {
        "key": "liu2022learning",
        "author": "Liu, Junrui and Chen, Yanju and Tan, Bryan and Dillig, Isil and Feng, Yu",
        "title": "Learning contract invariants using reinforcement learning"
      }
    ]
  },
  {
    "index": 2,
    "papers": [
      {
        "key": "wang2022learning",
        "author": "Wang, Jingbo and Wang, Chao",
        "title": "Learning to synthesize relational invariants"
      }
    ]
  },
  {
    "index": 3,
    "papers": [
      {
        "key": "wen2024enchanting",
        "author": "Wen, Cheng and Cao, Jialun and Su, Jie and Xu, Zhiwu and Qin, Shengchao and He, Mengda and Li, Haokun and Cheung, Shing-Chi and Tian, Cong",
        "title": "Enchanting program specification synthesis by large language models using static analysis and program verification"
      }
    ]
  },
  {
    "index": 4,
    "papers": [
      {
        "key": "wen2024enchanting",
        "author": "Wen, Cheng and Cao, Jialun and Su, Jie and Xu, Zhiwu and Qin, Shengchao and He, Mengda and Li, Haokun and Cheung, Shing-Chi and Tian, Cong",
        "title": "Enchanting program specification synthesis by large language models using static analysis and program verification"
      }
    ]
  },
  {
    "index": 5,
    "papers": [
      {
        "key": "li2024guiding",
        "author": "Li, Yixuan and Parsert, Julian and Polgreen, Elizabeth",
        "title": "Guiding enumerative program synthesis with large language models"
      }
    ]
  },
  {
    "index": 6,
    "papers": [
      {
        "key": "kirchner2015frama",
        "author": "Kirchner, Florent and Kosmatov, Nikolai and Prevosto, Virgile and Signoles, Julien and Yakobowski, Boris",
        "title": "Frama-C: A software analysis perspective"
      }
    ]
  },
  {
    "index": 7,
    "papers": [
      {
        "key": "leino2010dafny",
        "author": "Leino, K Rustan M",
        "title": "Dafny: An automatic program verifier for functional correctness"
      }
    ]
  },
  {
    "index": 8,
    "papers": [
      {
        "key": "lattuada2023verus",
        "author": "Lattuada, Andrea and Hance, Travis and Cho, Chanhee and Brun, Matthias and Subasinghe, Isitha and Zhou, Yi and Howell, Jon and Parno, Bryan and Hawblitzel, Chris",
        "title": "Verus: Verifying rust programs using linear ghost types"
      }
    ]
  },
  {
    "index": 9,
    "papers": [
      {
        "key": "yang2024autoverus",
        "author": "Yang, Chenyuan and Li, Xuheng and Misu, Md Rakib Hossain and Yao, Jianan and Cui, Weidong and Gong, Yeyun and Hawblitzel, Chris and Lahiri, Shuvendu and Lorch, Jacob R and Lu, Shuai and others",
        "title": "Autoverus: Automated proof generation for rust code"
      }
    ]
  },
  {
    "index": 10,
    "papers": [
      {
        "key": "sun2024clover",
        "author": "Sun, Chuyue and Sheng, Ying and Padon, Oded and Barrett, Clark",
        "title": "Clover: Clo sed-Loop Ver ifiable Code Generation"
      }
    ]
  },
  {
    "index": 11,
    "papers": [
      {
        "key": "yang2023leandojo",
        "author": "Yang, Kaiyu and Swope, Aidan and Gu, Alex and Chalamala, Rahul and Song, Peiyang and Yu, Shixing and Godil, Saad and Prenger, Ryan J and Anandkumar, Animashree",
        "title": "Leandojo: Theorem proving with retrieval-augmented language models"
      }
    ]
  },
  {
    "index": 12,
    "papers": [
      {
        "key": "zhang2024selene",
        "author": "Zhang, Lichen and Lu, Shuai and Duan, Nan",
        "title": "Selene: Pioneering Automated Proof in Software Verification"
      }
    ]
  },
  {
    "index": 13,
    "papers": [
      {
        "key": "liao20243",
        "author": "Liao, Dianshu and Pan, Shidong and Sun, Xiaoyu and Ren, Xiaoxue and Huang, Qing and Xing, Zhenchang and Jin, Huan and Li, Qinying",
        "title": "A 3-CodGen: A Repository-Level Code Generation Framework for Code Reuse with Local-Aware, Global-Aware, and Third-Party-Library-Aware"
      }
    ]
  }
]