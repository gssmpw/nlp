\section{Background and Related Work}
\label{rel_work}
Social network analysis is a means to understand the relationships between the nodes in a network. In the context of software engineering, this can be an analysis of developer social networks. Developer social networks model relationships between developers based on data like bug reports, files, or projects developers have in common **Newman and Watts, "Structural Holes: The Social Structure of Competition"**.

% Some existing work relates the characteristics of social networks, like the presence of certain triad types, to team and individual performance.

% Betweenness centrality represents how frequently a node is found in the shortest path between another two nodes. O'Malley and Marsden **O'Malley and Marsden, "Networks and Organizations: Structure Form Process"** found that nodes with higher betweenness centrality acted as communication brokers in networks, and tended to control relationships between other nodes. Once this anti-pattern has been identified in a team, a corrective intervention could encourage task allocations that spread knowledge across more teammates.

Triads, which are groups of three nodes, can also be useful for describing the structure of teams' social networks **Wasserman and Faust, "Social Network Analysis: Methods and Applications"**.  The triad census of a network is a set containing the frequencies of each triad type. Triads are valuable as they represent different relationship structures. The presence of many triads with zero edges indicates that many team members are not communicating with each other, while many triads with two edges indicates that team members often communicate in pairs, and rarely communicate with members outside these pairs. This is considered particularly meaningful when analysing networks with few nodes **Krackhardt, "Graph Theoretic Measures of Cohesion"**, making it an appropriate characteristic for analysing teams of software developers. Finding the triad census of a network also contributes to calculating other network characteristics that can be used to better understand social relationships, like transitivity **Borgatti et al., "On Network Analysis: Methods in Brief"**, so this is a useful first step.

While these network characteristics give some insight into the structure of networks, more sophisticated analysis techniques have been developed to give insight into specific team behavioursmple, Socio-technical congruence (STC) , which are identified through file changes in the project's repository **Singer et al., "Social Network Analysis and Software Engineering"**. If two developers are assigned to tasks that require them to work on the same file, or files that are recognised as dependent on each other, then STC indicates that there is a need for the developers to coordinate with each other. The result of applying STC to a project is a matrix representing the degree to which each developer needs to coordinate with each of their teammates.

In professional software teams, STC scores were positively correlated with productivity on both a team and individual level. Further, more productive team members  improved their STC scores over time **MacKellar et al., "Software Engineering"**. Conversely, MacKellar's examination of students' STC scores in a team project showed that students' STC scores did not increase over time **MacKellar, "Socio-technical Congruence: A New Perspective on Software Development Teams"**. While the sample size for this study was small, the results suggest that STC score trends may be less reflective of students' productivity than industry developers. Sierra et al. suggest this is a result of students being inexperienced with version control systems **Sierra et al., "Software Engineering Education: A Review and Future Directions"**. However, the student with the highest student STC score worked on a central piece of the system and frequently mentored other students, indicating that we may identify team members who act as communication focal points through this type of analysis.

While STC is effective for identifying areas for improvement in teams' communication in professional software development teams, student teams sometimes behave differently. However, Sierra et al. identified a lack of existing work in this area **Sierra et al., "Software Engineering Education: A Review and Future Directions"** in 2018, and to our knowledge there has not been extensive work on this since then. So, it is necessary to evaluate the suitability of STC in the context of software engineering project courses. There is also little prior work on triad census as a measure of communication in software teams. In this paper, we contribute to our understanding of the suitability of STC and triad census for identifying communication areas of improvement in student teams, by evaluating them in the context of a software engineering project course.

% Differences in the work structure, team members' prior experiences, and tools they are expected to use all affect how well a metric, or combination of metrics, can accurately reflect teams' areas of improvement. For this reason, it is necessary to investigate the suitability of different analysis techniques in identifying areas for improvement in the context of Agile software engineering project courses.

% MacKeller proposes the implementation of a tool that can recommend teammates students should communicate with for a given task, and notify students when their work has been affected by a teammate's.