\section{Background and Related Work}
\label{smm:sec:background}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Conventional Matrix Multiplication}
A conventional matrix multiplication algorithm
computes $\bld{C} = \bld{A} \bld{B}$ for $\bld{A}$ of size $M$\by$K$ and $\bld{B}$ of size $K$\by$N$, where each element $c_{i,j}$ of $\bld{C}$ is calculated as follows:
\begin{align} \label{smm:eq:mmZero}
  c_{i,j} = \sum_{k=1}^{K} a_{i,k} b_{k,j} \,.
\end{align}
The complexity of this algorithm is $\mathcal{O}\lb n^3 \rb$, where $n$ is the number of elements in each dimension.

\subsection{Strassen's Algorithm}
A more efficient algorithm for matrix multiplication was proposed by Strassen in 1969. This algorithm uses a divide-and-conquer approach to reduce the number of multiplications required.

Let $A = A_{1} + iA_{2}$ and $B = B_{1} + iB_{2}$, where $A_{i}, B_{i}$ are real matrices for $i=1,2$. Then we can compute the product $C = AB$ as follows:
\begin{align*}
  C_{1} & = A_{1} B_{1} - A_{2} B_{2} \\
  C_{2} & = A_{1} B_{2} + A_{2} B_{1} \\
  C_{3} & = A_{1} B_{1} + A_{2} B_{2} \\
  C_{4} & = A_{2} B_{1} - A_{1} B_{2}
\end{align*}

We can then compute the final product $C$ as follows:
\begin{align*}
  C & = \frac{1}{2} (C_{1} + iC_{2}) \\
    & + \frac{i}{2} (C_{4} - iC_{3})
\end{align*}

The complexity of this algorithm is $\mathcal{O}\lb n^{2.8074} \rb$, which is less than the complexity of the conventional matrix multiplication algorithm for large values of $n$.

\subsection{Custom Strassen Hardware Architectures}
While software implementations of Strassen's algorithm on CPUs and GPUs have been well explored in prior work, custom hardware designs for efficiently exploiting the algorithm in hardware remain under-explored.

A systolic array design concept for implementing Strassen's algorithm for one level of recursion on 2\by2 matrices has been proposed in the work by Elfimova et al. \cite{Elfimova2017} without evaluation of an implementation.

Another hardware design for implementing Strassen's algorithm for one level of recursion on 2\by2 matrices has also been proposed in the work by León-Vega et al. \cite{León-Vega2020}, where the Strassen architecture reduced FPGA DSP usage by up to 12.5\% at the expense of 25-40\% increase in LUT resources to implement the additional adders.

Unlike the only two prior works on custom hardware designs for executing the Strassen algorithm, we propose architectures in this work that allow for Strassen's algorithm to be implemented on matrices larger than 2\by2. This is essential for minimizing the complexity penalty of the additional adders.

Additionally, the architectures are capable of implementing multiple levels of recursion to achieve greater hardware resource savings. Furthermore, the proposed architectures allow proven traditional systolic arrays to be still used at the core. Alternatively, they can allow Strassen's algorithm to be used in combination with other hardware designs that can efficiently perform further algebraic optimizations on matrices after the Strassen portion is carried out, such as techniques from our prior work \cite{PriorWork2020}.

Finally, the proposed Strassen architectures are multisystolic array designs, meaning they can multiply smaller matrices with higher utilization than single-systolic array designs with the same computational strength.

\subsection{Notation}
The following notation is used throughout the remainder this work for describing different systolic array architectures or their workloads:

\begin{itemize}
\item $r$: The number of recursion levels in Strassen's algorithm that are implemented in a hardware architecture.
\item \mm?\zero: A traditional single-systolic array implementing conventional matrix multiplication in hardware.
\item \mm?r: A traditional multisystolic array implementing conventional blocked matrix multiplication in hardware for $r$ levels of recursion.
\item \smm: The proposed Strassen multisystolic array implementing Strassen's algorithm in hardware for $r$ levels of recursion.
\item MXU: In this work, systolic arrays may also be referred to as matrix multiplication units (MXU)s for convenience.
\item (S)MM$_{(r)}$ $X$\by$Y$: An \mm?\zero, \mm?r, or \smm?r architecture may also be referred to with two numbers $X$\by$Y$ specified beside it. Here, $X$ and $Y$ represent the width and height, respectively, in number of MAC units of each \mm?\zero systolic array instantiated at the lowest level of recursion in the architecture.
\item $n$: The width/height of the matrices that are being fed as inputs to a systolic array to be multiplied.
\end{itemize}