@article{BAKER1996225,
title = {{Mutual exclusion scheduling}},
journal = {Theoretical Computer Science},
volume = {162},
number = {2},
pages = {225-243},
year = {1996},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(96)00031-X},
url = {https://www.sciencedirect.com/science/article/pii/030439759600031X},
author = {Brenda S Baker and Edward G Coffman},
abstract = {Mutual exclusion scheduling is the problem of scheduling unit-time tasks non-preemptively on m processors subject to constraints represented by a graph G, such that tasks represented by adjacent vertices in G must run in disjoint time intervals. This problem arises in load-balancing the parallel solution of partial differential equations by domain decomposition. Minimizing the completion time is NP-hard even if either the number of processors or the completion time is fixed but greater than two. However, polynomial time is sufficient to produce optimal schedules for forests, and simple heuristics perform well on certain classes of graphs. For graphs derived from the two-dimensional domain decomposition problem, heuristics yield solutions within 4c − 7 time units of optimal, where c is the maximal number of regions that touch each other at a single point in the domain decomposition; these solutions are within a constant factor of optimal.}
}

@inproceedings{blurring,
author = {Sharma, Ankur and Schuhknecht, Felix Martin and Agrawal, Divya and Dittrich, Jens},
title = {{Blurring the Lines between Blockchains and Database Systems: the Case of Hyperledger Fabric}},
year = {2019},
isbn = {9781450356435},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3299869.3319883},
doi = {10.1145/3299869.3319883},
abstract = {Within the last few years, a countless number of blockchain systems have emerged on the market, each one claiming to revolutionize the way of distributed transaction processing in one way or the other. Many blockchain features, such as byzantine fault tolerance, are indeed valuable additions in modern environments. However, despite all the hype around the technology, many of the challenges that blockchain systems have to face are fundamental transaction management problems. These are largely shared with traditional database systems, which have been around for decades already. These similarities become especially visible for systems, that blur the lines between blockchain systems and classical database systems. A great example of this is Hyperledger Fabric, an open-source permissioned blockchain system under development by IBM. By implementing parallel transaction processing, Fabric's workflow is highly motivated by optimistic concurrency control mechanisms in classical database systems. This raises two questions: (1)~Which conceptual similarities and differences do actually exist between a system such as Fabric and a classical distributed database system? (2)~Is it possible to improve on the performance of Fabric by transitioning technology from the database world to blockchains and thus blurring the lines between these two types of systems even further? To tackle these questions, we first explore Fabric from the perspective of database research, where we observe weaknesses in the transaction pipeline. We then solve these issues by transitioning well-understood database concepts to Fabric, namely transaction reordering as well as early transaction abort. Our experimental evaluation under the Smallbank benchmark as well as under a custom workload shows that our improved version Fabric++ significantly increases the throughput of successful transactions over the vanilla version by up to a factor of 12x, while decreasing the average latency to almost half.},
booktitle = {Proceedings of the 2019 International Conference on Management of Data},
pages = {105–122},
numpages = {18},
keywords = {blockchain, concurrenct control, distributed ledger, distributed systems, fabric, hyperledger, information systems, ledger, transactions},
location = {Amsterdam, Netherlands},
series = {SIGMOD '19}
}


@article{pbft,
author = {Castro, Miguel and Liskov, Barbara},
title = {{Practical byzantine fault tolerance and proactive recovery}},
year = {2002},
issue_date = {November 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {4},
issn = {0734-2071},
url = {https://doi.org/10.1145/571637.571640},
doi = {10.1145/571637.571640},
abstract = {Our growing reliance on online services accessible on the Internet demands highly available systems that provide correct service without interruptions. Software bugs, operator mistakes, and malicious attacks are a major cause of service interruptions and they can cause arbitrary behavior, that is, Byzantine faults. This article describes a new replication algorithm, BFT, that can be used to build highly available systems that tolerate Byzantine faults. BFT can be used in practice to implement real services: it performs well, it is safe in asynchronous environments such as the Internet, it incorporates mechanisms to defend against Byzantine-faulty clients, and it recovers replicas proactively. The recovery mechanism allows the algorithm to tolerate any number of faults over the lifetime of the system provided fewer than 1/3 of the replicas become faulty within a small window of vulnerability. BFT has been implemented as a generic program library with a simple interface. We used the library to implement the first Byzantine-fault-tolerant NFS file system, BFS. The BFT library and BFS perform well because the library incorporates several important optimizations, the most important of which is the use of symmetric cryptography to authenticate messages. The performance results show that BFS performs 2\% faster to 24\% slower than production implementations of the NFS protocol that are not replicated. This supports our claim that the BFT library can be used to build practical systems that tolerate Byzantine faults.},
journal = {ACM Trans. Comput. Syst.},
month = {nov},
pages = {398–461},
numpages = {64},
keywords = {Byzantine fault tolerance, asynchronous systems, proactive recovery, state machine replication, state transfer}
}

@misc{chiron,
      title={{CHIRON: Accelerating Node Synchronization without Security Trade-offs in Distributed Ledgers}}, 
      author={Ray Neiheiser and Arman Babaei and Giannis Alexopoulos and Marios Kogias and Eleftherios Kokoris Kogias},
      year={2024},
      eprint={2401.14278},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@misc{xue2023bigdipper,
      title={{BigDipper: A hyperscale BFT system with short term censorship resistance}}, 
      author={Bowen Xue and Soubhik Deb and Sreeram Kannan},
      year={2023},
      eprint={2307.10185},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@INPROCEEDINGS{8526804,
  author={Asayag, Avi and Cohen, Gad and Grayevsky, Ido and Leshkowitz, Maya and Rottenstreich, Ori and Tamari, Ronen and Yakira, David},
  booktitle={2018 IEEE 26th International Conference on Network Protocols (ICNP)}, 
  title={{A Fair Consensus Protocol for Transaction Ordering}}, 
  year={2018},
  volume={},
  number={},
  pages={55-65},
  keywords={Voting;Encryption;Safety},
  doi={10.1109/ICNP.2018.00016}}

@inbook{Caracal,
author = {Qin, Dai and Brown, Angela Demke and Goel, Ashvin},
title = {{Caracal: Contention Management with Deterministic Concurrency Control}},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483591},
abstract = {Deterministic databases offer several benefits: they ensure serializable execution while avoiding concurrency-control related aborts, and they scale well in distributed environments. Today, most deterministic database designs use partitioning to scale up and avoid contention. However, partitioning requires significant programmer effort, leads to poor performance under skewed workloads, and incurs unnecessary overheads in certain uncontended workloads.We present the design of Caracal, a novel shared-memory, deterministic database that performs well under both skew and contention. Our deterministic scheme batches transactions in epochs and executes the transactions in an epoch in a predetermined order. Our scheme enables reducing contention by batching concurrency control operations. It also allows analyzing the transactions in the epoch to determine contended keys accurately. Certain transactions can then be split into independent contended and uncontended pieces and run deterministically and in parallel, further reducing contention. Based on these ideas, we present two novel optimizations, batch append and split-on-demand, for managing contention. With these optimizations, Caracal scales well and outperforms existing deterministic schemes in most workloads by 1.9x to 9.7x.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {180–194},
numpages = {15}
}

@inproceedings{kauri,
author = {Neiheiser, Ray and Matos, Miguel and Rodrigues, Lu\'{\i}s},
title = {{Kauri: Scalable BFT Consensus with Pipelined Tree-Based Dissemination and Aggregation}},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483584},
doi = {10.1145/3477132.3483584},
abstract = {With the growing commercial interest in blockchains, permissioned implementations have received increasing attention. Unfortunately, the BFT consensus algorithms that are the backbone of most of these blockchains scale poorly and offer limited throughput. Many state-of-the-art algorithms require a single leader process to receive and validate votes from a quorum of processes and then broadcast the result, which is inherently non-scalable. Recent approaches avoid this bottleneck by using dissemination/aggregation trees to propagate values and collect and validate votes. However, the use of trees increases the round latency, which ultimately limits the throughput for deeper trees. In this paper we propose Kauri, a BFT communication abstraction that can sustain high throughput as the system size grows, leveraging a novel pipelining technique to perform scalable dissemination and aggregation on trees. Our evaluation shows that Kauri outperforms the throughput of state-of-the-art permissioned blockchain protocols, such as HotStuff, by up to 28x. Interestingly, in many scenarios, the parallelization provided by Kauri can also decrease the latency.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {35–48},
numpages = {14},
keywords = {Fault Tolerance, Distributed Systems, Blockchain},
location = {Virtual Event, Germany},
series = {SOSP '21}
}

@article{flp,
author = {Fischer, Michael J. and Lynch, Nancy A. and Paterson, Michael S.},
title = {{Impossibility of Distributed Consensus with One Faulty Process}},
year = {1985},
issue_date = {April 1985},
publisher = {ACM},
address = {New York, NY, USA},
volume = {32},
number = {2},
journal = {Journal ACM},
month = {4},
pages = {374–382},
numpages = {9}
}

@article{dls,
author = {Dwork, Cynthia and Lynch, Nancy and Stockmeyer, Larry},
title = {{Consensus in the Presence of Partial Synchrony}},
year = {1988},
issue_date = {April 1988},
publisher = {ACM},
address = {New York, NY, USA},
volume = {35},
number = {2},
journal = {Journal of the ACM},
month = {4},
pages = {288–323},
numpages = {36}
}

@inproceedings {eve,
author = {Manos Kapritsos and Yang Wang and Vivien Quema and Allen Clement and Lorenzo Alvisi and Mike Dahlin},
title = {{All about Eve: {Execute-Verify} Replication for {Multi-Core} Servers}},
booktitle = {10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12)},
year = {2012},
isbn = {978-1-931971-96-6},
address = {Hollywood, CA},
pages = {237--250},
url = {https://www.usenix.org/conference/osdi12/technical-sessions/presentation/kapritsos},
publisher = {USENIX Association},
month = oct,
}

@article{bitcoin,
  title={{Bitcoin: A Peer-to-Peer Electronic Cash System}},
  author={Nakamoto, Satoshi},
  year={2008},
  publisher={Working Paper}
}

@misc{mirbft,
  doi = {10.48550/ARXIV.1906.05552},
  
  url = {https://arxiv.org/abs/1906.05552},
  
  author = {Stathakopoulou, Chrysoula and David, Tudor and Pavlovic, Matej and Vukolić, Marko},
  
  keywords = {Distributed, Parallel, and Cluster Computing (cs.DC), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {{Mir-BFT: High-Throughput Robust BFT for Decentralized Networks}},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}


@misc{nftstandard,
  title={{EIP-721: Non-Fungible Token Standard}},
  author={William, Entriken and Dieter, Shirley and Jacob, Evans and Nastassia, Sachs},
  publisher = {Ethereum Improvement Proposals},
  year={2018},
  howpublished = {\url{https://eips.ethereum.org/EIPS/eip-721}},
  note = "Accessed on 18.04.2022"
}

@misc{erc20,
  title={{EIP-20: Token Standard}},
  author={Fabian, Vogelsteller and Vitalik, Buterin},
  publisher = {Ethereum Improvement Proposals},
  year={2018},
  howpublished = {\url{https://eips.ethereum.org/EIPS/eip-20}},
  note = "Accessed on 18.04.2022"
}

@misc{polygonupdate,
  title={{Innovating the Main Chain: a Polygon PoS Study in Parallelization}},
  author={Polygon Team},
  publisher = {Polygon},
  year={2022},
  howpublished = {\url{https://polygon.technology/blog/innovating-the-main-chain-a-polygon-pos-study-in-parallelization}},
  note = "Accessed on 05.12.2022"
}


@INPROCEEDINGS{hotwallets,
  author={Lin, Yu-Jing and Wu, Po-Wei and Hsu, Cheng-Han and Tu, I-Ping and Liao, Shih-wei},
  booktitle={2019 IEEE International Conference on Blockchain and Cryptocurrency (ICBC)}, 
  title={{An Evaluation of Bitcoin Address Classification based on Transaction History Summarization}}, 
  year={2019},
  volume={},
  number={},
  pages={302-310},
  doi={10.1109/BLOC.2019.8751410}}

@misc{blockstm,
  doi = {10.48550/ARXIV.2203.06871},
  
  url = {https://arxiv.org/abs/2203.06871},
  
  author = {Gelashvili, Rati and Spiegelman, Alexander and Xiang, Zhuolun and Danezis, George and Li, Zekun and Malkhi, Dahlia and Xia, Yu and Zhou, Runtian},
  
  keywords = {Distributed, Parallel, and Cluster Computing (cs.DC), Performance (cs.PF), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {{Block-STM: Scaling Blockchain Execution by Turning Ordering Curse to a Performance Blessing}},
  
  publisher = {arXiv},
  
  year = {2022},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@article{centralization,
author = {Sai, Ashish Rajendra and Buckley, Jim and Fitzgerald, Brian and Gear, Andrew Le},
title = {{Taxonomy of Centralization in Public Blockchain Systems: A Systematic Literature Review}},
year = {2021},
issue_date = {Jul 2021},
publisher = {Pergamon Press, Inc.},
address = {USA},
volume = {58},
number = {4},
issn = {0306-4573},
url = {https://doi.org/10.1016/j.ipm.2021.102584},
doi = {10.1016/j.ipm.2021.102584},
journal = {Inf. Process. Manage.},
month = {jul},
numpages = {35},
keywords = {Decentralized blockchain, Measurement, Classification, Centralization, Security, Taxonomy}
}


@INPROCEEDINGS{vrfconsensus,
  author={Wang, Hui and Tan, Wenan},
  booktitle={2020 IEEE International Conference on Progress in Informatics and Computing (PIC)}, 
  title={{Block Proposer Election Method Based on Verifiable Random Function in Consensus Mechanism}}, 
  year={2020},
  volume={},
  number={},
  pages={304-308},
  doi={10.1109/PIC50277.2020.9350766}}

@INPROCEEDINGS{vrf,
  author={Micali, S. and Rabin, M. and Vadhan, S.},
  booktitle={40th Annual Symposium on Foundations of Computer Science (Cat. No.99CB37039)}, 
  title={{Verifiable random functions}}, 
  year={1999},
  volume={},
  number={},
  pages={120-130},
  doi={10.1109/SFFCS.1999.814584}}

@misc{dirtyledger,
  doi = {10.48550/ARXIV.2203.15968},
  
  url = {https://arxiv.org/abs/2203.15968},
  
  author = {Tas, Ertem Nusret and Zindros, Dionysis and Yang, Lei and Tse, David},
  
  keywords = {Cryptography and Security (cs.CR), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {{Light Clients for Lazy Blockchains}},
  
  publisher = {arXiv},
  
  year = {2022},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@article{np-complete,
author = {Ullman, J. D.},
title = {{NP-Complete Scheduling Problems}},
year = {1975},
issue_date = {June, 1975},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {10},
number = {3},
issn = {0022-0000},
url = {https://doi.org/10.1016/S0022-0000(75)80008-0},
doi = {10.1016/S0022-0000(75)80008-0},
abstract = {We show that the problem of finding an optimal schedule for a set of jobs is NP-complete even in the following two restricted cases.o(1)All jobs require one time unit. (2)All jobs require one or two time units, and there are only two processor resolving (in the negative a conjecture of R. L. Graham, Proc. SJCC, 1972, pp. 205-218). As a consequence, the general preemptive scheduling problem is also NP-complete. These results are tantamount to showing that the scheduling problems mentioned are intractable.},
journal = {J. Comput. Syst. Sci.},
month = {jun},
pages = {384–393},
numpages = {10}
}

@inproceedings{diablo,
author = {Gramoli, Vincent and Guerraoui, Rachid and Lebedev, Andrei and Natoli, Chris and Voron, Gauthier},
title = {{Diablo: A Benchmark Suite for Blockchains}},
year = {2023},
isbn = {9781450394871},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3552326.3567482},
doi = {10.1145/3552326.3567482},
booktitle = {Proceedings of the Eighteenth European Conference on Computer Systems},
pages = {540–556},
numpages = {17},
keywords = {decentralization, latency, byzantine, throughput, security, performance, scalability},
location = {Rome, Italy},
series = {EuroSys '23}
}

@misc{ethspeculative,
  doi = {10.48550/ARXIV.1901.01376},
  
  url = {https://arxiv.org/abs/1901.01376},
  
  author = {Saraph, Vikram and Herlihy, Maurice},
  
  keywords = {Distributed, Parallel, and Cluster Computing (cs.DC), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {{An Empirical Study of Speculative Concurrency in Ethereum Smart Contracts}},
  
  publisher = {arXiv},
  
  year = {2019},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@inproceedings{newbenchmark,
author = {Ren, Kunpeng and Van Buskirk, Jefferson F.B. and Ang, Zheng Yong and Hou, Shizheng and Cable, Nathaniel R. and Monares, Miguel and Korth, Hank F. and Loghin, Dumitrel},
title = {{BBSF: Blockchain Benchmarking Standardized Framework}},
year = {2023},
isbn = {9798400707759},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3595647.3595649},
doi = {10.1145/3595647.3595649},
abstract = {In this paper, we propose the Blockchain Benchmark Standardized Format (BBSF), a framework for standardized, transparent, and fair benchmarks for blockchains. BBSF enables users and developers to compare blockchain platforms using metrics derived from realistic workloads. We outline the challenges in developing a blockchain benchmark with this degree of breadth and flexibility. We contrast the results using our approach with prior benchmark implementations and show why BBSF generates results that are more verifiable than prior published benchmarking data. We present an implementation of our framework, called Blockbench v3, which is a benchmarking system focusing on Web3 applications and workloads, primarily to be used by layer-1 blockchains. Blockbench v3 serves as a test case for our framework’s effectiveness as part of ongoing work in the characterization of blockchain performance.},
booktitle = {Proceedings of the 1st Workshop on Verifiable Database Systems},
pages = {10–18},
numpages = {9},
keywords = {blockchain, performance, standardization, benchmarking, verifiable},
location = {Seattle, WA, USA},
series = {VDBS '23}
}


@inproceedings{ethforward,
author = {Dickerson, Thomas and Gazzillo, Paul and Herlihy, Maurice and Koskinen, Eric},
title = {{Adding Concurrency to Smart Contracts}},
year = {2017},
isbn = {9781450349925},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3087801.3087835},
doi = {10.1145/3087801.3087835},
abstract = {Modern cryptocurrency systems, such as Ethereum, permit complex financial transactions through scripts called smart contracts. These smart contracts are executed many, many times, always without real concurrency. First, all smart contracts are serially executed by miners before appending them to the blockchain. Later, those contracts are serially re-executed by validators to verify that the smart contracts were executed correctly by miners. Serial execution limits system throughput and fails to exploit today's concurrent multicore and cluster architectures. Nevertheless, serial execution appears to be required: contracts share state, and contract programming languages have a serial semantics.This paper presents a novel way to permit miners and validators to execute smart contracts in parallel, based on techniques adapted from software transactional memory. Miners execute smart contracts speculatively in parallel, allowing non-conflicting contracts to proceed concurrently, and "discovering" a serializable concurrent schedule for a block's transactions, This schedule is captured and encoded as a deterministic fork-join program used by validators to re-execute the miner's parallel schedule deterministically but concurrently.Smart contract benchmarks run on a JVM with ScalaSTM show that a speedup of 1.33x can be obtained for miners and 1.69x for validators with just three concurrent threads.},
booktitle = {Proceedings of the ACM Symposium on Principles of Distributed Computing},
pages = {303–312},
numpages = {10},
keywords = {ethereum, miners, concurrency, fork-join, validators, blockchain, smart contracts},
location = {Washington, DC, USA},
series = {PODC '17}
}


@misc{ethereum,
  author = {Buterin, Vitalik},
  title = {{{Ethereum} Whitepaper}}},
  howpublished = {\url{https://ethereum.org/en/whitepaper/}},
  year = 2013,
  note = "Accessed on 12.04.2023"
}

@misc{heimbach2023defi,
      title={{DeFi and NFTs Hinder Blockchain Scalability}}, 
      author={Lioba Heimbach and Quentin Kniep and Yann Vonlanthen and Roger Wattenhofer},
      year={2023},
      eprint={2302.06708},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@misc{aptos,
  author = {Aptos Foundation},
  title = {{{Aptos} Whitepaper}},
  howpublished = {\url{https://aptos.dev/assets/files/Aptos-Whitepaper-47099b4b907b432f81fc0effd34f3b6a.pdf
}},
  year = 2023,
  note = "Accessed on 12.04.2023"
}

@misc{sui,
  author = {The MystenLabs Team},
  title = {{The Sui Smart Contracts Platform}},
  howpublished = {\url{https://docs.sui.io/paper/sui.pdf
}},
  year = 2023,
  note = "Accessed on 15.01.2024"
}

@misc{suiupdate,
  author = {Sui Foundation},
  title = {{Streamlining Transactions with Sui’s Shared Object Congestion Control}},
  howpublished = {\url{https://blog.sui.io/shared-object-congestion-control
}},
  year = 2024,
  note = "Accessed on 09.10.2024"
}




@misc{bitcoinfullnodes,
  author = {Bitcoin Org},
  title = {{Full Nodes}},
  howpublished = {\url{https://bitcoin.org/en/full-node}},
  year = 2023,
  note = "Accessed on 27.12.2023"
}

@misc{ethreq,
  author = {The go-ethereum Authors},
  title = {{Hardware requirements}},
  howpublished = {\url{https://geth.ethereum.org/docs/getting-started/hardware-requirements}},
  year = 2024,
  note = "Accessed on 08.01.2024"
}

@misc{aptosreq,
  author = {Aptos Foundation},
  title = {{Node Requirements}},
  howpublished = {\url{https://aptos.dev/nodes/validator-node/operator/node-requirements}},
  year = 2024,
  note = "Accessed on 08.01.2024"
}

@misc{solreq,
  author = {Solana Foundation},
  title = {{Validator Requirements}},
  howpublished = {\url{https://docs.solana.com/running-validator/validator-reqs}},
  year = 2024,
  note = "Accessed on 08.01.2024"
}

@misc{nodewatch,
  author = {{ChainSafe Systems Inc.}},
  title = {{General Information}},
  howpublished = {\url{https://nodewatch.io}},
  year = 2024,
  note = "Accessed on 08.01.2024"
}

@misc{uniswap,
  author = {Uniswap Labs},
  title = {{Uniswap Protocol}},
  howpublished = {\url{https://uniswap.org}},
  year = 2024,
  note = "Accessed on 08.01.2024"
}




@inproceedings{steemattack,
author = {Ba, Cheick Tidiane and Michienzi, Andrea and Guidi, Barbara and Zignani, Matteo and Ricci, Laura and Gaito, Sabrina},
title = {{Fork-Based User Migration in Blockchain Online Social Media}},
year = {2022},
isbn = {9781450391917},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3501247.3531597},
doi = {10.1145/3501247.3531597},
booktitle = {Proceedings of the 14th ACM Web Science Conference 2022},
pages = {174–184},
numpages = {11},
keywords = {User Migration, Blockchain Online Social Media, Temporal Networks},
location = {Barcelona, Spain},
series = {WebSci '22}
}


@INPROCEEDINGS{8345547,
  author={Vujičić, Dejan and Jagodić, Dijana and Randić, Siniša},
  booktitle={2018 17th International Symposium INFOTEH-JAHORINA (INFOTEH)}, 
  title={{Blockchain technology, bitcoin, and Ethereum: A brief overview}}, 
  year={2018},
  volume={},
  number={},
  pages={1-6},
  doi={10.1109/INFOTEH.2018.8345547}}


@article{aria,
author = {Lu, Yi and Yu, Xiangyao and Cao, Lei and Madden, Samuel},
title = {{Aria: A Fast and Practical Deterministic OLTP Database}},
year = {2020},
issue_date = {August 2020},
publisher = {VLDB Endowment},
volume = {13},
number = {12},
issn = {2150-8097},
url = {https://doi.org/10.14778/3407790.3407808},
doi = {10.14778/3407790.3407808},
abstract = {Deterministic databases are able to efficiently run transactions across different replicas without coordination. However, existing state-of-the-art deterministic databases require that transaction read/write sets are known before execution, making such systems impractical in many OLTP applications. In this paper, we present Aria, a new distributed and deterministic OLTP database that does not have this limitation. The key idea behind Aria is that it first executes a batch of transactions against the same database snapshot in an execution phase, and then deterministically (without communication between replicas) chooses those that should commit to ensure serializability in a commit phase. We also propose a novel deterministic reordering mechanism that allows Aria to order transactions in a way that reduces the number of conflicts. Our experiments on a cluster of eight nodes show that Aria outperforms systems with conventional nondeterministic concurrency control algorithms and the state-of-the-art deterministic databases by up to a factor of two on two popular benchmarks (YCSB and TPC-C).},
journal = {Proc. VLDB Endow.},
month = {jul},
pages = {2047–2060},
numpages = {14}
}


@misc{etheng,
  doi = {10.48550/ARXIV.1702.05511},
  
  url = {https://arxiv.org/abs/1702.05511},
  
  author = {Sergey, Ilya and Hobor, Aquinas},
  
  keywords = {Distributed, Parallel, and Cluster Computing (cs.DC), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {{A Concurrent Perspective on Smart Contracts}},
  
  publisher = {arXiv},
  
  year = {2017},
  
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@article{fsc,
  title={{FSC: A Fast Smart Contract Transaction Execution Approach via Read-Write Static Analysis}},
  author={Lu, Ye and Liu, Caihua and Zhao, Meng and Duo, Xiaodong and Xu, Pengfei and Zhou, Zhiyuan and Feng, Xia},
    publisher = {Authorea},
  year = {2023},
    url = {https://www.authorea.com/doi/full/10.22541/au.167285898.83759504},
  doi = {10.22541/au.167285898.83759504/v1}

}

@article{solana,
  title={{Solana: A new architecture for a high performance blockchain v0. 8.13}},
  author={Yakovenko, Anatoly},
  journal={Whitepaper},
  year={2018}
}

@misc{fuelvm,
  title={{GitHub - FuelLabs/fuel-specs: Specifications for the Fuel protocol}},
  author={{Fuel Labs}},
  url={https://github.com/FuelLabs/fuel-specs}
}

@misc{etheip,
 title={Easy parallelizability, Ethereum EIP},
  url={https://github.com/ethereum/EIPs/issues/648}
}

@Article{increment,
author={Huang, Yihe
and Qian, William
and Kohler, Eddie
and Liskov, Barbara
and Shrira, Liuba},
title={{Opportunities for optimism in contended main-memory multicore transactions}},
journal={The VLDB Journal},
year={2022},
month={Nov},
day={01},
volume={31},
number={6},
pages={1239-1261},
abstract={Main-memory multicore transactional systems have achieved excellent performance using single-version optimistic concurrency control (OCC), especially on uncontended workloads. Nevertheless, systems based on other concurrency control protocols, such as hybrid OCC/ locking and variations on multiversion concurrency control (MVCC), are reported to outperform the best OCC systems, especially with increasing contention. This paper shows that implementation choices unrelated to concurrency control can explain some of these performance differences. Our evaluation shows the strengths and weaknesses of OCC, MVCC, and TicToc concurrency control under varying workloads and contention levels, and the importance of several implementation choices called basis factors. Given sensible basis factor choices, OCC performance does not collapse on high-contention TPC-C. We also present two optimization techniques, deferred updates and timestamp splitting, that can dramatically improve the high-contention performance of both OCC and MVCC. These techniques are known, but we apply them in a new context and highlight their potency: when combined, they lead to performance gains of {\$}{\$}4.74{\backslash}times {\$}{\$}for MVCC and {\$}{\$}5.01{\backslash}times {\$}{\$}for OCC in a TPC-C workload.},
issn={0949-877X},
doi={10.1007/s00778-021-00719-9},
url={https://doi.org/10.1007/s00778-021-00719-9}
}

@INPROCEEDINGS{omniledger,
  author={Kokoris-Kogias, Eleftherios and Jovanovic, Philipp and Gasser, Linus and Gailly, Nicolas and Syta, Ewa and Ford, Bryan},
  booktitle={2018 IEEE Symposium on Security and Privacy (SP)}, 
  title={{OmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding}}, 
  year={2018},
  volume={},
  number={},
  pages={583-598},
  doi={10.1109/SP.2018.000-5}}

@ARTICLE{layer-2,
  author={Neiheiser, Ray and Inácio, Gustavo and Rech, Luciana and Montez, Carlos and Matos, Miguel and Rodrigues, Luís},
  journal={IEEE Access}, 
  title={{Practical Limitations of Ethereum’s Layer-2}}, 
  year={2023},
  volume={11},
  number={},
  pages={8651-8662},
  doi={10.1109/ACCESS.2023.3237897}}

@inproceedings{narwahl,
author = {Danezis, George and Kokoris-Kogias, Lefteris and Sonnino, Alberto and Spiegelman, Alexander},
title = {{Narwhal and Tusk: A DAG-Based Mempool and Efficient BFT Consensus}},
year = {2022},
isbn = {9781450391627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3492321.3519594},
doi = {10.1145/3492321.3519594},
booktitle = {Proceedings of the Seventeenth European Conference on Computer Systems},
pages = {34–50},
numpages = {17},
keywords = {consensus protocol, Byzantine fault tolerant},
location = {Rennes, France},
series = {EuroSys '22}
}

@inproceedings{bullshark,
author = {Spiegelman, Alexander and Giridharan, Neil and Sonnino, Alberto and Kokoris-Kogias, Lefteris},
title = {{Bullshark: DAG BFT Protocols Made Practical}},
year = {2022},
isbn = {9781450394505},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3548606.3559361},
doi = {10.1145/3548606.3559361},
booktitle = {Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security},
pages = {2705–2718},
numpages = {14},
keywords = {byzantine fault tolerant, consensus protocol},
location = {Los Angeles, CA, USA},
series = {CCS '22}
}

@inproceedings{dumbo,
author = {Guo, Bingyong and Lu, Zhenliang and Tang, Qiang and Xu, Jing and Zhang, Zhenfeng},
title = {{Dumbo: Faster Asynchronous BFT Protocols}},
year = {2020},
isbn = {9781450370899},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372297.3417262},
doi = {10.1145/3372297.3417262},
booktitle = {Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security},
pages = {803–818},
numpages = {16},
keywords = {atomic broadcast, asynchronous network, byzantine fault tolerance},
location = {Virtual Event, USA},
series = {CCS '20}
}

@misc{mysticeti,
      title={{Mysticeti: Low-Latency DAG Consensus with Fast Commit Path}}, 
      author={Kushal Babel and Andrey Chursin and George Danezis and Lefteris Kokoris-Kogias and Alberto Sonnino},
      year={2023},
      eprint={2310.14821},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@misc{carousel,
      title={{Can 100 Machines Agree?}}, 
      author={Rachid Guerraoui and Jad Hamza and Dragos-Adrian Seredinschi and Marko Vukolic},
      year={2019},
      eprint={1911.07966},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@misc{hammerhead,
      title={{HammerHead: Leader Reputation for Dynamic Scheduling}}, 
      author={Giorgos Tsimos and Anastasios Kichidis and Alberto Sonnino and Lefteris Kokoris-Kogias},
      year={2023},
      eprint={2309.12713},
      archivePrefix={arXiv},
      primaryClass={cs.CR}
}

@misc{shoal,
      title={{Shoal: Improving DAG-BFT Latency And Robustness}}, 
      author={Alexander Spiegelman and Balaji Arun and Rati Gelashvili and Zekun Li},
      year={2023},
      eprint={2306.03058},
      archivePrefix={arXiv},
      primaryClass={cs.DC}
}

@inproceedings{ethparallelimpro,
	doi = {10.1145/3510003.3510086},
  
	url = {https://doi.org/10.1145\%2F3510003.3510086},
  
	year = 2022,
	month = {may},
  
	publisher = {ACM},
  
	author = {P{\'{e}}ter Garamvölgyi and Yuxi Liu and Dong Zhou and Fan Long and Ming Wu},
  
	title = {{Utilizing parallelism in smart contracts on decentralized blockchains by taming application-inherent conflicts}},
  
	booktitle = {Proceedings of the 44th International Conference on Software Engineering}
}

@inproceedings{fairordering,
author = {Kelkar, Mahimna and Deb, Soubhik and Kannan, Sreeram},
title = {{Order-Fair Consensus in the Permissionless Setting}},
year = {2022},
isbn = {9781450391740},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3494105.3526239},
doi = {10.1145/3494105.3526239},
abstract = {Transaction-order-manipulation attacks have become commonplace in public blockchains such as Ethereum, costing hundreds of millions of dollars. In these blockchains, a miner can unilaterally determine the order of transactions inside a block, and this ordering is not checked by other users, leaving room for the miner to manipulate the order for its own benefit. This gap is also evident from existing security results for permissionless blockchains. As prime examples, the breakthrough work of Garay et al. (Eurocrypt 2015) and Pass et al. (Eurocrypt 2017) showed the security properties of consistency and liveness for Nakamoto's seminal proof-of-work protocol. However, consistency and liveness do not provide any guarantees on the relationship between the order in which transactions arrive into the network and the finalized order in the ledger.As a solution, a recent paper by Kelkar et al. (Crypto 2020) introduced a third useful property for consensus protocols: (transaction)-order-fairness, which proposes a strong relationship between the transaction arrival order and their order in the ledger. Their model was limited to the classical (permissioned) setting however, where the set of protocol nodes is fixed a priori, and does not fit well for permissionless environments where order-manipulation attacks have been most prominent. In this work, we initiate the investigation of order-fairness in the permissionless setting and design two protocols that realize this new property addition to standard requirements of consistency and liveness. The key insight behind our protocols in providing order-fairness is that a miner can no longer unilaterally determine ordering and proposals from many miners are combined in a fair way to construct the finalized ordering.},
booktitle = {Proceedings of the 9th ACM on ASIA Public-Key Cryptography Workshop},
pages = {3–14},
numpages = {12},
keywords = {order-fair consensus, decentralized finance, blockchain},
location = {Nagasaki, Japan},
series = {APKC '22}
}

@inproceedings{zhang2020byzantine,
  title={{Byzantine ordered consensus without byzantine oligarchy}},
  author={Zhang, Yunhao and Setty, Srinath and Chen, Qi and Zhou, Lidong and Alvisi, Lorenzo},
  booktitle={14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
  pages={633--649},
  year={2020}
}