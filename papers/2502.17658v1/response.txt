\textsc{Thor} relies only on precise \textit{timing} measurements. Therefore, it cannot be mitigated by defenses that alter the classification output of NNs, such as adding noise or rounding confidence scores ____. 
Trusted Execution Environment (TEE)-based defenses, such as those performing non-linear computations inside the TEE while offloading linear computations to untrusted sources ____, are also inadequate since we confirmed that the value dependencies of Intel AMX timing that \textsc{Thor} relies on are unaffected by TEE environments like Intel SGX. 
AI workloads demand high speed and efficiency, prompting AI libraries to prioritize performance optimizations. As a result, known constant-time programming techniques are often unsuitable as a defense. For example, masking can help protect weights from leaking but introduces extra computational overhead, increasing both power consumption and execution time.

A more effective strategy involves introducing response randomness by delaying execution, which disrupts the timing signals relied upon by \textsc{Thor}. However, this approach adds latency to AI applications. Limiting the query rate of the model 
could also slow these attacks, but at the cost of reducing system responsiveness.
Extending detection mechanisms, 
to identify malicious patterns in power and performance characteristics offers a promising defense against \textsc{Thor}.
Lastly, employing homomorphic encryption 
could provide robust protection but comes with substantial computational overhead and performance costs, making it less practical for high-speed AI applications.


%\subsection{Power \& Performance Overhead}
% In an experiment, we measured the time to execute a single AMX multiplication instruction while varying the intervals between consecutive executions. By adjusting the length of these intervals, we identified five distinct execution times, classifying them into performance states. The shortest execution time with the lowest intervals was labeled as the "Warm State," while the longer execution times with higher intervals were classified as "Cold States." 
One mitigation which can be applied through a micro-code update or a software patch is to keep the AMX unit moderately in the Warm State at all times or at least during Intel SGX execution to protect TEEs computation against \textsc{Thor}.
%
This approach is effective because we observed that timing differences dependent on zero values are only significantly measurable when the Intel AMX is in a Cold State. Warm and Cold States introduced here come from an interesting observation in which 
%In an experiment, 
we measured the time to execute a single AMX multiplication instruction while varying the intervals between consecutive executions. By adjusting the length of these intervals, we identified five distinct execution times, classifying them into performance states. The shortest execution time with the lowest intervals was labeled as the Warm State, while the longer execution times with higher intervals were classified as Cold States.  These performance states are shown in Figure~\ref{fig:Performance_Stages}.
However, this mitigation comes with trade-offs in power management and execution speed, as system power limits could be more easily reached, leading to unnecessary throttling of the AMX unit. We measured the power overhead of such defense for \textsc{Thor} and found that depending on the cold vs. warm stage,  the overhead ranges from 2.59\% to 12.33\%. Although this secure design requires more power consumption, it is faster as it keeps the Intel AMX in the highest performance state at all time; this is in contrary to other secure designs for different microarchitectural attacks which almost always incurred a high performance overhead. 
%\textcolor{red}{Todo  quantitatively calculate the AMX latency in warm state over cold state and add numbers here saying how much faster approx.  }

%Although the secure design requires more power consumption, it could be faster in scenarios such as workloads with infrequent multiplications.
\begin{figure}
    \centering
    \begin{tikzpicture}
        \begin{axis}[
            xmin=100, xmax=1000000000,
            ymin=10, ymax=100000,
            xlabel={Interval Delay (Cycle)},
            ylabel={Multiplication Execution\\Time (Cycle)},
            xmode=log, 
            ymode=log,
            log basis x=10, 
            log basis y=10,
            grid=both,
            major grid style={line width=0pt,draw=white!50},
            minor grid style={line width=0pt,draw=white!20},
            font=\scriptsize,
            ylabel style={yshift=0pt, align=center}, 
            width=\linewidth*1,
            height=\linewidth*0.45,
        ]
            \addplot[darkgray, thick] table {Diagrams/Data/warmup.txt};
        \end{axis}
        
        \draw[->, black, thick] (2.1,0.45) -- (1.1,0.45) node[midway, above] {\scriptsize Warm State};
         \node[gray, thick] at (1.05,1.3) {\scriptsize Cold State 1};
         \node[gray, thick] at (2.8,1.7) {\scriptsize Cold State 2};
         \node[gray, thick] at (4.9,1.85) {\scriptsize Cold State 3};
         \node[gray, thick] at (6.4,2.15) {\scriptsize Cold State 4};
         
    \end{tikzpicture}
    \caption{  Performance States of
TMUL and the Secure Recommended Intel AMX Operational State (Warm).}
    \label{fig:Performance_Stages}
\end{figure}

Thus, future research must prioritize the development of effective mechanisms to mitigate the proposed threat vector introduced by AMX and similar technologies while addressing the secure design's performance and power consumption.